R0	=	%0
R1	=	%1
R2	=	%2
R3	=	%3
R4	=	%4
R5	=	%5
SP	=	%6
PC	=	%7
TKS=177560
TPS=177564
TKB=177562
TPB=177560
TIS=177550
TIB=177552
TOS=177554
TOB=177556
	.=14600
LDDUMP:	MOV #.,SP
	CLR R5
ECHOMD:	TSTB TKS
	BPL TENTST
	TSTB TOS
	BPL .-4
	BICB #200,TKB
	MOVB TKB,TOB
TENTST:	TSTB TIS
	BPL ECHOMD
TENID:	BICB #200,TIB
	CMPB TIB,#141	;141 FROM THE PDP10 MEANS ENTER DUMP MODE
	BEQ DUMPMD
	CMPB TIB,#142	;142 FROM THE PDP10 MEANS ENTER LOAD MODE.
	BEQ LOADMD
	TSTB TPS	;WHEN THE TELETYPE OUTPUT IS NOT BUSY,DUMP THE CHAR-
	BPL .-4		;ACTER JUST RECEIVED.
	MOV TIB,TPB
	BR ECHOMD	;GO BACK & WAIT SOME MORE
BLKOK:	TSTB TOS
	BPL .-4
	MOVB #140,TOB
LOADMD:	TSTB TIS
	BPL .-4
	BICB 200,TIB
	CMPB TIB,#1	;1 MEANS START OF A NEW BLOCK.
	BEQ NEWBLK
	HALT
NEWBLK:	JSR PC,INWDLD	;GET -BLOCK LENGTH FROM PDP10.
	MOV R0,R3	;KEEP IT IN R3.
	MOV R0,R2	;R2 IS THE CHECKSUM
	JSR PC,INWDLD	;GET STARTING ADDRESS OF THE BLOCK.
ZRWD:	CMP R0,R5	;IF PDP10 DOESN'T SEND CONSECUTIVE
	BLE NOSKIP	;WORDS TO THE 11,THERE
	CLR (R5)+	;IS A BLOCK OF ZEROS. CLEAR THEM.
	BR ZRWD
NOSKIP:	ADD R0,R2	;ADD IT TO CHECKSUM.
	MOV R0,R4	;&KEEP IT IN R4
	MOV R0,R5
NXTWD:	JSR PC,INWDLD	;GET NEXT DATA WORD FROM PDP10.
	ADD R0,R2	;ADD TO CHECKSUM.
	MOV R0,(R5)+	;LOAD IT INTO THE RIGHT PLACE IN CORE.
	INC R3		;INCREMENT THE COUNT.
	BNE NXTWD
	JSR PC,INWDLD	;GET CHECKSUM
	CMP R2,R0	;COMPARE THE TWO CHECKSUMS.
	BEQ BLKOK	;GO BACK & TELL PDP10 BLOCK RECIEVED OK.
CKSMBD:	TSTB TOS	;PAR. ERR. OR BAD CHECKSUM. TELL THE PDP10.
	BPL .-4
	MOV #141,TOB
	MOV R4,R0
SDWDLD:	JSR PC,SDWD10	;GIVE PDP10 STARTING ADDRESS OF BAD 
QUER10:	TSTB TIS	;BLOCK.
	BPL .-4
	BICB #200,TIB
	CMPB #140,TIB	;140 MEANS ACK.
	BEQ LOADMD
	CMPB #141,TIB
	BEQ SDWDLD	;141 IS A NAK, SEND STARTING ADD. AGAIN.
	BR QUER10
TWENTY:	20
TA:	20
SAD:	0
DUMPMD:	JSR PC,INWDDP	;WE'RE IN DUMP MODE NOW. PULL IN ONE FULL
	MOV R0,R4	;WORD FROM THE 10 (STARTING ADDRESS),PUT IT IN R4.
	JSR PC,INWDDP	;PULL IN ANOTHER WD. FROM THE 10(END ADDRESS)
	MOV R0,R5	;AND PUT IT IN R5.
ZRTST:	MOV TWENTY,TA
	MOV R4,SAD	;SAVE STARTING ADDRESS.
ZRTSTA:	TST (R4)+	;SEE IF BLOCK OF 20 WORDS ARE ZEROS. IF
	BNE GOON	;THEY ARE,DONT SEND THEM.
	DEC TA
	BNE ZRTSTA
	BR ZRTST	;GREAT,SEE IF WE CAN DO THIS AGAIN.
GOON:	MOV SAD,R4
NXTBLK:	CLR R2	;R2 WILL HOLD THE CHECKSUM
	MOV R4,R1
	SUB R5,R1	;DETERMINE -COUNT.
	DEC R1	;MAKE -COUNT RIGHT.
	BPL DONE
	TSTB TOS
	BPL .-4
	MOV #1,TOB	;1MEANS A NEW BLOCK WILL FOLLOW.
	CMP R1,-100	;SEND BLOCKS OF LENGTH 100 UNLESS THERE
	BGE USECNT	;ARE LESS THAN 100 WORDS TO GO.THEN USE THE ACTUAL
	MOV #-100,R1	;COUNT REMAINING.
USECNT:	MOV R1,R0
	ADD R0,R2	;ADD -CNT TO THE CHECKSUM
	JSR PC,SDWD10	;SEND -BLOCK LENGTH TO THE PDP10
	MOV R4,R0	;GET THE STARTING ADDRESS OF THE BLOCK.
SDBLK:	JSR PC,CHCK10	;IS PDP10 SAYING ANYTHING?
	BR NXTBLK	;YES,SEND A NEW BLOCK.
	ADD R0,R2	;ADD THIS WORD TO THE CHECKSUM
	JSR PC,SDWD10
	INC R1	;INCREMENT -BLOCK LENGTH.
	BGT CNTDON
	MOV (R4)+,R0	;GET NEXT WORD IN SEQUENCE.
	BR SDBLK
CNTDON:	MOV R2,R0	;SEND THE CHECKSUM.
	JSR PC,SDWD10
	BR ZRTST	;THIS BLOCK DONE,SEND ANOTHER ONE.
DONE:	TSTB TOS
	BPL .-4
	MOV #3,TOB	;3 MEANS NO MORE BLOCKS.
	HALT
CHCK10:	TSTB TIS	;IS THE 10 SENDING BACK ANYTHING?
	BMI SWRONG	;YES,TEST FURTHER.
	INC (SP)
	INC (SP)	;NO,GO TO WHERE CALLED FROM + 2.
	RTS PC
SWRONG:	BICB #200,TIB
	CMPB #7,TIB	;NO ROOM IN TEN'S BUFFER?(^G)
	BNE CKSMER	;NO.
	CLR R0	;YES,WE'VE LOST SOME CHARS. SOMEWHERE,SO SEND
SDBADP:	MOV #3,PAR	;THE PDP10 WORDS WITH BAD PARITY.
	JSR PC,SDWDA
	TSTB TIS	;KEEP SENDING IT UNTIL PDP10 YELLS ERROR
	BMI SWRONG
	BR .-6
CKSMER:	CMPB #141,TIB	;141 MEANS CHECKSUM OR PARITY ERROR IN PDP10
	BNE SDBADP
	JSR PC,INWDDP	;NEXT WORD FROM PDP10 IS STARTING ADDRESS OF
	RTS PC	;THE BAD BLOCK WHICH MUST BE RETRANSMITTED.
;
INPAR:	0	;WILL HOLD PARITY BITS SENT FROM PDP10
PAR:	0	;WILL HOLD PARITY BITS GENERATED IN THIS ROUTINE.
PARITY:	MOV R1,-(SP)
	MOV R2,-(SP)
	JSR PC,BYTPAR	;GET ODD PARITY OF FIRST BYTE OF WORD IN R0.
	MOV R1,PAR
	ASL PAR
	JSR PC,BYTPAR	;GET PARITY FOR SECOND HALF OF R0.
	ADD R1,PAR
	ROL R0
	MOV (SP)+,R2
	MOV (SP)+,R1
	RTS PC
BYTPAR:	CLR R1
	MOV #10,R2	;SET UP SHIFT COUNT OF 8 PLACES.
	CLC
ROTATE:	ROL R0
	ADC R1	;ADD #OF ONES IN A HALF WORD OF R0 TO R1,SO
	DEC R2	;R1 WINDS UP WITH #OF ONES.DECREMENT SHIFT COUNT.
	BNE ROTATE
	BIC 177776,R1	;MASK R1,LEAST SIGNIF. BIT HOLDS ODD PARITY
	RTS PC	;OF THE HALF WORD IN R0.RETURN.
SDWD10:	JSR PC,PARITY	;GET PARITY OF THE WORD IN R0
SDWDA:	MOV R1,-(SP)
	MOV R2,-(SP)
SDWDB:	MOV #4,R1	;4 IS NO. OF INFO. BITS IN BYTE 1+PARITY
	MOV #3,R2	;3 BYTE TRANSMISSIONS PER WORD.
	BR NXTBIT
NXTBYT:	MOV #6,R1	;NORMALLY, 6 DATA BITS PER BYTE.
NXTBIT:	ASL PAR		;ROTATE R0  INTO PAR & OUTPUT FROM THERE.
	ROL R0
	ADC PAR
	DEC R1		;DECREMENT SHIFT COUNT
	BNE NXTBIT
	ADD #40,PAR	;ADD 40 TO GET OVER THE CONTROL CHARS.
	TSTB TOS
	BPL .-4
	MOVB PAR,TOB	;SEND THIS BYTE TO THE PDP10
	CLR PAR
	DEC R2		;DECREMENT BYTE COUNT
	BNE NXTBYT
	ROL R0
	MOV (SP)+,R2	;ALL DONE SENDING THIS WORD.
	MOV (SP)+,R1
	RTS PC
;
INWD10:	MOV R1,-(SP)
INWDA:	MOV #3,R1	;R1 HOLDS BYTE COUNT.
	CLR R0
	CLR INPAR
INNXTB:	TSTB TIS	;WAIT FOR PDP10 TO SEND A CHARACTER.
	BPL .-4
	ASL R0		;THEN,SHIFT R0 LEFT 5 PLACES,THEN...
	ASL R0
	ASL R0
	ASL R0
	ASL R0
	ADC INPAR	;MOVE FIRST PARITY BIT TO INPAR,AND...
	ASL INPAR
	ASL R0
	ADC INPAR	;MOVE THE SECOND PARITY BIT INTO INPAR
	BICB #200,TIB
	ADD TIB,R0	;MOVE THE DATA BYTE INTO R0.
	DEC R1		;DECREMENT THE BYTE COUNT.
	BNE INNXTB
	MOV (SP)+,R1
	JSR PC,PARITY	;COMPUTE OUR OWN PARITY FOR THE INPUTTED WORD.
	RTS PC
INWDDP:	JSR PC,INWD10
	CMP INPAR,PAR
	BEQ INDONE
	TSTB TOS
	BPL .-4
	MOV 141,TOB	;141 IS NAK.
	BR INWDDP
INDONE:	TSTB TOS
	BPL .-4
	MOV 140,TOB	;140 IS ACK.
	RTS PC
;
INWDLD:	JSR PC,INWD10
	CMP INPAR,PAR
	BNE PARBAD
	RTS PC
PARBAD:	TST (SP)+	;NOT RETURNING THROUGH SP,INC SP.
	JMP CKSMBD
	.END LDDUMP
