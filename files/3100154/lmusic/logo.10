TITLE LOGO
;         TM
;(C) COPYRIGHT,1970,BOLT BERANEK AND NEWMAN INC., CAMBRIDGE, MASS.???????
;LARRY KRAKAUER:  MICRONETICS:  204 ARSENAL ST. WATERTOWN  926-2570
;WALLY WEINER:  BBN:  491-1850   EXT. 423
DEFINE EXP
TERMIN
IF1 EXPUNGE WORD
HCORE==0	;HAIRY CORE STUFF
;ACCUMULATOR ASSIGNMENTS

F=0	;FLAGS AND BITS
A=1
B=2
C=3
D=4
E=5
G=7
H=10
L=12
M=13
N=14
W=15
S=16	;ARGUMENT PUSHDOWN STACK
P=17	;CONTROL PUSHDOWN STACK
TA==D
TB==TA+1
TC==TA+2
TD==TA+3
TE==TA+4

TYOC==1
TYIC==2
DKOC==3
TUIC==4
TUOC==5
DCHN==6
DRIBC==7
CSC==10
FD=600000
ENDFIL==0
CH==C
;FLAGS FOR THE LH OF F

LDONF==1	;LINE DONE FLAG FOR EDIT MODE
EDITF==2
UPFF==4	;COMEXR CALLED FROM RETURN CODE, NOT FROM COMEX
TIF==10
BREAKF==20
ERRORF==40	;CALLING UPROD FROM ERROR PROCESSOR
GOF==100	;USER TYPED  DIRECT GO
RQF==200	;A REQUEST IN PROGRESS
COMF==400	;1 IF USER PROCEDURE BEING LEFT SHOULD BE TREATED LIKE COMMAND
GCF==1000	;1 IF THIS K HAS NOT BEEN GARBAGE COLLECTED YET
TITLEF==2000	;DOING TITLE DURING A TO
BROKE==4000	;ERROR WAS NON-TYI BREAK KEY
GETF==10000	;GET IN PROGRESS
SAVEF==20000	;SAVE IN PROGRESS, FOR ALTERNATE FORMS OF TYPEOUT
SNAPAR==40000	;SNAP GOT AS ARG TO PROC

;FLAGS FOR THE RIGHT HALF OF F

TF==1	;A TEMPORARY FLAG FOR MANY ROUTINES
PMF==2	;+- SIGN
NWF==4	;NOT WORD INPUT
CRF==10
FSYMF==20	;0 IF FIRST ELEMENT OF LINE BEING COMPILED,USED W NNUMF
TISLF==40	;TIS LITERAL FLAG
NOLSPF==100	;IN LSTPLN, SUPPRESS LEADING SP., ALSO IN COMPIL
NNUMF==40	;NON-NUMERIC INPUT
PREFIX==200	;FOR PWORD
SUFFIX==400	;ALSO FOR PWORD
MAKEF==1000	;COMPIL CALLED WITH THIS=1 MEANS CALLED FROM MAKE
STORED==2000
FLUSHF==4000	;GETTING AN ALREADY DEFINED PROCEDURE
EABBRF==10000	;DOING LIST ENTRY ABBREVIATIONS
ECONTF==20000	;  "    "     "   CONTENTS
EENTRF==40000	;  "    "     "   ENTRY
ENAMEF==100000	;  "    "     "   NAMES

;FLAG DEFINITIONS FOR LH OF STRING POINTER

DISPF==40	;DISPLAY LIST NAME (SNAP)
WORDF==100	;STRING IS A WORD
SENTF==200	;SENTENCE
EMPTYF==400	;EMPTY
UNBOUN==1000	;UNBOUND (NEVER IN A COMPILED ELEMENT)

;FLAG DEFINITIONS FOR LH OF COMPILED ELEMENT

MPF==400000
UPRF==200000
VARF==100000
LITF==40000
COMMTF==20000	;IS A COMMENT
STRF==COMMTF	;STRING FLAG.
LPARF==10000
RPARF==4000
INFF==2000	;INFIX OPERATNR
ANDF==1000	;USED IN TO LINES, IMPLIES THIS DUMMY PRECEDED BY AND
MAKESC==40	;INDIRECT BIT MEANS 2 LINE MAKE AND END OF NAME:
;ALSO IN THE LEFT HALF OF COMPILED ELEMENT ACAN BE STRING POINTER BITS

;FLAG DEFINITIONS FOR LEFT HALF OF FIRST WORD OF RP PAIR

TRACEF==400000	;THIS PROCEDURE IS BEING TRACED
HIDEPF==200000

;FLAG DEFINITION FOR LH OF 2ND WORD OF MACHINE NAME PAIR

COMPUT==400000	;IF ONE, THIS NAME MUST BE COMPUTED, ADDR IN RH

;FLAG DEFINITION FOR LEFT HALF OF VALUE WORD IN VP

GLOBLV==100000	;IF ONE, THIS IS THE GOBAL VALUE FOR THE VARIABLE
;UUO DEFINITIONS

ERROR=1000,,0
EXPAND=2000,,0
GARBAGE=3000,,0
SQUEZE=4000,,0

IF1 [
TURTAS==1
LFLAG==0	;STANDARD FLAGS
VFLAG==0	;VECTOR FLAG.
DFLAG==0
NOVA==1
FTY==0
FNV==1
SNAPFL==1
PRINTC \STANDARD=\
.TTYMAC FLAG
STAND==FLAG
TERMIN
IFE STAND,[
PRINTC \TURTLE=\
.TTYMAC FLAG
TURTAS==FLAG
TERMIN
PRINTC \LFLAG=\
.TTYMAC FLAG
IFE FLAG,LFLAG==0		;NO LIST OPERATIONS INCLUDED
IFN FLAG,LFLAG==1	;LIST OPERATIONS INCLUDED
TERMIN
IFN LFLAG,[
PRINTC \VECTORS=\
.TTYMAC FLAG
IFE FLAG,VFLAG==0
IFN FLAG,VFLAG==1
TERMIN
]
NOVA==2
PRINTC \DFLAG=\
.TTYMAC FLAG
IFE FLAG,[DFLAG==0	;NO DISPLAY
SNAPFL==0
NOVA==0]
IFN FLAG,[	;DISPLAY
IFN FLAG-NOVA,[	;340 DISPLAY
DFLAG==1
SNAPFL==0
NOVA==0]
IFE FLAG-NOVA,[DFLAG==0
	NOVA==1]
]
TERMIN
IFN NOVA,[
	;NOVA DISPLAY
	FTY==0
	FNV==0
PRINTC /OUTPUT TO=/	;OUTPUT TO DISPLAY OR
.TTYMAC	FLAG	;PRINT OUTPUT FOR DEBUGGING PURPOSES
IFE FLAG,FTY==1
IFN FLAG,FNV==1
TERMIN
PRINTC /SNAPFLAG=/	;SNAPS
.TTYMAC FLAG
IFE FLAG,SNAPFL==0
TERMIN
]]IFN DFLAG,PRINTC /340 DISPLAY FLAVOR 
/
IFN NOVA,[
PRINTC /NOVA DISPLAY FLAVOR
/
IFN FTY,PRINTC /(DISPLAY OUTPUT TO CONSOLE)
/
IFN FNV,PRINTC /(DISPLAY OUTPUT TO NOVA)
/
IFN SNAPFL,PRINTC /SNAPS!!
/]]
A0==1	;AC'S FOR ARITHMETIC HACK
A1==2
A2==3
A3==4
A4==5

;STORAGE AREA SIZES
.RPL==40
.VPL==40
.UAL==40
.PSL==200
.CSL==200
.DPL==200
.SPL==40
.PPL==200
.WSL==2000
.INITA==.RPL+.VPL+.UAL+.PSL+.CSL+.DPL+.SPL+.PPL+.WSL
MSS==400

JOBUUO=40
JOB41=41

;STORAGE ALLOCATION TABLE DEFINITIONS

DEFINE TABLES
TT RP,.RPL,GCN1	;THESE THREE MAY BE IN ANY ORDER
 TT VP,.VPL,GCN1.1
 TT UA,.UAL
 TT PS,.PSL,GCN2	;THESE THREE MUST BE IN THIS ORDER
 TT CS,.CSL,GCN3
 TT DP,.DPL,GCN3.1
 TT SP,.SPL,GCN4	;THESE TWO MUST OCCUR IN THE SAME ORDER AS IN ACS
 TT PP,.PPL,GCN5
 TT WS,.WSL,GCN6	;THIS ONE MUST ALWAYS BE LAST SO MEM TRAP CAN BE USED AS END TEST
TERMIN
DEFINE POINTR
MM RP,A
 MM VP,C
 MM PS,A
 MM PS,D
 MM PS,M
 MM CS,A
 MM CS,D
 MM CS,M
 MM DPX,B
 MM WS,D
 MM WS,B
TERMIN
DEFINE U A1
UU A1,1
TERMIN
DEFINE UU A1,A2
A1:	BLOCK A2
.ZZZ=.ZZZ+A2
TERMIN


LOC 41
	JSR UUOTRP
	JSR TSINT

LOC 100
;THIS STUFF MUST BE HERE FOR MONITOR
MONCOM:
UNAME:	0
VALRET:	ASCIZ \:VP \
MONITX:	0	;UNDER MONITOR IF NON-ZERO
TTIME:	0
ONTIME:	0
GCTIME:	0
CRTIME:	0
NGCS:	0
GCTIM1:	0
CRTIM1:	0
LOGDBG:	0	;NON-ZERO=>LOGO BEING DEBUGED
NWSCHK:	0	;NUMBER OF TIMES WS CHECKED
VERS:	.FNAM2

DEFINE TT A1,A2,A3
NAL!A1:	0
TERMIN
TABLES	;NUMBER OF TIMES THIS SPACE EXPANDED
UUOTRP:	0
	JRST DOUUO
TSINT:	0
	0
	JRST PTSINT
JOBSA:	LOGEND,,LOGO
TIMEC:	0	;TIME LAST REST OR STARTED
;INTAIL CORE ASS AND GETS INCREMENTED AND DECREMENTED
LCORE:	<BEGSTO+.INITA>/2000+1
CORMAX:	15	;DON'T GO   OVER THIS, PLEASE.
ACORE:	0
	JRST .ACORE
CCORE:	0
	JRST .CCORE
COREA:	0
COREB:	0
COREC:	0
MOTORX:	0	;NON ZERO=>PDP6 PAGE ATTACHED FOR ESP
PDP6O:	SIXBIT \   USR      PDP6\
NVOICE:	-1
SILENT:	0
UNITS:	0
MUSTEM:	BLOCK 5
MUSONC:	141
TTYONC:	142
BOTHOC:	143
VOICEC:	143
MBLGTH=300.	;MUSIC BUFFER SIZE (ONE MINUTE)
MBUFP:	0	;MUSIC BUFFER POINTER
MBPOS:	0	;MUSIC BUFFER POSITION
MBMAX:	0	;MUSIC BUFFER MAXIMUM POSITION
NBRAKS:	0
LSTCH:	0
PUREX:	0	;NON-ZERO => PURIFY WHEN MOVING WORLD
READYX:	0	;NON-ZERO => WORLD HAS BEEN MOVED
SICKN:	4	;NUMBER OF TIMES TO BE SICK BEFORE YOU START DIEING

EOFJMP:	[ERROR .]	;WHERE TO GO ON EOF
FINOP:	SIXBIT /   DSK/
FINN1:	0
FINN2:	0
FOUTOP:	SIXBIT /  !DSK/
FOUTN1:	0
FOUTN2:	0
FILLNG:	0	;LENGTH OF FILE BEING WRITTEN
FILBFX:	0
FILOX:	0
FILEO:	SIXBIT /   DSK/
	0
	SIXBIT /FILES/
FILTEM:	0
FILTM1:	0
FILACC:	0
FILBYT:	0
FILNCH:	0
FILNFL:	0
FILPLX:	0
FSNAME:	SIXBIT \LOGO\	;SNAME FOR FILES
DSNAME:	SIXBIT \.LOGO.\	;SNAME FOR DRIBLE
LSNAME:	SIXBIT /IPG/
LFILEO:	SIXBIT /   DSK/
	0
	SIXBIT /LESSON/
DFILEO:	SIXBIT \  !DSK\
	0
	SIXBIT \DRIBLE\
DFILEI:	SIXBIT \   DSK\
	0
	SIXBIT \DRIBLE\
DRIBX:	0
TBL:	BLOCK 3
PATCH:	BLOCK 100

.ZZZ=.

;UNSHARED AREA, NON-ZERO STUFF FIRST

FURST==.ZZZ	;IN CASE DIFFERENT SYSTEMS PUT DATA IN DIFFERENT PLACES
DEFINE MM A1,A2
A1!A2:	0
TERMIN
POINTR
PTOP:	0	;ORDER OF THE NEXT THREE IS EXTREMELY IMPORTANT, MUST BE
CTOP:	0	; THE SAME AS THEIR CORRESPONDING TABLES IN TT
DTOP:	0
WTOP:	0
CDBOT:	0	;BASE OF ALL DIRECT LINES
CBOT:	0	;BASE OF DIRECT LINE
RANNO:	0		;STUFF TO COMPUTE PSEUDO-RANDOM DIGIT
COF:	0	;CONTROLLER FLAG.  SET TO NON-ZERO WHEN CONTROLLER IN USE.


DEFINE TT A1,A2,A3
A1:	0
TERMIN
TABLES
LINEL:	72.	;LINE LENGTH.  CAN BE SETBY PRETTY
MINLNL:	10.	;MINIMUM LINEL CAN BE
LINRET:	67.	;SPACE OR TAB CAUSES RETURN IF CHARNO>LINRET
CHARNO:	0	;THESE FOR INPUT SECTION,
BCHAR:	0
TRACEM:	0	;LIKE BCHAR BUT ONLY FOR TRACE OUTPUT,
SCOUNT:	0
CHGNO:	0		;XWD SEQNO,CBOT; FOR CURRENT LINE. REPLACE WHEN COMING BACK TO THAT LEVEL,
NUMCNT:	0	;COUNT OF NUMBERS CHECKED BY NUMBRQ (FOR STRING MULT)
LINENO:	0
PRODNM:	0	;NAME OF PROCEDURE IN PROGRESS,
TRUTH:	0
CPP:	0		;POINTER INTO COMPILED LINE,
SSP:	0		;CONTENTS OF S AT START OF LINE,
SPP:	0		;     "   "  P,
		;ALSO DTOP ABOVE,
LINBOT:	0
SRCBOT:	0
NEWBOT:	0
NXLINE:	0	;PTR TO NEXT LINE IN CURRENT PROCEDURE,
THISPR:	0	;MACHINE PROCEDURE LAST IN, PTR TO 2ND ENTRY IN CMPT,
TOPROD:	0	;NAME OF PROCEDURE BEING DEFINED,
BRKTEM:	0	;TEM STORAGE FOR BREAKY ROUTINE,
SEQNO:	0		;VERSION NUMBER OF LAST LINE INPUTTED OR EDITED,
CRADIX:	0		;RADIX FOR CURRENT NUMBER CONVERSION,
GODEPT:	0	;THE NUMBER OF GO'S IN THE STACK,
BSS:	0	;SSP AXXOCIATED WITH GODEPTH, STACK AT LAST SAVED BREAK
BSP:	0	;SPP SIMILARLY
GCTEM:	0		;TEM STORAGE FOR GC AND ALLOCATOR,
UUOACS:	BLOCK 20
BLAST=.ZZZ-1
Z=0

TUARG==400000
TUSARG==200000
TUWAIT==100000
TUNULLS==40000
NULLC=="X
LTOUCH:	0
TOUCHA:	0
TOUCHS:	BLOCK 20
TOUCHT:	5
TTYF==1
OPENF==2
TURT:	NTURT
TURTP1:	0
TURTP2:	0
TURTC:	0
SEPTUR:	0
SNULLS:	0	;NUMBER OF NULLS TO BE SENT
NNULLS:	4	;NUMBER OF NULLS TO BE SENT AFTER A MOTION COMMAND
NTUCOM==7
	1000,,NTOUCH-1
NTURT:
NTOUCH:	.BYTE 10
	"A?"B?"C?"D?"E?"F?200
	.BYTE
	1000,,OTOUCH-1
OTURT:	TUARG+TUSARG,,35
	TUARG+TUSARG,,37
	TUARG+TUSARG,,34
	TUARG+TUSARG,,36
	TUWAIT,,33
	TUWAIT,,32
	TUARG,,7
	4.0
	4.0
	3.81
	3.81
	REPEAT 3,0
	REPEAT 7,.5
OTOUCH:	.BYTE 10
	20?21?22?23?24?25?26?27?200
	.BYTE

IFN DFLAG-NOVA,[
IFN NOVA	400000,,DTOUCH
IFN DFLAG	400000,,DISINT
DTURTL:	TUARG,,DFORWAR
	TUARG,,DBACK
	TUARG,,DLEFT
	TUARG,,DRIGHT
	DPEN2
	DPEN1
	TUARG,,7
]

IFN DFLAG,[
IRP X,,[X0,Y0,X1,Y1,X2,Y2,X3,Y3,X4,Y4]
X:	0
TERMIN
ANGLE:	0
SCHED:	4
	1
DTURT:	117,,20000
	21000,,301000
	3000,,3000
	3000,,3000
	3000,,3000
	3000,,3000
MOBYLS:	0
NODISF:	0
DPOS==100
DVECS=<DPOS_12>+10
DLIST:	TURTPT,,.+1
	MOBYPT,,0
TURTPT:	DTURT-1
MOBYPT:	DVECS-2
NX0:	0
NY0:	0
DCUR:	0
FX:	0
FY:	0
FOON:	0
HIDEF:	-1
DISONF:	0
DBASE:	0
DPENST:	0
.DTOP:	20
DFBME:	0
]



IFN DFLAG+NOVA+LFLAG,[
SX:	0	;VARIABLES FOR SIN-COS
SC:	0
SB:	0
SD1:	0
SQS1:	0.8125
	0.578125
SQS2:	0.302734
	0.421875
]
IFN NOVA,[		;VARIABLES FOR NOVA
PENM:	0	;PEN MODE
PTC:	BLOCK 6
CURA:	0
CURX:	0
CURY:	0
NEWA:	0
NEWX:	0
NEWY:	0
NOVX:	0
NOVY:	0
PTL:	12.0	;CONSTANTS FOR POINTER SIZE
PTH:	40.0
ORIG:	512.0	;REAL COORDS OF CENTER
SKLIM:	450.	;MAGNITUDE OF APPARENT SCREEN LIMIT
SNAPX:	0	;SNAP SWITCH
SNAPN:	0	;LAST USED SNAP NUMBER
NVERCD:	0	;ERROR CODE FROM NOVA
]

IFN HCORE,BEGSTO:

IFN HCORE,[
LOC 4000
OFFSET 400000-4000
]
PURE::
PTSINT:	EXCH A,TSINT
	TLZE A,400000
	JRST CHNINT
	TRZE A,20000
	JRST MPVINT
	TRZN A,200000
	.DISMIS [ILLINT]
	EXCH A,TSINT
	JRST ALLOCP

MPVINT:	MOVE A,TSINT+1
	SUBI A,1
	HLRZ A,@A
	ANDI A,777000
	CAIE A,(IDPB)
	.DISMIS [ILLMPV]
	EXCH A,TSINT
	JRST ALOCWS

CHNINT:	TRZN A,1_<TYIC>
	JRST CHNIN1
	MOVEI A,TYIC
	.ITYIC A,
	JRST DISINT
	MOVEM A,LSTCH
	CAIN A,^G
	JRST BREAKY
DISINT:	MOVE A,TSINT
	.DISMISS TSINT+1
CHNIN1:	TRZN A,1_TUIC
	JRST DISINT
	MOVE A,TURT
	MOVE A,-1(A)
	JUMPL A,(A)
	MOVEM A,TURTP1
	MOVEI A,TOUCHS-1
	MOVEM A,TURTP2
	MOVEI A,TUIC
	.ITYIC A,
	JRST DISINT
	MOVEM A,TURTC
	.STATUS TUIC,A
	TRNN A,1000
	.IOT TUIC,A
CHNIN2:	ILDB A,TURTP1
	TRNE A,200
	JRST DISINT
	CAME A,TURTC
	JRST CHNIN2
	.RDTIM A,
	MOVEM A,@TURTP2
	JRST DISINT
WSCHEC:	SKIPN LOGDBG
	POPJ P,
	AOS NWSCHK
	PUSH P,A
	PUSH P,B
	PUSH P,C
	PUSH P,D
	MOVE A,W
	MOVE B,LCORE
	LSH B,12
WSCH1:	MOVE C,(A)
	JUMPE C,WSCHE
	SKIPG C
	.VALUE
	CAIL C,10000.
	.VALUE
WSCH2:	ADDI A,1
	MOVE D,(A)
	TRNE D,1
	.VALUE
	SOJG C,WSCH2
	ADDI A,1
	CAMN A,B
	JRST DCBAPJ
	CAML A,B
	.VALUE
	JRST WSCH1
WSCHE:	CAIL A,B
	JRST DCBAPJ
	SKIPE (A)
	.VALUE
	AOJA A,WSCHE
DCBAPJ:	POP P,D
	POP P,C
	POP P,B
	POP P,A
	POPJ P,

LOGOIN:	HRRZ A,JOBSA
	CAIE A,LOGO
	JRST (A)
	.RDTIME A,
	MOVEM A,TIMEC	;TIME STARTED
	MOVEM A,ONTIME
	MOVEM A,CRTIM1
	SKIPN MONCOM
	SETOM DFILEO+1
	SKIPN MONCOM
	SETOM MONITX
	.SUSET [.RUNAME,,TBL]
	MOVEI F,0
	.OPEN TYIC,[SIXBIT \  $TTY\]
	.VALUE
	.OPEN TYOC,[SIXBIT \  %TTY\]
	.VALUE
	JRST LOGO+1

LOGO:	JRST LOGOIN
	MOVEI A,BEGSTO
	HRLI	A,(A)
	ADDI	A,1
	MOVE B,LCORE
	LSH B,12
	SUBI B,1
	SETZM	-1(A)
	BLT	A,(B)	;CLEAR FROM JOBFF TO TOP OF ASSIGNED CORE

	MOVE	A,[XWD FURST,FURST+1]
	SETZM	FURST
	BLT	A,BLAST	;CLEAR FROM START OF CORE TO EITHER DDT OR JOBFF

	MOVE	A,[XWD SPFRST,FURST]
	BLT	A,FURST+SPLLEN-1 ;SET UP NON-ZERO PART OF UNSHARED CORE

	MOVEI A,BEGSTO
	HRRZI	B,ALOCTB
	HRRZI	C,RP

	HRRZM	A,(C)
	ADD	A,(B)
	ADDI	B,1
	CAIE	C,WS
	AOJA	C,.-4	;SET UP ALL INITIAL ALLOCATIONS


	MOVE	A,RP	;SET UP RIGHT HALVES OF SPACE POINTERS
	HRRM	A,RPA
	MOVE A,VP
	HRRM A,VPC
	MOVE	A,PS
	HRRM	A,PSA
	HRRM	A,PSD
	HRRM	A,PSM
	MOVE	A,CS
	HRRM	A,CSA
	HRRM	A,CSD
	HRRM	A,CSM
	MOVE A,DP
	HRRM A,DPXB
	MOVE	W,WS
	HRRM	W,WSB
	HRRM	W,WSD
	MOVE	P,PP

	HRRZI	A,(W)
	HRLI	A,.WBASE
	BLT	A,.WTOP-.WBASE-1(W)
	HRRZI	A,RESET
	HRRM	A,JOBSA	;DON'T REDO THE INITIAL STORAGE ALLOCATION
	MOVE A,LCORE
	LSH A,12
	SUBI A,1
	CAIGE	A,@WTOP	;IS WTOP INSIDE CURRENT ALLOCATION?
	EXPAND	WS	;NO, GET A K SO WS WILL FIT
	MOVEI	A,220000
	MOVEI B,1_<TYIC>
	.SETM2 A,
;REQUEST PDL AND ILL MEM REF TRAPS


	MOVEI	B,[ASCIZ /
LOGO./]
	TRZE	F,TF	;1 IF CALLED BY ERASE ALL
	JRST RESET
	PUSHJ	P,TOSS
	PUSHJ P,VERSN
	POP S,A
	PUSHJ P,PTOSS
	PUSHJ P,CRLF
	TRO F,TF	;GET HEADLINE NEWS
	TRZ F,TISLF
	PUSHJ P,PNEWS

;FALLS THROUGH
RESET:	SETZM NBRAKS
	SETZM SRCBOT
	MOVE A,BSS
	MOVE B,BSP
	JSP C,SETPDL
	MOVE A,CDBOT
	MOVEM A,CBOT
	SETZB	F,PRODNM
	MOVE	A,CBOT	;MAKE THE BASE OF THIS DIRECT LINE
	MOVEM	A,CTOP	;THE TOP OF ALL COMPILED LINES
	SETZM	TRACEM	;TRACE MARGIN 
	HRRZ	W,WS	;W INDEXES TO BASE OF WORK SPACE
	MOVEI	B,2
	PUSHJ P,DUMRES	;RESTORE GLOBAL VALUES
	MOVEM	B,DTOP	;FLUSH ALL DUMMIES
	MOVEI A,220000
IFE SNAPFL,MOVEI B,1_<TYIC>
IFN SNAPFL,MOVEI B,1_<TYIC>+1_<TUIC>
	.SETM2 A,
	SQUEZE	;COMPACT THE WORLD

MAINL:	MOVEI	B,[ASCIZ /?/]
	SKIPE	TOPROD	;ARE WE DEFINING A PROCEDURE NOW?
	MOVEI	B,[ASCIZ />/]	;YES
	SKIPN DFILEO+1
	MOVEI B,[ASCIZ \PLEASE LOG IN
?\]
IFN SNAPFL,[
	SKIPE	SNAPX
	MOVEI	B,[ASCIZ /_/]
]	PUSHJ	P,TIS
	 JRST	MAINL
	PUSHJ	P,COMPIL
	 JRST	MAINL	;GOT A STORED LINE
	PUSHJ P,EXECUT
	JRST MAINL

DOUUO:	MOVEM	17,UUOACS+17
	HRRZI	17,UUOACS
	BLT	17,UUOACS+16
	MOVE	17,UUOACS+17
	HLRZ	A,JOBUUO
	ASH	A,-11	;FLUSH AC, IF ONE
	CAILE	A,4	;SQUEZE IS THE HIGHEST KNOWN UUO
	JRST	ILLUUO
	JRST	@.+1(A)	
	 ILLUUO
	 ERRORR
	 ALLOCATOR
	 CALGAR
	 CMPRSS
CALGAR:	JSP	P,GARCOL	;NO PUSHES OR POPS IN GC
	JRST	UUORET

CALDDT:	.VALUE
	JRST COMEX


BREAKY:	EXCH	A,TSINT
	.IOPDL
	TLNE	F,TIF	;LEAVE IT SET FOR BRAKER ROUTINE
	ERROR	BREAK	;BREAK IMMEDIATELY BECAUSE TYPE IN HUNG.
	TLO	F,BREAKF	;OTHERWISE, JUST FLAG IT FOR LATER
	.DISMISS TSINT+1

;TABLE FOR INFIX OPERATORS

%%%==400000	;NOT AN INFIX OPERATOR
%%==200000	;IMMEDIATE, NOT DISPATCHED

INFCTB:	[ERROR .]		;SPACE, SHOULDN'T GET HERE
	GNSCOM			;41	!
	GNSLIT			;42	"
REPEAT 3,%%%,,GNSB		;43,44,45	#$%
	%%,,[INFF,,INCNKL+1]	;46	&	CONCATINATE
	GNSLIT			;47	'
	%%,,[LPARF,,LPREN+1]	;50	(
	%%,,[RPARF,,RPREN+1]	;51	)
	%%,,[INFF,,INTMSL+1]	;52	*
	GNSPLS			;53	+
	%%%,,GNSB		;54	,
	GNSMNS			;55	-
	%%%,,GNSB		;56	.
	%%,,[INFF,,INDIVL+1]	;57	/
REPEAT 10.,%%%,,GNSNUM		;60-71	0-9
	GNSVAR			;72	:
	GNSMWV			;73	;
	%%,,[INFF,,INLSTL+1]	;74	<
	%%,,[INFF,,INEQL+1]	;75	=
	%%,,[INFF,,INGRTL+1]	;76	>
	%%%,,GNSB		;77	?
IFN .-INFCTB-40,PRINTX ;INFIX TABLE LOST
;

COMPIL:	TRZ	F,STORED
	MOVE A,CTOP	;CTOP=NEXT AVAIL IN CS
	MOVEM A,CBOT	;CBOT=BASE OF CURRENT DIREC LINE
CMCOMP:	TRZ F,FSYMF	;ENTER HERE FROM CMAKE
	POP	S,L	;GET BYET POINTER TO INPUT STRING INTO L
	MOVEI	M,0		;NNUMF=NON-NUMERIC INPUT FLAG
COMPAB:	HRLI	L,10700+W	;PMF=PLUS/MINUS FLAG
	MOVEM	L,LINBOT	;NO LEADING SPACE PRINTED(FOR LSTPLN)
	IBP	L
GNS:	TRZ	F,NNUMF\PMF\NOLSPF	;NOLSPF SET BY LEAD. SP. AND SOME OTHER BREAK CHARS
	SETZB	N,SCOUNT	;CLEAR TYPE OF SYMBOL (N) AAND CHAR COUNT
	PUSHJ	P,NEWSTR
GNS1:	LDB	C,L	;PICK UP PREVIOUS TERMINATOR, MAY BE RELEVANT
	JRST	GNS3
GNS2:	TRO F,NOLSPF	;LEADING SPACE SEEN
	ILDB	C,L
GNS3:	CAIN	C," 
	JRST	GNS2
	JUMPE	C,ABBJ	;END OF STRING
	CAIN C,"_
	JRST GNSMKE
	CAIGE C,100
	CAIGE C,40
	JRST GNSB
	CAIN C,")
	TRZ F,NOLSPF
	MOVE D,INFCTB-40(C)
	TLZE D,%%
	JRST GNSINA
	JRST (D)
GNSA:	CAIL C,"0
	CAILE C,"9
GNSB:	TRO	F,NNUMF	;NOT NUMBER-SET NON NUMBER FLAG
GNSNUM:	IDPB	C,B		;STORE THE CHARACTER
	AOS	SCOUNT	;COUNT CHARACTER
	ILDB	C,L
	JSP D,SKPNAM
	JRST GNSEND
	JRST GNSA
;COME HERE AT END OF A POSSIBLE NAME. C HOLDS CHAR WHICH TERMINATED SCAN

GNSEND:	PUSH	P,WTOP		;IN CASE WE WANT TO FLUSH NEW SYMBOL
	PUSHJ	P,ENDSTR	;GOT A SYMBOL, FINISH IT
	POP	S,A		;THIS IS IT
	TRNN	F,NNUMF	;MIGHT IT BE A NUMBER, IE A LITERAL
	JRST	GNSN	;IT IS A POSSIBLE LINE NUMBER
;FALLS THROUGH!!
;FALLS THROUGH!!

;CHECK ELEMENT TO SEEE IF IT IS AN ABBREVIATION

ABBA:
	HRRZ	B,UA	;USER DEFINED ABBREVIATIONS FIRST
	PUSHJ	P,LOOKUP
	 JRST	ABBC
	MOVE	C,1(N)
	CAMN	C,[EXP -1]
	JRST	NOABBS	;A DELETED ABBREVIATION
	POP	P,WTOP	;THIS ELEMENT EXISTS, DON'T NEED ANOTHER COPY
	PUSH	S,LINBOT
	SUB	L,LINBOT
	PUSH	P,L	;SAVE RELATIVE POINTER INTO SOURCE STRING
	HRRZ	L,1(N)	;USE THE VALUE OF THE ABBREV AS THE NEW SOURCE
	AOJA	M,COMPAB	;WE ARE NOW ONE LEVEL DEEPER IN ABBREVS

ABBC:	MOVE	A,NEWBOT
	HRRZI	B,ABBT	;NOT USER ABBREV, TRY SYSTEM ABBREVS
	PUSHJ	P,SYSLUK
	 JRST	NOABBS	;NOT AN ABBREVIATION
	POP	P,WTOP
	PUSH	S,LINBOT
	SUB	L,LINBOT
	PUSH	P,L
	HRRZ	L,1(N)
	HRLI	L,350700
	SETZM	LINBOT
	AOJA	M,GNS


ABBJ:	JUMPE	M,CMPLA	;TOP LEVEL,DONE WITH WHOLE INPUT,ADD TERMINATOR
	POP	S,LINBOT	;NOT TOP LEVEL
	POP	P,L
	ADD	L,LINBOT
	SOJA	M,GNS1	;UP A LEVEL

CMPLA:	PUSHJ	P,CSTORE
	TRO	F,FSYMF	;NO LONGER FIRST ELEMENT
	JUMPN N,GNS
CMPEND:	TRNE	F,MAKEF
	POPJ P,
	TRZE	F,STORED
	JRST	TOLINE
	MOVE A,CBOT
	MOVEM	A,CPP	;WILL START EXECUTING HERE
	SUB	A,CDBOT	;MAKE IT RELATIVE TO BASE OF DIRECT LINES
	EXCH	A,0(P)	;PUT IT ON THE STACK
	JRST	1(A)	;R2 TO DENOTE IT NEEDS EXECUTION

;NOT AN ABBREVIATION, CHECK FOR EXISTING PROCEDURE NAMES

NOABBS:	MOVE	A,NEWBOT	;GET SYMBOL TO BE LOOKED UP IN RP(USER PROCEDURE SPACE)
	HRRZ	B,RP
	PUSHJ	P,LOOKUP
	 JRST	GNSP2
	POP	P,WTOP	;FLUSH	THE SYMBOL
GNSP1:	SUB	N,RP	;GET REL ADDR
	TLO	N,UPRF
	AOJA	N,CMPLA	;TO POINT SECOND WORD

GNSP2:	PUSH	P,N	;SAVE POINTER TO END OF USER TABLE
	MOVE	A,NEWBOT
	MOVEI	B,CMPT	;MACHINE PROCEDURE TABLE FOR COMPILER
	PUSHJ	P,SYSLUK
	 JRST	GNSP3
	POP	P,A	;FLUSH THE POINTER TO END OF USER TABLE, NOT NEEDED
	POP	P,WTOP	;FLUSH THE SYMBOL
	TLO	N,MPF	;CALL IT A MACHINE PROCEDURE
	SKIPL	(N)	;IS IT SPECIAL (MAKE)
	AOJA	N,CMPLA	;TO POINT TO SECOND WORD
	JRST	CMAKE	;WHY, YES

GNSP3:	POP	P,N	;POINTER TO END OF USER PROCEDURE TABLE
	POP	P,E	;FLUSH OLD WTOP, LEAVE NEW ONE, SAVE THE NEW SYMBLO
	MOVEI	E,2(N)	;SPACE FOR THE NEW ENTRY IN TABLE
	CAML	E,RP+1	;IS IT THERE ALREADY?
	EXPAND	RP
	MOVE	A,NEWBOT
	MOVEM	A,(N)	;NAME OF NEW PROCEDURE
	SETOM	1(N)	;NOT YET TO'D
	SETZM	2(N)	;NEW END OF TABLE
	JRST	GNSP1

GNSN:	MOVEI	A,1
	TRNE	F,PMF	;SAW A SIGN?
	CAME	A,SCOUNT	;YES, WAS IT THE ONLY CHARACTER?
	SKIPA			;NO TO EITHER
	JRST	ABBA		;YES TO BOTH, "+" OR "-" ONLY
	POP	P,A	;FLUSH THE OLD WTOP
	HRLZI	N,LITF\WORDF+W
	HRR	N,NEWBOT
	TRNN	F,FSYMF\MAKEF\PMF  ;IS IT FIRST ELEMENT AND UNSIGNED?
	TRO	F,STORED	;YES, NUMBER+FIRST_STORED LINE
	JRST	CMPLA

GNSPM:	TRO	F,PMF	;SET PLUS-MINUS FLAG
	JRST	GNSB

;COMMENTS, LITERALS, AND VARIABLE NAMES GET COPIED AND EXTRA SPACES FLUSHED

GNSCOM:	TLOA	N,COMMTF
GNSLIT:	TLO	N,LITF
WEFA:	MOVEI	D,(C)	;SAVE THE PROPER TERMINATOR
	PUSHJ	P,WEFS
	POP	S,B
	IOR N,B
	IBP	L
	JRST	CMPLA

GNSVAR:	TLO N,VARF
	TRZ F,TF	;SET BY NON-#
WEFV:	ILDB C,L
	JSP D,SKPNAM
	JRST VAREND	;DONE
	CAIL C,"0	;IS IT A NUMBER?
	CAILE C,"9
	TRO F,TF	;NO, NOTE
	IDPB C,B	;OK, STORE IT
	JRST WEFV

VAREN1:	IBP L
VAREND:	CAMN B,NEWBOT	;IS THIS LOSER EMPTY?
	ERROR NMERR5	;YES, CAN'T BE NAME
	TRNN F,TF	;NO, IS IT ALL NUMBERS?
	ERROR NMERR6	;YES, ALSO ILLEGAL AS NAME
	PUSHJ P,ENDSTR	;OK, FINISH STRING
	PUSH P,N
	MOVE A,(S)
	MOVEI B,MV	;SEE IF IT IS A MACHINE VAR
	PUSHJ P,SYSLUK
	JRST VAREN2	;NO
	POP P,N	;YES, JUST STORE NAME
	POP S,B	;EVAL WILL DO A PUSHJ TO THING
	IOR N,B
	JRST CMPLA
VAREN2:	MOVE B,VP	;NOT SYS, IS IT IN VP?
	MOVE A,(S)	;GET NAME
	PUSH S,A	;THIS SO MAKEN WILL WORK
	PUSHJ P,LOOKUP	;IN VP?
	 PUSHJ P,MAKEN	;NO, MAKE A NEW GLOOBAL
	POP S,A	;CLEAN UP
	POP S,A
	MOVEI B,1(N)	;POINTER TO VALUE CELL IN VP
	SUB B,VP
	POP P,N
	IOR N,B
	JRST CMPLA

WEFS:	TRZ	F,TF\NWF
	IFN LFLAG,[
	SETZ	H,
]
WEFC:	ILDB	C,L
	IFN LFLAG,[
	CAIN	C,"(
	AOJA	H,WEFC1
	CAIN	C,")
	SOJA	H,WEFC2
	JUMPN	H,WEFC2
]
	CAIN C," 
	IFN LFLAG,[WEFC1:
]
	TRO F,NWF	;SPACE MEANS MORE THAN ONE WORD
	IFN LFLAG,[WEFC2:
]
	CAIN	C,(D)	;DONE YET?
	JRST	WEFB
	JUMPE	C,WEFD	;NO SECOND " / OR ;
	TRO	F,TF	;HAVE SEEN A REAL CHAR
	IDPB	C,B
	JRST WEFC

WEFD:	TLNN N,COMMTF	;IF A COMMENT, EOL IS OK
	ERROR INERR1	;BUT NOT LITS OR VARS
WEFB:	TRNE	F,TF	;IS THIS THING EMPTY?
	JRST	ENDSTR	;NO, FINISH THE STRING NORMALLY
	PUSH	S,[XWD W+WORDF\EMPTYF,0]	;EMPTY
	POPJ	P,

GNSMNS:	SKIPA N,[INFF,,INMNSL+1]
GNSPLS:	MOVE N,[INFF,,INPLSL+1]
	TRON F,NOLSPF	;SPACES BEFORE?
	JRST GNSIN	;NO, INFIX
	ILDB C,L	;YES, AFTER?
	CAIE C," 
	ADD N,[MPF-INFF,,2]	;NO, CONVERT OPERATOR FROM INFIX TO PREFIX
	JRST GNSTOR

GNSMKE:	SKIPA N,[INFF,,IMAKEL+1]
GNSINA:	MOVE N,(D)
GNSIN:	IBP L
GNSTOR:	PUSHJ P,CSTORE	;STORE THIS ONE, LEAVE B AS IS
	TRO F,FSYMF	;NO LONGER FIRST ELEMENT
	SETZB N,SCOUNT
	JRST GNS1	; ... AND SKIP CALL TO NEWSTR

;CALL WITH JSP D,
;SKIP UNLESS CHAR IN C IS RESERVED (NOT LEGAL NAME CONSTITUENT)
SKPNAM:	CAIGE C,100
	CAIGE C,40
	JRST SKPNM1
	SKIPL INFCTB-40(C)
	JRST (D)
	JRST 1(D)
SKPNM1:	CAIN C,24	;^T, LIKE "
	JRST 1(D)
	CAIN C,^_	;ACCEPT ^_ AS NAME CONST (KLUDGE FOR LONG-FORM MAKE)
	JRST 1(D)
	CAILE C," 
	CAILE C,172	;SMALL Z
	JRST (D)
	JRST 1(D)	;IT'S OK, SKIP

GNSMWV:	TLO N,VARF\SENTF
	TRZ F,TF
GNMWV1:	ILDB C,L
	CAIN C,";
	JRST VAREN1
	JUMPE C,[ERROR .]
	CAIL C,"0
	CAILE C,"9
	TRO F,TF
	IDPB C,B
	JRST GNMWV1

CMAKE:	TRNE	F,MAKEF	;ALREADY IN A 2 LINE MAKE?
	AOJA	N,CMPLA	;YES
	LDB	C,L
	JUMPE	C,CMAKE2
	MOVE	A,L
	ILDB	C,A
	CAIN	C," 
	JRST	.-2	;SAD SPC
	CAIE	C,"!	;MAKE-COMMENT-CR
	AOJA	N,CMPLA
	PUSHJ	P,NEWSTR
	MOVE	C,LINBOT
	MOVEM	C,SRCBOT	;FOR GC
	PUSH	S,[XWD W+COMMTF,0]
	PUSHJ	P,BTFCP1
	ADDI N,1
	PUSHJ	P,CSTORE
	POP	S,N
	JRST	CMAKE3
CMAKE2:	ADDI N,3	;ADD 2 MORE TO CONVERT TO 2 LINE MAKE
CMAKE3:	TRO	F,MAKEF
	PUSHJ	P,CSTORE
	MOVEI	B,[ASCIZ /   NAME /]
	PUSHJ	P,TIS		;ASK FOJ IT
	JRST	.-2
	PUSHJ	P,CMCOMP
	SOS	A,CTOP
	MOVE N,[MPF,,MAKL2+1]
	PUSHJ P,CSTORE
	MOVEI	B,[ASCIZ /   THING /]	;CONTINUE TO ASK
	PUSHJ	P,TIS
	JRST	.-2
	PUSHJ	P,CMCOMP
	TRZ	F,MAKEF
	JRST	CMPEND

CSTORE:	MOVE	A,CTOP
	MOVEM	N,@CSA
	AOS	A,CTOP
	MOVEI	A,@CSA
	CAML	A,CS+1
	EXPAND	CS
	POPJ	P,

EXECUTE:
	HRRZI	A,(S)
	SUB	A,SP
	MOVEM	A,SSP
	HRRZI	A,(P)
	SUB	A,PP
	MOVEM	A,SPP
EXECU0:	HRROS (P)	;SIMULATE FIRST INST. OF INVAL
	PUSH	P,[EXP [EXP [ERROR NOCMD]]]
	TLZE	F,BREAKF
	ERROR	BREAK
	MOVE	A,CPP
EXECU1:	SKIPN	C,@CSA	;IS IT EOL?
	JRST NULEX	;YES, EXIT
	TLNN	A,COMMTF	;IS IT A COMMENT?
	JRST	GARGS		;NO, GO TO IT
	AOS	A,CPP
	JRST	EXECU1		;IGNORE COMMENT

NULEX:	SOS CPP
	JSP D,COMXR2
	POPJ P,

EVAL:	AOS A,CPP	;LOAD A AND C
	MOVE C,@CSA
	PUSHJ P,INVAL
	SOS CPP	;OLD EVAL DIDN'T AOS POINTER
	POPJ P,

;FOR INVAL, A MUST HAVE COPY OF CPP
;C MUST HAVE CURRENT ELEMENT
;C RETURNS NEXT ELEMENT AFTER EXPRESSION
INFLP:	PUSH P,C
EXCTCM:	AOS A,CPP
	SKIPA C,@CSA
INVAL:	HRROS (P)	;LH -1 IS NULL INFIX OPERATOR
	JFFO C,.+2
	ERROR ERMSSG
	JRST @.+1(D)
	EXCTMP
	EXCTUP
	EXCTV
	EXCTL
	EXCTCM
	EXCTLP
	[ERROR PRNER1]
	[ERROR INFER1]

EXCTMP:	HLL C,(C)	;FETCH # OF ARGS
XCTMP1:	TLZ C,340000
	PUSH P,C
	JUMPL C,EXCTP4	;JUMP IF TAKES NO ARGS
XCTMP2:	AOSA A,CPP
XCTMP3:	MOVE A,CPP
	MOVE C,@CSA
	CAMN C,[MPF,,OFL+1]	;IS IT "OF"?
	JRST XCTMP2	;YES, SKIP IT
GARGS:	PUSHJ P,INVAL	;GET ARGS TO PREFIX EXPRESSIONS
	HRLZI C,-1
	ADDB C,(P)	;COUNTS ARG; ALSO GETS COMPILED ELEMENT
	JUMPGE C,ANDCHK
	SOS CPP		;FOR COMPATIBILITY W. OLD EVAL
EXCTP4:	POP P,THISPR
	TLZE F,SNAPAR	;HAS A SNAP BEEN GOBBLED?
	PUSHJ P,SNAPCK	;YES, CHECK THAT THAT'S GOOD.
	MOVE C,(C)	;FETCH ADDRESS OF ROUTINE
	PUSHJ P,(C)	;CALL PROCEDURE
	MOVSI A,DISPF
	TDNE A,(S)
	TLO F,SNAPAR
	AOS CPP
	JRST XCTINF

SNAPCK:	MOVE A,THISPR
	MOVE A,(A)
	TLNN A,40000
	ERROR NOSNAP
	POPJ P,

ANDIG:	AOSA A,CPP
ANDCHK:	MOVE A,CPP
	MOVE C,@CSA
	CAMN C,[MPF,,ANDL+1]	;IS IT AND?
	JRST ANDIG
	JRST GARGS

EXCTUP:	MOVEI A,(C)
	HLL C,@RPA	;FETCH NO. OF ARGS
	PUSH P,C
	HRRI C,[UPROD]	;PRESERVE NO. OF ARGS IN LEFT HALF
	JRST XCTMP1

EXCTV:	PUSH S,C
	TLNE C,W	;SEE IF IT IS A POOINTER TO A NAME
	JRST .+4	;YES, DO A THING
	MOVE A,@VPC	;NO, GET VALUE OUT OF VP
	MOVEM A,(S)	;AND PUT IT ON STACK
	JRST .+2	;SKIP THE THING
	PUSHJ P,THING	;MACHINE VARIABLE, OR OTHERWISE NOT INTERNED
	MOVSI A,DISPF
	TDNE A,(S)
	TLO F,SNAPAR
	JRST OPEX

EXCTL:	PUSH S,C
OPEX:	AOSA A,CPP
XCTINF:	MOVE A,CPP	;RESTORE A
	SKIPL (P)	;- (P) MEANS NO OP.
	JRST INFDO
NXTINF:	MOVE C,@CSA
	TLNE C,INFF
	JRST INFLP
	SKIPGE (P)	;CHECK AT VALID RETURN
	POPJ P,
	ERROR .	;NO (THIS SHOULD NOT HAPPEN)

INFDO:	POP P,C
	MOVEM C,THISPR
	MOVE C,(C)
	PUSHJ P,(C)
	MOVE A,CPP	;RESTORE A
	JRST NXTINF

EXCTLP:	AOS A,CPP
	MOVE C,@CSA
	TLNE C,MPF
	JRST MULTAR
XCTLP1:	PUSHJ P,INVAL
	TLNN C,RPARF	;CHECK MATCHING RIGHT PAREN
	ERROR PRNER2
	JRST OPEX

SPECWD:	ERROR	EVER5
EXIT:	ERROR	XITERR

SCOMEX:	SOS	CPP
COMEX:	JSP	D,COMEXR
	POPJ	P,

COMEXR:	POP	P,A	;THE RETURN FROM THE COMMAND
	TLNN A,-1
	JRST (A)
COMXRA:	POP	P,A	;RET. FROM INVAL
COMXR2:	POP P,A	;SHOULD BE FAKED NOCMD ERROR
	CAIE	A,[EXP [ERROR NOCMD]]
	ERROR COMERR
COMXRC:	PUSHJ	P,GNE	;NEXT ELEMENT
	 JRST	COMXRD	;NO MORE
	CAME A,[MPF,,ELSEL+1]	;IS LINE ENDED BY ELSE?
	JRST EXECUTE	;GO DO NEXT COMMAND ON LINE
	AOS A,CPP	;YES, SCAN TO ACTUAL EOL
	SKIPE @CSA
	AOJA A,.-1
	JRST .+2
COMXRD:	AOS	A,CPP
	ANDI	A,-1	;NOT NECESSARY IF ALL SETS OF CPP ARE HRRZM'S
	CAME	A,CTOP	;DID WE JUST FINISH A DIRECT LINE?
	JRST (D)
	MOVE	A,-1(P)	;YES
	POP	P,-1(P)
	ADD	A,CDBOT
	MOVEM	A,CBOT
	MOVEM	A,CTOP
	JRST	(D)


CALLDO:	JSP	D,COMEXR ;CHECK IF AT BEG OF LINE, IF NOT DON'T RETURN
	PUSHJ	P,COMPIL
	 POPJ	P,	;STORED THE LINE, NO NEED TO EXECUTE
	MOVE	A,(P)
	EXCH	A,-1(P)
	MOVEM	A,(P)	;PUT PTR TO "DIRECT" LINE IN BEHIND THE RETURN
	JRST	EXECU0


MULTAR:	MOVSI B,200000
	TDNE B,(C)
	JRST XCTLP1
	PUSH P,C
	PUSH S,[W+WORDF,,DUMMYV]
	AOS A,CPP
	MOVE C,@CSA
MULAR1:	JUMPE C,[ERROR ERMSSG]
	TLNE C,RPARF
	JRST MULAR2
	PUSHJ P,INVAL
	JRST MULAR1
MULAR2:	POP P,THISPR
	MOVE C,THISPR
	MOVE C,(C)
	PUSHJ P,-1(C)
	AOS CPP
	JRST XCTINF

;TABLE ADDRESS IN B
;SYMBOL POINTER IN A
;INDEX FOR ENTRIES IN TABLE B IN LH OF C IF NECESSARY
;OUTPUT IS ABS ADDR OF ENTRY (IN N)

LOOKBK:	MOVEI	N,-2(B)	;SEARCH BACKWARDS, POINT AT LAST ENTRY
	HRROI	E,-2	;NOT JUST AFTER IT
	HRLZI	C,W
	JRST	LOOK1


SYSLUK:	MOVEI	C,0
	JRST	LOOK0

LOOKUP:	HRLZI	C,W
LOOK0:	MOVEI	E,2
	MOVEI	N,(B)	;USE N FOR STEPPING THRU TABLE

LOOK1:	ADDI	A,(W)	;MAKE A ABSOLUTE
	MOVN	B,(A)	;GET THE LENGTH OF THE WS ELEMENT
	HRLI	A,-1(B)	;PUT -L-1 OF WS ELEMENT IN LH OF A
	TLNN	C,W
	AOBJN	A,.+1

LOOKL:	MOVE	B,A	;USE B FOR CHANGING A
	HRR	C,(N)	;GET THE NAME OF THIS ENTRY IN THIS TABLE
	TRNN	C,-1	;0 AT END OF TABLE
	POPJ	P,

LOOKL1:	MOVE	D,@C	;GET A WORD OF THIS ENTRY
	XOR D,(B)
	TDNE D,[-2]	;DON'T CARE ABOUT LAST BIT
	JRST	LOOKN	;NO, NOT A MATCH FOR THIS SYMBOL
	ADDI	C,1	;POINT AT NEXT WORD OF THIS ENTRY
	AOBJN	B,LOOKL1	;IF NOT DONE WITH THIS ELEMENT, GO BACK
	JRST	CPOPJ1	;DONE WITH THIS SYMBOL, COMPLETE MATCH

LOOKN:	ADD	N,E
	JRST	LOOKL	;NEXT ENTRY

UPROD:	MOVE	A,-1(P)
	POP	P,-1(P)
	MOVNI	B,1
	CAMN	B,@RPA	;IS THE PROCEDURE DEFINED?
	 ERROR	EVER3	;NO, X NEEDS A MEANING
	MOVEI	B,(A)
	CAMN	B,TOPROD	;IS THIS THE ONE BEING DEFINED?
	 ERROR	EVER4	;YES, X HAS NOT BEEN COMPLETELY DEFINED
	TLZE F,SNAPAR
	 ERROR NOSNAP

UPROD1:	PUSH	P,PRODNM	;PUSH THIS FIRST SO IT CAN BE LAST OFF
				; FOR COMERR IN A STORED LINE
	PUSH	P,CHGNO
	PUSH	P,LINENO
	PUSH	P,DTOP
	PUSH	P,TRUTH
	HRRZ	B,CPP
	CAMGE	B,CDBOT
	JRST	.+4
	SUB	B,CDBOT
	TLO	B,400000	;NOTE THIS ONE RELATIVE TO CDBOT
	JRST	.+3	;INSTEAD OF RELATIVE TO BASE OF THIS LINE
	SUB	B,CHGNO	;LINE GENERATION NO AND LOCATION REL TO CS
	HRRZI	B,(B)	;MAKE SURE LH IS ZERO
	PUSH	P,B
	PUSH	P,SSP
	PUSH	P,SPP

	SETZM	TRUTH
	SETZM	LINENO
	HRRZM	A,PRODNM

	TLZE	F,ERRORF	;WAS UPROD CALLED BY ERROR
	JRST	MAINL

	MOVE	B,DP	;LOC OF DUMMY ARG TABLE
	HLRE	C,A	; + NO OF ARGS AT SCAN TIME -1
	ADDI	C,1
	MOVEI	E,(C)
	ADDI	E,1(C)
	ADD	B,DTOP	;PART OF TABLE ALREADY USED
	ADDI	B,(E)	;AMT FOR DUMMY NAMES
	CAML	B,DP+1	;ALL FIT IN DP?
	EXPAND	E,DP	;EXPAND THE TABLE AT LEAST THIS MUCH

	ADDM	C,DTOP
	ADDM	C,DTOP	;UPDATE AMT USED

	HRRZ D,@RPA
	PUSH	P,BCHAR	;SAVE CURRENT STATE OF MARGIN
	MOVE	E,TRACEM	;MARGIN FOR TRACE
	ANDI	E,17		;INDENT AT MOST 14 SPACES
	MOVEM	E,BCHAR
	TRZ	F,TF	;IF SET WILL DENOTE THAT THIS PROC IS TRACED
	MOVEI	A,-1(A)
	SKIPGE	A,@RPA	;FETCH NAME OF PROCEDURE AND SKIP IF NOT TRACED
	TRO	F,TF		;TRACEF IS THE SIGN BIT
	PUSH	P,C
	TRNE	F,TF
	SKIPN	CHARNO
	SKIPA		;NOT TRACING OR AT MARGIN
	PUSHJ	P,CRLF	;NOT AT MARGIN, GET THERE
	TRNE	F,TF
	PUSHJ	P,INDENT
	POP	P,C
	TRNE	F,TF
	PUSHJ	P,CALPTS	;TRACED, TYPE OUT THE NAME


	MOVEI	D,1(D)	;POINT TO PTR. TO "TO" LINE
	MOVE D,@PSD	;FETCH PTR TO TO LINE
	MOVN	E,C	;-N
	MOVEI	C,1(S)	;STACK LOCATION
	ADD	C,E	;LOCATION IN STACK OF FIRST DUMMY
	HRL	C,E	;-COUNT OF DUMMIES
	HRRZ	G,DP
	ADD	G,-5(P)	;OLD VALUE OF DTOP
	JUMPGE	C,UPFRST	;NO DUMMIES, GET FIRST LINE

	MOVE	A,[440700,,[ASCIZ / OF /]]
UPDVCL:	TRNE	F,TF
	PUSHJ	P,CLPTS1	;IF TRACED, TYPE "OF" OF " AND "
	MOVEI	E,042		;TO QUOTE INPUTS IF TRACING

	MOVE	A,@CSD	;LOOP TO COPY INTO DP, GET DUMMY NAME
	TLNN A,VARF	;IS IT A DUMMY NAME?
	AOJA D,.-2	;NO, TRY NEXT ELEMENT
	MOVEM	A,(G)	;INTO DUMMY VAR TABLE
	SETZM 2(G)
	MOVE	B,(C)	;VALUE OFF S STACK
	ADD A,VP
	EXCH	B,(A)	;INTO VALUE CELL IN VP
	MOVEM B,1(G)	;STORE OLD VALUE IN DP
	MOVE A,(C)	;FOR TRACE
	TRNE	F,TF		;TRACING?
	PUSHJ	P,CLPTS0	;YES, TYPE INPUT QUOTED
	MOVEI	G,2(G)
	POP	S,0(S)	;POP 1 THING OFF S STACK WITHOUT CLOBBERING
	MOVEI	D,1(D)
	AOBJN	C,UPDVCL	;UPROD DUMMY VAR COPY LOOP

	TRNE	F,TF
	PUSHJ	P,CRLF		;NEATEN UP

	MOVEI	A,2
	TRZE	F,TF	;TRACING? ALSO, FLAG NO LONGER NEEDED
	ADDM	A,TRACEM	;NEXT TRACED CALL SHOULD BE INDENTED TWO MORE SPACES


UPFRST:	POP	P,BCHAR		;RESTORE OLD MARGIN
UPNEXT:	JSP	C,SRCHLN
	 CAMG	B,LINENO
	 JRST	OUTPTA
	MOVEM	A,NXLINE
UPNXT1:	MOVEM	B,LINENO	;FOUND A LINE NO > PREVIOUS LINE
	AOS	A,NXLINE
	MOVE	A,@PSA	;GET COMPILE PTR & CHANGE NO
	MOVEM	A,CHGNO

	MOVEM A,CPP
	PUSHJ P,EXECUTE

	AOS	A,NXLINE	;DONE WITH THE LINE, GET NEXT ONE
	JUMPE	A,UPNEXT	;DO IT THE LONG WAY IF ANY PROCEDURES CHANGED
	MOVE	B,@PSA	;FETCH THE LINE NO
	JUMPN	B,UPNXT1	;LINE NO<>0_MORE TO DO
	JRST	OUTPTA	;NO MORE LINES, DONE WITH PROCEDURE

CLPTS0:	TRO	F,PREFIX\SUFFIX
CALPTS:	HRLI	A,010700+W	;WORKSPACE ELEMENT
CLPTS1:	PUSH	P,B
	PUSH	P,C
	PUSH	P,D
	PUSHJ	P,PTOS		;FINALLY!
	POP	P,D
	POP	P,C
	POP	P,B
	POPJ	P,

OUTPTA:	TLO	F,COMF	;DENOTE THAT THERE IS NO OUTPUT
	JRST	RETA

RETTRN:	SKIPE	PRODNM
	ERROR		;"GO" ALONE CAN ONLY BE DIRECT
	SKIPG	GODEPTH
	ERROR	GOERR9	;NOPLACE TO GO
	SOS	GODEPTH	;TEST ABOVE SO IT DOESN'T GO NEGATIVE
GETOUT:	TLO	F,GOF	;GO AND GET TREATED MUCH THE SAME
	POP P,A
	POP P,A
	JRST RET0
ESTOP:	SKIPN	PRODNM
	ERROR	GOERR4		;STOP CAN ONLY BE STORED
	TLO	F,COMF
	JRST	RETURN

DUMRES:	MOVE D,DTOP	;START RESTOOREING
	ADD D,DP	;HERE
	SUBI D,1
DUMRS1:	CAIG D,@DPXB
	POPJ P,	;YES
	MOVE C,-1(D)	;VARIABLE NUMBER
	MOVE E,(D)	;OLD VALUE
	TRNE C,1	;DON'T CLOBBER NAMES
	MOVEM E,@VPC	;POP OOLD VALUE
	SUBI D,2	;NEXT!
	JRST DUMRS1

OUTPUT:	SKIPN	PRODNM
	ERROR	GOERR4
RETURN:	JSP D,COMEXR	;DO TH ENDOF LINE CHECKS
RET0:	POP	P,0(P)
RETA:	POP	P,SPP
	POP	P,SSP
	POP	P,A	;CPP
	POP	P,TRUTH
	POP	P,B
	PUSHJ P,DUMRES	;RESTORE VALUES
	MOVEM B,DTOP
	POP	P,LINENO
	POP	P,CHGNO
	JUMPGE	A,.+3	;RELATIVE TO BASE OF THIS LINE ?
	ADD	A,CDBOT	; NO, RELATIVE TO CDBOT
	JRST	.+2
	ADD	A,CHGNO
	HRRZM	A,CPP
	TLNE	F,GOF\GETF		;IS THIS RETURN UNTRACEABLE?
	JRST	RETD		;YES IT IS, SKIP TRACE STUFF


	MOVE	A,PRODNM
	MOVEI	A,-1(A)	;DON'T CHANGE PRODNM, COMERU MAY NEED IT
	SKIPL	A,@RPA	;ENDING A TRACED PROCEDURE?
	JRST	RETD	;NO
	MOVNI	B,2
	ADDB	B,TRACEM
	PUSH	P,BCHAR
	ANDI	B,17
	MOVEM	B,BCHAR
	PUSHJ	P,INDENT
	PUSHJ	P,PTOSS	;TYPE PROCEDURE NAME
	MOVEI	A,[ASCIZ / OUTPUTS /]
	TLNE	F,COMF	;DID IT OUTPUT?
	MOVEI	A,[ASCIZ / STOPS/]	;NO, IT STOPPED
	PUSHJ	P,PTOSSM
RETB:	TLNE	F,COMF
	JRST	RETC	;NO NEED TO TYPE WHAT IT OUTPUTTED, IT STOPPED
	TRO	F,PREFIX\SUFFIX
	MOVEI	E,042
	MOVE	A,(S)
	PUSHJ	P,PTOSS
RETC:	POP	P,BCHAR
	PUSHJ	P,CRLF

RETD:	MOVE E,PRODNM
	POP P,PRODNM
	TLZE	F,COMF	;DID THIS PROCEDURE OUTPUT?
	JSP	D,COMEXR	;NO, TREAT IT LIKE A COMMAND
	SETOM	NXLINE	;DON'T TRY TO REMEMBER WHERE WE WERE

	TLZN	F,GOF	;WAS RETURN CALLED BY GO
	SKIPN	PRODNM	;DIRECT COMMAND?
	POPJ P,
	JSP	C,SRCHLN	;SEARCH FOR THAT LINE AGAIN
	 CAME	B,LINENO	;THIS TIME FOR =
	 ERROR		;NO LONGER EXISTS, PROBABLY AN ERROR
	MOVEI	A,1(A)
	MOVE	B,CHGNO
	SUB	B,@PSA	;NEW POSITION OF SAME LINE IS ALWAYS <= OLD POS
	TLNE	B,-1	;ONLY CHECK THE SEQUENCE NUMBERS FOR EQUALITY
	 ERROR		;LINE CHANGED WHILE IN IT
	MOVN	B,B	;THE AMOUNT THE SAME LINE GOT MOVED BACK OR 0
	ADDM	B,CPP	;THAT THE RUNNING POINTER NEEDS TO BE OFFSET
	POPJ	P,	;OPERATIONS ALL EXIT WITH POPJ
			;  COMMAND DOES TOO AFTER JSP D,COMEXR


SRCHLN:	HRRZ	A,PRODNM	;THIS IS THE PROCEDURE TO SEARCH
SRCHL1:	HRRZ	A,@RPA	;GET RELATIVE PTR INTO PS SPACE
	CAIN	A,-1	;ERASED?
	ERROR	NOPROD	;THERE IS NO PROCEDURE X

SRCHLL:	MOVEI	A,2(A)	;POINT TO NEXT LINE NO
	HRRZ	B,@PSA	;GET THE LINE NO
	JUMPE	B,1(C)	;R1, FOUND END BEFORE THE LINE
	XCT	(C)	;ARG TO ROUTINE IS THE COMPARE
	JRST	SRCHLL	;CONTINUE ON NO COMPARE
	JRST	2,2(C)	;GOOD COMPARE, R2



GOTO:	PUSHJ	P,GNE
	 JRST	RETTRN
	SKIPN	PRODNM	;ERROR IF NOT STORED
	ERROR GOERR4
	CAME	A,[XWD MPF,TOL+1]
	JRST GONUM
	AOS	A,CPP
	MOVE	A,@CSA	;FETCH NEXT WORD
	CAMN	A,[XWD MPF,LINELL+1]
	AOSA A,CPP
GONUM:	MOVE A,CPP
	PUSHJ	P,NMEVL1

	JSP	C,SRCHLN	;IS THERE THAT LINE IN THIS PROCEDURE
	 CAIE	B,(M)
	 ERROR	GOERR3	;THERE IS NO LINE X
	MOVEI	A,-1(A)
	MOVEM	A,NXLINE	;SO STEP TO NEXT LINE WILL FIND THIS ONE WITHOUT SEARCHING
	JRST	COMEX

NUMEVL:	AOS	A,CPP
NMEVL1:	MOVE	L,@CSA	;FETCH LINE NUMBER
	TLNE	L,LITF	;IF THIS, DOES NOT NEED TO BE EVALED
	JRST	GOTO1	;IS A LITERAL, COULD BE A NUMBER
	SOS CPP
	PUSHJ	P,EVAL	;NOT A LITERAL, MUST EVALUATE
	POP	S,L	;VALUE RETURNED
GOTO1:	MOVEI	D,(L)	;SAVE POINTER FOR ERROR COMMENT
	TLNE	L,SENTF
	ERROR	GOERR2	;CANNOT BE A NUMBER IF IT IS A SENTENCE
	HRLI	L,010700+W
	PUSHJ	P,DNM
	ERROR	GOERR2	;IS NOT A LINE NUMBER
	POPJ	P,


;TYPE IN STRING
;CHECK FOR CONTROL CHARACTERS,EDIT CHARACTERS,ILLEGAL CHARACTERS
;CMDFLG=1_COMMAND STRING,=0_TEXT STRING
;EDITF=1_EDIT MODE, THEN A CONTAINS BYTE POINTER TO BEGINNING OF STRING
;BYTE POINTER TO OUTPUT STRING IN B
;RETURN STRING POINTER TO INPUT ON S-LIST
;R1_FAILURE, TRY AGAIN, R2_SUCCESS.
TIS:	.DISMISS [.+1]	;THIS IS JUST IN CASE
	MOVEI	C,2	;SET CONTINUATION TO SPACE TWO CHARACTERS
	MOVEM	C,BCHAR
	TRZ F,TISLF	;SET IF IN LITERAL
	TLZ	F,LDONF	;CLEAR LINE DONE FLAG FOR EDIT MODE
	TLNN	F,EDITF\GETF	;DON'T TYPE > OR _ IF EDITING
	PUSHJ	P,TOSS	;PRINT OUT COMMENT FROM B
	PUSHJ	P,NEWSTR
	TLNN	F,EDITF	;ARE WE IN EDIT MODE?
	JRST	TISB	;NO
	PUSHJ	P,NEWSRC
	MOVEM	A,LINBOT	;