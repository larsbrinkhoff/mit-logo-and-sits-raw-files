.TITLE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 1
	SYSTEM 327	PAGE 1 	

						.TITLE PDP11 LOGO
					
VERNFFOO		001754				FOO==VERNF
%FNAM2VERN	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 2
	SYSTEM 327	PAGE 2 	

		000507				VERN==%FNAM2
VERNFFOO		001754				FOO==VERNF
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 3
	SYSTEM 327	PAGE 3 	CONFIGURATION PARAMTERS

						.STITL CONFIGURATION PARAMTERS
.IF1						.IF1
						.PRINT /0=>FULL 1=>NO DEBUG 2=>QUERY
					ASSSW=/
						.TTYMAC FLAG
						ASSSW=FLAG
						.ENDM
					
						.IFZ ASSSW
						DEBUG==1
						DISASS==1
						GCDBUG==1
						MNUSRS==10.
						MNSLTS==5
						.ENDC
					
						.IFZ <ASSSW-1>
						DEBUG==0
						DISASS==0
						GCDBUG==1	;ZERO LATER, BUT DOESN'T WORK YET
						MNUSRS==4
						MNSLTS==2
						.ENDC
					
						.IFZ <ASSSW-2>
						.MACR SETFLG FLG
						.PRINT /FLG=/
						.TTYMAC FLAG
						FLG==FLAG
						.ENDM
						.ENDM
					
						SETFLG DEBUG
						SETFLG DISASS
						SETFLG GCDBUG
						SETFLG MNUSRS
						SETFLG MNSLTS
						.ENDC
						.ENDC
					
.MACRFOR						.MACR FOR FLG
						.XLIST
						.IFNZ FLG
						.LIST
						.ENDM
					
.MACRENDC						.MACR ENDC FLG
						.XLIST
						.IFZ FLG
						.LIST
						.ENDC
						.LIST
						.ENDM
					
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 4
	SYSTEM 327	PAGE 4 	SYSTEM PARAMETERS

						.STITL SYSTEM PARAMETERS
					
%0A		000000			A=%0
%1B		000001			B=%1
%2C		000002			C=%2
%3D		000003			D=%3
%4E		000004			E=%4
%5F		000005			F=%5
%5U		000005			U=%5
%6P		000006			P=%6
%6SP		000006			SP=%6
%7PC		000007			PC=%7
					
					
					
TRAPERROR		104400			ERROR=TRAP
					
RUG		100000			RUG=100000	;DONT CHANGE THE S.A., RADIA!!
EMTSKPRET		104000			SKPRET==EMT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 5
	SYSTEM 327	PAGE 5 	SYSTEM PARAMETERS

					
					;DEVICE INFORMATION
					
					;CONSOLE SWITCHES
SWB		177570			SWB=177570	;CONSOLE SWITCH DATA
					;CONSOLE TELETYPE
					;BREAK LEVEL 4
TKBRV		000060			TKBRV=60	;CONSOLE KEYBOARD BREAK VECTOR
TKS		177560			TKS=177560	;CONSOLE KEYBOARD STATUS
TKB		177562			TKB=177562	;CONSOLE KEYBOARD DATA
TPBRV		000064			TPBRV=64	;CONSOLE PRINTER BREAK VECTOR
TPS		177564			TPS=177564	;CONSOLE PRINTER STATUS
TPB		177566			TPB=177566	;CONSOLE PRINTER DATA
					;DM11
					;BREAK LEVEL 5
DMRBRV		000310			DMRBRV=310	;DM11 RECEIVER BREAK VECTOR
DMTBRV		000314			DMTBRV=314	;DM11 TRANSMITTER BREAK VECTOR
DMCSR		175000			DMCSR=175000	;DM11 CONTROL AND STATUS REGISTER
DMBAR		175002			DMBAR=175002	;DM11 BUFFER ACTIVE REGISTER
DMBCR		175004			DMBCR=175004	;DM11 BREAK CONTROL REGISTER
DMTBR		175006			DMTBR=175006	;DM11 TABLE BASE REGISTER
					;PROGRAMMABLE CLOCK
					;BREAK LEVEL 6
PCBRV		000104			PCBRV=104	;PROGRAMMABLE CLOCK BREAK VECTOR
PCS		172540			PCS=172540	;PROGRAMMABLE CLOCK STATUS
PCSTBF		172542			PCSTBF=172542	;PROGRAMMABLE CLOCK SET BUFFER
PCCNT		172544			PCCNT=172544	;PROGRAMMABLE CLOCK COUNTER
					;RF11/RS11 DISK
					;BREAK LEVEL 5
DSKBRV		000204			DSKBRV=204	;DISK BREAK VECTOR
DSKS		177460			DSKS=177460	;DISK STATUS REGISTER
DSKDBR		177472			DSKDBR=177472	;DISK DATA REGISTER
DSKWC		177462			DSKWC=177462	;DISK WORD COUNT
DSKCA		177464			DSKCA=177464	;DISK CURRENT ADDRESS
DSKA		177466			DSKA=177466	;DISK ADDRESS
DSKAE		177470			DSKAE=177470	;DISK EXTENDED ADDRESS
DSKMT		177474			DSKMT=177474	;DISK MAINTENCE(WELL...)
DSKSG		177476			DSKSG=177476	;DISK SEGMENT
					;TK DISPLAY
					;BREAK LEVEL 7?
DISBRV		000270			DISBRV=270	;DISPLAY BREAK VECTOR
NGCSR		164040			NGCSR=164040	;DISPLAY CONTROL AND STATUS REGISTER
NGREL		164042			NGREL=164042	;DISPLAY RELOCATION REGISTER
					;DC11 HIGH SPEED LIN INTERFACE
					;BREAK LEVEL 5
DCRBRV		000300			DCRBRV=300	;RECIEVE BREAK VECTOR
DCRS		174000			DCRS=174000	;RECIEVE STATUS WORD
DCRB		174002			DCRB=174002	;RECIEVE BUFFER
DCTBRV		000304			DCTBRV=304	;TRANSMIT BREAK VECTOR
DCTS		174004			DCTS=174004	;TRANSMIT STATUS
DCTB		174006			DCTB=174006	;TRANSMIT BUFFER
					;POWER FAIL
PFBRV		000024			PFBRV=24
					;BUS ERRORS
BEBRV	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 6
	SYSTEM 327	PAGE 5.1 	SYSTEM PARAMETERS

		000004			BEBRV=4
					;TRAPS
TRPBRV		000034			TRPBRV=34
EMTBRV		000030			EMTBRV=30
IOTBRV		000020			IOTBRV=20
BPTBRV		000014			BPTBRV=14
PWFBRV		000024			PWFBRV=24
					;EAE REGISTERS
DIVIDE		177300			DIVIDE=177300
AC		177302			AC=177302
MQ		177304			MQ=177304
MULTIP		177306			MULTIP=177306
SR		177310			SR=177310
EAESR		177311			EAESR==177311
NORMAL		177312			NORMAL=177312
LGS		177314			LGS=177314
ARS		177316			ARS=177316
SIPRBT		000002			SIPRBT==2
MQZ		000010			MQZ==10
					;PSSESOR STATUS
PS		177776			PS=177776
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 7
	SYSTEM 327	PAGE 6 	ALLOCATION PARAMETERS

						.STITL ALLOCATION PARAMETERS
					
SYPDLL		000100			SYPDLL==100
TMPDLL		000020			TMPDLL==20
PPDLL		000600			PPDLL==600
SPDLL		000600			SPDLL==600
DBUFL		000400			DBUFL==400
DDIRBL		000400			DDIRBL==400
					
DTIBFL		002000			DTIBFL==2000
DEDBFL		002000			DEDBFL==2000
DDIRL		002000			DDIRL==2000
					
DWRTEC		000103			DWRTEC==103
DREADC		000105			DREADC==105
DWRTCC		000107			DWRTCC==107
					
FRTRCF		000001			FRTRCF==1
SWTRCF		000002			SWTRCF==2
SPTRCF		000004			SPTRCF==4
GCTRCF		000010			GCTRCF==10
					
FRSCED		000001			FRSCED==1	;FLUSHED DUE TO SCEDULEING
FRDSKW		000003			FRDSKW==3	;HANGING ON DISK
FRTYIW		000004			FRTYIW==4	;HANGING ON TYI OF CHAR
FRTYOW		000005			FRTYOW==5	;HANGING ON FULL TYO BUFFER
FRRAND		000006			FRRAND==6	;HANGING FOR "UNKNOWN" REASON
FRNEWU		000007			FRNEWU==7	;HANGING BECUASE HAVE NOT YET BEEN INITIALIZED
FRTYIH		000010			FRTYIH==10	;HANGING ON LINE INPUT
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 8
	SYSTEM 327	PAGE 7 	MACROS

						.STITL MACROS
.MACRPUSH						.MACR PUSH AA
						MOV AA,-(P)
						JSR PC,PPUSHT
						.ENDM
					
.MACRPOP						.MACR POP AA
						MOV (P)+,AA
						JSR PC,PPOPT
						.ENDM
					
.MACRPUSHS						.MACR PUSHS AA
						JSR PC,SPUSHT
						MOV AA,@S
						.ENDM
					
.MACRPOPS						.MACR POPS AA
						MOV @S,AA
						JSR PC,SPOPT
						.ENDM
					
.MACRSPUSH						.MACR SPUSH AA
						MOV AA,-(P)
						.ENDM
					
.MACRSPOP						.MACR SPOP AA
						MOV (P)+,AA
						.ENDM
					
.MACRSPUSHS						.MACR SPUSHS AA
						SUB #2,S
						MOV AA,@S
						.ENDM
					
.MACRSPOPS						.MACR SPOPS AA
						MOV @S,AA
						ADD #2,S
						.ENDM
					
.MACRTEXT						.MACR TEXT AA
						.XLIST
						.ASCII \AA\
						.BYTE 0
						.EVEN
						.LIST
						.ENDM
					
.MACRPRTXT						.MACR PRTXT AA
						.XLIST
						JSR PC,ERTAS
						TEXT ^\AA\
						.LIST
						.ENDM
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 9
	SYSTEM 327	PAGE 8 	MACROS

					
					
.MACRPRCR						.MACR PRCR
						JSR PC,.CRLF
						.ENDM
					
.MACRSPACE						.MACR SPACE
						JSR PC,.SPACE
						.ENDM
					
.MACRTIMER						.MACR TIMER A
						JSR PC,.TIME
						.ENDM
					
.MACRUNTIME						.MACR UNTIME A
						JSR E,.UTIME
						A
						.ENDM
					
.MACRUTIMER						.MACR UTIMER A
						JSR PC,.TIME
						.ENDM
					
.MACRUUNTIM						.MACR UUNTIM A
						MOV #A,.+20
						ADD USER,.+12
						JSR E,.UTIME
						0
						.ENDM
.MACRREPT1						.MACR REPT1 A,B
						.XLIST
						.REPT A
						B
						.ENDR
						.LIST
						.ENDM
.MACRREPT2						.MACR REPT2 A,B,C
						.XLIST
						.REPT A
						B
						C
						.ENDR
						.LIST
						.ENDM
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 10
	SYSTEM 327	PAGE 9 	MACROS

					
					
.MACRNOP						.MACR NOP NUM
						.XLIST
						.IFG NUM
						BR .+<NUM*2>
						NOP <NUM-1>
						.ENDC
						.LIST
						.ENDM
					
.MACREXCH						.MACR EXCH LOC1,LOC2
						MOV	LOC1,EXCH1
						MOV	LOC2,LOC1
						MOV	EXCH1,LOC2
						.ENDM
					
.MACRPAD						.MACR PAD A,B
						.PRINT \A B\
						.ENDM
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 11
	SYSTEM 327	PAGE 10 	TRAP VECTORS

					.STITL TRAP VECTORS
					
					
					;TRAP VECTORS
					;UNUSED VECTORS
		000000			.=0
REPT2						REPT2 100,.+2,IOT	;GO TO 2ND WORD OF VECTOR AND DIE
.XLIST.REPTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOTIOT.LIST					
TRPBRV		000034				.=TRPBRV
ERRBKERRBK	000034	033716				ERRBK	;TRAP IS USED FOR ERRORS
	000036	000000				0
					
TKBRV		000060				.=TKBRV
TKBRKTKBRK	000060	001400				TKBRK	;CONSOLE TTY KEYBOARD
	000062	000200				200	;IS ON BR4
					
TPBRV		000064				.=TPBRV
TPBRKTPBRK	000064	001432				TPBRK	;CONSOLE TTY PRINTER
	000066	000200				200	;IS ON BR4
					
PCBRV		000104				.=PCBRV
CLKBRKCLKBRK	000104	011472				CLKBRK	;PROGRAMMABLE CLOCK
	000106	000300				300	;IS ON BR6
					
DSKBRV		000204				.=DSKBRV
DSKBRKDSKBRK	000204	007616				DSKBRK	;FIXED HEAD DISK
	000206	000300				300	;IS ON BR5, INT ROUTINE RUNS ON LEVEL 6
					
DISBRV		000270				.=DISBRV
DISBRKDISBRK	000270	001434				DISBRK	;DISPLAY
	000272	000240				240	;???????????
					
DMRBRV		000310				.=DMRBRV
DMRBRKDMRBRK	000310	001436				DMRBRK	;DM11 RECEIVE
	000312	000240				240	;?
					
DMTBRV		000314				.=DMTBRV
DMTBRKDMTBRK	000314	001440				DMTBRK	;DM11 TRANSMIT
	000316	000240				240	;?
					
IOTBRV		000020				.=IOTBRV
IOTBRKIOTBRK	000020	006542				IOTBRK
	000022	000340				340
					
EMTBRV		000030				.=EMTBRV
EMTBKEMTBK	000030	033710				EMTBK
	000032	000340				340
					
DCRBRV		000300				.=DCRBRV	;DC11 RECIEVE
DCRBRKDCRBRK	000300	014402				DCRBRK
	000302	000240				240
					
DCTBRV		000304				.=DCTBRV	;DC11 TRANSMIT
DCTBRKDCTBRK	000304	015244				DCTBRK
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 12
	SYSTEM 327	PAGE 10.1 	TRAP VECTORS

	000306	000240				240
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 13
	SYSTEM 327	PAGE 11 	SYSTEM VARIABLES(ONE COPY)

						.STITL SYSTEM VARIABLES(ONE COPY)
					
					
		000400				.=400
JMPSTART	000400	000167	014764			JMP START
SYPDLL		000504				.=.+SYPDLL	;SYSTEM PDL
SPDLP	000504	000504			SPDLP:	.	;SYSTEM PDL POINTER
PAT					PAT:
PATCH		000706			PATCH:	.=.+200	;PATCH AREA
PATEND					PATEND:
		000770				.=770
LVERNFVERNFVERNF	000770	001754			LVERNF:	VERNF
		001000			.=<.!377>+1
NFDMTYDMCA		000776				DMCA=.-NFDMTY
		001040				.=.+40	;DM11 CURRENT ADDRESS
NFDMTYDMWC		001036				DMWC=.-NFDMTY
		001100				.=.+40	;DM11 -BYTE COUNT
		001140				.=.+40	;DM11 BIT ASSEMBLY TABLE
		001200				.=.+40	;UNUSED
DMTT		001400			DMTT:	.=.+200	;DM11 TUMBLE TABLE
					
TKBRKMOVTKBCHI	001400	016767	176156	002214	TKBRK:	MOV TKB,CHI
BICCHI	001406	042767	177600	002206		BIC #177600,CHI
CMPCHIBRKCHR	001414	026767	002202	000756		CMP CHI,BRKCHR
BNETKBRK1	001422	001002				BNE TKBRK1
MOVPCBRAKE	001424	010767	001064			MOV	PC,BRAKE
TKBRK1RTI	001430	000002			TKBRK1:	RTI
TPBRKHALT	001432	000000			TPBRK:	HALT
DISBRKHALT	001434	000000			DISBRK:	HALT
DMRBRKHALT	001436	000000			DMRBRK:	HALT
DMTBRKHALT	001440	000000			DMTBRK:	HALT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 14
	SYSTEM 327	PAGE 12 	SYSTEM VARIABLES(ONE COPY)

					
TMPDLPTMPDLTMPDL	001442	001444			TMPDLP:	TMPDL
TMPDLTMPDLL		001504			TMPDL:	.=.+<TMPDLL*2>
ELAPSE	001504	000000			ELAPSE:	0
	001506	000000				0
USER	001510	177777			USER:	-1
ULAST	001512	000000			ULAST:	0	;LAST USER WHO WAS RUN
NULTIM	001514	000000			NULTIM:	0
	001516	000000				0
TIME	001520	000000			TIME:	0	;TIME IN 1/100 TH'S OF A SEC
	001522	000000				0	;FROM START OF SYSTEM RUN
QUANT	001524	000004			QUANT:	4	;UQUANT SET FRCM THIS
UQUANT	001526	000000			UQUANT:	0	;TIME IN 1/100THS USER SHOULD RUN
NRABLU	001530	000000			NRABLU:	0	;NUMBER OF USERS WITH FLSADR=0
NSWPU	001532	000000			NSWPU:	0	;NUMBER OF USERS ASSIGNED TO SLOTS BUT NOT YET IN
NINU	001534	000000			NINU:	0	;   "    "    "      "      "   "   AND ALREADY IN
PUSPSL	001536	000000			PUSPSL:	0	;PREFERED USER SLOT TO SWAP
PUSRSP	001540	000000			PUSRSP:	0	;PREFERED USER TO SWAP OUT
SWPLEPSWPLSTSWPLST	001542	001544			SWPLEP:	SWPLST	;PLACE TOO PUT NEXT REQ
SWPLSTMNSLTS		001560			SWPLST:	.=.+<MNSLTS*2>+2	;LIST OF SWAP REQUESTS
MSWPORMNSLTS		001774			MSWPOR:	.=.+<16*MNSLTS*2>	;MOBY SWAP IN AND OUT BLOCKS
SYSWPRMNUSRS		002210			SYSWPR:	.=.+<16*MNUSRS>	;10 DISK REQUEST BLOCKS FOR GENERAL USE
DSKCRB	002210	000000			DSKCRB:	0	;CURRENT DISK REQUEST
SLOTSTMNSLTS		002236			SLOTST:	.=.+<MNSLTS*4>	;WORD 1 = SLOT USER
								;WORD 2 = NEG, USER COMING IN; 1, USER JUST IN, >1 USER IN A WHILE
	002236	000000				0	;SO END TEST ALWAYS WORKS
	002240	000000				0
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 15
	SYSTEM 327	PAGE 13 	SYSTEM VARIABLES(ONE COPY)

					
DKRTYS	002242	000000			DKRTYS:	0	;# OF DISK RETRYS
CORTOP	002244	000000			CORTOP:	0	;FIRST NON-EX LOCATION
NUNODE	002246	000000			NUNODE:	0	;NUMBER OF NODES PER USER
NUSERS	002250	000001			NUSERS:	1	;NUMBER OF USERS
NSLOTS	002252	000001			NSLOTS:	1	;NUMBER OF IN CORE SLOTS
NUSER2	002254	000002			NUSER2:	2
FOO		000000			FOO==0
.MACRMSWF						.MACR MSWF
						MSWPOR+FOO
					FOO==FOO+34
						.ENDM
SLTCADREPT2					SLTCAD:	REPT2 MNSLTS,MSWF,0
.XLIST.REPTMNSLTSMSWFMSWPORMSWPORFOOFOOFOOMSWFMSWPORMSWPORFOOFOOFOOMSWFMSWPORMSWPORFOOFOOFOOMSWFMSWPORMSWPORFOOFOOFOOMSWFMSWPORMSWPORFOOFOOFOO.LISTUSWCNT	002302	000000			USWCNT:	0	;NEGATIVE LENGTH OF USER SLOT
USLENT	002304	000000			USLENT:	0	;LENGHT OF SLOT IN BYTES
DUSECT	002306	000000			DUSECT:	0	;COUNT OF SYSTEM DISK USAGES MOD 256
DSKDST	002310	020000			DSKDST:	20000	;DISK OFFSET( NO USER OR SYSTEM CRAP BEFORE HERE)
	002312	000002				2
DCLRUS	002314	020000			DCLRUS:	20000	;ADDRESS OF CLEAR USER IMAGE
	002316	000002				2
DCRBFS	002320	040000			DCRBFS:	40000	;ADDRESS OF RECIEVE BUFFERS
	002322	000002				2
DCTBFS	002324	042000			DCTBFS:	42000	;ADDRESS OF TRANSMIT BUFFERS
	002326	000002				2
DSKRND	002330	140000			DSKRND:	140000	;START OF RANDOM USER STORAGE
	002332	000002				2
SNXTDB	002334	100000			SNXTDB:	100000	;NEXT BLOCK AVAILABLE
	002336	000002				2
SDSKAD	002340	100000			SDSKAD:	100000	;BASE OF SYSTEM DISK BLOCKS
	002342	000002				2
SDBITB	002344	000001			SDBITB:	1	;SYSTEM DISK BIT TABLE
REPT1						REPT1 7,0
.XLIST.REPT.LISTSDBITE	002364	100000			SDBITE:	100000
SFLAGS	002366	000000			SFLAGS:	0	;RANDOM SYSTEM FLAGS
LOCKUS	002370	177777			LOCKUS:	-1	;INDEX OF USER LOCKED IN CORE
GCLOCK	002372	177777			GCLOCK:	-1	;USER USING GARBAGE COLLLECTOR IS LOCKED IN
CRMES.BYTE	002374	   015		
	002375	   000			CRMES:	.BYTE 15,0	;CR FOR ERTAP
RWWSW	002376	000000			RWWSW:	0
BRKCHR	002400	000000			BRKCHR:	0	;THE BREAK CHAR FOR TODAY!
JDCSW	002402	000000			JDCSW:	0
					;DISPLAY SYSTEM VARIABLES
DLEN		000400			DLEN==400	;LENGTH OF EACH DISPLAY LIST (IN BYTES)
DPDLL		000060			DPDLL==60	;LENGTH OF EACH DISPLAY PDL (IN BYTES)
TLEN		000020			TLEN==20	;LENGTH OF EACH TURTLE LIST (IN BYTES)
SDPDLL		000220			SDPDLL==60*3	;TOTAL LENGTH OF DISPLAY PDL AREA (IN BYTES)
SDLEN		001400			SDLEN==400*3	;TOTAL LENGTH OF DISPLAY LIST AREA (IN BYTES)
STLEN		000060			STLEN==20*3	;TOTAL LENGTH OF TURTLE LIST AREA (IN BYTES)
					
DCONS					DCONS:		;USER DISPLAY CONSOLE TABLE
.BYTE	002404	   000				.BYTE	0
.BYTE	002405	   001				.BYTE	1
.BYTE	002406	   002				.BYTE	2
REPT1						REPT1 5,.BYTE -1
.XLIST.REPT.BYTE.BYTE.BYTE.BYTE.BYTE.LISTSDISBT	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 16
	SYSTEM 327	PAGE 13.1 	SYSTEM VARIABLES(ONE COPY)

					SDISBT:		;EACH ENTRY HAS A 1 IN THE NTH BIT OVER
.BYTE	002414	   001		
	002415	   002		
	002416	   004				.BYTE	1,2,4
.EVEN		002420				.EVEN
					
SDPDLP					SDPDLP:		;DISPLAY PDL POINTER TABLE
DPDLDISRELDPDLL	002420	000120				<DPDL-DISREL>+<DPDLL*<0+1>>
DPDLDISRELDPDLL	002422	000200				<DPDL-DISREL>+<DPDLL*<1+1>>
DPDLDISRELDPDLL	002424	000260				<DPDL-DISREL>+<DPDLL*<2+1>>
STLIST					STLIST:		;TURTLE DISPLAY LIST  AREA TABLE
REPT1						REPT1	3,TLIST+<TLEN*.RPCNT>
.XLIST.REPTTLISTTLISTTLEN.RPCNTTLISTTLISTTLEN.RPCNTTLISTTLISTTLEN.RPCNT.LIST					
					;DISPLAY TEMPORARIES
					;THESE MUST BE IN THIS ORDER
NEWX.WORD	002434	000000		
	002436	000000			NEWX:	.WORD 0,0	;NEWX IS A TEMPORARY STORAGE FOR ROUTINES
					;			LIKE SETXY. IT CONTAINS WHAT CURX WILL BE SET
					;			TO IF THE ROUTINE DOESN'T
					;			ENCOUNTER A FATAL ERROR
NEWY.WORD	002440	000000		
	002442	000000			NEWY:	.WORD 0,0	;LIKE NEWX
					;END OF ORDER
TUT	002444	000000			TUT:	0	;TURTLE TOP.  POINTS TO TOP OF TURTLE DISPLAY LIST
SNPTEM	002446	000000			SNPTEM:	0	;USED BY GARBAGE COLLECTOR
					
					
EXCH1	002450	000000			EXCH1:	0
.CSRET		177601			.CSRET==-127.
GCMKLTOPSTOPS	002452	003510			GCMKL:	TOPS
TOPS1TOPS1	002454	003512				TOPS1
GCP1GCP1	002456	003514				GCP1
GCP2GCP2	002460	003516				GCP2
GCPREVGCPREV	002462	003520				GCPREV
	002464	000000				0
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 17
	SYSTEM 327	PAGE 14 	SYSTEM VARIABLES (ONE COPY PER USER)

						.STITL SYSTEM VARIABLES (ONE COPY PER USER)
					
UBLK		002466			UBLK=.
FLSRES	002466	000000			FLSRES:	0	;REASON USER NOT RUNNING
FLSADR	002470	000000			FLSADR:	0	;ADDRESS TO START AT AFTER FLUSH
UACA	002472	000000			UACA:	0
UACB	002474	000000			UACB:	0
UACC	002476	000000			UACC:	0
UACD	002500	000000			UACD:	0
UACE	002502	000000			UACE:	0
TIMUSD	002504	000000			TIMUSD:	0
	002506	000000				0
UPC	002510	000000			UPC:	0	;PROGRAM COUNTER
UTTY	002512	000000			UTTY:	0
BRAKE	002514	000000			BRAKE:	0
					;DO NOT CHANGE THE ORDER BELOW
USWPAD		002522			USWPAD:	.=.+4	;BEGINNING OF SWAP AREA
DTYIBF		002526			DTYIBF:	.=.+4	;BEGINING OF TYI BUFFER ON DISK
DEDTBF		002532			DEDTBF:	.=.+4	;BEGINNG OF EDIT BUFFER
DHDDIR		002536			DHDDIR:	.=.+4	;BEGINING OF DISK DIRECTORY(OF HOME DISK)
UNXTDB		002542			UNXTDB:	.=.+4	;NEXT DISK BLOCK AWAILABLE
UDSKAD		002546			UDSKAD:	.=.+4	;RANDOM DISK STORAGE AREA
					
UBLKLUBLK		000060			LUBLK==.-UBLK
LUBLKL		000060			L==LUBLK
					
MNUSRSLUBLK		003426				.=.+<MNUSRS-1*LUBLK>
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 18
	SYSTEM 327	PAGE 15 	SYSTEM VARIABLES (ONE COPY PER USER)

						;NODE TYPES
SFUN		000000			SFUN==000000
INFIX		010000			INFIX==10000
UFUN		020000			UFUN==20000
UVAR		030000			UVAR==30000
TYP1		040000			TYP1==40000
					;THE FOLLOWING TYPES ARE NEEDED IN THIS ORDER BY THE CONVERT ROUTINES
SSTR		070000			SSTR==70000	;NOT VALID TOKEN TYPE
SNP		100000			SNP==100000
ATOM		110000			ATOM==110000
SNUM		120000			SNUM==120000	;NOT A VALID TOKEN TYPE
LNUM		130000			LNUM==130000
LSTR		140000			LSTR==140000
RNUM		150000			RNUM==150000
LIST		170000			LIST==170000
LISTSENT		170000			SENT==LIST
					;END OF ORDER
					
						;BINDING TYPES
FBIND		020000			FBIND==20000
VBIND		030000			VBIND==30000
SFBIND		120000			SFBIND==120000	;SWAPPED OUT FUNCTION BINDING
SVBIND		130000			SVBIND==130000	;SWAPPED OUT  VARIABLE BINDING
					
					
						;SOE FLAGS SEE OLE MACRO STUFF
VNAF		002000			VNAF==2000
					
						;READ FLAGS SEE DTBL:
DOTF		000400			DOTF==400	;IN LEFT HALF
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 19
	SYSTEM 327	PAGE 16 	SYSTEM VARIABLES (ONE COPY PER USER)

						;EVAL FLAGS - PUSHED BY PEVAL
PTLPF		000001			PTLPF==1	;PREVIOUS TOKEN WAS LEFT PAREN
RTF		000002			RTF==2	;REPEAT TOKEN
CRF		000004			CRF==4	;CURRENT TOKEN IS CR
EDITF		000010			EDITF==10	;EDIT FLAG
TOF		000020			TOF==20	;TO FLAG
IFF		000040			IFF==40	;IF FLAG
TPTF		000400			TPTF==400	;THIS PROCEDURE TRACED FLAG	;MUST BE IN LEFT HALF
					
						;EVAL FLAGS2 - NOT PUSHED
TESTF		000001			TESTF==1
TRACEF		000002			TRACEF==2
PQF		000004			PQF==4		;PRINT QUOTE FLAG - FOR PRSTR
DPQF		000010			DPQF=10	;DONT " " "
MMF		000020			MMF==20	;MULTIPLE MAKE FLAG
ERRF		000040			ERRF==40	;ERROR FLAG
DSAMFL		001000			DSAMFL==1000	;DISK ALMOST FULL
PPNAIF		002000			PPNAIF==2000	;P PDL NOT ALL THE WAY IN
SPNAIF		004000			SPNAIF==4000	;S PDL NOT ALL THE WAY IN
					
						;TEMP FLAGS IN TFLAGS
TF6		000001			TF6==1
TF1		000100			TF1==100	
TF2		000200			TF2==200
TF3		000400			TF3==400
TF4		010000			TF4==10000
TF5		020000			TF5==20000
					
						;FLAGS IN LEFT HALF OF 1ST NODE OF SWAPPED PROC LIST
					; TPTF==400	DEFINED ABOVE
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 20
	SYSTEM 327	PAGE 17 	USER VARIABLES

						.STITL USER VARIABLES
					
UVBLK		003426			UVBLK=.
					;BELOW RELATIVE TO BASE OF SLOT WHEN USER NOT RUNNING
UABNODESPNODESPSLOT1	003426	004626			UAB:	NODESP-SLOT1	;BASE OF CURRENT USER'S NODE SPACE
SISISSLOT1	003430	002010			S:	IS-SLOT1
UPDLPIPIPSLOT1	003432	001204			UPDLP:	IP-SLOT1	;USER PDL POINTER(ONLY WHEN USER NOT RUNNING)
SPOPLISISSLOT1	003434	002010			SPOPL:	IS-SLOT1
SPUSHLISISSLOT1	003436	001264			SPUSHL:	IS-SLOT1-524
SSWPADISISSLOT1	003440	001412			SSWPAD:	IS-SLOT1-400+4-2
SPBASEISISSLOT1	003442	002010			SPBASE:	IS-SLOT1
SPRBAOISISSLOT1	003444	002010			SPRBAO:	IS-SLOT1	;SAME FOR S  :   S-SPRBAO = REL ADDR OF TOP THING ON S PDL
PPOPLIPIPSLOT1	003446	001204			PPOPL:	IP-SLOT1
PPUSHLIPIPSLOT1	003450	000460			PPUSHL:	IP-SLOT1-524
PSWPADIPIPSLOT1	003452	000606			PSWPAD:	IP-SLOT1-400+4-2
PPBASEIPIPSLOT1	003454	001204			PPBASE:	IP-SLOT1
PRBAOIPIPSLOT1	003456	001204			PRBAO:	IP-SLOT1	;PDL REL BASE ADDR OFFSET
SUHCTUHCTUHCTSLOT1	003460	002014			SUHCT:	UHCT-SLOT1	;START OF USER HASH CODE TABLE
GCBITSDBUFDBUFSLOT1	003462	002222			GCBITS:	DBUF-SLOT1
BASEUS	003464	000000			BASEUS:	0	;BASE OF USER SLOT(MUST BE LAST RELOCATED)
UVREND		003466			UVREND=.	;END OF VARIABLES TO BE RELOCATED
					;BELOW ARE NOT RELATIVE
UAC	003466	000000			UAC:	0	;EAE AC
UMQ	003470	000000			UMQ:	0	;EAE MQ
USR	003472	000000			USR:	0	;EAE STATUS REGISTER
RELA		000001			RELA==1
RELB		000002			RELB==2
RELC		000004			RELC==4
RELD		000010			RELD==10
RELE		000020			RELE==20
ACRELF	003474	000000			ACRELF:	0
NNGC	003476	000000			NNGC:	0	;NUMBER OF NODES GARBAGE COLLECTED
ERRINA	003500	177777			ERRINA:	-1	;ADDRESS OF SWAPED IN ERROE ROUTINE
SSAVEA	003502	000000			SSAVEA:	0	;PLACE S PDL SAVED WHEN MARKING SWAPED OUT PDL
	003504	000000				0
FREESOFNSOFN	003506	000343			FREE:	SOFN	;START OF FREE NODES
TOPS	003510	000000			TOPS:	0	;GC MARK FROM HERE IF NON 0
TOPS1	003512	000000			TOPS1:	0	;   "
GCP1	003514	000000			GCP1:	0
GCP2	003516	000000			GCP2:	0
GCPREV	003520	000000			GCPREV:	0
						;THE FOLLOWING ARE PUSHED BY PEVAL
CPP	003522	000000			CPP:	0	;CURRENT PROCEDURE POINTER
CPSN	003524	000000			CPSN:	0	;C.P. SWAP NO.
CLN	003526	000000			CLN:	0	;CURRENT LINE NO.
CLP	003530	000000			CLP:	0	;CURRENT LINE POINTER - GOOD IF CPSN'S AGREE
CLGN	003532	000000			CLGN:	0	;CURRENT LINE GENERATION NO.
CTN	003534	000000			CTN:	0	;CURRENT TOKEN NO.
CTP	003536	000000			CTP:	0	;CURRENT TOKEN POINTER
FUNLEV	003540	000000			FUNLEV:	0	;FUNCTION LEVEL
IFLEV	003542	000000			IFLEV:	0	;IF LEVEL
FLAGS	003544	000000			FLAGS:	0	;FLAG WORD
CSPDLP	003546	000000			CSPDLP:	0	;CURRENT S PDL PTR AFTER LAST PEVAL PUSH
CPDLP	003550	000000			CPDLP:	0	;CURRENT PDL PTR AFTER LAST PEVAL PUSH
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 21
	SYSTEM 327	PAGE 17.1 	USER VARIABLES

						;END OF PEVAL PUSHES EXCEPT REL. S, CO AND CO+2 ARE ALSO PUSHED
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 22
	SYSTEM 327	PAGE 18 	USER VARIABLES

					
						;THE FOLLOWING ARE PUSHED (SOMETIMES) BY EVAL
CO	003552	000000			CO:	0	;CURRENT OPERATOR
	003554	000000				0
NOR	003556	000000			NOR:	0	;NO. OF OPERANDS STILL NEEDED BEFORE CO CAN BE EXECUTED
						;END OF EVAL PUSHES
COF	003560	000000			COF:	0	;CURRENT OPERATOR FLAGS
LO	003562	000000			LO:	0	;LAST OPERATOR
	003564	000000				0
CT	003566	000000			CT:	0	;CURRENT TOKEN
	003570	000000				0	; "
RDFLAG	003572	000000			RDFLAG:	0	;FOR READ
LISTBD	003574	000000			LISTBD:	0	;LIST BUILD DEPTH
PSTOPR	003576	000000			PSTOPR:	0	;RETURN ADDR FOR PSTOP
UNGRAB	003600	000000			UNGRAB:	0	;FOR .GRAB. PUTTING A NODE ADDR HERE MEANS THAT IT
							;WILL BE THE NEXT GRABBED.  GC WILL MARK FROM "UNGRAB"
							;USE WITH CAUTION!!
TEMP	003602	000000			TEMP:	0
TFLAGS	003604	000000			TFLAGS:	0	;TEMP FLAGS (ALL TFN'S SHOULD EVENTALLY POINT HERE)
NCHR	003606	000000			NCHR:	0	;FOR BLST
TOPRNM	003610	000000			TOPRNM:	0	;PTR TO UOE OF PROC. BEING "TO"'ED
FNLLP	003612	000000			FNLLP:	0	;FIRST NODE OF LIST OF LINE POINTERS (FOR "TO")
FLAGS2	003614	000000			FLAGS2:	0	;EVAL FLAGS - NOT PUSHED BY PEVAL
ALTL	003616	000000			ALTL:	0	;TEST LINE POINTER
LINENO	003620	000000			LINENO:	0	;FOR TEST MODE
CHI	003622	000000			CHI:	0	;FOR TYI
PRMTCH	003624	000077			PRMTCH:	'?	;PROMPT CHAR
GNCN	003626	000000			GNCN:	0	;"GET NEXT CHAR" NODE
	003630	000000				0
NBKTS	003632	000000			NBKTS:	0	;FOR RDSTR
PCHRTYOTYO	003634	020304			PCHR:	TYO	;PLACE WHERE OUTPUT CHARS GO (TYO, BLST, ...)
DBITTB		003676			DBITTB:	.=.+40
DBITBE		003674			DBITBE=.-2
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 23
	SYSTEM 327	PAGE 19 	USER VARIABLES

					
					
					;VARIABLES AND CONSTANTS FOR DISPLAY SYSTEM
					
					;THESE MUST BE IN THIS ORDER
DORBEG		003676			DORBEG==.	;MARKS BEGINNING OF THESE VARIABLES
CURX.WORD	003676	000000		
	003700	000000			CURX:	.WORD 0,0	;CURX = CURRENT X POSITION
					;			THE FIREST WORD IS THE INTEGER PART
					;			THE SECOND WORD IS THE FRACTION PART
CURY.WORD	003702	000000		
	003704	000000			CURY:	.WORD 0,0	;CURY = CURRENT Y POSITION
CURA	003706	000000			CURA:	0	;CURA = THE CURRENT ANGLE
OLDX	003710	000000			OLDX:	0	;CONTAINS CURX AT THE TIME OF LAST NEW SNAP
OLDY	003712	000000			OLDY:	0	;CONTAINS CURY AT THE TIME OF LAST NEW SNAP
OLDIR.BYTE	003714	   000			OLDIR:	.BYTE 0	;CONTAINS DIREC WHEN DR.LIN LAST CALLED
DFLAGS.BYTE	003715	   000			DFLAGS:	.BYTE 0
.EVEN		003716				.EVEN
					
DOREND		003716			DOREND==.	;MARKS END OF THESE VARIABLES
					;END OF ORDER
					
STB	003716	000000			STB:	0	;STATIC AREA BOTTOM
STT	003720	000000			STT:	0	;STATIC AREA TOP.POINTS TO TOP OF STATIC DISPLAY AREA
DYB	003722	000000			DYB:	0	;DYNAMIC BOTTOM.  POINTS TO BOT OF DY AREA
DYR	003724	000000			DYR:	0	;ROVING POINTER USED BY DISPLAY STORAGE ALLOCATIN ROUTINES
DYT	003726	000000			DYT:	0	;POINTER TO DYNAMIC AREA TOP
TUB	003730	000000			TUB:	0	;POINTER TO TURTLE AREA BOTTOM
SNLIST	003732	000000			SNLIST:	0	;POINTER TO SNAP LIST
SNABOT	003734	000000			SNABOT:	0	;BOTTOM OF CURRENT SNAP
SINA	003736	000000			SINA:	0	;CONTAINS SIN OF THE CURENT ANGLE
COSA	003740	000000			COSA:	0	;CONTAINS COS OF THE CURENT ANGLE
DIREC	003742	000000			DIREC:	0	;CONTAINS DIRECTION CODE FRO CURRENT ANGLE
BYCNT	003744	000000			BYCNT:	0	;KEEPS TRACK OF LAST BIT IN DISPLAY LIST
PUSHJT	003746	000000			PUSHJT:	0	;DISPLAY PUSHJ TO TURTLE
DISBIT	003750	000000			DISBIT:	0	;HAS A BIT SET CORRESPONDING TO DISPLAY SLOT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 24
	SYSTEM 327	PAGE 20 	USER VARIABLES

					
					
					;THIS MUST BE AT THE END
MAXELN		000060			MAXELN==60
ERRBUFMAXELN		004032			ERRBUF:	.=.+MAXELN
UVBLKLUVBLK		000404			LUVBLK==.-UVBLK
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 25
	SYSTEM 327	PAGE 21 	USER VARIABLES

					
					
					;DISPLAY COMMANDS
ADDX		150000			ADDX==150000
ADDY		144000			ADDY==144000
ADDXADDYADDXY		154000			ADDXY==ADDX!ADDY
DPUSHJ		100000			DPUSHJ==100000
DPOP		140200			DPOP==140200
DPOPJ		140100			DPOPJ==140100
DSTOP		140400			DSTOP==140400
DRSTXY		143000			DRSTXY==143000	;RESET X AND Y TO 0
					
TURSIZ		000004			TURSIZ==4	;THE SIZE OF THE TURTLE
					
					;FLAGS USED FOR DFLAGS
PENUF		000001			PENUF==1
HOOKF		000002			HOOKF==2
HIDETF		000004			HIDETF==4
TURTF		000010			TURTF==10
TEMF		000020			TEMF==20
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 26
	SYSTEM 327	PAGE 22 	SYSTEM OBLIST

						.STITL SYSTEM OBLIST
					
VARIAB		000004			VARIABLE==4	;FOR VARIABLE NUMBER OF ARGUMENTS
$		177777			$==-1	;DEFAULT INDICATOR IN OLE
YINFIX		000020			YINFIX==20	;"YES INFIX" FLAG FOR OLE
					;ARGUMENT TYPES
					; 0 ==== ANYTHING
ANYT		000000			ANYT==0
ATOMT		000001			ATOMT==1
ATOMTWORDT		000001			WORDT==ATOMT	;A WORD IS THE SAME AS AN ATOM
NUMT		000002			NUMT==2
SENTT		000004			SENTT==4
SNAPT		000010			SNAPT==10
LISTT		000020			LISTT==20
ATOMTNUMTSENTTLISTTANSLT		000027			ANSLT==ATOMT+NUMT+SENTT+LISTT	;ALL BUT SNAP
					
					;SOE FIELDS		1.==RIGHT BYTE (EVEN ADDR) 2.==LEFT BYTE
						;		1.1==RIGHT BIT  2.8==LEFT BIT
						;1.1-1.8 INPUT TYPE ACCEPTABLE BY THIS PROCEDURE
						;2.1-2.2 "STANDARD" NO. OF INPUT ARGS
						;2.3 VNAF 1==CAN TAKE "ANY" NO. OF ARGS
						;2.5 INFIX 1==THIS IS AN INFIX PROCEDURE
						;2.6-2.8 PRECEDENCE
					
.MACRNGPTWO						.MACR NGPTWO A
						.XLIST
						NGP2=NGP2*2
						FOO==A
						.IFLE NGP2-FOO
						NGPTWO A
						.ENDC
						.LIST
						.ENDM
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 27
	SYSTEM 327	PAGE 23 	SYSTEM OBLIST

					
					
					
					
					;****************************************************
					;MACRO TO DEFINE SYSTEM OBLIST ELEMENTS
					;THE PARAMETERS ARE:
					;1)	THE PRINT NAME
					;2)	THE NAME OF THE POINTER TO THE OBLIST ELEMENT.
					;	THIS PARAMETER CAN BE $ IF YOU DON'T CARE ABOUT THE
					;	NAME, OR IF YOU WANT THE NAME TO BE $PNAME
					;3)	THE ADDRESS OF THE PROGRAM
					;	THIS PARAMETER CAN BE $ IF THE NAME OF THE PROGRAM
					;	IS THE SAME AS THE PRINT NAME
					;4)	THE PRECEDENCE.  A NUMBER FROM 0-7
					;5)	THE TYPE OF PERMISSIBLE ARGUMENTS
					;	IF IT CAN TAKE MORE THAN ONE KIND OF ARGUMENT
					;	ADD UP ALL THE KINDS.  EG NUMT+LISTT+ATOMT
					;6)	THE STANDARD NUMBER OF ARGUMENTS + THE SYMBOL "VARIABLE"
					;	IF IT CAN ALSO TAKE A VARIABLE NUMBER OF ARGUMENTS
					;7)	THE SYMBOL "YINFIX" IF THIS IS AN INFIX OPERATOR
					
					;
					;IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT IMPORTANT
					
					;ANY PARAMETER THAT YOU WANT TO BE 0 YOU CAN LEAVE OUT
					;ANY PARAMETER YOU DON'T CARE ABOUT YOU CAN LEAVE OUT.
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 28
	SYSTEM 327	PAGE 24 	SYSTEM OBLIST

					
					
					
.MACROLE					.MACR OLE PNAME,OBNAME,ADDR,PRECED,ARGTYP,NUMARG,QINFIX
						.XLIST
						OBX0=OBSTRT-.	;CHECK TO SEE THAT THE OBLIST DOESN'T
								;OVERWRITE THE OBLIST ELEMENTS
						.IF2
						.IFNDF OBNAME
						OBNAME=0	;TO AVOID UNDEFINED SYMBOL ERROR
						.ENDC
						.ENDC
						.IFG	OBX0
						OBADD2	;POINTER TO OBLIST ELEMENT
						OBADD1=.
						.=OBADD2
						.IFL OBNAME+0	;$ HAS BEEN DEFINED TO BE -1
						$'PNAME=.
						.ENDC
						.IFGE OBNAME+0
						$'OBNAME=.
						.ENDC
					
					
						.BYTE ARGTYP+0
						OBX1=NUMARG+0
						OBX2=PRECED+0*40
						.BYTE QINFIX+OBX1+OBX2
					
						.IFL ADDR+0
						PNAME	;ADDRESS OF PROGRAM
						.ENDC
						.IFGE ADDR+0
						ADDR+0
						.ENDC
					
						TEXT ^\PNAME\
					
						OBADD2=.
						.=OBADD1
						.ENDC
					
						.IFLE	OBX0
						.LIST
						********
						NUMOBS IS LESS THAN THE NUMBER OF SYSTEM OBLIST ELEMENTS.
						THEREFORE, YOU ARE OVERWRITING THE SYSTEM OBLIST
						********
						.XLIST
						.ENDC
						.LIST
					.ENDM
.MACRCDM						.MACR CDM A
					A==<.-SOBLSU>/2
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 29
	SYSTEM 327	PAGE 24.1 	SYSTEM OBLIST

						.ENDM
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 30
	SYSTEM 327	PAGE 25 	SYSTEM OBLIST

					;THE SYSTEM OBLIST
						;ADD ITEMS (EXCEPT FOR SPECIAL CHAR ITEMS) ALPHABETICALLY.
					
					
					;****
NUMOBS		000133			NUMOBS==91.	;THE NUMBER OF OBLIST ELEMENTS
					;****	WHENEVER YOU ADD AN OBLIST ELEMENT, MAKE SURE YOU INCREMENT
					;****	NUMOBS !!!!!!
SOOMXSOBLSU	004032	004264			SOOMX:	2+SOBLSU	;2 > THAN HIGHEST ADDR USED IN SYS OBLIST
NGP2		000001				NGP2==1
NGPTWO						NGPTWO SOBLSU-SOBLST+2
.XLISTNGP2NGP2SOBLSUSOBLSTFOO.IFLENGP2FOONGPTWO.XLISTNGP2NGP2SOBLSUSOBLSTFOO.IFLENGP2FOONGPTWO.XLISTNGP2NGP2SOBLSUSOBLSTFOO.IFLENGP2FOONGPTWO.XLISTNGP2NGP2SOBLSUSOBLSTFOO.IFLENGP2FOONGPTWO.XLISTNGP2NGP2SOBLSUSOBLSTFOO.IFLENGP2FOONGPTWO.XLISTNGP2NGP2SOBLSUSOBLSTFOO.IFLENGP2FOONGPTWO.XLISTNGP2NGP2SOBLSUSOBLSTFOO.IFLENGP2FOONGPTWO.XLISTNGP2NGP2SOBLSUSOBLSTFOO.IFLENGP2FOO.LIST.LIST.LIST.LIST.LIST.LIST.LIST.LISTSOBP2NGP2NGP2	004034	000400			SOBP2:	NGP2	;( SMALLEST POWER OF 2 >= NUMOBS )*2
OBADD1		004036			OBADD1=.
NUMOBSOBADD2		004324			OBADD2=.+<2*NUMOBS>
OBADD2OBSTRT		004324			OBSTRT=OBADD2	;WHERE THE SYSTEM OBLIST ELEMENTS START
					
SOBLSTOLE					SOBLST:	OLE AND,$
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$AND.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL.IFGETEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE BACK,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$BACK.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$BACKBACK.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE BUTFIRST,$,$,2,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$BUTFI.IFGE$.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFL$BUTFIRBUTFIR.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE BUTLAST,$,$,2,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$BUTLA.IFGE$.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFL$BUTLASBUTLAS.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE COUNT,$,$,2,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$COUNT.IFGE$.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFL$COUNTCOUNT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE CTF,$,CLRSTF,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$CTF.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLCLRSTF.IFGECLRSTFCLRSTFCLRSTFTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE DIFFERENCE,$,DIFF,2,NUMT,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$DIFFE.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFLDIFF.IFGEDIFFDIFFDIFFTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE DISPLAY,$,$,2,LISTT+SNAPT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$DISPL.IFGE$.BYTELISTTSNAPTOBX1OBX2.BYTEOBX1OBX2.IFL$DISPLADISPLA.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE DO,$,$,2,,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$DO.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$DODO.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE EDIT,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$EDIT.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$EDITEDIT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE ELSE,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$ELSE.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$ELSEELSE.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE EMPTYP,$,$,2,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$EMPTY.IFGE$.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFL$EMPTYPEMPTYP.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE END,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$END.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$ENDEND.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE EQUAL,$,$,2,NUMT,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$EQUAL.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$EQUALEQUAL.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE ERASETRACE,$,ETRACE,2,,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$ERASE.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLETRACE.IFGEETRACEETRACEETRACETEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE FIRST,$,$,2,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$FIRST.IFGE$.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFL$FIRSTFIRST.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE FORWARD,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$FORWA.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$FORWARFORWAR.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE FPRINT,$,$,2,,1+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$FPRIN.IFGE$.BYTEVARIABOBX1OBX2.BYTEOBX1OBX2.IFL$FPRINTFPRINT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE FPUT,$,$,2,,2+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$FPUT.IFGE$.BYTEVARIABOBX1OBX2.BYTEOBX1OBX2.IFL$FPUTFPUT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE GO,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$GO.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$GOGO.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE GREATER,$,GREATR,2,NUMT,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$GREAT.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFLGREATR.IFGEGREATRGREATRGREATRTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE HEADING,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$HEADI.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$HEADINHEADIN.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE HERE,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$HERE.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$HEREHERE.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE HIDETURTLE,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$HIDET.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$HIDETUHIDETU.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE HOME,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$HOME.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$HOMEHOME.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE IF,$,$,2,WORDT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$IF.IFGE$.BYTEWORDTOBX1OBX2.BYTEOBX1OBX2.IFL$IFIF.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE KILLDISPLAY,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$KILLD.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$KILLDIKILLDI.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LAMPOFF,LPOFF,$,2
.XLISTOBSTRTOBX0.IF2.IFNDFLPOFFLPOFF.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLLPOFF.IFGELPOFF$LPOFF.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$LAMPOFLAMPOF.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LAMPON,LPON,$,2
.XLISTOBSTRTOBX0.IF2.IFNDFLPONLPON.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLLPON.IFGELPON$LPON.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$LAMPONLAMPON.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LAST,$,$,2,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$LAST.IFGE$.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFL$LASTLAST.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LEFT,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$LEFT.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$LEFTLEFT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LESS,$,$,2,NUMT,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$LESS.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$LESSLESS.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LEVEL,$,FLEV,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$LEVEL.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLFLEV.IFGEFLEVFLEVFLEVTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LIST,$,LIST.P,2,,2+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$LIST.IFGE$.BYTEVARIABOBX1OBX2.BYTEOBX1OBX2.IFLLIST.P.IFGELIST.PLIST.PLIST.PTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LISTP,$,$,2,,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$LISTP.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$LISTPLISTP.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE LPUT,$,$,2,,2+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$LPUT.IFGE$.BYTEVARIABOBX1OBX2.BYTEOBX1OBX2.IFL$LPUTLPUT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE MAKE,$,$,2,,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$MAKE.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$MAKEMAKE.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE MOD,$,$,2,NUMT,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$MOD.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$MODMOD.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 31
	SYSTEM 327	PAGE 25.1 	SYSTEM OBLIST

						OLE NEWSNAP,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$NEWSN.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$NEWSNANEWSNA.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE NUMBERP,$,NUMBP,2,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$NUMBE.IFGE$.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFLNUMBP.IFGENUMBPNUMBPNUMBPTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE OF,$
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$OF.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL.IFGETEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE OUTPUT,$,$,2,0,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$OUTPU.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$OUTPUTOUTPUT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE PENDOWN,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$PENDO.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$PENDOWPENDOW.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE PENUP,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$PENUP.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$PENUPPENUP.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE PRINT,$,$,2,ANSLT,1+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$PRINT.IFGE$.BYTEANSLTVARIABOBX1OBX2.BYTEOBX1OBX2.IFL$PRINTPRINT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE PRODUCT,$,PROD,2,NUMT,2+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$PRODU.IFGE$.BYTENUMTVARIABOBX1OBX2.BYTEOBX1OBX2.IFLPROD.IFGEPRODPRODPRODTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE QUOTIENT,$,DIVDE,2,NUMT,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$QUOTI.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFLDIVDE.IFGEDIVDEDIVDEDIVDETEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE REQUEST,$,RQUEST,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$REQUE.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLRQUEST.IFGERQUESTRQUESTRQUESTTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE RIGHT,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$RIGHT.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$RIGHTRIGHT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE RUG,$,RUNRUG
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$RUG.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLRUNRUG.IFGERUNRUGRUNRUGRUNRUGTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SENTENCE,$,$,2,ANYT,2+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SENTE.IFGE$.BYTEANYTVARIABOBX1OBX2.BYTEOBX1OBX2.IFL$SENTENSENTEN.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SETHEADING,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SETHE.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$SETHEASETHEA.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SETTURTLE,$,$,2,SENTT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SETTU.IFGE$.BYTESENTTOBX1OBX2.BYTEOBX1OBX2.IFL$SETTURSETTUR.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SETX,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SETX.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$SETXSETX.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SETXY,$,$,2,NUMT,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SETXY.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$SETXYSETXY.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SETY,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SETY.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$SETYSETY.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SHOW,$,$,2,,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SHOW.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$SHOWSHOW.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SHOWTURTLE,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SHOWT.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$SHOWTUSHOWTU.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SNAP,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SNAP.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$SNAPSNAP.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE STARTDISPLAY,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$START.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$STARTDSTARTD.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE STF,$,SETSTF,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$STF.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLSETSTF.IFGESETSTFSETSTFSETSTFTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE STOP,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$STOP.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$STOPSTOP.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE SUM,$,$,2,NUMT,2+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$SUM.IFGE$.BYTENUMTVARIABOBX1OBX2.BYTEOBX1OBX2.IFL$SUMSUM.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE THEN,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$THEN.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$THENTHEN.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE TO,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$TO.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$TOTO.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE TOOT,$,$,2,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$TOOT.IFGE$.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFL$TOOTTOOT.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE TRACE,$,$,2,,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$TRACE.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$TRACETRACE.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE TYPE,$,$,2,ANSLT,1+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$TYPE.IFGE$.BYTEANSLTVARIABOBX1OBX2.BYTEOBX1OBX2.IFL$TYPETYPE.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE VERSION,$,VERSN,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$VERSI.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLVERSN.IFGEVERSNVERSNVERSNTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE WIPE,$,$,2,ATOMT+NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$WIPE.IFGE$.BYTEATOMTNUMTOBX1OBX2.BYTEOBX1OBX2.IFL$WIPEWIPE.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE WIPECLEAN,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$WIPEC.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$WIPECLWIPECL.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE WORD,$,$,2,ANYT,2+VARIABLE
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$WORD.IFGE$.BYTEANYTVARIABOBX1OBX2.BYTEOBX1OBX2.IFL$WORDWORD.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE WORDP,$,$,2,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$WORDP.IFGE$.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFL$WORDPWORDP.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE XCOR,$,$,2
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$XCOR.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$XCORXCOR.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTSOBLSUOLE					SOBLSU:	OLE YCOR,$,$,2	;MUST BE ON LAST ENTRY BEFORE SINGLE CHAR ENTRIES
.XLISTOBSTRTOBX0.IF2.IFNDF$.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFL$$YCOR.IFGE$.BYTEOBX1OBX2.BYTEOBX1OBX2.IFL$YCORYCOR.IFGE$TEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE ^\!\,LLPAR,LLPAR,1,ANYT,1
.XLISTOBSTRTOBX0.IF2.IFNDFLLPAR.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLLLPAR.IFGELLPAR$LLPAR.BYTEANYTOBX1OBX2.BYTEOBX1OBX2.IFLLLPAR.IFGELLPARLLPARLLPARTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM HAS$
SOBLSUHAS$OLE						OLE ^\#\,PROC,PROC,6,ATOMT,1
.XLISTOBSTRTOBX0.IF2.IFNDFPROC.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLPROC.IFGEPROC$PROC.BYTEATOMTOBX1OBX2.BYTEOBX1OBX2.IFLPROC.IFGEPROCPROCPROCTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM LP$
SOBLSULP$OLE						OLE ^\(\,LPAR,LPAR,1,,1
.XLISTOBSTRTOBX0.IF2.IFNDFLPAR.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLLPAR.IFGELPAR$LPAR.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLLPAR.IFGELPARLPARLPARTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM RP$
SOBLSURP$OLE						OLE ^\)\,RPAR,RPAR,1
.XLISTOBSTRTOBX0.IF2.IFNDFRPAR.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLRPAR.IFGERPAR$RPAR.BYTEOBX1OBX2.BYTEOBX1OBX2.IFLRPAR.IFGERPARRPARRPARTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM PRD$
SOBLSUPRD$OLE						OLE ^\*\,STAR,PROD,5,NUMT,2+VARIABLE,YINFIX
.XLISTOBSTRTOBX0.IF2.IFNDFSTARSTAR.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLSTAR.IFGESTAR$STAR.BYTENUMTVARIABOBX1OBX2.BYTEYINFIXOBX1OBX2.IFLPROD.IFGEPRODPRODPRODTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM PLU$
SOBLSUPLU$OLE						OLE ^\+\,PLUS,SUM,4,NUMT,2+VARIABLE,YINFIX
.XLISTOBSTRTOBX0.IF2.IFNDFPLUSPLUS.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLPLUS.IFGEPLUS$PLUS.BYTENUMTVARIABOBX1OBX2.BYTEYINFIXOBX1OBX2.IFLSUM.IFGESUMSUMSUMTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE ^\+.\,UPLUS,UPLUS,6,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDFUPLUS.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLUPLUS.IFGEUPLUS$UPLUS.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFLUPLUS.IFGEUPLUSUPLUSUPLUSTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM MIN$
SOBLSUMIN$OLE						OLE ^\-\,MINUS,DIFF,4,NUMT,2,YINFIX
.XLISTOBSTRTOBX0.IF2.IFNDFMINUSMINUS.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLMINUS.IFGEMINUS$MINUS.BYTENUMTOBX1OBX2.BYTEYINFIXOBX1OBX2.IFLDIFF.IFGEDIFFDIFFDIFFTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTOLE						OLE ^\-.\,UMINS,UMINS,6,NUMT,1
.XLISTOBSTRTOBX0.IF2.IFNDFUMINS.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLUMINS.IFGEUMINS$UMINS.BYTENUMTOBX1OBX2.BYTEOBX1OBX2.IFLUMINS.IFGEUMINSUMINSUMINSTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM DIV$
SOBLSUDIV$OLE						OLE ^\/\,SLSH,DIVDE,5,NUMT,2,YINFIX
.XLISTOBSTRTOBX0.IF2.IFNDFSLSHSLSH.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLSLSH.IFGESLSH$SLSH.BYTENUMTOBX1OBX2.BYTEYINFIXOBX1OBX2.IFLDIVDE.IFGEDIVDEDIVDEDIVDETEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 32
	SYSTEM 327	PAGE 25.2 	SYSTEM OBLIST

						CDM DOTS$
SOBLSUDOTS$OLE						OLE ^\:\,DOTS,DOTS,6,ATOMT,1
.XLISTOBSTRTOBX0.IF2.IFNDFDOTS.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLDOTS.IFGEDOTS$DOTS.BYTEATOMTOBX1OBX2.BYTEOBX1OBX2.IFLDOTS.IFGEDOTSDOTSDOTSTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM LSS$
SOBLSULSS$OLE						OLE ^\<\,LESS,LESS,3,NUMT,2,YINFIX
.XLISTOBSTRTOBX0.IF2.IFNDFLESS.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLLESS.IFGELESS$LESS.BYTENUMTOBX1OBX2.BYTEYINFIXOBX1OBX2.IFLLESS.IFGELESSLESSLESSTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM EQL$
SOBLSUEQL$OLE						OLE ^\=\,EQUAL,EQUAL,3,NUMT,2,YINFIX
.XLISTOBSTRTOBX0.IF2.IFNDFEQUAL.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLEQUAL.IFGEEQUAL$EQUAL.BYTENUMTOBX1OBX2.BYTEYINFIXOBX1OBX2.IFLEQUAL.IFGEEQUALEQUALEQUALTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM GTR$
SOBLSUGTR$OLE						OLE ^\>\,GRTR,GREATR,3,NUMT,2,YINFIX
.XLISTOBSTRTOBX0.IF2.IFNDFGRTRGRTR.IFGOBX0OBADD2OBADD2OBADD1OBADD2.IFLGRTR.IFGEGRTR$GRTR.BYTENUMTOBX1OBX2.BYTEYINFIXOBX1OBX2.IFLGREATR.IFGEGREATRGREATRGREATRTEXT.XLIST.ASCII.BYTE.EVEN.LISTOBADD2OBADD1.IFLEOBX0.LISTCDM						CDM BKSL$
SOBLSUBKSL$					;	OLE ^/^/,BKSL,MOD,5,NUMT,2,YINFIX
					
OBADD2		006142			.=OBADD2
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 33
	SYSTEM 327	PAGE 26 	SYSTEM OBLIST

					
.STITL						.STITLE	DISPATCH TABLE (ENGLISH)
					;FLAGS--
					;FSF -- SPECIAL ON INPUT
					;FOF -- SPECIAL ON OUTPUT
					;FQF -- QUOTING CHARACTER
					;SEPF -- SEPARATOR CHARACTER
					;WSF -- WORD SEPARATOR
					;NNUMF -- NOT A NUMBER
					;OPERF -- OPERATOR
					
						;FLAGS--BYTE ONE		NUMBER--BYTE TWO
					;	FSF FOF FQF SEPF WSF NNUMF OPERF	#
					;^@	.   .   .   .    .   NNUMF .    	.
					;^A	.   .   .   .    .   NNUMF .    	.
					;^B	.   FOF .   .    .   NNUMF .    	0
					;^C	FSF .   .   .    .   NNUMF .    	0
					;^D	FSF .   .   .    .   NNUMF .    	2
					;^E	.   .   .   .    .   NNUMF .    	.
					;^F	.   .   .   .    .   NNUMF .    	.
					;^G	FSF FOF .   .    .   NNUMF .    	4
					;^H	.   FOF .   .    .   NNUMF .    	2
					;^I	.   FOF .   SEPF WSF NNUMF .    	10
					;^J	.   FOF .   SEPF WSF NNUMF .    	12
					;^K	.   FOF .   SEPF WSF NNUMF .    	14
					;^L	.   FOF .   SEPF WSF NNUMF .    	16
					;^M	FSF FOF .   SEPF WSF NNUMF .    	6
					;^N	FSF .   .   .    .   NNUMF .    	10
					;^O	.   .   .   .    .   NNUMF .    	.
					;^P	.   .   .   .    .   NNUMF .    	.
					;^Q	FSF .   .   .    .   NNUMF .    	12
					;^R	FSF .   .   .    .   NNUMF .    	14
					;^S	FSF .   .   .    .   NNUMF .    	16
					;^T	.   .   .   .    .   NNUMF .    	.
					;^U	.   .   .   .    .   NNUMF .    	.
					;^V	.   .   .   .    .   NNUMF .    	.
					;^W	FSF .   .   .    .   NNUMF .    	20
					;^X	FSF .   .   .    .   NNUMF .    	22
					;^Y	FSF .   .   .    .   NNUMF .    	24
					;^Z	FSF .   .   .    .   NNUMF .    	26
					;^[	.   .   .   .    .   NNUMF .    	.
					;^\	.   .   .   .    .   NNUMF .    	.
					;^]	.   .   .   .    .   NNUMF .    	.
					;^^	.   .   .   .    .   NNUMF .    	.
					;^_	.   .   .   .    .   NNUMF .    	.
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 34
	SYSTEM 327	PAGE 27 	DISPATCH TABLE (ENGLISH)

					
					;SP	.   .   .   SEPF WSF NNUMF .    	.
					;!	.   .   .   .    .   NNUMF .    	.
					;"	.   .   .   SEPF .   NNUMF .    	.
					;#	.   .   .   SEPF .   NNUMF OPERF	HAS$
					;$	.   .   .   .    .   NNUMF .    	.
					;%	.   .   .   .    .   NNUMF .    	.
					;&	.   .   .   .    .   NNUMF .    	.
					;'	.   .   .   SEPF .   NNUMF .    	.
					;(	.   .   .   SEPF .   NNUMF OPERF	LP$
					;)	.   .   .   SEPF .   NNUMF OPERF	RP$
					;*	.   .   .   SEPF .   NNUMF OPERF	PRD$
					;+	.   .   .   SEPF .   NNUMF OPERF	PLU$
					;,	.   .   .   .    .   NNUMF .    	.
					;-	.   .   .   SEPF .   NNUMF OPERF	MIN$
					;.	.   .   .   .    .   NNUMF .    	.
					;/	.   .   .   SEPF .   NNUMF OPERF	DIV$
					;0	.   .   .   .    .   .     .    	.
					;1	.   .   .   .    .   .     .    	.
					;2	.   .   .   .    .   .     .    	.
					;3	.   .   .   .    .   .     .    	.
					;4	.   .   .   .    .   .     .    	.
					;5	.   .   .   .    .   .     .    	.
					;6	.   .   .   .    .   .     .    	.
					;7	.   .   .   .    .   .     .    	.
					;8.	.   .   .   .    .   .     .    	.
					;9.	.   .   .   .    .   .     .    	.
					;:	.   .   .   SEPF .   NNUMF OPERF	DOTS$
					;;	.   .   .   SEPF .   NNUMF .    	.
					;<	.   .   .   SEPF .   NNUMF OPERF	LSS$
					;=	.   .   .   SEPF .   NNUMF OPERF	EQL$
					;>	.   .   .   SEPF .   NNUMF OPERF	GTR$
					;?	.   .   .   .    .   NNUMF .    	.
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 35
	SYSTEM 327	PAGE 28 	DISPATCH TABLE (ENGLISH)

					
					;@	.   .   .   .    .   NNUMF .    	.
					;A	.   .   .   .    .   NNUMF .    	.
					;B	.   .   .   .    .   NNUMF .    	.
					;C	.   .   .   .    .   NNUMF .    	.
					;D	.   .   .   .    .   NNUMF .    	.
					;E	.   .   .   .    .   NNUMF .    	.
					;F	.   .   .   .    .   NNUMF .    	.
					;G	.   .   .   .    .   NNUMF .    	.
					;H	.   .   .   .    .   NNUMF .    	.
					;I	.   .   .   .    .   NNUMF .    	.
					;J	.   .   .   .    .   NNUMF .    	.
					;K	.   .   .   .    .   NNUMF .    	.
					;L	.   .   .   .    .   NNUMF .    	.
					;M	.   .   .   .    .   NNUMF .    	.
					;N	.   .   .   .    .   NNUMF .    	.
					;O	.   .   .   .    .   NNUMF .    	.
					;P	.   .   .   .    .   NNUMF .    	.
					;Q	.   .   .   .    .   NNUMF .    	.
					;R	.   .   .   .    .   NNUMF .    	.
					;S	.   .   .   .    .   NNUMF .    	.
					;T	.   .   .   .    .   NNUMF .    	.
					;U	.   .   .   .    .   NNUMF .    	.
					;V	.   .   .   .    .   NNUMF .    	.
					;W	.   .   .   .    .   NNUMF .    	.
					;X	.   .   .   .    .   NNUMF .    	.
					;Y	.   .   .   .    .   NNUMF .    	.
					;Z	.   .   .   .    .   NNUMF .    	.
					;[	.   .   FQF SEPF WSF NNUMF .    	0
					;\	.   .   .   .    .   NNUMF .    	.
					;]	.   .   FQF SEPF WSF NNUMF .    	2
					;^	.   .   .   SEPF .   NNUMF OPERF	BKSL$
					;_	.   .   .   SEPF .   NNUMF .    	.
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 36
	SYSTEM 327	PAGE 29 	DISPATCH TABLE (ENGLISH)

					
					;`	.   .   .   .    .   NNUMF .    	.
					;a	.   .   .   .    .   NNUMF .    	.
					;b	.   .   .   .    .   NNUMF .    	.
					;c	.   .   .   .    .   NNUMF .    	.
					;d	.   .   .   .    .   NNUMF .    	.
					;e	.   .   .   .    .   NNUMF .    	.
					;f	.   .   .   .    .   NNUMF .    	.
					;g	.   .   .   .    .   NNUMF .    	.
					;h	.   .   .   .    .   NNUMF .    	.
					;i	.   .   .   .    .   NNUMF .    	.
					;j	.   .   .   .    .   NNUMF .    	.
					;k	.   .   .   .    .   NNUMF .    	.
					;l	.   .   .   .    .   NNUMF .    	.
					;m	.   .   .   .    .   NNUMF .    	.
					;n	.   .   .   .    .   NNUMF .    	.
					;o	.   .   .   .    .   NNUMF .    	.
					;p	.   .   .   .    .   NNUMF .    	.
					;q	.   .   .   .    .   NNUMF .    	.
					;r	.   .   .   .    .   NNUMF .    	.
					;s	.   .   .   .    .   NNUMF .    	.
					;t	.   .   .   .    .   NNUMF .    	.
					;u	.   .   .   .    .   NNUMF .    	.
					;v	.   .   .   .    .   NNUMF .    	.
					;w	.   .   .   .    .   NNUMF .    	.
					;x	.   .   .   .    .   NNUMF .    	.
					;y	.   .   .   .    .   NNUMF .    	.
					;z	.   .   .   .    .   NNUMF .    	.
					;{	.   .   .   .    .   NNUMF .    	.
					;|	.   .   .   .    .   NNUMF .    	.
					;}	.   .   .   .    .   NNUMF .    	.
					;~	.   .   .   .    .   NNUMF .    	.
					;RBO	FSF .   .   .    .   NNUMF .    	30
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 37
	SYSTEM 327	PAGE 30 	DISPATCH TABLE (ENGLISH)

					
.STITL						.STITLE SYSTEM DISPATCH TABLE (BYTE ONE)
					
					;FLAG DEFINITIONS
FSF		000200			FSF==200	;SPECIAL INPUT
FOF		000100			FOF==100	;SPECIAL OUTPUT
FQF		000020			FQF==20		;QUOTING
SEPF		000004			SEPF==4		;SEPARATOR
WSF		000002			WSF==2		;WORD SEPARATOR
NNUMF		000040			NNUMF==40	;NOT A NUMBER
OPERF		000010			OPERF==10	;OPERATOR
					
DTBL					DTBL:
.BYTENNUMF	006142	   040		
NNUMF	006143	   040			.BYTE	NNUMF,NNUMF		;^@	;^A
.BYTEFOFNNUMF	006144	   140		
FSFNNUMF	006145	   240			.BYTE	FOF!NNUMF,FSF!NNUMF	;^B	ECHOES AS BLANK	;^C	COPYS NEXT CHARACTER
.BYTEFSFNNUMF	006146	   240		
NNUMF	006147	   040			.BYTE	FSF!NNUMF,NNUMF		;^D	DELETES NEXT CHARACTER	;^E
.BYTENNUMF	006150	   040		
FSFFOFNNUMF	006151	   340			.BYTE	NNUMF,FSF!FOF!NNUMF	;^F	;^G	BREAK
.BYTEFOFNNUMF	006152	   140		
FOFSEPFWSFNNUMF	006153	   146			.BYTE	FOF!NNUMF,FOF!SEPF!WSF!NNUMF	;^H	BACKSPACE	;^I	TABULATE
.BYTEFOFSEPFWSFNNUMF	006154	   146		
FOFSEPFWSFNNUMF	006155	   146			.BYTE	FOF!SEPF!WSF!NNUMF,FOF!SEPF!WSF!NNUMF	;^J	LINE FEED	;^K	TABULATE VERTICALLY
.BYTEFOFSEPFWSFNNUMF	006156	   146		
FSFFOFSEPFWSFNNUMF	006157	   346			.BYTE	FOF!SEPF!WSF!NNUMF,FSF!FOF!SEPF!WSF!NNUMF	;^L	FORM FEED	;^M	CARRIAGE RETURN	ECHOES AS CARRIAGE RETURN LINE FEED
.BYTEFSFNNUMF	006160	   240		
NNUMF	006161	   040			.BYTE	FSF!NNUMF,NNUMF		;^N	GET NEXT WORD	;^O
.BYTENNUMF	006162	   040		
FSFNNUMF	006163	   240			.BYTE	NNUMF,FSF!NNUMF		;^P	;^Q	SUPER-QUOTE
.BYTEFSFNNUMF	006164	   240		
FSFNNUMF	006165	   240			.BYTE	FSF!NNUMF,FSF!NNUMF	;^R	COPY REST OF LINE	;^S	SKIP NEXT WORD
.BYTENNUMF	006166	   040		
NNUMF	006167	   040			.BYTE	NNUMF,NNUMF		;^T	;^U
.BYTENNUMF	006170	   040		
FSFNNUMF	006171	   240			.BYTE	NNUMF,FSF!NNUMF		;^V	;^W	ERASE LAST WORD
.BYTEFSFNNUMF	006172	   240		
FSFNNUMF	006173	   240			.BYTE	FSF!NNUMF,FSF!NNUMF	;^X	CLARIFY INPUT	;^Y	EDIT PREVIOUS LINE
.BYTEFSFNNUMF	006174	   240		
NNUMF	006175	   040			.BYTE	FSF!NNUMF,NNUMF		;^Z	DESTROY INPUT BUFFER	;^[	MAYBE ALTMODE
.BYTENNUMF	006176	   040		
NNUMF	006177	   040			.BYTE	NNUMF,NNUMF		;^\	;^]
.BYTENNUMF	006200	   040		
NNUMF	006201	   040			.BYTE	NNUMF,NNUMF		;^^	;^_	WELL, ANY BETTER IDEAS FOR THEM?
.BYTESEPFWSFNNUMF	006202	   046		
NNUMF	006203	   040			.BYTE	SEPF!WSF!NNUMF,NNUMF	;SP	;!	?????
.BYTESEPFNNUMF	006204	   044		
SEPFNNUMFOPERF	006205	   054			.BYTE	SEPF!NNUMF,SEPF!NNUMF!OPERF	;"	;#	ACTION OF
.BYTENNUMF	006206	   040		
NNUMF	006207	   040			.BYTE	NNUMF,NNUMF		;$	;%
.BYTENNUMF	006210	   040		
NNUMFOPERF	006211	   050			.BYTE	NNUMF,NNUMF!OPERF	;&	;'	(MAYBE LE)
.BYTESEPFNNUMFOPERF	006212	   054		
SEPFNNUMFOPERF	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 38
	SYSTEM 327	PAGE 30.1 	SYSTEM DISPATCH TABLE (BYTE ONE)

	006213	   054			.BYTE	SEPF!NNUMF!OPERF,SEPF!NNUMF!OPERF	;(	ARITHMETIC GROUPING	;)	DITTO
.BYTESEPFNNUMFOPERF	006214	   054		
SEPFNNUMFOPERF	006215	   054			.BYTE	SEPF!NNUMF!OPERF,SEPF!NNUMF!OPERF	;*	MULTIPLY	;+	ADD
.BYTENNUMF	006216	   040		
SEPFNNUMFOPERF	006217	   054			.BYTE	NNUMF,SEPF!NNUMF!OPERF	;,	;-	SUBTRACT
.BYTENNUMF	006220	   040		
SEPFNNUMFOPERF	006221	   054			.BYTE	NNUMF,SEPF!NNUMF!OPERF	;.	;/	DIVIDE
.BYTE	006222	   000		
	006223	   000			.BYTE	0,0	;0	;1
.BYTE	006224	   000		
	006225	   000			.BYTE	0,0	;2	;3
.BYTE	006226	   000		
	006227	   000			.BYTE	0,0	;4	;5
.BYTE	006230	   000		
	006231	   000			.BYTE	0,0	;6	;7
.BYTE	006232	   000		
	006233	   000			.BYTE	0,0	;8.	;9.
.BYTESEPFNNUMFOPERF	006234	   054		
SEPFNNUMF	006235	   044			.BYTE	SEPF!NNUMF!OPERF,SEPF!NNUMF	;:	THING OF	;;	PROPERTY OF
.BYTESEPFNNUMFOPERF	006236	   054		
SEPFNNUMFOPERF	006237	   054			.BYTE	SEPF!NNUMF!OPERF,SEPF!NNUMF!OPERF	;<	;=
.BYTESEPFNNUMFOPERF	006240	   054		
NNUMF	006241	   040			.BYTE	SEPF!NNUMF!OPERF,NNUMF	;>	;?
.BYTENNUMF	006242	   040		
NNUMF	006243	   040			.BYTE	NNUMF,NNUMF		;@	;A
.BYTENNUMF	006244	   040		
NNUMF	006245	   040			.BYTE	NNUMF,NNUMF		;B	;C
.BYTENNUMF	006246	   040		
NNUMF	006247	   040			.BYTE	NNUMF,NNUMF		;D	;E
.BYTENNUMF	006250	   040		
NNUMF	006251	   040			.BYTE	NNUMF,NNUMF		;F	;G
.BYTENNUMF	006252	   040		
NNUMF	006253	   040			.BYTE	NNUMF,NNUMF		;H	;I
.BYTENNUMF	006254	   040		
NNUMF	006255	   040			.BYTE	NNUMF,NNUMF		;J	;K
.BYTENNUMF	006256	   040		
NNUMF	006257	   040			.BYTE	NNUMF,NNUMF		;L	;M
.BYTENNUMF	006260	   040		
NNUMF	006261	   040			.BYTE	NNUMF,NNUMF		;N	;O
.BYTENNUMF	006262	   040		
NNUMF	006263	   040			.BYTE	NNUMF,NNUMF		;P	;Q
.BYTENNUMF	006264	   040		
NNUMF	006265	   040			.BYTE	NNUMF,NNUMF		;R	;S
.BYTENNUMF	006266	   040		
NNUMF	006267	   040			.BYTE	NNUMF,NNUMF		;T	;U
.BYTENNUMF	006270	   040		
NNUMF	006271	   040			.BYTE	NNUMF,NNUMF		;V	;W
.BYTENNUMF	006272	   040		
NNUMF	006273	   040			.BYTE	NNUMF,NNUMF		;X	;Y
.BYTENNUMF	006274	   040		
FQFSEPFWSFNNUMF	006275	   066			.BYTE	NNUMF,FQF!SEPF!WSF!NNUMF	;Z	;[
.BYTENNUMF	006276	   040		
FQFSEPFWSFNNUMF	006277	   066			.BYTE	NNUMF,FQF!SEPF!WSF!NNUMF	;\	LOGICAL OR	;]
.BYTESEPFNNUMFOPERF	006300	   054		
SEPFNNUMF	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 39
	SYSTEM 327	PAGE 30.2 	SYSTEM DISPATCH TABLE (BYTE ONE)

	006301	   044			.BYTE	SEPF!NNUMF!OPERF,SEPF!NNUMF	;^	EXPONENTIATE, MAYBE	;_	MAKE
.BYTENNUMF	006302	   040		
NNUMF	006303	   040			.BYTE	NNUMF,NNUMF		;`	GRAVE ACCENT. LOOK THAT UP ON YOUR TELTERM.	;a	LOWER CASE
.BYTENNUMF	006304	   040		
NNUMF	006305	   040			.BYTE	NNUMF,NNUMF		;b	LOWER CASE	;c	LOWER CASE
.BYTENNUMF	006306	   040		
NNUMF	006307	   040			.BYTE	NNUMF,NNUMF		;d	LOWER CASE	;e	LOWER CASE
.BYTENNUMF	006310	   040		
NNUMF	006311	   040			.BYTE	NNUMF,NNUMF		;f	LOWER CASE	;g	LOWER CASE
.BYTENNUMF	006312	   040		
NNUMF	006313	   040			.BYTE	NNUMF,NNUMF		;h	LOWER CASE	;i	LOWER CASE
.BYTENNUMF	006314	   040		
NNUMF	006315	   040			.BYTE	NNUMF,NNUMF		;j	LOWER CASE	;k	LOWER CASE
.BYTENNUMF	006316	   040		
NNUMF	006317	   040			.BYTE	NNUMF,NNUMF		;l	LOWER CASE	;m	LOWER CASE
.BYTENNUMF	006320	   040		
NNUMF	006321	   040			.BYTE	NNUMF,NNUMF		;n	LOWER CASE	;o	LOWER CASE
.BYTENNUMF	006322	   040		
NNUMF	006323	   040			.BYTE	NNUMF,NNUMF		;p	LOWER CASE	;q	LOWER CASE
.BYTENNUMF	006324	   040		
NNUMF	006325	   040			.BYTE	NNUMF,NNUMF		;r	LOWER CASE	;s	LOWER CASE
.BYTENNUMF	006326	   040		
NNUMF	006327	   040			.BYTE	NNUMF,NNUMF		;t	LOWER CASE	;u	LOWER CASE
.BYTENNUMF	006330	   040		
NNUMF	006331	   040			.BYTE	NNUMF,NNUMF		;v	LOWER CASE	;w	LOWER CASE
.BYTENNUMF	006332	   040		
NNUMF	006333	   040			.BYTE	NNUMF,NNUMF		;x	LOWER CASE	;y	LOWER CASE
.BYTENNUMF	006334	   040		
NNUMF	006335	   040			.BYTE	NNUMF,NNUMF		;Z	LOWER CASE	;LEFT BRACE
.BYTENNUMF	006336	   040		
NNUMF	006337	   040			.BYTE	NNUMF,NNUMF		;VERTICAL BAR	;RIGHT BRACE
.BYTENNUMF	006340	   040		
FSFNNUMF	006341	   240			.BYTE	NNUMF,FSF!NNUMF		;TILDE	;RUBOUT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 40
	SYSTEM 327	PAGE 31 	SYSTEM DISPATCH TABLE (BYTE ONE)

					
.STITL						.STITLE SYSTEM DISPATCH TABLE (BYTE TWO)
					;NUMBERS POINT TO OTHER TABLES
					;$ POINTS TO SYSTEM OBLIST
					
DTBL2					DTBL2:
.BYTE	006342	   000		
	006343	   000			.BYTE	0,0		;^@				;^A
.BYTE	006344	   000		
	006345	   000			.BYTE	0,0		;^B	ECHOES AS BLANK		;^C	COPYS NEXT CHARACTER
.BYTE	006346	   002		
	006347	   000			.BYTE	2,0		;^D	DELETES NEXT CHARACTER	;^E
.BYTE	006350	   000		
	006351	   004			.BYTE	0,4		;^F				;^G	BREAK
.BYTE	006352	   002		
	006353	   010			.BYTE	2,10		;^H	BACKSPACE		;^I	TABULATE
.BYTE	006354	   012		
	006355	   014			.BYTE	12,14		;^J	LINE FEED		;^K	TABULATE VERTICALLY
.BYTE	006356	   016		
	006357	   006			.BYTE	16,6		;^L	FORM FEED		;^M	CARRIAGE RETURN	ECHOES AS CARRIAGE RETURN LINE FEED
.BYTE	006360	   010		
	006361	   000			.BYTE	10,0		;^N	GET NEXT WORD		;^O
.BYTE	006362	   000		
	006363	   012			.BYTE	0,12		;^P				;^Q	SUPER-QUOTE
.BYTE	006364	   014		
	006365	   016			.BYTE	14,16		;^R				;^S	SKIP NEXT WORD
.BYTE	006366	   000		
	006367	   000			.BYTE	0,0		;^T	;^U
.BYTE	006370	   000		
	006371	   020			.BYTE	0,20		;^V	;^W	ERASE LAST WORD
.BYTE	006372	   022		
	006373	   024			.BYTE	22,24		;^X	CLARIFY INPUT	;^Y
.BYTE	006374	   026		
	006375	   000			.BYTE	26,0		;^Z	DESTROY INPUT BUFFER	;^[	MAYBE ALTMODE
.BYTE	006376	   000		
	006377	   000			.BYTE	0,0		;^\	;^]
.BYTE	006400	   000		
	006401	   000			.BYTE	0,0		;^^	;^_	WELL, ANY BETTER IDEAS FOR THEM?
.BYTE	006402	   000		
	006403	   000			.BYTE	0,0		;SP	;!	?????
.BYTE	006404	   000		
HAS$	006405	   002			.BYTE	0,HAS$		;"	;#	ACTION OF
.BYTE	006406	   000		
	006407	   000			.BYTE	0,0		;$	;%
.BYTE	006410	   000		
	006411	   000			.BYTE	0,0		;&	;'	(MAYBE LE)
.BYTELP$	006412	   003		
RP$	006413	   004			.BYTE	LP$,RP$		;(	ARITHMETIC GROUPING	;)	DITTO
.BYTEPRD$	006414	   005		
PLU$	006415	   006			.BYTE	PRD$,PLU$	;*	MULTIPLY	;+	ADD
.BYTE	006416	   000		
MIN$	006417	   010			.BYTE	0,MIN$		;,	;-	SUBTRACT
.BYTE	006420	   000		
DIV$	006421	   012			.BYTE	0,DIV$		;.	;/	DIVIDE
.BYTE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 41
	SYSTEM 327	PAGE 31.1 	SYSTEM DISPATCH TABLE (BYTE TWO)

	006422	   000		
	006423	   000			.BYTE	0,0		;0	;1
.BYTE	006424	   000		
	006425	   000			.BYTE	0,0		;2	;3
.BYTE	006426	   000		
	006427	   000			.BYTE	0,0		;4	;5
.BYTE	006430	   000		
	006431	   000			.BYTE	0,0		;6	;7
.BYTE	006432	   000		
	006433	   000			.BYTE	0,0		;8.	;9.
.BYTEDOTS$	006434	   013		
	006435	   000			.BYTE	DOTS$,0		;:	THING OF	;;	PROPERTY OF
.BYTELSS$	006436	   014		
EQL$	006437	   015			.BYTE	LSS$,EQL$	;<	;=
.BYTEGTR$	006440	   016		
	006441	   000			.BYTE	GTR$,0		;>	;?
.BYTE	006442	   000		
	006443	   000			.BYTE	0,0		;@	;A
.BYTE	006444	   000		
	006445	   000			.BYTE	0,0		;B	;C
.BYTE	006446	   000		
	006447	   000			.BYTE	0,0		;D	;E
.BYTE	006450	   000		
	006451	   000			.BYTE	0,0		;F	;G
.BYTE	006452	   000		
	006453	   000			.BYTE	0,0		;H	;I
.BYTE	006454	   000		
	006455	   000			.BYTE	0,0		;J	;K
.BYTE	006456	   000		
	006457	   000			.BYTE	0,0		;L	;M
.BYTE	006460	   000		
	006461	   000			.BYTE	0,0		;N	;O
.BYTE	006462	   000		
	006463	   000			.BYTE	0,0		;P	;Q
.BYTE	006464	   000		
	006465	   000			.BYTE	0,0		;R	;S
.BYTE	006466	   000		
	006467	   000			.BYTE	0,0		;T	;U
.BYTE	006470	   000		
	006471	   000			.BYTE	0,0		;V	;W
.BYTE	006472	   000		
	006473	   000			.BYTE	0,0		;X	;Y
.BYTE	006474	   000		
	006475	   000			.BYTE	0,0		;Z	;[
.BYTE	006476	   000		
	006477	   002			.BYTE	0,2		;\	LOGICAL OR	;]
.BYTEBKSL$	006500	   017		
	006501	   000			.BYTE	BKSL$,0		;^	TEMPORARILY MODULO (MAYBE EXPONENTIATE)	;_	MAKE
.BYTE	006502	   000		
	006503	   000			.BYTE	0,0		;`	GRAVE ACCENT. LOOK THAT UP ON YOUR TELTERM.	;a	LOWER CASE
.BYTE	006504	   000		
	006505	   000			.BYTE	0,0		;b	LOWER CASE	;c	LOWER CASE
.BYTE	006506	   000		
	006507	   000			.BYTE	0,0		;d	LOWER CASE	;e	LOWER CASE
.BYTE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 42
	SYSTEM 327	PAGE 31.2 	SYSTEM DISPATCH TABLE (BYTE TWO)

	006510	   000		
	006511	   000			.BYTE	0,0		;f	LOWER CASE	;g	LOWER CASE
.BYTE	006512	   000		
	006513	   000			.BYTE	0,0		;h	LOWER CASE	;i	LOWER CASE
.BYTE	006514	   000		
	006515	   000			.BYTE	0,0		;j	LOWER CASE	;k	LOWER CASE
.BYTE	006516	   000		
	006517	   000			.BYTE	0,0		;l	LOWER CASE	;m	LOWER CASE
.BYTE	006520	   000		
	006521	   000			.BYTE	0,0		;n	LOWER CASE	;o	LOWER CASE
.BYTE	006522	   000		
	006523	   000			.BYTE	0,0		;p	LOWER CASE	;q	LOWER CASE
.BYTE	006524	   000		
	006525	   000			.BYTE	0,0		;r	LOWER CASE	;s	LOWER CASE
.BYTE	006526	   000		
	006527	   000			.BYTE	0,0		;t	LOWER CASE	;u	LOWER CASE
.BYTE	006530	   000		
	006531	   000			.BYTE	0,0		;v	LOWER CASE	;w	LOWER CASE
.BYTE	006532	   000		
	006533	   000			.BYTE	0,0		;x	LOWER CASE	;y	LOWER CASE
.BYTE	006534	   000		
	006535	   000			.BYTE	0,0		;z	LOWER CASE	;{	OPEN BRACE
.BYTE	006536	   000		
	006537	   000			.BYTE	0,0		;|	VERTICAL BAR, MAYBE OR, MAYBE XOR	;}	CLOSE BRACE
.BYTE	006540	   000		
	006541	   030			.BYTE	0,30		;~	TILDE, LOGICAL NOT	;RBO	RUBOUT????
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 43
	SYSTEM 327	PAGE 32 	LOSS CHECKING ROUTINES

						.STITL LOSS CHECKING ROUTINES
					
IOTBRKINC	006542	005227	177774		IOTBRK:	INC #-4
LOSSCT		006544			LOSSCT=.-2
BGTLOSER	006546	003074				BGT LOSER
SPUSH						SPUSH A
MOVAPSPUSH						SPUSH USER
MOVUSERPMOVUSER	006556	012767	177777	172724		MOV #-1,USER
PRCR						PRCR
JSRPC.CRLFPRTXT						PRTXT ^/BAD TRAP--VECTOR /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVSPA	006616	016600	000006			MOV 6(SP),A
SUBA	006622	162700	000004			SUB #4,A	;MAKE IT REAL
CMPBEBRVA	006626	022700	000004			CMP #BEBRV,A	;IS IT A BUS ERROR?
BEQBUSSER	006632	001431				BEQ BUSSER
JSRPCPRON	006634	004767	025346			JSR PC,PRON
PRTXT						PRTXT ^/ TRAPPED FROM /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVSPA	006664	016600	000012			MOV 12(SP),A
JSRPCPRON	006670	004767	025312			JSR PC,PRON
PRCR						PRCR
JSRPC.CRLFSPOP						SPOP USER
MOVPUSERSPOP						SPOP A
MOVPAADDSP	006706	062706	000004			ADD #4,SP
RTI	006712	000002				RTI
EMTBRKHALT	006714	000000			EMTBRK:	HALT
BUSSERPRTXT					BUSSER:	PRTXT ^/BUSS ERROR!!!/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTLOSERPRTXT					LOSER:	PRTXT ^/I GIVE UP!!/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTHALT	006760	000000				HALT
BR	006762	000776				BR .-2
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 44
	SYSTEM 327	PAGE 33 	DISK STARTER

						.STITL DISK STARTER
					
					
					
DSKSRTMOVDCRDRBA	006764	012700	014032		DSKSRT:	MOV #DCRDRB,A	;CHECK FOR DC11 RECIEVE FIRST
TSTA	006770	005760	000014			TST 14(A)
BNEDSKSGO	006774	001020				BNE DSKSGO
MOVSYSWPRA	006776	012700	001774			MOV #SYSWPR,A	;NEXT LOOK AT SYSTEM REQUESTS
DSKSR1TSTBA	007002	105760	000014		DSKSR1:	TSTB 14(A)	;IS THE FUNCTION NON ZERO?
BNEDSKSGO	007006	001013				BNE DSKSGO	;FOUND A REQUEST, GO DO IT
ADDA	007010	062700	000016			ADD #16,A	;LOOK AT NEXT BLOCK
CMPMNUSRSSYSWPRA	007014	022700	002210			CMP #16*MNUSRS+SYSWPR,A	;LAST BLOCK?
BGTDSKSR1	007020	003370				BGT DSKSR1
MOVSWPLSTA	007022	016700	172516			MOV SWPLST,A	;MOOBY SWAP OUT REQS?
BNEDSKSGO	007026	001003				BNE DSKSGO
CLRDSKS	007030	005067	170424			CLR DSKS
RTSPC	007034	000207				RTS PC	;NO DISK REQUESTS EXTANT, BETTER LUCK NEXT TIME
					
DSKSGOMOVADSKCRB	007036	010067	173146		DSKSGO:	MOV A,DSKCRB	;ADDRESS OF BLOCK ABOUT TO BE SERVICED
MOVAB	007042	011001				MOV (A),B
BEQ	007044	001401				BEQ .+4	;BRANCH IF NO
JSRPCB	007046	004711				JSR PC,(B)	;RUN START ROUTINE
DSKSG1TSTA	007050	005720			DSKSG1:	TST (A)+
MOVDSKWCB	007052	012701	177462			MOV #DSKWC,B	;START OF DISK I/O WORDS
MOVAB	007056	012021				MOV (A)+,(B)+	;WORD COUNT
MOVAB	007060	012011				MOV (A)+,(B)	;CORE ADDRESS
ADDB	007062	062721	000002			ADD #2,(B)+	;GODFORSAKEN DEC!!!!!
MOVAB	007066	012021				MOV (A)+,(B)+	;LOW ORDER DISK ADDRESS
MOVAB	007070	012021				MOV (A)+,(B)+	;HIGH "      "     "
TSTA	007072	005720				TST (A)+	;GO PAST UNUSED WORD
MOVBADSKS	007074	111067	170360			MOVB (A),DSKS	;SET FUCTION, ENABLE INTERUPT, GO!!
RTSPC	007100	000207				RTS PC
					
					
DPROVKSPUSH					DPROVK:	SPUSH PS
MOVPSPMOVPS	007106	012767	000340	170662		MOV #340,PS
CMPDSKS	007114	022767	000200	170336		CMP #200,DSKS	;IF THE INTERUPT IS OFF AND THE DISK IS READY
BNEDSKSG2	007122	001006				BNE DSKSG2	;PROVOKE IT; OTHERWISE LEAVE IT FOR SOMEONE ELSE
SPUSH						SPUSH A
MOVAPSPUSH						SPUSH B
MOVBPJSRPCDSKSRT	007130	004767	177630			JSR PC,DSKSRT
SPOP						SPOP B
MOVPBSPOP						SPOP A
MOVPADSKSG2SPOP					DSKSG2:	SPOP PS
MOVPPSRTSPC	007144	000207				RTS PC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 45
	SYSTEM 327	PAGE 34 	DISK REQUEST BLOCK GRABBER

					.STITL DISK REQUEST BLOCK GRABBER
					
SYDRBGSPUSH					SYDRBG:	SPUSH PS	;SAVE OLD PROSSESOR LEVEL
MOVPSPMOVPS	007152	012767	000340	170616		MOV #340,PS	;LOCK OUT INTERUPTS
MOVSYSWPRA	007160	012700	001774			MOV #SYSWPR,A	;LOOK FOR A FREE SYSTEM DISK REQUEST BLOCK
SDRBG1TSTA	007164	005760	000014		SDRBG1:	TST 14(A)	;IS IT FREE?
BEQSDRBG2	007170	001411				BEQ SDRBG2
ADDA	007172	062700	000016			ADD #16,A	;LOOK AT NEXT ONE
CMPMNUSRSSYSWPRA	007176	022700	002210			CMP #16*MNUSRS+SYSWPR,A	;ANY MORE?
BGTSDRBG1	007202	003370				BGT SDRBG1	;YES, SEE IF FREE
SPOP						SPOP PS	;NO MORE, WE HAVE LOST BIG
MOVPPSWAIT	007210	000001				WAIT	;THIS WILL PROBABLY NOT DO ANY GOOD
BRSYDRBG	007212	000755				BR SYDRBG	;AND CERTAINLY WON'T UNLESS OUR PRIORITY IS <5
SDRBG2MOVDUSECTA	007214	016760	173066	000014	SDRBG2:	MOV DUSECT,14(A)	;LABEL BLOCK AS IN USE, BUT NO REQUEST
INCBDUSECT	007222	105267	173061			INCB DUSECT+1	;SO PEOPLE CAN DISTINGUISH
SPOP						SPOP PS	;YOU CAN INTERUPT NOW.
MOVPPSRTSPC	007232	000207				RTS PC
					
					
					;USER ROUTINE TO FLUSH UNTIL DISK REQUEST POINTED TO BY A DONE
					
DSKWA2ADDA	007234	062700	000014		DSKWA2:	ADD #14,A
DSKWAIMOVUSERU	007240	016705	172244		DSKWAI:	MOV USER,U
MOVAB	007244	011001				MOV (A),B
DSKWA1CMPBA	007246	020110			DSKWA1:	CMP B,(A)
BEQDNDONE	007250	001403				BEQ DNDONE
JSRPCRUNME	007252	004767	000422			JSR PC,RUNME
RTSPC	007256	000207				RTS PC
DNDONEMOVFRDSKWFLSRESU	007260	012765	000003	002466	DNDONE:	MOV #FRDSKW,FLSRES(U)
JSRPCFLUSH	007266	004767	001340			JSR PC,FLUSH
BRDSKWA1	007272	000765				BR DSKWA1
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 46
	SYSTEM 327	PAGE 35 	DISK REQUEST BLOCK GRABBER

					
UBLKGRMOVDBITTBA	007274	012700	003636		UBLKGR:	MOV #DBITTB,A	;USERS BIT TABLE ADDR
MOVDBITBEB	007300	012701	003674			MOV #DBITBE,B
MOVUNXTDBD	007304	012703	002536			MOV #UNXTDB,D	;POINTER TO ADDR OF NEXT AWAILABLE BLOCK
ADDUSERD	007310	066703	172174			ADD USER,D
MOVDBITBEE	007314	012704	003674			MOV #DBITBE,E	;END OF USERS BIT TABLE
CLRF	007320	005005				CLR F	;DISK ISN'T NEARLY FULL
BITDSAMFLFLAGS2	007322	032767	001000	174264		BIT #DSAMFL,FLAGS2	;IS THE DISK ALLMOST FULL?
BEQ	007330	001401				BEQ .+4	;NO
INCF	007332	005205				INC F	;YES
JSRPCBLKGRB	007334	004767	000050			JSR PC,BLKGRB	;GO DO GOOD THINGS
RTSPC	007340	000207				RTS PC	;DISK REALLY FULL
TSTF	007342	005705				TST F	;IS DISK NEARLY FULL?
BEQUBLKG1	007344	001403				BEQ UBLKG1	;NO, SKIP RETURN
BISDSAMFLFLAGS2	007346	052767	001000	174240		BIS #DSAMFL,FLAGS2	;YES WARN THE WORLD.
UBLKG1JMPSRET	007354	000167	040632		UBLKG1:	JMP SRET	;WIN ANYWAY, SKIP RETURN
					
UBLKFRMOVDBITTBE	007360	012704	003636		UBLKFR:	MOV #DBITTB,E
MOVUSERB	007364	016701	172120			MOV USER,B
MOVUDSKADBD	007370	016103	002542			MOV UDSKAD(B),D
JSRPCBLKFRE	007374	004767	000146			JSR PC,BLKFRE
BICDSAMFLFLAGS2	007400	042767	001000	174206		BIC #DSAMFL,FLAGS2	;DISK NOW SURELY HAS A FREE BLOCK
RTSPC	007406	000207				RTS PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 47
	SYSTEM 327	PAGE 36 	DISK REQUEST BLOCK GRABBER

					
					;GRABS A DISK BLOCK AND A REQUEST BLOCK
					;REQUEST BLOCK ADDR RETURNS IN A
					;DISK BLOCK ADDR RETURNS IN B AND C
					;ARGS:  BEGINNING OF BIT TABLE IN A
					;END OF BIT TABLE IN B
					;ADDR OF NEXT BLOCK WORDS IN D
					;DISK ALMOST FULL FLAG IN F
BLKGRBCLRC	007410	005002			BLKGRB:	CLR C
BLKGR3MOVE	007412	012704	000001		BLKGR3:	MOV #1,E
BLKGR2BITEA	007416	030410			BLKGR2:	BIT E,(A)	;IS THIS BLOCK FREE?
BEQBLKGR5	007420	001413				BEQ BLKGR5	;YES, PRAISE THE LORD!
INCC	007422	005202				INC C	;NO, TRY THE NEXT BLOCK
ASLE	007424	006304				ASL E
BCCBLKGR2	007426	103373				BCC BLKGR2	;NO OVERFLOW?
TSTA	007430	005720				TST (A)+	;NEXT WORD
CMPAB	007432	020001				CMP A,B	;AT END OF THE TABLE
BLEBLKGR3	007434	003766				BLE BLKGR3	;CONTINUE
TSTF	007436	005705				TST F	;NO BLOCK AVAILABLE, ARE WE REAL FULL?
BEQBLKGR4	007440	001401				BEQ BLKGR4	;NO, BUT CLOSE
RTSPC	007442	000207				RTS PC	;YES, VERY FULL
BLKGR4INCF	007444	005205			BLKGR4:	INC F	;DISK ALMOST FULL
BRBLKGR6	007446	000402				BR BLKGR6
BLKGR5BISEA	007450	050410			BLKGR5:	BIS E,(A)	;THAT BLOCK IS NO LONGER FREE
CLRF	007452	005005				CLR F	;AND THE DISK  ISN'T NEARLY FULL
BLKGR6JSRPCSYDRBG	007454	004767	177466		BLKGR6:	JSR PC,SYDRBG	;GET A DISK REQUEST BLOCK
MOVA	007460	012760	177600	000002		MOV #-200,2(A)	;ALL BLOCKS ARE THIS LONG
MOVDA	007466	011360	000006			MOV (D),6(A)	;NEXT AVAILABLE BLOCK
MOVDA	007472	016360	000002	000010		MOV 2(D),10(A)
SPUSH						SPUSH (D)
MOVDPSPUSH						SPUSH 2(D)
MOVDPSWABC	007506	000302				SWAB C	;MULTIPLY BY 200
ASRC	007510	006202				ASR C
BICC	007512	042702	100000			BIC #100000,C
MOVDD	007516	016363	000006	000002		MOV 6(D),2(D)	;LOW ORDER BASE ADDR
ADDDC	007524	066302	000004			ADD 4(D),C	;LOW ORDER BASE ADDR
ADCD	007530	005563	000002			ADC 2(D)
MOVCD	007534	010213				MOV C,(D)
SPOP						SPOP C
MOVPCSPOP						SPOP B
MOVPBJMPSRET	007542	000167	040444			JMP SRET
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 48
	SYSTEM 327	PAGE 37 	DISK REQUEST BLOCK GRABBER

					
					;FREES THE DISK BLOCK WHOSE LOW ORDER ADDR IS IN C
					;BASE OF THIS DISK SPACE IS IN D
					;ADDRESS OF THE APPRPRIATE BIT TABLE IS IN E
BLKFRESUBDC	007546	160302			BLKFRE:	SUB D,C	;RELOCATE DISK ADDR RELATIVE TO ZERO
MOVB	007550	012701	000001			MOV #1,B
BITC	007554	032702	000177			BIT #177,C
BEQ	007560	001401				BEQ .+4
HALT	007562	000000				HALT
BLKFR1BITC	007564	032702	003777		BLKFR1:	BIT #3777,C	;IS ADDR DIVISABLE BY 20*200?
BEQBLKFR2	007570	001404				BEQ BLKFR2	;YES
SUBC	007572	162702	000200			SUB #200,C	;NO, TRY TO MAKE IT BE
ASLB	007576	006301				ASL B	;AND GET "REMAINDER" IN B
BRBLKFR1	007600	000771				BR BLKFR1
BLKFR2SWABC	007602	000302			BLKFR2:	SWAB C	;DIVIDE BY 400
ASRC	007604	006202				ASR C	;BY 2
ASRC	007606	006202				ASR C	;BY 2=>DIVIDED BY 400*2*2=2000=4000/2
ADDCE	007610	060204				ADD C,E	;GET POINTER INTO BIT TABLE
BICBE	007612	040114				BIC B,(E)	;AND FREE THE BLOCK
RTSPC	007614	000207				RTS PC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 49
	SYSTEM 327	PAGE 38 	DISK INTERUPT ROUTINE

						.STITL DISK INTERUPT ROUTINE
					
					
DSKBRKSPUSH					DSKBRK:	SPUSH A
MOVAPSPUSH						SPUSH B
MOVBPBITDSKS	007622	032767	100000	167630		BIT #100000,DSKS	;ANY ERROR BITS SET?
BNEDSKLOS	007630	001015				BNE DSKLOS	;BITE   THE BAG!
MOVDSKCRBA	007632	016700	172352			MOV DSKCRB,A	;POINTER TO FUNCTION WORD
CLRA	007636	005060	000014			CLR 14(A)	;REQUEST HAS BEEN SERVICED
MOVAB	007642	011001				MOV (A),B
BEQ	007644	001401				BEQ .+4	;NO
JSRPCB	007646	004711				JSR PC,(B)	;YES, GO DO IT
CLRA	007650	005010				CLR (A)
DSKRTYJSRPCDSKSRT	007652	004767	177106		DSKRTY:	JSR PC,DSKSRT	;LOOK FOR SOMETHING ELSE TO DO
DSKRETSPOP					DSKRET:	SPOP B
MOVPBSPOP						SPOP A
MOVPARTI	007662	000002				RTI
					
DSKLOSHALT	007664	000000			DSKLOS:	HALT	;DISK LOST BIG
MOVDSKS	007666	012767	000400	167564		MOV #400,DSKS	;POWER CLEAR IT
HALT	007674	000000				HALT	;GIVE IT A CHANCE
BRDSKRTY	007676	000765				BR DSKRTY	;TRY AGAIN(EVENTUALLY)
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 50
	SYSTEM 327	PAGE 39 	SCHEDUALER

						.STITL SCHEDUALER
					
					
RUNMETSTUSER	007700	005767	171604		RUNME:	TST USER
BGERUNME1	007704	002001				BGE RUNME1
RUNME2RTSPC	007706	000207			RUNME2:	RTS PC	;SYSTEM CALLED RUNME
RUNME1TSTFLSADRU	007710	005765	002470		RUNME1:	TST FLSADR(U)	;IF HE WANTS TO RUN HE SHOULD JSR HERE
BEQRUNME2	007714	001774				BEQ RUNME2	;IF FLSADR IS ZERO, JUST KEEP RUNNING HIM
MOVUSER	007716	012767	177777	171564		MOV #-1,USER	;SYSTEM IS NOW USER
JSRPCUACSAV	007724	004767	002106			JSR PC,UACSAV	;STORE HIS ACS
CLRFLSADRU	007730	005065	002470			CLR FLSADR(U)	;GUY IS NOW RUNABLE
CLRFLSRESU	007734	005065	002466			CLR FLSRES(U)
INCNRABLU	007740	005267	171564			INC NRABLU
SPOP						SPOP UPC(U)	;HE SHOULD START AFTER THE JSR PC,RUNME
MOVPUPCUNEXTU1MOVSLOTSTA	007750	012700	002212		NEXTU1:	MOV #SLOTST,A	;TRY TO RUN USER IN U
NEXTU2CMPUA	007754	020520			NEXTU2:	CMP U,(A)+	;IS HE ASSIGNED A SLOT IN CORE?
BNENEXTU3	007756	001056				BNE NEXTU3	;NOT THIS ONE, ANYWAY
TSTA	007760	005710				TST (A)	;IS HE ALL THE WAY IN?
BLTNEXTUS	007762	002425				BLT NEXTUS	;NO CAN'T RUN HIM YET
BEQNEXTU3	007764	001453				BEQ NEXTU3
CMPFRNEWUFLSRESU	007766	022765	000007	002466		CMP #FRNEWU,FLSRES(U)
BNENEXT14	007774	001014				BNE NEXT14
MOVUGOFLSADRU	007776	012765	016450	002470		MOV #UGO,FLSADR(U)
TSTRWWSW	010004	005767	172366			TST RWWSW
BNENEXT15	010010	001023				BNE NEXT15
MOVSLTCADSLOTSTAC	010012	016002	000042			MOV SLTCAD-SLOTST-2(A),C
MOVD	010016	012703	000016			MOV #16,D
JMPNEXT11	010022	000167	000356			JMP NEXT11
NEXT14CLRFLSRESU	010026	005065	002466		NEXT14:	CLR FLSRES(U)
JMPRUNUSR	010032	000167	001110			JMP RUNUSR
					
					
					
					;CALL TO GET INDEX OF NEXT USER TO RUN
					
NEXTUSSUBLUBLKULAST	010036	162767	000060	171446	NEXTUS:	SUB #LUBLK,ULAST	;COUNT BACKWARDS
BGE	010044	002003				BGE .+10	;DON'T GO NEG
MOVMNUSRSLUBLKULAST	010046	012767	000660	171436		MOV #<MNUSRS-1>*LUBLK,ULAST	;LAST POSSIBLE USER INDEX
MOVULASTU	010054	016705	171432			MOV ULAST,U	;SEE IF THIS IS A GOOD GUY TO RUN
NEXT15CMPFRTYIHFLSRESU	010060	022765	000010	002466	NEXT15:	CMP #FRTYIH,FLSRES(U)
BEQNEXTUS	010066	001763				BEQ NEXTUS
TSTFLSADRU	010070	005765	002470			TST FLSADR(U)	;IF FLSADR IS ZERO, RUNABLE(???)
BEQNEXTU1	010074	001725				BEQ NEXTU1	;RUN HIM.
BLTNEXTUS	010076	002757				BLT NEXTUS	;NEG=>NON EX USER
MOVUUSER	010100	010567	171404			MOV U,USER	;USER IS NOW USER
JSRPCUACRES	010104	004767	001754			JSR PC,UACRES	;RESTORE HIS ACS
JMPFLSADRU	010110	000175	002470			JMP @FLSADR(U)	;SEE IF HE SHOULD REALLY RUN
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 51
	SYSTEM 327	PAGE 40 	SCHEDUALER

					
					
					
NEXTU3TSTA	010114	005720			NEXTU3:	TST (A)+	;EXTANT CORE SLOT?
BNENEXTU2	010116	001316				BNE NEXTU2	;YES, CHECK NEXT ONE
MOVPUSPSLA	010120	016700	171412			MOV PUSPSL,A	;SEE IF THERE IS A PREFERED SLOT
BGTNEXTU6	010124	003031				BGT NEXTU6
MOVSLOTSTA	010126	012700	002212			MOV #SLOTST,A
NEXTU4TSTA	010132	005720			NEXTU4:	TST (A)+
TSTA	010134	005720				TST (A)+
BLTNEXTU4	010136	002775				BLT NEXTU4
BEQNEXTUS	010140	001736				BEQ NEXTUS
CMPA	010142	022760	000001	177776		CMP #1,-2(A)
BEQNEXTU4	010150	001770				BEQ NEXTU4	;GUY HASN'T RUN YET, DON'T SWAP HIM OUT
MOVAB	010152	016001	177776			MOV -2(A),B	;USER THAT MAY BE SWAPED OUT
CMPBLOCKUS	010156	020167	172206			CMP B,LOCKUS	;IS HE LOCKED IN?
BEQNEXTU4	010162	001763				BEQ NEXTU4	;YES, DON'T BOTHER HIM
CMPBGCLOCK	010164	020167	172202			CMP B,GCLOCK
BEQNEXTU4	010170	001760				BEQ NEXTU4
TSTNSWPU	010172	005767	171334			TST NSWPU	;ARE THERE USERS BEING SWAPED?
BEQNEXTU6	010176	001404				BEQ NEXTU6	;NO, SWAP ONE
CMPNINU	010200	026727	171330	000001		CMP NINU,#1	;IS THERE ONLY ONE USER IN CORE?
BEQNEXTUS	010206	001713				BEQ NEXTUS	;YES, RUN HIM
NEXTU6CLRPUSPSL	010210	005067	171322		NEXTU6:	CLR PUSPSL	;IF THERE WAS A PREFERED SLOT, WE ARE DOING IT
TSTA	010214	005740				TST -(A)
MOVAB	010216	016001	177776			MOV -2(A),B	;FOUND A GOOD SLOT, USER TO SWAP OUT INTO B
MOVUA	010222	010560	177776			MOV U,-2(A)	;NEW OCCUPANT OF SLOT
					
FOR						FOR DEBUG
.XLIST.IFNZDEBUG.LISTBITSWTRCFSFLAGS	010226	032767	000002	172132		BIT #SWTRCF,SFLAGS	;TRACE SWAPS?
BEQNEXTU5	010234	001443				BEQ NEXTU5
SPUSH						SPUSH A
MOVAPPRTXT						PRTXT ^/SWAPPING: /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVBA	010260	010100				MOV B,A
JSRPCPRON	010262	004767	023720			JSR PC,PRON
SPACE						SPACE
JSRPC.SPACEMOVUA	010272	010500				MOV U,A	;USER WHO IS COMING IN
JSRPCPRON	010274	004767	023706			JSR PC,PRON
SPACE						SPACE
JSRPC.SPACEMOVPA	010304	011600				MOV (P),A
SUBSLOTSTA	010306	162700	002214			SUB #SLOTST+2,A
ASRA	010312	006200				ASR A
ASRA	010314	006200				ASR A
JSRPCPRON	010316	004767	023664			JSR PC,PRON	;SLOT
SPACE						SPACE
JSRPC.SPACEMOVTIMEA	010326	016700	171166			MOV TIME,A
JSRPCPRON	010332	004767	023650			JSR PC,PRON
PRCR						PRCR
JSRPC.CRLFSPOP						SPOP A
MOVPA						.ENDC
ENDC						ENDC DEBUG
.XLIST.IFZDEBUG.LIST	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 52
	SYSTEM 327	PAGE 41 	SCHEDUALER

					
NEXTU5CLRD	010344	005003			NEXTU5:	CLR D
MOVSLTCADSLOTSTAC	010346	016002	000042			MOV SLTCAD-SLOTST-2(A),C	;MOBY SWAP OUT BLOCK FOR THIS SLOT
MOVSWPOSTC	010352	012722	011676			MOV #SWPOST,(C)+	;SWAP OUT USER START ROUTINE
MOVUSWCNTC	010356	016722	171720			MOV USWCNT,(C)+	;WORD COUNT OF A USER SLOT
MOVSLTCADSLOTSTAC	010362	016022	000044			MOV SLTCAD-SLOTST(A),(C)+	;SLOT CORE ADDRESS
MOVUSWPADBC	010366	016122	002516			MOV USWPAD(B),(C)+	;LOW ORDER SWAP OUT ADDR OF U TO SWAP OUT
MOVUSWPADBC	010372	016122	002520			MOV USWPAD+2(B),(C)+	;HIGH OORDER
TSTC	010376	005722				TST (C)+	;WASTED WORD
MOVDWRTECC	010400	012722	000103			MOV #DWRTEC,(C)+	;DISK WRITE COMMAND
NEXT11DECNINU	010404	005367	171124		NEXT11:	DEC NINU	;ONE LESS IN CORE
INCNSWPU	010410	005267	171116			INC NSWPU	;ONE MORE MOVING AROUND
MOVSWPISTC	010414	012722	011722			MOV #SWPIST,(C)+	;SWAP IN USER START ROUTINE
MOVUSWCNTC	010420	016722	171656			MOV USWCNT,(C)+	;SLOT WORD COUT
MOVSLTCADSLOTSTAC	010424	016022	000044			MOV SLTCAD-SLOTST(A),(C)+	;SLOT CORE ADDRESS
CMPFRNEWUFLSRESU	010430	022765	000007	002466		CMP #FRNEWU,FLSRES(U)
BNENEXT12	010436	001016				BNE NEXT12
MOVDCLRUSC	010440	016722	171650			MOV DCLRUS,(C)+
MOVDCLRUSC	010444	016722	171646			MOV DCLRUS+2,(C)+
MOVUGOFLSADRU	010450	012765	016450	002470		MOV #UGO,FLSADR(U)
MOVUDSKADUUNXTDBU	010456	016565	002542	002536		MOV UDSKAD(U),UNXTDB(U)
MOVUDSKADUUNXTDBU	010464	016565	002544	002540		MOV UDSKAD+2(U),UNXTDB+2(U)
BRNEXT13	010472	000404				BR NEXT13
NEXT12MOVUSWPADUC	010474	016522	002516		NEXT12:	MOV USWPAD(U),(C)+	;  "    "   
MOVUSWPADUC	010500	016522	002520			MOV USWPAD+2(U),(C)+	;USER ADDRESS ON DISK
NEXT13MOVAC	010504	010022			NEXT13:	MOV A,(C)+	;ADDRESS OF PLACE TO ZAP TO 1 WHEN DONE
MOVDREADCC	010506	012712	000105			MOV #DREADC,(C)	;READ FROM DISK
SUBC	010512	162702	000032			SUB #32,C	;BEGINING OF MOOBY SWAP REQ PAIR
ADDDC	010516	060302				ADD D,C
SPUSH						SPUSH PS
MOVPSPMOVPS	010524	012767	000340	167244		MOV #340,PS	;NO INTS!
MOVCSWPLEP	010532	010277	171004			MOV C,@SWPLEP
ADDSWPLEP	010536	062767	000002	170776		ADD #2,SWPLEP
SPOP						SPOP PS
MOVPPSMOVA	010550	012710	177777			MOV #-1,(A)	;NOT IN YET
BRNEXT10	010554	000424				BR NEXT10
					
NEXTU7MOVUSER	010556	012767	177777	170724	NEXTU7:	MOV #-1,USER	;FLUSH ENTERS HERE, SYSTEM NOW USER
MOVSLOTSTA	010564	012700	002212			MOV #SLOTST,A	;SEE IF THIS SUPER FLUSHED GUY IS IN CORE
NEXTU8CMPUA	010570	020520			NEXTU8:	CMP U,(A)+
BNENEXTU9	010572	001013				BNE NEXTU9	;NOT HERE.
TSTA	010574	005720				TST (A)+	;IS HE REALLY IN?
BLENEXT10	010576	003413				BLE NEXT10	;NO, NOT REALLY
CMPFRDSKWFLSRES	010600	022767	000003	171660		CMP #FRDSKW,FLSRES	;IF JUST HUNG ON DISK
BEQNEXT10	010606	001407				BEQ NEXT10	;FORGET HIM
MOVAPUSPSL	010610	010067	170722			MOV A,PUSPSL	;HE IS PREFERED OUT
MOVUPUSRSP	010614	010567	170720			MOV U,PUSRSP
BRNEXT10	010620	000402				BR NEXT10
NEXTU9TSTA	010622	005720			NEXTU9:	TST (A)+
BNENEXTU8	010624	001361				BNE NEXTU8
NEXT10JMPNEXTUS	010626	000167	177204		NEXT10:	JMP NEXTUS
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 53
	SYSTEM 327	PAGE 42 	SCHEDUALER

					
FLUSHTSTUSER	010632	005767	170652		FLUSH:	TST USER
BGEFLUSH4	010636	002001				BGE FLUSH4
RTSPC	010640	000207				RTS PC
FLUSH4JSRPCUACSAV	010642	004767	001170		FLUSH4:	JSR PC,UACSAV	;STOP USER; STORE HIS ACS
MOVACUAC	010646	016767	166430	172612		MOV AC,UAC
MOVMQUMQ	010654	016767	166424	172606		MOV MQ,UMQ
MOVSRUSR	010662	016767	166422	172602		MOV SR,USR
MOVFLSADRUA	010670	016500	002470			MOV FLSADR(U),A
SPOP						SPOP FLSADR(U)	;SAVE PC
MOVPFLSADRUTSTA	010700	005700				TST A	;IS THIS GUY ALREADY STOPED?
BNENEXTU7	010702	001325				BNE NEXTU7	;GO TRY ANOTHER GUY
UUNTIM						UUNTIM TIMUSD
MOVTIMUSDADDUSERJSRE.UTIMEMOVUSER	010726	012767	177777	170554		MOV #-1,USER
TIMER						TIMER NULTIM
JSRPC.TIMETSTFLSRESU	010740	005765	002466			TST FLSRES(U)
BNE	010744	001003				BNE .+10
MOVFRRANDFLSRESU	010746	012765	000006	002466		MOV #FRRAND,FLSRES(U)
DECNRABLU	010754	005367	170550			DEC NRABLU
MOVPUPDLP	010760	010667	172446			MOV P,UPDLP	;SAVE USER'S POINTER
MOVSPDLPP	010764	016706	167514			MOV SPDLP,P	;SYSTEM PDL
					
FOR						FOR DEBUG
.XLIST.IFNZDEBUG.LISTBITFRTRCFSFLAGS	010770	032767	000001	171370		BIT #FRTRCF,SFLAGS
BEQFLUSH3	010776	001425				BEQ FLUSH3
PRTXT						PRTXT ^/FLUSHING USER /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVUA	011024	010500				MOV U,A
JSRPCPRON	011026	004767	023154			JSR PC,PRON
SPACE						SPACE
JSRPC.SPACEMOVTIMEA	011036	016700	170456			MOV TIME,A
JSRPCPRON	011042	004767	023140			JSR PC,PRON
PRCR						PRCR
JSRPC.CRLF						.ENDC
ENDC						ENDC DEBUG
.XLIST.IFZDEBUG.LIST					
FLUSH3MOVUVBLKA	011052	012700	003426		FLUSH3:	MOV #UVBLK,A
MOVBASEUSB	011056	016701	172402			MOV BASEUS,B	;TO BLT OUT USER VARIABLES
FLUSH1SUBBA	011062	160120			FLUSH1:	SUB B,(A)+	;UNRELOCATE A POINTER
CMPUVRENDA	011064	022700	003466			CMP #UVREND,A	;END OF VARS TO BE UNRELOCATED?
BGTFLUSH1	011070	003374				BGT FLUSH1	;GO DO ANOTHER
MOVUVBLKA	011072	012700	003426			MOV #UVBLK,A	;SET UP FOR BLT
MOVACRELFC	011076	016702	172372			MOV ACRELF,C
BEQFLUSH2	011102	001413				BEQ FLUSH2
MOVUD	011104	010503				MOV U,D
ADDUACAD	011106	062703	002470			ADD #UACA-2,D	;POINTER TO USERS ACS
FLUSH5TSTD	011112	005723			FLUSH5:	TST (D)+	;NEXT AC TO MAYBE RELOCATE
TSTC	011114	005702				TST C
BEQFLUSH2	011116	001405				BEQ FLUSH2	;NO MORE TO RELOCATE
CLC	011120	000241				CLC
RORC	011122	006002				ROR C
BCCFLUSH5	011124	103372				BCC FLUSH5	;DON'T RELOCATE THIS ONE
SUBBD	011126	160113				SUB B,(D)
BRFLUSH5	011130	000770				BR FLUSH5
FLUSH2MOVAB	011132	012021			FLUSH2:	MOV (A)+,(B)+	;ONE AT A TIME, KIDDIES!
CMPUVBLKLUVBLKMAXELNA	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 54
	SYSTEM 327	PAGE 42.1 	SCHEDUALER

	011134	022700	003752			CMP #UVBLK+LUVBLK-MAXELN,A	;DONE?
BGTFLUSH2	011140	003374				BGT FLUSH2
JMPNEXTUS	011142	000167	176670			JMP NEXTUS
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 55
	SYSTEM 327	PAGE 43 	SCHEDUALER

					;RUNUSR, THE "MAIN LOOP"
					
RUNUSRCMPUPUSRSP	011146	020567	170366		RUNUSR:	CMP U,PUSRSP	;AM I THE GUY THEY WANT OUT?
BNE	011152	001002				BNE .+6	;BRANCH IF NO
CLRPUSPSL	011154	005067	170356			CLR PUSPSL	;I DON'T WANT TO GO!
INCA	011160	005210				INC (A)	;INDICATE THAT THIS GUY HAS BEEN RUN
MOVSLTCADSLOTSTAD	011162	016003	000044			MOV SLTCAD-SLOTST(A),D	;SLOT ADDRESS THIS GUY IS IN
TSTD	011166	005723				TST (D)+	;REALLY RIGHT NOW
MOVDB	011170	010301				MOV D,B	;BASE OF SLOT
MOVUVBLKC	011172	012702	003426			MOV #UVBLK,C	;BASE OF USER VARIABLES
RUNUS1MOVBC	011176	012122			RUNUS1:	MOV (B)+,(C)+	;BLTTTTTTTTTTTT!
CMPUVBLKLUVBLKC	011200	022702	004032			CMP #UVBLK+LUVBLK,C
BGTRUNUS1	011204	003374				BGT RUNUS1
MOVUVBLKC	011206	012702	003426			MOV #UVBLK,C	;TO RELOCATE VARIABLES
RUNUS2ADDDC	011212	060322			RUNUS2:	ADD D,(C)+	;ADD BASE OF SLOT
CMPUVRENDC	011214	022702	003464			CMP #UVREND-2,C
BGTRUNUS2	011220	003374				BGT RUNUS2
MOVDBASEUS	011222	010367	172236			MOV D,BASEUS
MOVACRELFA	011226	016700	172242			MOV ACRELF,A
BEQRUNUS5	011232	001413				BEQ RUNUS5
MOVUB	011234	010501				MOV U,B
ADDUACAB	011236	062701	002470			ADD #UACA-2,B
RUNUS6TSTB	011242	005721			RUNUS6:	TST (B)+
TSTA	011244	005700				TST A
BEQRUNUS5	011246	001405				BEQ RUNUS5
CLC	011250	000241				CLC
RORA	011252	006000				ROR A
BCCRUNUS6	011254	103372				BCC RUNUS6
ADDDB	011256	060311				ADD D,(B)
BRRUNUS6	011260	000770				BR RUNUS6
RUNUS5					RUNUS5:
FOR						FOR DEBUG
.XLIST.IFNZDEBUG.LISTBITFRTRCFSFLAGS	011262	032767	000001	171076		BIT #FRTRCF,SFLAGS
BEQRUNUS4	011270	001425				BEQ RUNUS4
PRTXT						PRTXT ^/STARTING USER /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVUA	011316	010500				MOV U,A
JSRPCPRON	011320	004767	022662			JSR PC,PRON
SPACE						SPACE
JSRPC.SPACEMOVTIMEA	011330	016700	170164			MOV TIME,A
JSRPCPRON	011334	004767	022646			JSR PC,PRON
PRCR						PRCR
JSRPC.CRLF						.ENDC
ENDC						ENDC DEBUG
.XLIST.IFZDEBUG.LIST					
RUNUS4MOVPSPDLP	011344	010667	167134		RUNUS4:	MOV P,SPDLP	;SAVE SYSTEM PDL POINTER
MOVUPDLPP	011350	016706	172056			MOV UPDLP,P	;GET USER PDL POINTER
MOVUUSER	011354	010567	170130			MOV U,USER	;NOW HE'S REALLY THE GUY
SPUSH						SPUSH UPC(U)	;PLACE TO START USER
MOVUPCUPMOVQUANTUQUANT	011364	016767	170134	170134		MOV QUANT,UQUANT	;RUN FOR 3 1/100TH'S????
UNTIME						UNTIME NULTIM
JSRE.UTIMENULTIMNULTIMUTIMER						UTIMER TIMUSD
JSRPC.TIMEMOVUACAC	011404	016767	172056	165670		MOV UAC,AC
MOVUMQMQ	011412	016767	172052	165664		MOV UMQ,MQ
MOVUSRSR	011420	016767	172046	165662		MOV USR,SR
JMPUACRES	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 56
	SYSTEM 327	PAGE 43.1 	SCHEDUALER

	011426	000167	000432			JMP UACRES	;RESTORE USER ACS AND START USER
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 57
	SYSTEM 327	PAGE 44 	SCHEDUALER

					
					
SCHEDPTSTUQUANT	011432	005767	170070		SCHEDP:	TST UQUANT	;SEE IF IT'S TIME TO FLUSH
BLE	011436	003401				BLE .+4	;NOT YET
RTSPC	011440	000207				RTS PC
SPUSH						SPUSH U
MOVUPMOVUSERU	011444	016705	170040			MOV USER,U
MOVFRSCEDFLSRESU	011450	012765	000001	002466		MOV #FRSCED,FLSRES(U)
JSRPCFLUSH	011456	004767	177150			JSR PC,FLUSH
JSRPCRUNME	011462	004767	176212			JSR PC,RUNME
SPOP						SPOP U
MOVPURTSPC	011470	000207				RTS PC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 58
	SYSTEM 327	PAGE 45 	CLOCK BREAK ROUTINE

					.STITL CLOCK BREAK ROUTINE
					
CLKBRKSPUSH					CLKBRK:	SPUSH A
MOVAPSPUSH						SPUSH B
MOVBPADDTIME	011476	062767	000200	170014		ADD #200,TIME
ADCTIME	011504	005567	170012			ADC TIME+2
DECUQUANT	011510	005367	170012			DEC UQUANT
TSTBDSKS	011514	105767	165740			TSTB DSKS	;IS THE DISK BUSY?
BGE	011520	002002				BGE .+6	;YES
JSRPCDSKSRT	011522	004767	175236			JSR PC,DSKSRT
CMPTIME	011526	022767	031577	167766		CMP #13183.,TIME+2	;IS IT MIDNIGHT?
BLEDATEC	011534	003416				BLE DATEC	;YES, CHANGE THE DATE
CLKBR1JMPCLKBR2	011536	000137	011542		CLKBR1:	JMP	@#CLKBR2
CLKBR2SPOP					CLKBR2:	SPOP B
MOVPBSPOP						SPOP A
MOVPARTI	011546	000002				RTI
					
					
CLKBDMBITTIME	011550	032767	007777	167742	CLKBDM:	BIT	#7777,TIME	;EVERY 4 BRKS (=<4*128>/10,000 SECS)
BNECLKBR2	011556	001371				BNE	CLKBR2	;1/20 < T < 1/21 SECS
JSRPCDMSQ	011560	004767	014052			JSR	PC,DMSQ
JSRPCTI2Q	011564	004767	014234			JSR	PC,TI2Q
BRCLKBR2	011570	000764				BR	CLKBR2
					
DATECCLRTIME	011572	005067	167724		DATEC:	CLR TIME+2	;TIME IS NOW ZERO
INCRDAY	011576	005267	000052			INC RDAY	;CHANGE THE DAY
MOVRMONTHA	011602	016700	000050			MOV RMONTH,A
CMPBRDAYDMONA	011606	126760	000042	011662		CMPB RDAY,DMON(A)
BLECLKBR1	011614	003750				BLE CLKBR1	;NOT ON A MONTH BOUNDARY
INCRMONTH	011616	005267	000034			INC RMONTH
MOVRDAY	011622	012767	000001	000024		MOV #1,RDAY
CMPRMONTH	011630	022767	000012	000020		CMP #12,RMONTH
BLECLKBR1	011636	003737				BLE CLKBR1
INCRYEAR	011640	005267	000014			INC RYEAR
MOVRMONTH	011644	012767	000001	000004		MOV #1,RMONTH
BRCLKBR1	011652	000731				BR CLKBR1
					
RDAY	011654	000000			RDAY:	0
RMONTH	011656	000000			RMONTH:	0
RYEAR	011660	000000			RYEAR:	0
DMON.BYTE	011662	   037		
	011663	   034		
	011664	   037		
	011665	   036		
	011666	   037		
	011667	   036		
	011670	   037		
	011671	   037		
	011672	   036		
	011673	   037		
	011674	   036		
	011675	   037			DMON:	.BYTE 31.,28.,31.,30.,31.,30.,31.,31.,30.,31.,30.,31.
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 59
	SYSTEM 327	PAGE 46 	SWAP START+STOP ROUTINES

						.STITL	SWAP START+STOP ROUTINES
					
SWPOSTMOVSWPOSPA	011676	012710	011704		SWPOST:	MOV #SWPOSP,(A)	;SWAP OUT USER START, SET UP STOP
RTSPC	011702	000207				RTS PC
					
SWPOSPTSTP	011704	005726			SWPOSP:	TST (P)+	;FLUSH RETURN, WE'RE NOT GOING BACK THAT WAY
ADDA	011706	062700	000016			ADD #16,A	;POINT TO SWAP IN BLOCK
JSRPCDSKSGO	011712	004767	175120			JSR PC,DSKSGO	;START DISK ON THAT
JMPDSKRET	011716	000167	175734			JMP DSKRET	;AND RETURN FROM INTERUPT
					
SWPISTMOVSWPISPA	011722	012710	011730		SWPIST:	MOV #SWPISP,(A)	;SWAP IN START, SET UP STOP
RTSPC	011726	000207				RTS PC
					
SWPISPCLRUQUANT	011730	005067	167572		SWPISP:	CLR UQUANT	;SCHED REAL SOON
MOVAB	011734	016001	000012			MOV 12(A),B	;FLAG
MOVB	011740	012711	000001			MOV #1,(B)	;THIS GUY IS IN AND NOT RUN YET
SUBSWPLEP	011744	162767	000002	167570		SUB #2,SWPLEP
SPUSH						SPUSH A
MOVAPMOVSWPLSTA	011754	012700	001546			MOV #SWPLST+2,A
MOVSWPLSTB	011760	012701	001544			MOV #SWPLST,B
MOVAB	011764	012021				MOV (A)+,(B)+
BNE	011766	001376				BNE .-2
INCNINU	011770	005267	167540			INC NINU	;ONE MORE GUY IN
DECNSWPU	011774	005367	167532			DEC NSWPU	;ONE LESS GUY MOVING
SPOP						SPOP A
MOVPARTSPC	012002	000207				RTS PC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 60
	SYSTEM 327	PAGE 47 	MISC ROUTINES

						.STITL MISC ROUTINES
					
ACSAVMOVEP	012004	010446			ACSAV:	MOV E,-(P)
MOVDP	012006	010346				MOV D,-(P)
MOVCP	012010	010246				MOV C,-(P)
MOVBP	012012	010146				MOV B,-(P)
MOVAP	012014	010046				MOV A,-(P)
JMPF	012016	000115				JMP (F)
					
ACRESTSTP	012020	005726			ACRES:	TST (P)+
MOVPA	012022	012600				MOV (P)+,A
MOVPB	012024	012601				MOV (P)+,B
MOVPC	012026	012602				MOV (P)+,C
MOVPD	012030	012603				MOV (P)+,D
MOVPE	012032	012604				MOV (P)+,E
RTSF	012034	000205				RTS F
					
UACSAVMOVAUACAU	012036	010065	002472		UACSAV:	MOV A,UACA(U)
MOVBUACBU	012042	010165	002474			MOV B,UACB(U)
MOVCUACCU	012046	010265	002476			MOV C,UACC(U)
MOVDUACDU	012052	010365	002500			MOV D,UACD(U)
MOVEUACEU	012056	010465	002502			MOV E,UACE(U)
RTSPC	012062	000207				RTS PC
					
UACRESMOVUACAUA	012064	016500	002472		UACRES:	MOV UACA(U),A
MOVUACBUB	012070	016501	002474			MOV UACB(U),B
MOVUACCUC	012074	016502	002476			MOV UACC(U),C
MOVUACDUD	012100	016503	002500			MOV UACD(U),D
MOVUACEUE	012104	016504	002502			MOV UACE(U),E
RTSPC	012110	000207				RTS PC
					
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 61
	SYSTEM 327	PAGE 48 	MISC ROUTINES

					
					
PPUSHTCMPPPPUSHL	012112	020667	171332		PPUSHT:	CMP P,PPUSHL
BLOS	012116	101401				BLOS .+4
RTSPC	012120	000207				RTS PC
BITP	012122	032706	177000			BIT #177000,P	;IS IT THE SYSYTEM PDL?
BNE	012126	001001				BNE .+4
RTSPC	012130	000207				RTS PC	;YES, IGNORE
JMPPPSWPO	012132	000167	000120			JMP PPSWPO	;PDL REALLY OVERFLOWED
					
PPOPTCMPPPPOPL	012136	020667	171304		PPOPT:	CMP P,PPOPL
BHIS	012142	103001				BHIS .+4
RTSPC	012144	000207				RTS PC
JMPPPSWPI	012146	000167	000552			JMP PPSWPI
					
SPUSHTSUBS	012152	162767	000002	171250	SPUSHT:	SUB #2,S
CMPSSPUSHL	012160	026767	171244	171250		CMP S,SPUSHL
BLOS	012166	101401				BLOS .+4
RTSPC	012170	000207				RTS PC
JMPSPSWPO	012172	000167	000306			JMP SPSWPO
					
SPOPTADDS	012176	062767	000002	171224	SPOPT:	ADD #2,S
CMPSSPOPL	012204	026767	171220	171222		CMP S,SPOPL
BHI	012212	101001				BHI .+4
RTSPC	012214	000207				RTS PC
JMPSPSWPI	012216	000167	000736			JMP SPSWPI
					
.SPACEPRTXT					.SPACE:	PRTXT ^\ \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTRTSPC	012230	000207				RTS PC
					
.CRLFJMP	012232	000137	012236		.CRLF:	JMP	@#.+4
JSRPCERTAP	012236	004767	021714			JSR PC,ERTAP
CRMESCRMES	012242	002374				CRMES
RTSPC	012244	000207				RTS PC
					
CRLFMOVD	012246	012703	000015		CRLF:	MOV	#15,D
JMPTYO	012252	000167	006026			JMP	TYO
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 62
	SYSTEM 327	PAGE 49 	P AND S PDL SWAP OUTERS

						.STITL P AND S PDL SWAP OUTERS
					
PPSWPOJSRFACSAV	012256	004567	177522		PPSWPO:	JSR F,ACSAV	;TIME TO WORK!
					
FOR						FOR DEBUG
.XLIST.IFNZDEBUG.LISTBITSPTRCFSFLAGS	012262	032767	000004	170076		BIT #SPTRCF,SFLAGS
BEQPPSWP1	012270	001432				BEQ PPSWP1
SUBPPUSHL	012272	162767	000100	171150		SUB #100,PPUSHL	;SO IT DOESN'T OVERFLOW AGAIN
PRTXT						PRTXT ^/SWAPPING OUT P PDL /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVPA	012330	010600				MOV P,A
SUBAPRBAO	012332	160067	171120			SUB A,PRBAO
NEGA	012336	005400				NEG A
JSRPCPRON	012340	004767	021642			JSR PC,PRON
PRCR						PRCR
JSRPC.CRLFADDPPUSHL	012350	062767	000100	171072		ADD #100,PPUSHL
						.ENDC
ENDC						ENDC DEBUG
.XLIST.IFZDEBUG.LIST					
PPSWP1JSRPCUBLKGR	012356	004767	174712		PPSWP1:	JSR PC,UBLKGR	;GET ALL THE GOOD STUFF WE NEED
HALT	012362	000000				HALT	;WHAT, NO DISK SPACE
HALT	012364	000000				HALT	;STOP, YOU STUPID MACHINE
SPUSH						SPUSH B	;SAVE ADDRESS
MOVBPMOVPSWPADA	012370	016760	171056	000004		MOV PSWPAD,4(A)	;PLACE WHERE PDL IS
MOVBDWRTECA	012376	112760	000103	000014		MOVB #DWRTEC,14(A)	;WRITE IT ONTO THE RIGHT PLACE
JSRPCDSKWA2	012404	004767	174624			JSR PC,DSKWA2	;FLUSH UNTIL IT IS REALLY OUT
MOVBASEUSA	012410	016700	171050			MOV BASEUS,A
ADDPDLINKSLOT1A	012414	062700	001210			ADD #PDLINK+4-SLOT1,A	;GIVING US THE LINK ADDRESS+4 FOR THIS GUY
MOVCA	012420	010240				MOV C,-(A)	;HIGH ORDER PART
SPOP						SPOP -(A)	;LOW ORDER PART
MOVPABITPPNAIFFLAGS2	012424	032767	002000	171162		BIT #PPNAIF,FLAGS2	;WAS THE PDL NOT ALL THE WAY IN ANYWAY?
BNE	012432	001003				BNE .+10	;PART ALREADY OUT
SUBPPOPL	012434	162767	000054	171004		SUB #54,PPOPL	;NONE OUT BEFORE, CHANGE LIMIT
BISPPNAIFFLAGS2	012442	052767	002000	171144		BIS #PPNAIF,FLAGS2	;CERTAINLY NOT ALL IN NOW
MOVPSWPADB	012450	016701	170776			MOV PSWPAD,B	;ADDRESS-2 PDL SWAPED FROM
MOVBA	012454	011140				MOV (B),-(A)	;MOVE WORDS UP
MOVBA	012456	014140				MOV -(B),-(A)
CMPBP	012460	020106				CMP B,P
BGE	012462	002375				BGE .-4
ADDP	012464	062706	000374			ADD #374,P	;PDL HAS MOVED!
ADDPRBAO	012470	062767	000374	170760		ADD #374,PRBAO
JSRFACRES	012476	004567	177316			JSR F,ACRES	;ALL DONE!
RTSPC	012502	000207				RTS PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 63
	SYSTEM 327	PAGE 50 	P AND S PDL SWAP OUTERS

					
					
SPSWPOJSRFACSAV	012504	004567	177274		SPSWPO:	JSR F,ACSAV	;TIME TO WORK!
					
FOR						FOR DEBUG
.XLIST.IFNZDEBUG.LISTBITSPTRCFSFLAGS	012510	032767	000004	167650		BIT #SPTRCF,SFLAGS
BEQSPSWP1	012516	001425				BEQ SPSWP1
PRTXT						PRTXT ^/SWAPING OUT S PDL /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVSA	012550	016700	170654			MOV S,A
SUBASPRBAO	012554	160067	170664			SUB A,SPRBAO
NEGA	012560	005400				NEG A
JSRPCPRON	012562	004767	021420			JSR PC,PRON
PRCR						PRCR
JSRPC.CRLF						.ENDC
ENDC						ENDC DEBUG
.XLIST.IFZDEBUG.LIST					
SPSWP1JSRPCUBLKGR	012572	004767	174476		SPSWP1:	JSR PC,UBLKGR	;GET ALL THE GOOD STUFF WE NEED
HALT	012576	000000				HALT	;WHAT, NO DISK SPACE
HALT	012600	000000				HALT	;STOP, YOU STUPID MACHINE
SPUSH						SPUSH B	;SAVE ADDRESS
MOVBPMOVSSWPADA	012604	016760	170630	000004		MOV SSWPAD,4(A)	;PLACE WHERE PDL IS
MOVBDWRTECA	012612	112760	000103	000014		MOVB #DWRTEC,14(A)	;WRITE IT ONTO THE RIGHT PLACE
JSRPCDSKWA2	012620	004767	174410			JSR PC,DSKWA2	;FLUSH UNTIL IT IS REALLY OUT
MOVBASEUSA	012624	016700	170634			MOV BASEUS,A
ADDSDLINKSLOT1A	012630	062700	002014			ADD #SDLINK+4-SLOT1,A	;GIVING US THE LINK ADDRESS+4 FOR THIS GUY
MOVCA	012634	010240				MOV C,-(A)	;HIGH ORDER PART
SPOP						SPOP -(A)	;LOW ORDER PART
MOVPABITSPNAIFFLAGS2	012640	032767	004000	170746		BIT #SPNAIF,FLAGS2	;WAS THE PDL NOT ALL THE WAY IN ANYWAY?
BNE	012646	001003				BNE .+10	;PART ALREADY OUT
SUBSPOPL	012650	162767	000054	170556		SUB #54,SPOPL	;NONE OUT BEFORE, CHANGE LIMIT
BISSPNAIFFLAGS2	012656	052767	004000	170730		BIS #SPNAIF,FLAGS2	;CERTAINLY NOT ALL IN NOW
MOVSSWPADB	012664	016701	170550			MOV SSWPAD,B	;ADDRESS-2 PDL SWAPED FROM
MOVBA	012670	011140				MOV (B),-(A)	;MOVE WORDS UP
MOVBA	012672	014140				MOV -(B),-(A)
CMPBS	012674	020167	170530			CMP B,S
BGE	012700	002374				BGE .-6
ADDS	012702	062767	000374	170520		ADD #374,S	;PDL HAS MOVED!
ADDSPRBAO	012710	062767	000374	170526		ADD #374,SPRBAO
JSRFACRES	012716	004567	177076			JSR F,ACRES	;ALL DONE!
RTSPC	012722	000207				RTS PC
					
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 64
	SYSTEM 327	PAGE 51 	P AND S PDL SWAPER INERS

						.STITL P AND S PDL SWAPER INERS
PPSWPIBITPPNAIFFLAGS2	012724	032767	002000	170662	PPSWPI:	BIT #PPNAIF,FLAGS2	;IS THE PDL ALL THE WAY IN?
BNE	012732	001001				BNE .+4	;NO (PRAISE THE LORD!)
HALT	012734	000000				HALT
JSRFACSAV	012736	004567	177042			JSR F,ACSAV
					
FOR						FOR DEBUG
.XLIST.IFNZDEBUG.LISTBITSPTRCFSFLAGS	012742	032767	000004	167416		BIT #SPTRCF,SFLAGS
BEQPSWPI1	012750	001423				BEQ PSWPI1
PRTXT						PRTXT ^/SWAPING IN P PDL /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVPA	013000	010600				MOV P,A
SUBAPRBAO	013002	160067	170450			SUB A,PRBAO
NEGA	013006	005400				NEG A
JSRPCPRON	013010	004767	021172			JSR PC,PRON
PRCR						PRCR
JSRPC.CRLF						.ENDC
ENDC						ENDC DEBUG
.XLIST.IFZDEBUG.LIST					
PSWPI1MOVPSWPADA	013020	016700	170426		PSWPI1:	MOV PSWPAD,A
MOVAB	013024	010001				MOV A,B
ADDA	013026	062700	000374			ADD #374,A
MOVAB	013032	011011				MOV (A),(B)
MOVAB	013034	014041				MOV -(A),-(B)
CMPAP	013036	020006				CMP A,P
BGT	013040	003375				BGT .-4
SUBP	013042	162706	000374			SUB #374,P
SUBPRBAO	013046	162767	000374	170402		SUB #374,PRBAO
JSRPCSYDRBG	013054	004767	174066			JSR PC,SYDRBG
TSTA	013060	005720				TST (A)+
MOVA	013062	012720	177600			MOV #-200,(A)+
MOVPSWPADA	013066	016720	170360			MOV PSWPAD,(A)+
MOVPPBASEE	013072	016704	170356			MOV PPBASE,E
MOVEC	013076	012402				MOV (E)+,C
MOVCA	013100	010220				MOV C,(A)+
MOVEA	013102	011420				MOV (E),(A)+
TSTA	013104	005720				TST (A)+
MOVBDREADCA	013106	112710	000105			MOVB #DREADC,(A)
JSRPCDSKWAI	013112	004767	174122			JSR PC,DSKWAI
MOVPPBASED	013116	016703	170332			MOV PPBASE,D
TSTD	013122	005723				TST (D)+
BNEPSWPI2	013124	001010				BNE PSWPI2
TSTD	013126	005713				TST (D)
BNEPSWPI2	013130	001006				BNE PSWPI2
BICPPNAIFFLAGS2	013132	042767	002000	170454		BIC #PPNAIF,FLAGS2	;IF BOTH LINKS ARE ZERO NOW, THERE IS NO MORE PDL ON DISK
ADDPPOPL	013140	062767	000054	170300		ADD #54,PPOPL
PSWPI2JSRPCUBLKFR	013146	004767	174206		PSWPI2:	JSR PC,UBLKFR
JSRFACRES	013152	004567	176642			JSR F,ACRES
RTSPC	013156	000207				RTS PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 65
	SYSTEM 327	PAGE 52 	P AND S PDL SWAPER INERS

					
SPSWPIBITSPNAIFFLAGS2	013160	032767	004000	170426	SPSWPI:	BIT #SPNAIF,FLAGS2	;IS THE PDL ALL THE WAY IN?
BNE	013166	001001				BNE .+4	;NO (PRAISE THE LORD!)
HALT	013170	000000				HALT
JSRFACSAV	013172	004567	176606			JSR F,ACSAV
					
FOR						FOR DEBUG
.XLIST.IFNZDEBUG.LISTBITSPTRCFSFLAGS	013176	032767	000004	167162		BIT #SPTRCF,SFLAGS
BEQSSWPI1	013204	001424				BEQ SSWPI1
PRTXT						PRTXT ^/SWAPING IN S PDL /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVSA	013234	016700	170170			MOV S,A
SUBASPRBAO	013240	160067	170200			SUB A,SPRBAO
NEGA	013244	005400				NEG A
JSRPCPRON	013246	004767	020734			JSR PC,PRON
PRCR						PRCR
JSRPC.CRLF						.ENDC
ENDC						ENDC DEBUG
.XLIST.IFZDEBUG.LIST					
SSWPI1MOVSSWPADA	013256	016700	170156		SSWPI1:	MOV SSWPAD,A
MOVAB	013262	010001				MOV A,B
MOVAB	013264	011011				MOV (A),(B)
ADDA	013266	062700	000374			ADD #374,A
MOVAB	013272	011011				MOV (A),(B)
MOVAB	013274	014041				MOV -(A),-(B)
CMPAS	013276	020067	170126			CMP A,S
BGT	013302	003374				BGT .-6
SUBS	013304	162767	000374	170116		SUB #374,S
SUBSPRBAO	013312	162767	000374	170124		SUB #374,SPRBAO
JSRPCSYDRBG	013320	004767	173622			JSR PC,SYDRBG
TSTA	013324	005720				TST (A)+
MOVA	013326	012720	177600			MOV #-200,(A)+
MOVSSWPADA	013332	016720	170102			MOV SSWPAD,(A)+
MOVSPBASEE	013336	016704	170100			MOV SPBASE,E
MOVEC	013342	012402				MOV (E)+,C
MOVCA	013344	010220				MOV C,(A)+
MOVEA	013346	011420				MOV (E),(A)+
TSTA	013350	005720				TST (A)+
MOVBDREADCA	013352	112710	000105			MOVB #DREADC,(A)
JSRPCDSKWAI	013356	004767	173656			JSR PC,DSKWAI
MOVSPBASED	013362	016703	170054			MOV SPBASE,D
TSTD	013366	005723				TST (D)+
BNESSWPI2	013370	001010				BNE SSWPI2
TSTD	013372	005713				TST (D)
BNESSWPI2	013374	001006				BNE SSWPI2
BICSPNAIFFLAGS2	013376	042767	004000	170210		BIC #SPNAIF,FLAGS2	;IF BOTH LINKS ARE ZERO NOW, THERE IS NO MORE PDL ON DISK
ADDSPOPL	013404	062767	000054	170022		ADD #54,SPOPL
SSWPI2JSRPCUBLKFR	013412	004767	173742		SSWPI2:	JSR PC,UBLKFR
JSRFACRES	013416	004567	176376			JSR F,ACRES
RTSPC	013422	000207				RTS PC
					
					
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 66
	SYSTEM 327	PAGE 53 	P AND S PDL SWAPER INERS

					
.IFZ		000105			.IFZ 105
					
					SWAPER:	CLR A
					SWAP1:	PUSH A
						PUSHS A
						INC A
						CMP A,B
						BGT SWAP2
						BR SWAP1
					SWAP2:	POP C
						POPS D
						DEC A
						CMP A,D
						BEQ .+4
						HALT
						CMP A,C
						BEQ .+4
						HALT
						TST A
						BEQ SWAPER
						BR SWAP2
					.ENDC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 67
	SYSTEM 327	PAGE 54 	TIMER ROUTINES

						.STITL TIMER ROUTINES
					
.TIMESPUSH					.TIME:	SPUSH A
MOVAPSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPSPUSH						SPUSH D
MOVDPSPUSH						SPUSH PS
MOVPSPMOVPS	013440	012767	000340	164330		MOV #340,PS
JSRPCGTIME	013446	004767	000206			JSR PC,GTIME
JSRPCURELTM	013452	004767	000152			JSR PC,URELTM
MOVTMPDLPD	013456	016703	165760			MOV TMPDLP,D
MOVAD	013462	011023				MOV (A),(D)+
MOVAD	013464	014023				MOV -(A),(D)+
MOVDTMPDLP	013466	010367	165750			MOV D,TMPDLP
CLRA	013472	005020				CLR (A)+
CLRA	013474	005010				CLR (A)
JSRPCRELTIM	013476	004767	000142			JSR PC,RELTIM
SPOP						SPOP PS
MOVPPSSPOP						SPOP D
MOVPDSPOP						SPOP C
MOVPCSPOP						SPOP B
MOVPBSPOP						SPOP A
MOVPARTSPC	013516	000207				RTS PC
					
.UTIMESPUSH					.UTIME:	SPUSH A
MOVAPSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPSPUSH						SPUSH D
MOVDPSPUSH						SPUSH PS
MOVPSPMOVPS	013534	012767	000340	164234		MOV #340,PS
JSRPCGTIME	013542	004767	000112			JSR PC,GTIME
JSRPCURELTM	013546	004767	000056			JSR PC,URELTM
MOVEA	013552	012400				MOV (E)+,A
ADDELAPSEA	013554	066720	165724			ADD ELAPSE,(A)+
ADCA	013560	005510				ADC (A)
ADDELAPSEA	013562	066710	165720			ADD ELAPSE+2,(A)
MOVTMPDLPD	013566	016703	165650			MOV TMPDLP,D
MOVDELAPSE	013572	014367	165706			MOV -(D),ELAPSE
MOVDELAPSE	013576	014367	165704			MOV -(D),ELAPSE+2
MOVDTMPDLP	013602	010367	165634			MOV D,TMPDLP
JSRPCRELTIM	013606	004767	000032			JSR PC,RELTIM
SPOP						SPOP PS
MOVPPSSPOP						SPOP D
MOVPDSPOP						SPOP C
MOVPCSPOP						SPOP B
MOVPBSPOP						SPOP A
MOVPARTSE	013626	000204				RTS E
					
URELTMMOVELAPSEA	013630	012700	001504		URELTM:	MOV #ELAPSE,A
ADDBA	013634	060120				ADD B,(A)+
ADCA	013636	005510				ADC (A)
ADDCA	013640	060210				ADD C,(A)
RTSPC	013642	000207				RTS PC
					
RELTIMMOVELAPSEA	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 68
	SYSTEM 327	PAGE 54.1 	TIMER ROUTINES

	013644	012700	001504		RELTIM:	MOV #ELAPSE,A
SUBBA	013650	160120				SUB B,(A)+
SBCA	013652	005610				SBC (A)
SUBCA	013654	160210				SUB C,(A)
RTSPC	013656	000207				RTS PC
					
					
GTIMEMOVPCCNTB	013660	016701	156660		GTIME:	MOV PCCNT,B
ADDB	013664	062701	000200			ADD #200,B
TSTBPCS	013670	105767	156644			TSTB PCS
BGE	013674	002002				BGE .+6
MOVB	013676	012701	000200			MOV #200,B
MOVTIMEC	013702	016702	165614			MOV TIME+2,C
ADDTIMEB	013706	066701	165606			ADD TIME,B
ADCC	013712	005502				ADC C
RTSPC	013714	000207				RTS PC
					
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 69
	SYSTEM 327	PAGE 55 	COMMUNICATE WITH MAIN MACHINE

						.STITL COMMUNICATE WITH MAIN MACHINE
					
RJLSW	013716	000000			RJLSW:	0	;NON-ZERO=> ACTIVATE COMMUNICATE LINK
REDY10	013720	000000			REDY10:	0	;NON-ZERO=>10 IS READY
SYSMES	013722	000000			SYSMES:	0	;NUMBER OF MESSAGES WAITING FOR THE SYSTEM
.MACREXCHA						.MACR EXCHA X,Y
						MOV X,A
						MOV Y,X
						MOV A,Y
						.ENDM
					
					;LOGIN STRING
LOGMES.BYTE	013724	   032		
	013725	   023		
	013726	   023		
	013727	   037			LOGMES:	.BYTE 'Z-100,'S-100,'S-100,'_-100
.ASCII	013730	   122		
	013731	   061		
	013732	   061		
	013733	   114		
	013734	   117		
	013735	   107		
	013736	   117		
						.ASCII /R11LOGO/
.BYTE	013737	   033				.BYTE 33
.ASCII	013740	   125		
	013741	   061		
	013742	   061		
	013743	   110		
	013744	   105		
	013745	   122		
	013746	   105		
						.ASCII /U11HERE/
.BYTE	013747	   013		
	013750	   000				.BYTE 'K-100,0
.EVEN		013752				.EVEN
					
					;RECIEVE VARIABLES
RBPOIN	013752	000000			RBPOIN:	0
DCRBIPDCRBF1DCRBF1	013754	014130			DCRBIP:	DCRBF1-2	;INITIAL POINTER
DCRACF	013756	000000			DCRACF:	0	;ACKNOWLEDGE FLAG
DCRCKS	013760	000000			DCRCKS:	0	;CHECKSUM OF INCOMING WORDS
DCRMID	013762	000000			DCRMID:	0	;ID # SENT WITH MESSAGE
DCRWCT	013764	000000			DCRWCT:	0	;WORD COUNT OF CURRENT MESSAGE
DCRPRB	013766	000000			DCRPRB:	0	;"PARITY" BITS FOR INCOMING WORD
DCRWBL	013770	000000			DCRWBL:	0	;BUILD RECIEVED WORD HERE
					
DCRLST		014032			DCRLST:	.=.+40	;MESSAGES WAITNING TO BE PICKED UP
					
DCRDRB.WORD	014032	000000		
	014034	177400		
DCRBF2	014036	014230		
	014040	000000		
	014042	000000		
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 70
	SYSTEM 327	PAGE 55.1 	COMMUNICATE WITH MAIN MACHINE

	014044	000000		
	014046	000000			DCRDRB:	.WORD 0,-400,DCRBF2-2,0,0,0,0	;DISK REQUEST BLOCK
					
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 71
	SYSTEM 327	PAGE 56 	COMMUNICATE WITH MAIN MACHINE

					
					;TRANSMIT VARIABLES
TBPOIN	014050	000000			TBPOIN:	0
DCTSMS		014072			DCTSMS:	.=.+20	;SMALL (1 OR 2 CHAR)MESSAGES TO BE SENT
DCTBST		014132			DCTBST:	.=.+40	;MESSAGES WAITING TO BE SENT
					;BUFFERS
DCRBF1		014232			DCRBF1:	.=.+100	;RECIEVE BUFFER 1
DCRBF2		014332			DCRBF2:	.=.+100	;   "      "    2
					
					;DC11 PDLS
		014352				.=.+20
RLOGINRLOGIN	014352	014442				RLOGIN
RPDLP	014354	014352			RPDLP:	.-2
		014376				.=.+20
TLOGINTLOGIN	014376	015304				TLOGIN
TPDLP	014400	014376			TPDLP:	.-2
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 72
	SYSTEM 327	PAGE 57 	COMMUNICATE WITH MAIN MACHINE

					
					;RECIEVE INTERUPT ROUTINES
					
DCRBRKSPUSH					DCRBRK:	SPUSH A
MOVAPEXCHA						EXCHA RPDLP,P	;SET UP RECIEVE PDL
MOVRPDLPAMOVPRPDLPMOVAPMOVDCRBA	014416	016700	157360			MOV DCRB,A	;GET CHAR FROM LINE
RTSPC	014422	000207				RTS PC	;RESUME PROCESSING
					
RFLUSHEXCHA					RFLUSH:	EXCHA RPDLP,P	;RESTORE PDL
MOVRPDLPAMOVPRPDLPMOVAPSPOP						SPOP A
MOVPARTI	014440	000002				RTI
					
RLOGINBISDCTS	014442	052767	000100	157334	RLOGIN:	BIS #100,DCTS	;WAKE UP TRANSMIT ROUTINE
JSRPCRFLUSH	014450	004767	177750			JSR PC,RFLUSH	;GET NEXT CHAR
CMPA	014454	022700	000140			CMP #140,A	;IS IT SYNC?
BNERLOGIN	014460	001370				BNE RLOGIN	;NO, WAIT FOR THE 10 TO WAKE UP
INCREDY10	014462	005267	177232			INC REDY10	;10 IS READY TO COMMUNICATE
					
RECLOPJSRPCRFLUSH	014466	004767	177732		RECLOP:	JSR PC,RFLUSH	;GET THE NEXT CHAR OFF THE LINE
SUBA	014472	162700	000140			SUB #140,A	;IS IT CONTROL CHAR?
BLTRECLOP	014476	002773				BLT RECLOP	;NO (THIS SHOULDN'T HAPPEN)
CMPA	014500	022700	000010			CMP #10,A	;IS IT TOO BIG?
BLERECLOP	014504	003770				BLE RECLOP	;YUP (THIS SHOULD HAPPEN EVEN LESS!!)
ASLA	014506	006300				ASL A
JMPRECTABA	014510	000170	014514			JMP @RECTAB(A)	;DO THE CONTROL CHAR
					
RECTABRECLOPRECLOP	014514	014466			RECTAB:	RECLOP	;NULL, SYNC(WHATEVER YOU WANT TO CALL IT)
STPRECSTPREC	014516	014534				STPREC	;STOP!
ACTRECACTREC	014520	014534				ACTREC	;WELL?????
RECLOPRECLOP	014522	014466				RECLOP	;???
RECLOPRECLOP	014524	014466				RECLOP	;????
ACKRECACKREC	014526	014546				ACKREC	;ACKNOWLEDGEMENT OF TRANSMITTED MESSAGE
NAKRECNAKREC	014530	014536				NAKREC	;NEGATIVE, PLEASE SEND AGAIN
DATADATA	014532	014600				DATA	;DATA BLOCK COMES NEXT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 73
	SYSTEM 327	PAGE 58 	COMMUNICATE WITH MAIN MACHINE

					
STPRECACTRECBRRECLOP	014534	000754			STPREC:ACTREC:	BR RECLOP
					
NAKRECMOVDCRACF	014536	012767	177777	177212	NAKREC:	MOV #-1,DCRACF	;FOR NAK
BRACKRC1	014544	000402				BR ACKRC1
ACKRECCLRDCRACF	014546	005067	177204		ACKREC:	CLR DCRACF
ACKRC1JSRPCGBITCH	014552	004767	000422		ACKRC1:	JSR PC,GBITCH	;GET NUMBER OF MESSAGE BEING "ACK"ED
BRRECLOP	014556	000743				BR RECLOP	;LOSE!
CMPA	014560	022700	000020			CMP #20,A	;IS IT TOO BIG?
BLERECLOP	014564	003740				BLE RECLOP
ASLA	014566	006300				ASL A
MOVDCRACFDCTBSTA	014570	016760	177162	014072		MOV DCRACF,DCTBST(A)	;TELL TRANSMIT ROUTINES ACK OR NAK
BRRECLOP	014576	000733				BR RECLOP
					
DATACLRDCRCKS	014600	005067	177154		DATA:	CLR DCRCKS	;CLEAR CHECKSUM
JSRPCGWORD	014604	004767	000242			JSR PC,GWORD	;GET A WORD OFF THE LINE
JMPRECLOP	014610	000167	177652			JMP RECLOP	;BAD PARITY IN WORD, CAN'T WIN
MOVBDCRWBLDCRMID	014614	116767	177151	177140		MOVB DCRWBL+1,DCRMID	;SENDERS ID # FOR THIS DATA
MOVBADCRWCT	014622	110067	177136			MOVB A,DCRWCT	;NUMBER OF WORDS FOLLOWING, INC. CHECKSUM
MOVDCRBIPRBPOIN	014626	016767	177122	177116		MOV DCRBIP,RBPOIN	;POINTER TO CURRENT BUFFER
DATA1ADDRBPOIN	014634	062767	000002	177110	DATA1:	ADD #2,RBPOIN	;POINT TO NEXT WORD
JSRPCGWORD	014642	004767	000204			JSR PC,GWORD
BRNODATA	014646	000477				BR NODATA	;PARITY ERROR IN WORD
MOVARBPOIN	014650	010077	177076			MOV A,@RBPOIN	;SAVE WORD
DECDCRWCT	014654	005367	177104			DEC DCRWCT	;IS IT THE LAST ONE(CHECKSUM)?
BGTDATA1	014660	003365				BGT DATA1	;NO
TSTDCRCKS	014662	005767	177072			TST DCRCKS	;SHOULD BE ZERO
BNENODATA	014666	001067				BNE NODATA	;NO SUCH LUCK
TSTDCRDRB	014670	005767	177152			TST DCRDRB+14	;HAS THE LAST MESSAGE MADE IT TO THE DISK?
BNENODATA	014674	001064				BNE NODATA	;NO, CAN'T KEEP THIS MESSAGE
SPUSH						SPUSH B
MOVBPMOVDCRLSTB	014700	012701	013772			MOV #DCRLST,B
TSTB	014704	005721				TST (B)+	;IS THIS RECIEVE BUFFER FREE?
BNE	014706	001376				BNE .-2	;NO
TSTB	014710	005741				TST -(B)	;FOUND A FREE ONE
CMPDCRLSTB	014712	022701	014032			CMP #DCRLST+40,B	;IS IT REALLY ONE?
BGENODATA	014716	002053				BGE NODATA	;NO PLACE TO PUT MESSAGE
EXCHA						EXCHA DCRBIP,DCRDRB+4	;EXCH BUFFER USAGE
MOVDCRBIPAMOVDCRDRBDCRBIPMOVADCRDRBTSTA	014736	005720				TST (A)+
MOVAA	014740	011000				MOV (A),A	;THIS IS THE MESSAGE ID
MOVAB	014742	010011				MOV A,(B)	;SO THE USER CAN FIND IT
BITA	014744	032700	177400			BIT #177400,A	;IS THIS MESSAGE FOR THE SYSTEM?
BNE	014750	001002				BNE .+6	;NO
INCSYSMES	014752	005267	176744			INC SYSMES	;TELL THE SYSTEM IT HAS A MESSAGE
SUBDCRLSTB	014756	162701	013772			SUB #DCRLST,B
ASLB	014762	006301				ASL B
ASLB	014764	006301				ASL B
ASLB	014766	006301				ASL B
ASLB	014770	006301				ASL B
ADDDCRBFSB	014772	066701	165322			ADD DCRBFS,B
MOVBDCRDRB	014776	010167	177036			MOV B,DCRDRB+6
MOVDCRBFSDCRDRB	015002	016767	165314	177032		MOV DCRBFS+2,DCRDRB+10	;DISK ADDRESS OF BUFFER
MOVDCTSMSA	015010	012700	014052			MOV #DCTSMS,A	;FIND A SMALL MESSAGE SLOT
TSTA	015014	005720				TST (A)+
BNE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 74
	SYSTEM 327	PAGE 58.1 	COMMUNICATE WITH MAIN MACHINE

	015016	001376				BNE .-2
MOVB	015020	012701	062400			MOV #<145_10>,B
BISDCRMIDB	015024	056701	176732			BIS DCRMID,B
ADDB	015030	062701	000040			ADD #40,B
SWABB	015034	000301				SWAB B
MOVBA	015036	010140				MOV B,-(A)
SPOP						SPOP B
MOVPBJMPRECLOP	015042	000167	177420			JMP RECLOP
					
NODATAJMPRECLOP	015046	000167	177414		NODATA:	JMP RECLOP
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 75
	SYSTEM 327	PAGE 59 	COMMUNICATE WITH MAIN MACHINE

					
					;GET 16 BIT WORD OFF THE LINE
					;6 BITS, 6 BITS, 2 PARITY+4 BITS (PPBBBB)
					;3 333 222 222 111 111
GWORDJSRPCGBITCH	015052	004767	000122		GWORD:	JSR PC,GBITCH	;GET A BINARY CHAR
RTSPC	015056	000207				RTS PC	;BAD CHAR, LOSE
MOVADCRWBL	015060	010067	176704			MOV A,DCRWBL	;STATRT BUILDING WORD	0 000 000 000 BBB BBB
JSRPCGBITCH	015064	004767	000110			JSR PC,GBITCH
RTSPC	015070	000207				RTS PC	;BAD CHAR
SWABA	015072	000300				SWAB A				;	0 0BB BBB B00 000 000
ASRA	015074	006200				ASR A				;	0 00B BBB BB0 000 000
ASRA	015076	006200				ASR A				;	0 000 BBB BBB 000 000
BISADCRWBL	015100	050067	176664			BIS A,DCRWBL			;	0 000 222 222 111 111
JSRPCGBITCH	015104	004767	000070			JSR PC,GBITCH
DCRRTSRTSPC	015110	000207			DCRRTS:	RTS PC	;BAD CHAR
ASLA	015112	006300				ASL A				;	0 000 000 00B BBB BB0
ASLA	015114	006300				ASL A				;	0 000 000 0BB BBB B00
ASLA	015116	006300				ASL A				;	0 000 000 BBB BBB 000
ASLA	015120	006300				ASL A				;	0 000 00B BBB BB0 000
BISBADCRWBL	015122	150067	176643			BISB A,DCRWBL+1			;	BB BB0 000
SWABA	015126	000300				SWAB A				;	B BBB 000 000 000 0BB
MOVBADCRPRB	015130	110067	176632			MOVB A,DCRPRB			;	00 000 0BB
SPUSH						SPUSH B
MOVBPMOVDCRWBLA	015136	016700	176626			MOV DCRWBL,A
JSRPCBITCNT	015142	004767	000054			JSR PC,BITCNT	;GET NUMBER OF BITS IN THE WORD
BICB	015146	042701	177774			BIC #177774,B	;MOD 4
COMB	015152	005101				COM B		;AND COMPLEMENTED
CMPBDCRPRB	015154	020167	176606			CMP B,DCRPRB	;IS IT THE SAME AS WAS SENT ON THE LINE?
BNEGWORDB	015160	001005				BNE GWORDB	;NO, HAVE GOT BAD WORD
ADDADCRCKS	015162	060067	176572			ADD A,DCRCKS	;YES, ADD TO CHECKSUM
SPOP						SPOP B
MOVPBJMPSRET	015170	000167	033016			JMP SRET
GWORDBSPOP					GWORDB:	SPOP B
MOVPBRTSPC	015176	000207				RTS PC
					
					;GET 6 BITS OFF THE LINE
GBITCHJSRPCRFLUSH	015200	004767	177220		GBITCH:	JSR PC,RFLUSH
SUBA	015204	162700	000040			SUB #40,A
BITA	015210	032700	177700			BIT #177700,A
BNEDCRRTS	015214	001335				BNE DCRRTS
JMPSRET	015216	000167	032770			JMP SRET
					
BITCNTSPUSH					BITCNT:	SPUSH A
MOVAPCLRB	015224	005001				CLR B
BRBITCT2	015226	000401				BR BITCT2
BITCT1INCB	015230	005201			BITCT1:	INC B
BITCT2ASLA	015232	006300			BITCT2:	ASL A
BCSBITCT1	015234	103775				BCS BITCT1
BNEBITCT2	015236	001375				BNE BITCT2
SPOP						SPOP A
MOVPARTSPC	015242	000207				RTS PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 76
	SYSTEM 327	PAGE 60 	COMMUNICATE WITH MAIN MACHINE

					
					;TRANSMIT INTERUPT ROUTINES
					
DCTBRKSPUSH					DCTBRK:	SPUSH A
MOVAPEXCHA						EXCHA TPDLP,P
MOVTPDLPAMOVPTPDLPMOVAPRTSPC	015260	000207				RTS PC
					
TFLUSHMOVADCTB	015262	010067	156520		TFLUSH:	MOV A,DCTB
T1FLSHEXCHA					T1FLSH:	EXCHA TPDLP,P
MOVTPDLPAMOVPTPDLPMOVAPSPOP						SPOP A
MOVPARTI	015302	000002				RTI
					
TLOGINMOVA	015304	012700	000032		TLOGIN:	MOV #'Z-100,A
JSRPCTFLUSH	015310	004767	177746			JSR PC,TFLUSH
MOVLOGMESTBPOIN	015314	012767	013724	176526		MOV #LOGMES,TBPOIN
LOGSENMOVBTBPOINA	015322	117700	176522		LOGSEN:	MOVB @TBPOIN,A
BEQLOGDNE	015326	001410				BEQ LOGDNE
INCTBPOIN	015330	005267	176514			INC TBPOIN
BICDCTS	015334	042767	000100	156442		BIC #100,DCTS	;DON'T CARE IF NO ECHO
JSRPCTFLUSH	015342	004767	177714			JSR PC,TFLUSH
BRLOGSEN	015346	000765				BR LOGSEN
LOGDNEBICDCTS	015350	042767	000100	156426	LOGDNE:	BIC #100,DCTS	;PUT IT TO SLEEP
JSRPCT1FLSH	015356	004767	177704			JSR PC,T1FLSH
TSTREDY10	015362	005767	176332			TST REDY10
BEQLOGDNE	015366	001770				BEQ LOGDNE
					;FALL IN HERE WHEN 10 IS READY TO RECIEVE
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 77
	SYSTEM 327	PAGE 61 	INITIALIZE THE WORLD!

					.STITL	INITIALIZE THE WORLD!
STARTRESET	015370	000005			START:	RESET
MOVSPDLPP	015372	016706	163106			MOV SPDLP,P	;SET UP SYSTEM PDL
CLRTIME	015376	005067	164116			CLR TIME
MOVPCSTBF	015402	012767	000200	155132		MOV #200,PCSTBF	;EVERY 128/10000 TH'S
MOVPCS	015410	012767	000113	155122		MOV #113,PCS
TSTRJLSW	015416	005767	176274			TST RJLSW
BEQNODC11	015422	001411				BEQ NODC11
MOVDCRS	015424	012767	000121	156346		MOV #121,DCRS
MOVDCTS	015432	012767	000121	156344		MOV #121,DCTS
MOVDCTB	015440	012767	000032	156340		MOV #'Z-100,DCTB
NODC11MOVCORCHKBEBRV	015446	012767	015470	162330	NODC11:	MOV #CORCHK,BEBRV	;WHERE TO GO ON MEM TRAP
MOVLOGENDA	015454	012700	073712			MOV #LOGEND,A	;LAST LOCATION WITH CRAP IN IT
ADDA	015460	062700	000200			ADD #200,A
TSTA	015464	005710				TST (A)	;IS IT REALLY THERE?
BR	015466	000774				BR .-6	;LOOP ENDED BY MEM TRAP
CORCHKBICA	015470	042700	000377		CORCHK:	BIC #377,A
MOVBEBRVBEBRV	015474	012767	000006	162302		MOV #BEBRV+2,BEBRV
MOVACORTOP	015502	010067	164536			MOV A,CORTOP
SUBSLOT1A	015506	162700	107250			SUB #22000+SLOT1,A	;FUDGE AREA (NOW RADIA CAN FIT DDT THERE!)
CLRB	015512	005001				CLR B
MOVMQC	015514	012702	177306			MOV #MQ+2,C
MOVAC	015520	010042				MOV A,-(C)	;MOVE A TO MQ
CLRC	015522	005042				CLR -(C)	;CLEAR HIGH ORDER(AC)
MOVNSLOTSC	015524	016742	164522			MOV NSLOTS,-(C)	;DIVIDE
MOVMQB	015530	016701	161550			MOV MQ,B	;GET RESULT
CMPBMSLTLN	015534	020127	044404			CMP B,#MSLTLN
BLO	015540	103402				BLO .+6
MOVMSLTLNB	015542	012701	044404			MOV #MSLTLN,B
BICB	015546	042701	000037			BIC #37,B
MOVSLOT1A	015552	012700	065246			MOV #SLOT1-2,A	;BEGINING OF SLOT-2 (FOR DISK)
MOVSLTCADC	015556	012702	002260			MOV #SLTCAD+2,C	;ADDRESS OF SLOT
MOVNSLOTSD	015562	016703	164464			MOV NSLOTS,D
MOVDNINU	015566	010367	163742			MOV D,NINU	;NUMBER OF USERS IN CORE NOW.
CLRE	015572	005004				CLR E
SLTAL1MOVAC	015574	010022			SLTAL1:	MOV A,(C)+	;ADDRESS OF THIS SLOT
ADDBA	015576	060100				ADD B,A	;NEXT ONE
MOVESLOTSTSLTCADC	015600	010462	177730			MOV E,SLOTST-SLTCAD-4(C)	;USER OF THIS SLOT
MOVSLOTSTSLTCADC	015604	012762	000001	177732		MOV #1,SLOTST-SLTCAD-2(C)	;JUST SWAPED IN
ADDLUBLKE	015612	062704	000060			ADD #LUBLK,E	;NEXT USER
TSTC	015616	005722				TST (C)+
DECD	015620	005303				DEC D
BGTSLTAL1	015622	003364				BGT SLTAL1	;DO THIS NSLOTS TIMES
MOVBUSLENT	015624	010167	164454			MOV B,USLENT
ASRB	015630	006201				ASR B
MOVBA	015632	010100				MOV B,A	;SAVE A POSITIVE WORD COUNT
NEGB	015634	005401				NEG B
MOVBUSWCNT	015636	010167	164440			MOV B,USWCNT
MOVA	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 78
	SYSTEM 327	PAGE 62 	INITIALIZE THE WORLD!

	015642	012700	000003			MOV #3,A
MOVB	015646	012701	177777			MOV #-1,B	;SIE OF DISK IN A AND B
SUBDSKRNDB	015652	166701	164452			SUB DSKRND,B	;MINUS RANDOM SYSTEM STORAGE
SUBDSKRNDB	015656	166701	164450			SUB DSKRND+2,B
MOVMQC	015662	012702	177306			MOV #MQ+2,C
MOVBC	015666	010142				MOV B,-(C)
MOVAC	015670	010042				MOV A,-(C)
MOVNUSERSC	015672	016742	164352			MOV NUSERS,-(C)	;DIVIDE AMOUNT OF DISK BY # OF USERS
MOVA	015676	012700	177777			MOV #-1,A	;FULL ALOCATION
TSTAC	015702	005767	161374			TST AC
BNE	015706	001002				BNE .+6
MOVMQA	015710	016700	161370			MOV MQ,A	;AMOUNT OF DISK PER USER
DALOC2ADDUSWCNTA	015714	066700	164362		DALOC2:	ADD USWCNT,A	;ADD NEGATIVE WORD COUNT TO AMOUNT OF DISK
SUBDTIBFLDEDBFLDDIRLA	015720	162700	006000			SUB #DTIBFL+DEDBFL+DDIRL,A	;SUBTRACT FIXED BUFFERS
BGTDALOC3	015724	003002				BGT DALOC3	;RESULT <15 BITS
MOVA	015726	012700	077777			MOV #77777,A	;MAKE IT 15 BITS
DALOC3BICA	015732	042700	000377		DALOC3:	BIC #377,A	;TO GET # OF WORDS OF RANDOM STORAGE
MOVAE	015736	010004				MOV A,E	;SAVE THAT QUANT IN E FOR (MUCH) LATER
SWABA	015740	000300				SWAB A
MOVAB	015742	010001				MOV A,B
ASLA	015744	006300				ASL A	;NUMBER OF BLOCKS (200 WORDS) NOW IN A
ASRB	015746	006201				ASR B
ASRB	015750	006201				ASR B
ASRB	015752	006201				ASR B	;NUMBER OF BLOCKS/20 NOW IN B
MOVDBITTBC	015754	012702	003636			MOV #DBITTB,C	;SET UP TO INIT DISK BIT TABLE
DALOC5DECB	015760	005301			DALOC5:	DEC B	;20 BLOCKS (=1 WORD IN TABLE)AT A TIME
BLTDALOC4	015762	002402				BLT DALOC4	;ALL DONE 
CLRC	015764	005022				CLR (C)+
BRDALOC5	015766	000774				BR DALOC5
DALOC4CLRC	015770	005012			DALOC4:	CLR (C)	;ONLY SOME BITS ON IN THIS WORD
COMC	015772	005112				COM (C)
MOVD	015774	012703	000001			MOV #1,D
BICA	016000	042700	177760			BIC #177760,A	;# OF WORDS MOD 20
DALOC6DECA	016004	005300			DALOC6:	DEC A
BLTDALOC7	016006	002403				BLT DALOC7
BICDC	016010	040312				BIC D,(C)
ASLD	016012	006303				ASL D
BRDALOC6	016014	000773				BR DALOC6
DALOC7TSTC	016016	005722			DALOC7:	TST (C)+
CMPCDBITBE	016020	020227	003674			CMP C,#DBITBE
BGTDALOC8	016024	003003				BGT DALOC8
MOVC	016026	012712	177777			MOV #-1,(C)
BRDALOC7	016032	000771				BR DALOC7
DALOC8BISDBITTB	016034	052767	000001	165574	DALOC8:	BIS #1,DBITTB	;FIRST BLOCK TO BE USED
BISDBITBE	016042	052767	100000	165624		BIS #100000,DBITBE	;IMPOSSIBLE TO GO OFF TOP
MOVED	016050	010403				MOV E,D
MOVA	016052	012700	000003			MOV #3,A
MOVB	016056	012701	177777			MOV #-1,B
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 79
	SYSTEM 327	PAGE 63 	INITIALIZE THE WORLD!

					
					
MOVMNUSRSE	016062	012704	000012			MOV #MNUSRS,E
MOVLUBLKMNUSRSU	016066	012705	000740			MOV #LUBLK*<MNUSRS>,U
UVINITSUBLUBLKU	016072	162705	000060		UVINIT:	SUB #LUBLK,U	;FOR NEXT GUY DOWN
MOVFLSADRU	016076	012765	177777	002470		MOV #-1,FLSADR(U)	;INDICATE THAT THIS GUY ISN'T REALLY HERE
CLRFLSRESU	016104	005065	002466			CLR FLSRES(U)
DECE	016110	005304				DEC E
CMPENUSERS	016112	020467	164132			CMP E,NUSERS	;MAYBE HE REALLY IS HERE
BGEUVINIT	016116	002365				BGE UVINIT	;NOPE!
CLRFLSADRU	016120	005065	002470			CLR FLSADR(U)
MOVFRNEWUFLSRESU	016124	012765	000007	002466		MOV #FRNEWU,FLSRES(U)
MOVUDSKADC	016132	012702	002546			MOV #UDSKAD+4,C
ADDUC	016136	060502				ADD U,C
SUBDB	016140	160301				SUB D,B	;AMOUNT OF RANDOM STORAGE
SBCA	016142	005600				SBC A
MOVAC	016144	010042				MOV A,-(C)	;HIGH ORDER RANDOM STORAGE ADDR
MOVBC	016146	010142				MOV B,-(C)	;LOW ORDER
MOVAC	016150	010042				MOV A,-(C)	;HIGH ORDER RANDOM STORAGE ADDR
MOVBC	016152	010142				MOV B,-(C)	;LOW ORDER
SUBDDIRLB	016154	162701	002000			SUB #DDIRL,B
SBCA	016160	005600				SBC A
MOVAC	016162	010042				MOV A,-(C)	;HIGH DISK DIR
MOVBC	016164	010142				MOV B,-(C)	;LOW
SUBDEDBFLB	016166	162701	002000			SUB #DEDBFL,B
SBCA	016172	005600				SBC A
MOVAC	016174	010042				MOV A,-(C)
MOVBC	016176	010142				MOV B,-(C)
SUBDTIBFLB	016200	162701	002000			SUB #DTIBFL,B
SBCA	016204	005600				SBC A
MOVAC	016206	010042				MOV A,-(C)
MOVBC	016210	010142				MOV B,-(C)
ADDUSWCNTB	016212	066701	164064			ADD USWCNT,B
BCS	016216	103401				BCS .+4
DECA	016220	005300				DEC A
MOVAC	016222	010042				MOV A,-(C)
MOVBC	016224	010142				MOV B,-(C)
TSTE	016226	005704				TST E
BGTUVINIT	016230	003320				BGT UVINIT
MOVSLOT1D	016232	012703	065250			MOV #SLOT1,D
MOVSOFNB	016236	012701	000343			MOV #SOFN,B
MOVASOFNSLOT1C	016242	012702	006442			MOV #ASOFN-SLOT1,C
ADDDC	016246	060302				ADD D,C
ADDUSLENTD	016250	066703	164030			ADD USLENT,D	;LAST AVAILABLE WORD ADDR
CLRLINENO	016254	005067	165340			CLR LINENO
INIT1INCB	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 80
	SYSTEM 327	PAGE 64 	INITIALIZE THE WORLD!

	016260	005201			INIT1:	INC B
BITB	016262	032701	010000			BIT #10000,B
BNEINIT2	016266	001004				BNE INIT2
MOVBC	016270	010122				MOV B,(C)+
CLRC	016272	005022				CLR (C)+
CMPDC	016274	020302				CMP D,C
BHIINIT1	016276	101370				BHI INIT1
INIT2CLRC	016300	005022			INIT2:	CLR (C)+
CLRC	016302	005012				CLR @C
ADDSOFNB	016304	062701	000343			ADD #SOFN,B
MOVBNUNODE	016310	010167	163732			MOV B,NUNODE	;NUMBER OF NODES PER USER
MOVUVBLKA	016314	012700	003426			MOV #UVBLK,A	;TO INITIALIZE USER VARIABLES IN SWAPPED OUT USERS
MOVSLOT1B	016320	012701	065250			MOV #SLOT1,B	;SET UP FOR BLT
SETUVSMOVAB	016324	012021			SETUVS:	MOV (A)+,(B)+	;BLLLLLLLLLLLLLLLLLT
CMPUVBLKLUVBLKA	016326	022700	004032			CMP #UVBLK+LUVBLK,A
BGTSETUVS	016332	003374				BGT SETUVS
TSTRWWSW	016334	005767	164036			TST RWWSW
BNESTARTF	016340	001016				BNE STARTF
JSRPCSYDRBG	016342	004767	170600			JSR PC,SYDRBG	;GET A SYSTEM DISK REQUEST BLOCK
CLRA	016346	005020				CLR (A)+	;NO START ROUTINE
MOVUSWCNTA	016350	016720	163726			MOV USWCNT,(A)+	;LENGTH OF A USER SLOT
MOVSLOT1A	016354	012720	065246			MOV #SLOT1-2,(A)+	;SWAP OUT SLOT1
MOVDCLRUSA	016360	016720	163730			MOV DCLRUS,(A)+	;GETS PUT INTO THE CLEAR USER PLACE
MOVDCLRUSA	016364	016720	163726			MOV DCLRUS+2,(A)+
TSTA	016370	005720				TST (A)+
MOVBDWRTECA	016372	112710	000103			MOVB #DWRTEC,(A)
STARTFMOVNUSERSNUSER2	016376	016767	163646	163650	STARTF:	MOV	NUSERS,NUSER2
ASLNUSER2	016404	006367	163644			ASL	NUSER2
TSTJDCSW	016410	005767	163766			TST	JDCSW
BNEITINIT	016414	001013				BNE	ITINIT
MOVUTYOTYO	016416	012767	020324	001662		MOV #UTYO,TYO+2
MOVUTYITYI	016424	012767	020416	001740		MOV #UTYI,TYI+2
MOVBRKCHR	016432	012767	000003	163740		MOV #3,BRKCHR
JMPNEXTUS	016440	000167	171372			JMP NEXTUS
ITINITJMPTINIT	016444	000167	006240		ITINIT:	JMP TINIT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 81
	SYSTEM 327	PAGE 65 	INITIALIZE THE WORLD!

					
UGOJSRPCRUNME	016450	004767	171224		UGO:	JSR PC,RUNME
PRTXT						PRTXT ^/11LOGO /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVLVERNFA	016470	016700	162274			MOV LVERNF,A
JSRPCPRDN	016474	004767	015654			JSR PC,PRDN
PRCR						PRCR
JSRPC.CRLFRSTART					RSTART:
MOVSALTLALTL	016504	016767	046500	165104		MOV SALTL,ALTL
MOVTKS	016512	012767	000100	161040		MOV #100,TKS	;ENABLE INTERRUPTS FOR TYI
TEST1					TEST1:
MLOOPJSRPCSCHEDP	016520	004767	172706		MLOOP:	JSR PC,SCHEDP
TSTBRAKEU	016524	005765	002514			TST	BRAKE(U)
BEQMLOOP1	016530	001404				BEQ	MLOOP1
JSRPCBRAKR	016532	004767	007054			JSR	PC,BRAKR	;BREAK
JMPERTLN	016536	000167	016662			JMP ERTLN
MLOOP1JSRPCGETSTR	016542	004767	000052		MLOOP1:	JSR PC,GETSTR
JSRPCMREAD	016546	004767	000756			JSR PC,MREAD
JSRPCEVLINE	016552	004767	001064			JSR PC,EVLINE
ERRORERRORWDW	016556	104443				ERROR+WDW	;WHAT SHOULD I DOO WITH (S)
BRMLOOP	016560	000757				BR MLOOP
WSTARTMOVIPP	016562	012706	066454		WSTART:	MOV #IP,P	;USE WITH CAUTION!!
BRRSTART	016566	000746				BR RSTART
RUNRUG	016570	000003			RUNRUG:	3
BR	016572	000400				BR .+2	;RUG  SHOULD RETURN HERE IF $P'ED
BR	016574	000400				BR .+2
JMPNORT	016576	000167	030634			JMP NORT
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 82
	SYSTEM 327	PAGE 66 	GET A STRING

						.STITL GET A STRING
					
GSTR9MOVCLNB	016602	016701	164720		GSTR9:	MOV CLN,B
JSRPCGTLINE	016606	004767	034536			JSR PC,GTLINE
ERRORERRORLDE	016612	104416				ERROR+LDE	;LINE ..(B).. DOESN'T EXIST
MOVCA	016614	010200				MOV C,A
BRGSTR8	016616	000425				BR GSTR8
GETSTRTSTFUNLEV	016620	005767	164714		GETSTR:	TST FUNLEV	;ARE WE IN A PROC
BEQGSTR0	016624	001522				BEQ GSTR0	;NO
BITERRFFLAGS2	016626	032767	000040	164760		BIT #ERRF,FLAGS2	;ERROR, MAYBE
BNEGSTR0	016634	001116				BNE GSTR0	;YES
MOVCLPB	016636	016701	164666			MOV CLP,B	;NO, GET THIS NODE OF LLP
BEQGSTR9	016642	001757				BEQ GSTR9
JSRPC.LOAD	016644	004767	034716			JSR PC,.LOAD
BITA	016650	032700	007777			BIT #7777,A	;IS IT LAST NODE
BNEGSTR8	016654	001006				BNE GSTR8
SPUSH						SPUSH A	;"STOP" POPS 5 WORDS
MOVAPSPUSH						SPUSH A
MOVAPSPUSH						SPUSH A
MOVAPSPUSH						SPUSH A
MOVAPJMPPSTOP	016666	000167	032416			JMP PSTOP
GSTR8MOVACLP	016672	010067	164632		GSTR8:	MOV A,CLP
MOVAB	016676	010001				MOV A,B
JSRPC.LOAD	016700	004767	034662			JSR PC,.LOAD
JSRPC.LOAD	016704	004767	034656			JSR PC,.LOAD	;OK, GET FIRST NODE OF LINE, = LINE #
MOVBCLN	016710	010167	164612			MOV B,CLN
MOVACTP	016714	010067	164616			MOV A,CTP	;IN CASE THERE IS; NO GENERATION #
MOVAC	016720	010002				MOV A,C
JSRPC.LOADC	016722	004767	034636			JSR PC,.LOADC	;GET SECOND NODE
CLRCLGN	016726	005067	164600			CLR CLGN	; IF TYPE = SNUM, IT IS GEN #
MOVAC	016732	010002				MOV A,C
BICC	016734	042702	007777			BIC #7777,C
CMPSNUMC	016740	022702	120000			CMP #SNUM,C
BNEGSTR6	016744	001004				BNE GSTR6
MOVBCLGN	016746	010167	164560			MOV B,CLGN	;IT IS
MOVACTP	016752	010067	164560			MOV A,CTP
					;FALLS THROUGH
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 83
	SYSTEM 327	PAGE 67 	GET A STRING

					
					;FALLS IN
GSTR6BISLISTCTP	016756	052767	170000	164552	GSTR6:	BIS #LIST,CTP
SPUSHS						SPUSHS CTP
SUBSMOVCTPSBITTRACEFFLAGS2	017000	032767	000002	164606		BIT #TRACEF,FLAGS2
BEQGSTRT	017006	001503				BEQ GSTRT
PRCR						PRCR
JSRPC.CRLFPRTXT						PRTXT ^\ #\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVCPPB	017024	016701	164472			MOV CPP,B
JSRPCPPNAME	017030	004767	015716			JSR PC,PPNAME	;PRINT PNAME
PRTXT						PRTXT ^\  LINE \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVCLNA	017050	016700	164452			MOV CLN,A
JSRPCPRDN	017054	004767	015274			JSR PC,PRDN
PRCR						PRCR
JSRPC.CRLFJSRPCPRLN	017064	004767	017010			JSR PC,PRLN
BRGSTRT	017070	000452				BR GSTRT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 84
	SYSTEM 327	PAGE 68 	GET A STRING

					
					
GSTR0BITTESTFFLAGS2	017072	032767	000001	164514	GSTR0:	BIT #TESTF,FLAGS2
BEQGSTR1	017100	001457				BEQ GSTR1
MOVALTLA	017102	016700	164510			MOV ALTL,A
MOVAB	017106	012001				MOV (A)+,B
BEQDONE	017110	001456				BEQ DONE
MOVAALTL	017112	010067	164500			MOV A,ALTL
PUSHS						PUSHS B
JSRPCSPUSHTMOVBSPRCR						PRCR
JSRPC.CRLFPRTXT						PRTXT ^/TEST LINE /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTINCLINENO	017152	005267	164442			INC LINENO
MOVLINENOA	017156	016700	164436			MOV LINENO,A
JSRPCPRDN	017162	004767	015166			JSR PC,PRDN
PRCR						PRCR
JSRPC.CRLFJSRPCPRLN	017172	004767	016702			JSR PC,PRLN
CLRFLAGS	017176	005067	164342			CLR FLAGS
CLRCO	017202	005067	164344			CLR CO
CLRCO	017206	005067	164342			CLR CO+2
CLRNOR	017212	005067	164340			CLR NOR
GSTRTRTSPC	017216	000207			GSTRT:	RTS PC
POP						POP A	;GET RETURN ADDR
MOVPAJSRPCPPOPTPUSH						PUSH #1
MOVPJSRPCPPUSHTJMPA	017236	000110				JMP @A
GSTR1JSRPCRDSTR	017240	004767	000036		GSTR1:	JSR PC,RDSTR
BRGSTRT	017244	000764				BR GSTRT
DONEPRTXT					DONE:	PRTXT ^/ALL DONE!/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTPRCR						PRCR
JSRPC.CRLFSPOP						SPOP A	;CROCK!!!
MOVPAJMPRSTART	017272	000167	177206			JMP RSTART	;BLECTCH?
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 85
	SYSTEM 327	PAGE 69 	READ A STRING - PTR ON S

						.STITL READ A STRING - PTR ON S
RDSTR1PRCR					RDSTR1:	PRCR
JSRPC.CRLFRDSTRCLRNBKTS	017302	005067	164324		RDSTR:	CLR NBKTS
CLRBRAKE	017306	005067	163202			CLR	BRAKE
MOVPRMTCHD	017312	016703	164306			MOV PRMTCH,D
BEQRDSTR9	017316	001402				BEQ RDSTR9
JSRPCTYO	017320	004767	000760			JSR PC,TYO
RDSTR9JSRPCRLINE	017324	004767	000236		RDSTR9:	JSR	PC,RLINE
JSRPCBLSTI	017330	004767	014042			JSR PC,BLSTI
RDSTR2JSRPCTYI	017334	004767	001030		RDSTR2:	JSR PC,TYI
TSTBRAKE	017340	005767	163150			TST	BRAKE
BEQ	017344	001403				BEQ	.+10
JSRPCBRAKR	017346	004767	006240			JSR	PC,BRAKR
BRRDSTR7	017352	000441				BR	RDSTR7
CMPBRKCHRD	017354	026703	163020			CMP BRKCHR,D	;BREAK TYPED?
BEQRDSTR7	017360	001436				BEQ RDSTR7	;YES
TSTNBKTS	017362	005767	164244			TST NBKTS	;IN A LIST?
BGTRDSTR3	017366	003003				BGT RDSTR3	;YES
CMPD	017370	022703	000015			CMP #15,D	;CR?
BEQRDSTR4	017374	001415				BEQ RDSTR4
RDSTR3CMPD	017376	022703	000133		RDSTR3:	CMP #'[,D
BNERDSTR6	017402	001002				BNE RDSTR6
INCNBKTS	017404	005267	164222			INC NBKTS
RDSTR6CMPD	017410	022703	000135		RDSTR6:	CMP #'],D
BNERDSTR5	017414	001002				BNE RDSTR5
DECNBKTS	017416	005367	164210			DEC NBKTS
RDSTR5JSRPCBLST	017422	004767	013770		RDSTR5:	JSR PC,BLST
BRRDSTR2	017426	000742				BR RDSTR2
RDSTR4JSRPCBLSTF	017430	004767	014054		RDSTR4:	JSR PC,BLSTF
BRRDSTR	017434	000722				BR RDSTR	;NO CHARS TYPED
PUSHS						PUSHS TOPS
JSRPCSPUSHTMOVTOPSSCLRTOPS	017450	005067	164034			CLR TOPS
RTSPC	017454	000207				RTS PC
RDSTR7JSRPCBLSTF	017456	004767	014026		RDSTR7:	JSR PC,BLSTF
BRRDSTR1	017462	000705				BR RDSTR1
JSRPCFRELST	017464	004767	035772			JSR PC,FRELST
BRRDSTR1	017470	000702				BR RDSTR1
RQUESTPUSH					RQUEST:	PUSH PRMTCH
MOVPRMTCHPJSRPCPPUSHTMOVPRMTCH	017502	012767	000074	164114		MOV #'<,PRMTCH
JSRPCRDSTR	017510	004767	177566			JSR PC,RDSTR
POP						POP PRMTCH
MOVPPRMTCHJSRPCPPOPTJMPORT	017524	000167	030406			JMP ORT
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 86
	SYSTEM 327	PAGE 70 	MORE READ ROUTINES!!!

						.STITL MORE READ ROUTINES!!!
MREADTSTFUNLEV	017530	005767	164004		MREAD:	TST FUNLEV	;ARE WE IN PROC?
BEQMRD1	017534	001405				BEQ MRD1	;NO
BITERRFFLAGS2	017536	032767	000040	164050		BIT #ERRF,FLAGS2	;YES, BUT ERROR?
BNEMRD1	017544	001001				BNE MRD1	;YES
RTSPC	017546	000207				RTS PC	;NO
MRD1BITTESTFFLAGS2	017550	032767	000001	164036	MRD1:	BIT #TESTF,FLAGS2
BNEMRD2	017556	001002				BNE MRD2
JMPREAD	017560	000167	012464			JMP READ	;CONVERT CHAR STRING TO TOKEN LIST
MRD2RTSPC	017564	000207			MRD2:	RTS PC
					
					
RLINETSTUSER	017566	005767	161716		RLINE:	TST USER
BLTRLINE1	017572	002422				BLT RLINE1
TSTJDCSW	017574	005767	162602			TST	JDCSW
BEQRLINE1	017600	001417				BEQ	RLINE1
PUSH						PUSH	U
MOVUPJSRPCPPUSHTMOVUSERU	017610	016705	161674			MOV	USER,U
MOVFRTYIHFLSRESU	017614	012765	000010	002466		MOV	#FRTYIH,FLSRES(U)
JSRPCFLUSH	017622	004767	171004			JSR	PC,FLUSH	;RETURNS WHEN LINE DONE
JSRPCRUNME	017626	004767	170046			JSR	PC,RUNME
POP						POP	U
MOVPUJSRPCPPOPTRLINE1RTSPC	017640	000207			RLINE1:	RTS	PC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 87
	SYSTEM 327	PAGE 71 	EVAL 1 LINES

						.STITL EVAL 1 LINES
EVLINETSTTOPRNM	017642	005767	163742		EVLINE:	TST TOPRNM
BNEEVLI4	017646	001024				BNE EVLI4
EVLI6JSRPCIGNT	017650	004767	000334		EVLI6:	JSR PC,IGNT	;EVALUATES 1 LINES ON S
EVLI1BITCRFFLAGS	017654	032767	000004	163662	EVLI1:	BIT #CRF,FLAGS
BNEEVLI2	017662	001055				BNE EVLI2
JSRPCEVAL	017664	004767	027072			JSR PC,EVAL
BREVLI3	017670	000401				BR EVLI3	;NO OUTPUT, OK
RTSPC	017672	000207				RTS PC
EVLI3BITCRFFLAGS	017674	032767	000004	163642	EVLI3:	BIT #CRF,FLAGS
BNEEVLI2	017702	001045				BNE EVLI2
JSRPCGNT	017704	004767	000112			JSR PC,GNT
BISRTFFLAGS	017710	052767	000002	163626		BIS #RTF,FLAGS
BREVLI1	017716	000756				BR EVLI1
EVLI4MOVSB	017720	017701	163504		EVLI4:	MOV @S,B
JSRPC.LOAD	017724	004767	033636			JSR PC,.LOAD
MOVAD	017730	010003				MOV A,D
BICA	017732	042700	007777			BIC #7777,A
CMPSNUMA	017736	022700	120000			CMP #SNUM,A
BEQEVLI5	017742	001417				BEQ EVLI5	;AN SNUM
CMPLNUMA	017744	022700	130000			CMP #LNUM,A
BNEEVLI6	017750	001337				BNE EVLI6	;NOT EVEN A NUMBER
JSRPC.LOAD	017752	004767	033610			JSR PC,.LOAD	;AN LNUM, SEE IF TOO BIG
BITA	017756	032700	007777			BIT #7777,A
BNEEVLI7	017762	001016				BNE EVLI7	;TOO BIG
BICD	017764	042703	170000			BIC #170000,D	;MAKE IT INTO AN SNUM
ADDDA	017770	060300				ADD D,A
JSRPCGRBAD	017772	004767	035312			JSR PC,GRBAD
MOVCS	017776	010277	163426			MOV C,@S
EVLI5JSRPCADLN	020002	004767	033122		EVLI5:	JSR PC,ADLN
POPS						POPS A
MOVSAJSRPCSPOPTEVLI2SKPRETSKPRET	020016	104000			EVLI2:	SKPRET
EVLI7ERRORERRORLNTB	020020	104417			EVLI7:	ERROR+LNTB	;LINE # TOO BIG
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 88
	SYSTEM 327	PAGE 72 	GET NEXT TOKEN

						.STITL GET NEXT TOKEN
					
GNTBITRTFFLAGS	020022	032767	000002	163514	GNT:	BIT #RTF,FLAGS	;IS REPEAT TOKEN FLAG SET?
BEQGNT1	020030	001417				BEQ GNT1
BICRTFFLAGS	020032	042767	000002	163504		BIC #RTF,FLAGS	;YES
MOVCTA	020040	016700	163522			MOV CT,A
MOVCTB	020044	016701	163520			MOV CT+2,B
BNEGNT6	020050	001006				BNE GNT6
CMPSFUNA	020052	022700	000000			CMP #SFUN,A
BNEGNT6	020056	001003				BNE GNT6
BISCRFFLAGS	020060	052767	000004	163456		BIS #CRF,FLAGS
GNT6RTSPC	020066	000207			GNT6:	RTS PC
GNT1BICPTLPFFLAGS	020070	042767	000001	163446	GNT1:	BIC #PTLPF,FLAGS
CMP$LLPARCT	020076	022767	006012	163464		CMP #$LLPAR,CT+2	;IS CT "("
BEQGNT3	020104	001404				BEQ GNT3
CMP$LPARCT	020106	022767	006026	163454		CMP #$LPAR,CT+2
BNE	020114	001003				BNE .+8.
GNT3BISPTLPFFLAGS	020116	052767	000001	163420	GNT3:	BIS #PTLPF,FLAGS	;YES, SET PTLPF
MOVCTB	020124	016701	163436			MOV CT,B	;GET LINK TO NEXT TOKEN
MOVBCTP	020130	010167	163402			MOV B,CTP
BITB	020134	032701	007777			BIT #7777,B
BEQGNT2	020140	001407				BEQ GNT2	;ANY TOKENS LEFT
JSRPC.LOAD	020142	004767	033420			JSR PC,.LOAD	;YES
GNT4MOVACT	020146	010067	163414		GNT4:	MOV A,CT
MOVBCT	020152	010167	163412			MOV B,CT+2
RTSPC	020156	000207				RTS PC
GNT2BITCRFFLAGS	020160	032767	000004	163356	GNT2:	BIT #CRF,FLAGS
BNEGNT5	020166	001007				BNE GNT5
BISCRFFLAGS	020170	052767	000004	163346		BIS #CRF,FLAGS
MOVSFUNA	020176	012700	000000			MOV #SFUN,A
CLRB	020202	005001				CLR B
BRGNT4	020204	000760				BR GNT4
GNT5ERRORERROROOT	020206	104432			GNT5:	ERROR+OOT	;OUT OF TOKENS
IGNTPOPS					IGNT:	POPS B
MOVSBJSRPCSPOPTBITB	020220	032701	007777			BIT #7777,B
BEQIGNT1	020224	001420				BEQ IGNT1
BICCRFFLAGS	020226	042767	000004	163310		BIC #CRF,FLAGS
JSRPC.LOAD	020234	004767	033326			JSR PC,.LOAD
IGNT2MOVACT	020240	010067	163322		IGNT2:	MOV A,CT
MOVBCT	020244	010167	163320			MOV B,CT+2
BISRTFFLAGS	020250	052767	000002	163266		BIS #RTF,FLAGS
MOVCTN	020256	012767	000001	163250		MOV #1,CTN
RTSPC	020264	000207				RTS PC
IGNT1BISCRFFLAGS	020266	052767	000004	163250	IGNT1:	BIS #CRF,FLAGS
MOVSFUNA	020274	012700	000000			MOV #SFUN,A
CLRB	020300	005001				CLR B
BRIGNT2	020302	000756				BR IGNT2
TYOJMPSTYO	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 89
	SYSTEM 327	PAGE 73 	GET NEXT TOKEN

	020304	000137	020310		TYO:	JMP @#STYO
STYOTSTBTPS	020310	105767	157250		STYO:	TSTB TPS
BPL	020314	100375				BPL .-4
MOVDTPB	020316	010367	157244			MOV D,TPB
RTSPC	020322	000207				RTS PC
UTYOTSTBTPS	020324	105767	157234		UTYO:	TSTB TPS
BPL	020330	100375				BPL .-4
MOVBDTPB	020332	110367	157230			MOVB D,TPB
CMPD	020336	022703	000015			CMP #15,D
BNEUTYOR	020342	001006				BNE UTYOR
MOVD	020344	012703	000012			MOV #12,D
JSRPCTYO	020350	004767	177730			JSR PC,TYO
MOVD	020354	012703	000015			MOV #15,D
UTYORRTSPC	020360	000207			UTYOR:	RTS PC
TYOT	020362	000000			TYOT:	0
	020364	000000				0
CH	020366	000000			CH:	0
TYIJMPSTYI	020370	000137	020374		TYI:	JMP @#STYI
STYIWAIT	020374	000001			STYI:	WAIT
TSTBTKS	020376	105767	157156			TSTB TKS
BPLSTYI	020402	100374				BPL STYI
MOVBTKBD	020404	116703	157152			MOVB TKB,D
BICD	020410	042703	177200			BIC #177200,D
BRSTYO	020414	000735				BR STYO
UTYIWAIT	020416	000001			UTYI:	WAIT
TSTCHI	020420	005767	163176			TST CHI
BEQUTYI	020424	001774				BEQ UTYI
MOVBCHID	020426	116703	163170			MOVB CHI,D
CLRCHI	020432	005067	163164			CLR	CHI
BICD	020436	042703	177600			BIC #177600,D
BRTYO	020442	000720				BR TYO
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 90
	SYSTEM 327	PAGE 76 	GARBAGE COLLECTOR

						.STITL	GARBAGE COLLECTOR
NNODES		010000			NNODES==4096.
NNODESGCBTL		001002			GCBTL== NNODES/8./2.*2.+2.	;GARBAGE COLLECT BIT TABLE LENGTH
					
MARKNSPUSH					MARKN:	SPUSH A	;MARK NODE(B)
MOVAPSPUSH						SPUSH B
MOVBPMOVBA	020450	010100				MOV B,A
BICA	020452	042700	170000			BIC #170000,A
BICB	020456	042701	177770			BIC #177770,B
MOVBBMTBB	020462	116101	020510			MOVB BMT(B),B
ASRA	020466	006200				ASR A
ASRA	020470	006200				ASR A
ASRA	020472	006200				ASR A
ADDGCBITSA	020474	066700	162762			ADD GCBITS,A
BISBBA	020500	150110				BISB B,(A)
SPOP						SPOP B
MOVPBSPOP						SPOP A
MOVPARTSPC	020506	000207				RTS PC
					
BMT.BYTE	020510	   001		
	020511	   002		
	020512	   004		
	020513	   010		
	020514	   020		
	020515	   040		
	020516	   100		
	020517	   200			BMT:	.BYTE 1,2,4,10,20,40,100,200
.IFNZGCDBUG		000001				.IFNZ GCDBUG
LMTDMKDMK	020520	020656			LMT:	DMK	;SYSTEM FUNCTION
DMKDMK	020522	020656				DMK	;INFIX (SYSTEM FUNCTION)
DMKDMK	020524	020656				DMK	;USER FUNCTION
DMKDMK	020526	020656				DMK	;VARIABLE BINDING
GCDIEGCDIE	020530	020660				GCDIE	;UNUSED
GCDIEGCDIE	020532	020660				GCDIE	;UNUSED
GCDIEGCDIE	020534	020660				GCDIE	;UNUSED
DMKDMK	020536	020656				DMK	;SHORT STRING
MKSNPMKSNP	020540	020720				MKSNP	;SNAP
DMKDMK	020542	020656				DMK	;ATOM
DMKDMK	020544	020656				DMK	;SHORT NUMBER
GCMARKGCMARK	020546	020662				GCMARK	;LONG NUMBEB
GCMARKGCMARK	020550	020662				GCMARK	;LONG STRING
GCDIEGCDIE	020552	020660				GCDIE	;TBA
GCMARKGCMARK	020554	020662				GCMARK	;SENTENCE
GCMARKGCMARK	020556	020662				GCMARK	;LIST
						.ENDC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 91
	SYSTEM 327	PAGE 77 	GARBAGE COLLECTOR

					
					
MARKLCMPBSNP	020560	020127	100000		MARKL:	CMP	B,#SNP	;IS LIST A SNAP?
BLOSMKL0	020564	101403				BLOS	MKL0	;NO
CMPBSNP	020566	020127	110000			CMP	B,#<SNP+10000>
BLOMKSNPL	020572	103436				BLO	MKSNPL	;YES
MKL0PUSH					MKL0:	PUSH A	;MARK LIST
MOVAPJSRPCPPUSHTSPUSH						SPUSH B	;NODE ADDS IN B
MOVBPSPUSH						SPUSH C
MOVCP.IFNZGCDBUG		000001				.IFNZ GCDBUG
SPUSH						SPUSH D
MOVDP						.ENDC
MOVBA	020610	010100				MOV B,A
MKL1MOVAC	020612	010002			MKL1:	MOV A,C
BITC	020614	032702	007777			BIT #7777,C	;IS THERE ANOTHER NODE
BEQMKL3	020620	001444				BEQ MKL3
MOVCB	020622	010201				MOV C,B	;YES, MARK IT
JSRPCMARKN	020624	004767	177614			JSR PC, MARKN
JSRPC.LOADC	020630	004767	032730			JSR PC,.LOADC	;GET IT
					
.IFNZGCDBUG		000001				.IFNZ GCDBUG
MOVAD	020634	010003				MOV A,D
SWABD	020636	000303				SWAB D
BICD	020640	042703	177417			BIC #177417,D
ASRD	020644	006203				ASR D
ASRD	020646	006203				ASR D
ASRD	020650	006203				ASR D	;ALL THIS GIVES YOU THE TYPE*2
JMPLMTD	020652	000173	020520			JMP @LMT(D)	;WHICH YOU MIGHT MARK ON
					
DMKBRMKL1	020656	000755			DMK:	BR MKL1
GCDIEHALT	020660	000000			GCDIE:	HALT
GCMARKJSRPCMARKL	020662	004767	177672		GCMARK:	JSR PC,MARKL
BRMKL1	020666	000751				BR MKL1
						.ENDC
MKSNPLEXCH					MKSNPL:	EXCH	SNPTEM,C	;B POINTS TO SNAP
MOVSNPTEMEXCH1MOVCSNPTEMMOVEXCH1CJSRPCMKDC	020706	004767	041402			JSR	PC,MKDC
MOVSNPTEMC	020712	016702	161530			MOV	SNPTEM,C	;RESTORE C
BRMKL0	020716	000726				BR	MKL0
MKSNPJSRPCMKDC	020720	004767	041370		MKSNP:	JSR	PC,MKDC	;ONLY MARKS THE DISPLAY CODE
JSRPCMKL0	020724	004767	177644			JSR	PC,MKL0	;ALSO NEED TO MARK THE NODES
BRMKL1	020730	000730				BR	MKL1
					
.IFZGCDBUG		000001				.IFZ GCDBUG
						BIC #7777,A
						CMP #100000,A
						BLO MKL1
						BEQ MKSNP
						CMP #120000,A
						BLOS MKL1
						JSR PC,MARKL
						BR MKL1
						.ENDC
					
MKL3.IFNZGCDBUG		000001			MKL3:	.IFNZ GCDBUG
SPOP	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 92
	SYSTEM 327	PAGE 77.1 	GARBAGE COLLECTOR

						SPOP D
MOVPD						.ENDC
SPOP						SPOP C
MOVPCSPOP						SPOP B
MOVPBPOP						POP A
MOVPAJSRPCPPOPTRTSPC	020746	000207				RTS PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 93
	SYSTEM 327	PAGE 78 	GARBAGE COLLECTOR

					
.GCOLLJSRFACSAV	020750	004567	171030		.GCOLL:	JSR F,ACSAV
PUSH						PUSH ACRELF
MOVACRELFPJSRPCPPUSHTMOVUSERU	020764	016705	160520			MOV USER,U
.GCOL2TSTGCLOCK	020770	005767	161376		.GCOL2:	TST GCLOCK	;IS SOMEONE ELSE GC'ING?
BLT.GCOL3	020774	002403				BLT .GCOL3	;NO, GO AHEAD
JSRPCFLUSH	020776	004767	167630			JSR PC,FLUSH	;WAIT
BR.GCOL2	021002	000772				BR .GCOL2
.GCOL3MOVUGCLOCK	021004	010567	161362		.GCOL3:	MOV U,GCLOCK
JSRPCRUNME	021010	004767	166664			JSR PC,RUNME
MOVGCBITSA	021014	016700	162442			MOV GCBITS,A	;GARBAGE COLLECT
MOVGCBTLB	021020	012701	000400			MOV #GCBTL/2-1,B	;CLEAR BIT TABLE
MOVA	021024	012720	000001			MOV #1,(A)+	;ALWAYS PROTECT NODE ZERO
.GCOL1CLRA	021030	005020			.GCOL1:	CLR (A)+
DECB	021032	005301				DEC B
BGT.GCOL1	021034	003375				BGT .GCOL1
PUSHS						PUSHS	SNLIST	;PROTECT THESE LOSERS
JSRPCSPUSHTMOVSNLISTSSPUSHS						SPUSHS	#TRUE
SUBSMOVTRUESSPUSHS						SPUSHS	#FALSE
SUBSMOVFALSES					
MOVRELEACRELF	021100	012767	000020	162366		MOV #RELE,ACRELF
MOVHCCF	021106	012705	000103			MOV #HCC,F	;NUMBER OF HASH CODE ELEMENTS
MOVSUHCTE	021112	016704	162342			MOV SUHCT,E	;ADDRESS OF HASH TABLE
MKUOBLDECF	021116	005305			MKUOBL:	DEC F
BLTMKTPS	021120	002465				BLT MKTPS
MOVED	021122	012403				MOV (E)+,D	;GET A HASH CODE ELEMENT
MKUOBIMOVDC	021124	010302			MKUOBI:	MOV D,C
BEQMKUOBL	021126	001773				BEQ MKUOBL	;NO MORE
MOVDB	021130	010301				MOV D,B	;MARK THE NODE
JSRPCMARKN	021132	004767	177306			JSR PC,MARKN
JSRPC.LOADC	021136	004767	032422			JSR PC,.LOADC
MOVAD	021142	010003				MOV A,D
MOVBC	021144	010102				MOV B,C
JSRPCMARKN	021146	004767	177272			JSR PC,MARKN	;MARK NODE POINTED TO BY THIS ONE
JSRPC.LOADC	021152	004767	032406			JSR PC,.LOADC	;THEN GET IT
JSRPCMARKL	021156	004767	177376			JSR PC,MARKL	;SHOULD BE PNAME POINTER NODE
MOVAC	021162	010002				MOV A,C
MKUOEBITC	021164	032702	007777		MKUOE:	BIT #7777,C	;ONE OTHER NODE?
BEQMKUOBI	021170	001755				BEQ MKUOBI	;NO
MOVCB	021172	010201				MOV C,B	;YES
JSRPCMARKN	021174	004767	177244			JSR PC,MARKN	;MARK IT
JSRPC.LOADC	021200	004767	032360			JSR PC,.LOADC
MOVCSNPTEM	021204	010267	161236			MOV	C,SNPTEM	;SAVE IN CASE VBIND IS SNAP
MOVAC	021210	010002				MOV A,C
BICA	021212	042700	007777			BIC #7777,A
CMPFBINDA	021216	022700	020000			CMP #FBIND,A
BEQMKFB	021222	001415				BEQ MKFB	;FUNCTION BINDING
CMPVBINDA	021224	022700	030000			CMP #VBIND,A
BEQMKVB	021230	001407				BEQ MKVB	;VARIABLE BINDING
CMPSFBINDA	021232	022700	120000			CMP #SFBIND,A
BEQMKSFB	021236	001413				BEQ MKSFB	;SWAPPED FB
CMPSVBINDA	021240	022700	130000			CMP #SVBIND,A
BEQMKSVB	021244	001407				BEQ MKSVB	;SWAPPED VB
HALT	021246	000000				HALT	;BUG
MKVBJSRPCMARKL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 94
	SYSTEM 327	PAGE 78.1 	GARBAGE COLLECTOR

	021250	004767	177304		MKVB:	JSR PC,MARKL
BRMKUOE	021254	000743				BR MKUOE
MKFBJSRPCMARKL	021256	004767	177276		MKFB:	JSR PC,MARKL
BRMKUOE	021262	000740				BR MKUOE
MKSVBBRMKUOE	021264	000737			MKSVB:	BR MKUOE
MKSFBJSRPCMARKL	021266	004767	177266		MKSFB:	JSR PC,MARKL
BRMKUOE	021272	000734				BR MKUOE
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 95
	SYSTEM 327	PAGE 79 	GARBAGE COLLECTOR

					
					
MKTPSMOVGCMKLF	021274	012705	002452		MKTPS:	MOV #GCMKL,F
MKRNDMMOVFB	021300	012501			MKRNDM:	MOV (F)+,B	;POINTER TO POINTER
BEQMKSPDL	021302	001405				BEQ MKSPDL	;LAST ONE
MOVBB	021304	011101				MOV (B),B	;REAL NODE ADDRESS
BEQMKRNDM	021306	001774				BEQ MKRNDM	;NOTHING THERE
JSRPCMARKL	021310	004767	177244			JSR PC,MARKL
BRMKRNDM	021314	000771				BR MKRNDM
MKSPDLMOVSPBASEE	021316	016704	162120		MKSPDL:	MOV SPBASE,E
MKSP1MOVEB	021322	014401			MKSP1:	MOV -(E),B	;GET A S PDL WORD
CMPES	021324	020467	162100			CMP E,S	;END OF S PDL?
BLTMKSP2	021330	002403				BLT MKSP2	;YES
JSRPCMARKL	021332	004767	177222			JSR PC,MARKL	;MARK S PDL WORD
BRMKSP1	021336	000771				BR MKSP1
MKSP2MOVSPBASEA	021340	016700	162076		MKSP2:	MOV SPBASE,A
TSTA	021344	005720				TST (A)+
BNEMKSP3	021346	001002				BNE MKSP3	;THERE I S PDL ON DISK, GO MARK IT
TSTA	021350	005710				TST (A)
BEQMKSP4	021352	001504				BEQ MKSP4
MKSP3JSRPCUBLKGR	021354	004767	165714		MKSP3:	JSR PC,UBLKGR
HALT	021360	000000				HALT
HALT	021362	000000				HALT
MOVBSSAVEA	021364	010167	162112			MOV B,SSAVEA
MOVCSSAVEA	021370	010267	162110			MOV C,SSAVEA+2	;PLACE TO SAVE S PDL
MOVSSWPADA	021374	016760	162040	000004		MOV SSWPAD,4(A)
MOVBDWRTECA	021402	112760	000103	000014		MOVB #DWRTEC,14(A)	;WRITE OUT CURRENT S PDL
JSRPCDSKWA2	021410	004767	165620			JSR PC,DSKWA2
MKSP8MOVSPBASEB	021414	016701	162022		MKSP8:	MOV SPBASE,B
TSTB	021420	005721				TST (B)+	;IS @HERE ANODHER BLOCK ON DHSK?
BNEMKSP5	021422	001002				BNE MKSP5	;YES
TSTB	021424	005711				TST (B)
BEQMKSP6	021426	001432				BEQ MKSP6	;NO
MKSP5JSRPCSYDRBG	021430	004767	165512		MKSP5:	JSR PC,SYDRBG	;PREPARE TO SWAP IN BLOCK
CLRA	021434	005020				CLR (A)+
MOVA	021436	012720	177600			MOV #-200,(A)+
MOVSSWPADA	021442	016720	161772			MOV SSWPAD,(A)+
MOVSPBASEB	021446	016701	161770			MOV SPBASE,B
MOVBA	021452	012120				MOV (B)+,(A)+
MOVBA	021454	012120				MOV (B)+,(A)+
TSTA	021456	005720				TST (A)+
MOVBDREADCA	021460	112710	000105			MOVB #DREADC,(A)
JSRPCDSKWAI	021464	004767	165550			JSR PC,DSKWAI
MOVF	021470	012705	000200			MOV #200,F
MOVSPBASEE	021474	016704	161742			MOV SPBASE,E
MKSP7MOVEB	021500	014401			MKSP7:	MOV -(E),B	;MRK THIS PIECE OF S PDL
JSRPCMARKL	021502	004767	177052			JSR PC,MARKL
DECF	021506	005305				DEC F
BGTMKSP7	021510	003373				BGT MKSP7
BRMKSP8	021512	000740				BR MKSP8
MKSP6JSRPCSYDRBG	021514	004767	165426		MKSP6:	JSR PC,SYDRBG	;PREPARE TO SWAP CURBENT PDL
BACK
CLRA	021520	005020				CLR (A)+
MOVA	021522	012720	177600			MOV #-200,(A)+
MOVSSWPADA	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 96
	SYSTEM 327	PAGE 79.1 	GARBAGE COLLECTOR

	021526	016720	161706			MOV SSWPAD,(A)+
MOVSSAVEAA	021532	016720	161744			MOV SSAVEA,(A)+
MOVSSAVEAA	021536	016720	161742			MOV SSAVEA+2,(A)+
TSTA	021542	005720				TST (A)+
MOVBDREADCA	021544	112710	000105			MOVB #DREADC,(A)
JSRPCDSKWAI	021550	004767	165464			JSR PC,DSKWAI
MOVSSAVEAC	021554	016702	161722			MOV SSAVEA,C
JSRPCUBLKFR	021560	004767	165574			JSR PC,UBLKFR
MKSP4					MKSP4:
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 97
	SYSTEM 327	PAGE 80 	GARBAGE COLLECTOR

					
					
JSRPCDSGCF	021564	004767	040420			JSR PC,DSGCF
ADDS	021570	062767	000006	161632		ADD	#6,S	;GET RID OF 3 GUYS PUSHED BEFORE
					
							;OK NOW RETURN ALL IN MARKED NODES
							;RA ADDS OF LIT MAP
							;RB NODE ADDS
							;RC ACTUAL ADDER OF NODE
							;RD BIT MAP
						;RE POINT TO LIST OF FREE STORAGE RECYCLES NODES
							;START COLLECTING AT LUNN(LOWEST UNPROTECTED NODE #)
CLRE	021576	005004				CLR E
CLRNNGC	021600	005067	161672			CLR NNGC
CLRB	021604	005001				CLR B	;NODE ZERO
MOVUABC	021606	016702	161614			MOV UAB,C	;NODE ZERO ADDRESS
MOVNUNODEF	021612	016705	160430			MOV NUNODE,F	;NUMBER OF NODES
MOVGCBITSA	021616	016700	161640			MOV GCBITS,A	;BIT TABLE ADDR
MOVAD	021622	012003				MOV (A)+,D
SEC	021624	000261				SEC
RORD	021626	006003				ROR D
					
GCRT2BCSGCRT3	021630	103406			GCRT2:	BCS GCRT3
MOVEC	021632	010422				MOV E,(C)+	;WE HAVE A NODE, LINK IN 1ST WORD
CLRC	021634	005022				CLR (C)+	;CLEAR SECOND
MOVBE	021636	010104				MOV B,E	;NEW FREE STORAGE HEAD NODE
INCNNGC	021640	005267	161632			INC NNGC
BRGCRT4	021644	000402				BR GCRT4
GCRT3ADDC	021646	062702	000004		GCRT3:	ADD #4,C
GCRT4INCB	021652	005201			GCRT4:	INC B
DECF	021654	005305				DEC F
BLEGCRT5	021656	003407				BLE GCRT5
CLC	021660	000241				CLC
RORD	021662	006003				ROR D
BNEGCRT2	021664	001361				BNE GCRT2
MOVAD	021666	012003				MOV (A)+,D	;GET NEXT WORD OF BIT MAP
SEC	021670	000261				SEC
RORD	021672	006003				ROR D
BRGCRT2	021674	000755				BR GCRT2
GCRT5MOVEFREE	021676	010467	161604		GCRT5:	MOV E,FREE	;YES
					
MOVGCLOCK	021702	012767	177777	160462		MOV #-1,GCLOCK
POP						POP ACRELF
MOVPACRELFJSRPCPPOPTJSRFACRES	021720	004567	170074			JSR F,ACRES
RTSPC	021724	000207				RTS PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 98
	TYI 152	PAGE 1 	GARBAGE COLLECTOR

					
					
.STITL						.STITL TELETYPE AND TYI
					;THINGS TO DO --
					;DIFFERENT TTY TYPES
					
VERN%FNAM2VERN		000737				VERN==VERN+%FNAM2
					
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 99
	TYI 152	PAGE 2 	TELETYPE AND TYI

					
					
.MACRIFL					.MACR	IFL	FLG,EXPR	;ONE LINE COND IF FLG .NE. 0
					.XLIST
						.IFNZ	FLG
						.LIST
						EXPR
						.XLIST
						.ENDC
					.LIST
					.ENDM
					
.MACRIFN					.MACR	IFN	FLG,EXPR	;ONE LINE COND IF FLG=0
					.XLIST
						.IFZ	FLG
						.LIST
						EXPR
						.XLIST
						.ENDC
					.LIST
					.ENDM
					
.MACRTIPNTR					.MACR	TIPNTR	TOP,SZ,TMS	;MAKES MNUSRS+TMS  PNTRS
					.XLIST
						.ZZZ==0
						.REPT	MNUSRS+TMS
							TOP+<SZ*.ZZZ>
							.ZZZ==.ZZZ+1
						.ENDR
					.LIST
					.ENDM
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 100
	TYI 152	PAGE 3 	TELETYPE AND TYI

					
					
					;VARIOUS FLAGS AND TELETYPE VARIABLES
					
						;FLAGS TTY STATUS
TYIDR		100000			TYIDR==100000
TIDW		040000			TIDW==40000	;TYI DISK WRITE IN PROCESS
TIDR		020000			TIDR==20000	;TYI DISK READ IN PROCESS
TIEDR		010000			TIEDR==10000	;EDIT DSK READ
TIEDW		004000			TIEDW==4000
TYIDRTIDWTIDRTIEDRTIEDWTIDTRA		174000			TIDTRA==TYIDR!TIDW!TIDR!TIEDR!TIEDW	;DISK TRANSFER
TIBR		002000			TIBR==2000	;^G (BREAK) TYPED
TIED		001000			TIED==1000		;IN EDIT MODE
FCQF		000200			FCQF==200	;CNTRL Q
					
NTY		000001			NTY==1
NFTY		000000			NFTY==0
NKLTY		000000			NKLTY==0
NTYNFKLTY		000002			NFKLTY==2*NTY
NDCTY		000000			NDCTY==0
NTYNKLTYNFDCTY		000002			NFDCTY==2*<NTY+NKLTY>
NDPTY		000000			NDPTY==0
NTYNKLTYNDCTYNFDPTY		000002			NFDPTY==2*<NTY+NKLTY+NDCTY>
NDMTY		000007			NDMTY==7
NTYNKLTYNDCTYNDPTYNFDMTY		000002			NFDMTY==2*<NTY+NKLTY+NDCTY+NDPTY>
NTYNKLTYNDCTYNDCTYNDPTYNDMTYNTTY		000010			NTTY==NTY+NKLTY+NDCTY+NDCTY+NDPTY+NDMTY
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 101
	TYI 152	PAGE 4 	TELETYPE AND TYI

					
.STITL						.STITLE	TELETYPE BUFFERS AND VARIABLES
						;BUFFERS
.EVEN		021726			.EVEN
TITQSZ		000006				TITQSZ==6	;SIZE OF TEMP TELETYPE INPUT BUFFER,
TITQTITQSZNTTY		022006			TITQ:	.=.+<TITQSZ*NTTY>	;TEMP TYI INT BUFFERS
TIBFSZ		000100				TIBFSZ==100	;TYPE IN BUFFER+EDIT BUF SIZE
TIBFTIBFSZNTTY		023006			TIBF:	.=.+<TIBFSZ*NTTY>	;TYPE IN AND EDIT BUFFERS
TOBFSZ		000040				TOBFSZ==40	;TYPE OUT BUFFER SIZE
TOBFTOBFSZNTTY		023406			TOBF:	.=.+<TOBFSZ*NTTY>	;TYPE OUT BUFFERS
					;TYPE OUT INFO
CHARNONTTY		023426			CHARNO:	.=.+<NTTY*2>
LINEL					LINEL:
.XLIST.REPTNTTY.LIST					
					;BUFFER PNTRS
						;TEMP TYPE IN QUEUE
TITQTTIPNTR					TITQT:	TIPNTR	TITQ,TITQSZ,1	;TEMP Q TOP AND BOTTOM
.XLIST.ZZZ.REPTMNUSRSTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZTITQTITQTITQSZ.ZZZ.ZZZ.ZZZ.LISTTITQPNTTY		023514			TITQP:	.=.+<2*NTTY>	;NXT TO BE PROCESSED
TITQLNTTY		023534			TITQL:	.=.+<2*NTTY>	;TEMP Q LAST IN
TITQNNTTY		023554			TITQN:	.=.+<2*NTTY>
						;TYPE IN BUFFERS
TIBTTIPNTR					TIBT:	TIPNTR	TIBF,TIBFSZ,1	;TYI BUFFER TOP (DOUBLE AS EDIT BUF BOTTOM)
.XLIST.ZZZ.REPTMNUSRSTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFTIBFSZ.ZZZ.ZZZ.ZZZ.LISTTIBPNTTY		023622			TIBP:	.=.+<2*NTTY>
TYIBPNTTY		023642			TYIBP:	.=.+<2*NTTY>	;SAME AS ABOVE,USED BY TYI
TITNNTTY		023662			TITN:	.=.+<NTTY*2>
TYITNNTTY		023702			TYITN:	.=.+<NTTY*2>
TIBLNTTY		023722			TIBL:	.=.+<2*NTTY>	;LAST+1 THESE PNTRS CHANGE IN EDIT MODE
TIPCNTTY		023742			TIPC:	.=.+<2*NTTY>
TISVDNTTY		023762			TISVD:	.=.+<2*NTTY>
						;EDIT BUFFERS
EDBFSZ		000040				EDBFSZ==40	;EDIT BUFFER SIZE
TIEBTTIPNTR					TIEBT:	TIPNTR	TIBF+EDBFSZ,TIBFSZ,0	;EDIT BUF TOP
.XLIST.ZZZ.REPTMNUSRSTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZTIBFTIBFEDBFSZTIBFSZ.ZZZ.ZZZ.ZZZ.LISTTIEBPNTTY		024026			TIEBP:	.=.+<2*NTTY>	;PNTR INITIALLY PAST BOTTOM
						;TYPE OUT BUFFERS
TOBTTIPNTR					TOBT:	TIPNTR	TOBF,TOBFSZ,1	;TOP & BOTTOM
.XLIST.ZZZ.REPTMNUSRSTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZTOBFTOBFTOBFSZ.ZZZ.ZZZ.ZZZ.LISTTOBFFNTTY		024074			TOBFF:	.=.+<2*NTTY>
TOBPNTTY		024114			TOBP:	.=.+<2*NTTY>	;NEXT CHAR
TOTNNTTY		024134			TOTN:	.=.+<NTTY*2>
TOPCNTTY		024154			TOPC:	.=.+<NTTY*2>
TOSVCNTTY		024174			TOSVC:	.=.+<NTTY*2>
TOSVDNTTY		024214			TOSVD:	.=.+<NTTY*2>
TODINGNTTY		024234			TODING:	.=.+<NTTY*2>
TOSND.REPTNTY		000001			TOSND:	.REPT	NTY
CNSNDCNSND	024234	031256				CNSND
					.ENDR
.REPTNDMTY		000007			.REPT	NDMTY
						DMSND
					.ENDR
DMSNDDMSNDDMSNDDMSNDDMSNDDMSNDDMSNDDMSNDDMSNDDMSNDDMSNDDMSNDDMSNDDMSND						;DISK BUFFER POINTERS
TILDNTTY		024274			TILD:	.=.+<NTTY*2>
TIHDNTTY		024314			TIHD:	.=.+<NTTY*2>
TIDPNTTY		024334			TIDP:	.=.+<NTTY*2>	;# OF WDS IN TYI DSK BUFFER USED BY INT ROUTINES
TYIDPNTTY		024354			TYIDP:	.=.+<NTTY*2>	;DITTO USED BY TYI
TYIFDPNTTY		024374			TYIFDP:	.=.+<NTTY*2>	;# OF WDS TRANSFERREDFROM DSK
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 102
	TYI 152	PAGE 4.1 	TELETYPE BUFFERS AND VARIABLES

						;EDIT BUFFER
TIELDNTTY		024414			TIELD:	.=.+<NTTY*2>
TIEHDNTTY		024434			TIEHD:	.=.+<NTTY*2>
TIEDPNTTY		024454			TIEDP:	.=.+<NTTY*2>	;# OF WDS TRANSFERRED TO DSK
TIEFDPNTTY		024474			TIEFDP:	.=.+<NTTY*2>	;# OF WDS TRANSFERRED FROM
					
TTYBRNTTY		024514			TTYBR:	.=.+<NTTY*2>
TTYEBRNTTY		024534			TTYEBR:	.=.+<NTTY*2>
						;TTY STATUS
TTYSTNTTY		024554			TTYST:	.=.+<NTTY*2>
					
						;USER INDEX
TTYUNTTY		024574			TTYU:	.=.+<2*NTTY>
					
NFDMTYDMBIT		024572				DMBIT=.-NFDMTY
							;BAR BIT FOR TTY
.ZZZ		000001				.ZZZ==1
.XLIST.REPTNDMTY.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.ZZZ.LIST	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 103
	TYI 152	PAGE 5 	TELETYPE BUFFERS AND VARIABLES

					
.STITL						.STITLE	CHAR DISPATCH TABLES
					
						;TYI DISPATCH TABLES
CTIS					CTIS:		;SPECIAL CHARACTERS -- DTBL (CHAR) HAS FSF ON
TICCTICC	024630	026264				TICC	;^C COPIES NEXT CHAR
TICDTICD	024632	026306				TICD	;^D DELETES NEXT CHAR
TICZTICZ	024634	026774				TICZ	;^G BREAK
TICMTICM	024636	026334				TICM	;^M CARRIAGE RETURN -- POSSIBLE END OF LINE
TICNTICN	024640	026460				TICN	;^N COPIES NEXT WORD
TICQTICQ	024642	026532				TICQ	;^Q QUOTES NEXT CHARACTER
TICRTICR	024644	026542				TICR	;^R COPIES REST OF EDIT BUFFER
TICSTICS	024646	026574				TICS	;^S SKIPS (DELETES) NEXT WORD
TICWTICW	024650	026656				TICW	;^W DELETES PREVIOUS WORD
TGTC2TGTC2	024652	026246				TGTC2	;^X CLARIFY INPUT
TICYTICY	024654	026704				TICY	;^Y RECOVER PREVIOUS LINE
TICZTICZ	024656	026774				TICZ	;^Z EMPTIES TYPE IN BUFFER
TIDELTIDEL	024660	027204				TIDEL	;RBO RUBOUT
					
CTIQ					CTIQ:	;QUOTING CHARS
TIOBRTIOBR	024662	027152				TIOBR	;[
CTIUQTICBRTICBR	024664	027160			CTIUQ:	TICBR	;]
TIOBRTIOBR	024666	027152				TIOBR
					
							;TYO DISPATCH TABLE FOR CHARS WITH FOF
CTOSTOCBTOCB	024670	032154			CTOS:	TOCB	;^B ECHOES AS SPACE
TOCHTOCH	024672	032176				TOCH	;^H BACKSPACE
UTYO4UTYO4	024674	031714				UTYO4	;^G BELL
TOCMTOCM	024676	031730				TOCM	;^M CARRIAGE RETURN
TOCITOCI	024700	032214				TOCI	;^I TAB
UTYO4UTYO4	024702	031714				UTYO4	;^J LINEFEED
UTYO4UTYO4	024704	031714				UTYO4	;^K VERT TAB
UTYO4UTYO4	024706	031714				UTYO4	;^L FORMFEED
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 104
	TYI 152	PAGE 6 	CHAR DISPATCH TABLES

					
					
TINITCLRU	024710	005005			TINIT:	CLR	U
MOVBRKCHR	024712	012767	000007	155460		MOV	#7,BRKCHR
MOVSIMTSTE	024720	012704	024756			MOV	#SIMTST,E
CMPEE	024724	020424				CMP	E,(E)+
BNETINIT2	024726	001012				BNE	TINIT2
MOVCLKBDM	024730	012767	000077	164614		MOV	#77,CLKBDM+2	;USING SIMULATOR
MOVBRKCHR	024736	012767	000030	155434		MOV	#30,BRKCHR
MOVTICZCTIS	024744	012767	026774	177700		MOV	#TICZ,CTIS+22
INCU	024752	005205				INC	U
TINIT2MOVUPC	024754	010527			TINIT2:	MOV	U,(PC)+
SIMTSTSIMTSTSIMTST	024756	024756			SIMTST:	SIMTST
CLRU	024760	005005				CLR	U
CLRE	024762	005004				CLR	E
TINIT1JSRPCTTYRST	024764	004767	000170		TINIT1:	JSR	PC,TTYRST
MOVEUTTYU	024770	010465	002512			MOV	E,UTTY(U)
MOVUTTYUE	024774	010564	024554			MOV	U,TTYU(E)
MOVDTYIBFUTILDE	025000	016564	002522	024254		MOV	DTYIBF(U),TILD(E)
MOVDTYIBFUTIHDE	025006	016564	002524	024274		MOV	DTYIBF+2(U),TIHD(E)
MOVDEDTBFUTIELDE	025014	016564	002526	024374		MOV	DEDTBF(U),TIELD(E)
MOVDEDTBFUTIEHDE	025022	016564	002530	024414		MOV	DEDTBF+2(U),TIEHD(E)
TSTE	025030	005724				TST	(E)+
ADDLUBLKU	025032	062705	000060			ADD	#LUBLK,U
CMPENUSER2	025036	020467	155212			CMP	E,NUSER2
BLTTINIT1	025042	002750				BLT	TINIT1
					
MOVJTYITYI	025044	012767	027512	173320		MOV	#JTYI,TYI+2
MOVJTYOTYO	025052	012767	031342	173226		MOV	#JTYO,TYO+2
MOVCRLF.CRLF	025060	012767	012246	165146		MOV	#CRLF,.CRLF+2
.IFNZNTY		000001			.IFNZ NTY
MOVCNSQTKBRV	025066	012767	025764	152764		MOV	#CNSQ,TKBRV
MOVCNINTTPBRV	025074	012767	031242	152762		MOV	#CNINT,TPBRV
MOVTKS	025102	012767	000100	152450		MOV	#100,TKS
MOVTPS	025110	012767	000100	152446		MOV	#100,TPS
					.ENDC
MOVDMCANFDMTYDMTBR	025116	012767	001000	147662		MOV	#DMCA+NFDMTY,DMTBR
MOVDMTTTTP	025124	012767	001200	000604		MOV	#DMTT,TTP
MOVDMINTDMTBRV	025132	012767	031002	153154		MOV	#DMINT,DMTBRV
MOVCLKBDMCLKBR1	025140	012767	011550	164372		MOV	#CLKBDM,CLKBR1+2	;TYPE IN AT CLOCK LEVEL
MOVDMCSR	025146	012767	010001	147624		MOV	#10001,DMCSR	;TRANSMIT INTS ONLY
JMPNEXTUS	025154	000167	162656			JMP	NEXTUS
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 105
	TYI 152	PAGE 7 	CHAR DISPATCH TABLES

					
					
					;ACS (IN GENERAL)
					;E -- TTY*2
					;D-- CHARACTER
					;C -- CHARACTER DISPATCHING
					;B&A -- VARIOUS HACKS, USUALLY NOT USED
					;U -- NOT USED, HOPEFULLY WILL CONTAIN USER
					
					;TTYRST --
					;CALL THIS WITH TTY IN E TO RESET INDVIDUAL TTY
TTYRSTMOVTITQTETITQPE	025160	016464	023446	023474	TTYRST:	MOV	TITQT(E),TITQP(E)	;TEMP Q PNTRS
MOVTITQTETITQLE	025166	016464	023446	023514		MOV	TITQT(E),TITQL(E)
TTYRS1MOVTITQLETITQPE	025174	016464	023514	023474	TTYRS1:	MOV	TITQL(E),TITQP(E)
CLRTITQNE	025202	005064	023534			CLR	TITQN(E)
TTYRS2BISTIBRTTYSTE	025206	052764	002000	024534	TTYRS2:	BIS	#TIBR,TTYST(E)
CMPTOSNDEDMSND	025214	026427	024234	031130		CMP	TOSND(E),#DMSND
BNETTYRS4	025222	001013				BNE	TTYRS4
BICDMBITEDMTRAN	025224	046467	024572	003772		BIC	DMBIT(E),DMTRAN
BICDMBITEDMBAR	025232	046467	024572	147542		BIC	DMBIT(E),DMBAR
CLRDMWCE	025240	005064	001036			CLR	DMWC(E)		;TYPE OUT STUFF
MOVTOBTEDMCAE	025244	016464	024026	000776		MOV	TOBT(E),DMCA(E)
TTYRS4MOVTOBTETOBPE	025252	016464	024026	024074	TTYRS4:	MOV	TOBT(E),TOBP(E)
MOVTOBTETOBFFE	025260	016464	024026	024054		MOV	TOBT(E),TOBFF(E)
CLRCHARNOE	025266	005064	023406			CLR	CHARNO(E)
CLRTOPCE	025272	005064	024134			CLR	TOPC(E)
CLRTOTNE	025276	005064	024114			CLR	TOTN(E)
CLRTODINGE	025302	005064	024214			CLR	TODING(E)
BITTIDTRATTYSTE	025306	032764	174000	024534		BIT	#TIDTRA,TTYST(E)
BNETTYRS3	025314	001005				BNE	TTYRS3
BICTIBRTTYSTE	025316	042764	002000	024534		BIC	#TIBR,TTYST(E)
CLRTYIDPE	025324	005064	024334			CLR	TYIDP(E)
TTYRS3BICTIEDTTYSTE	025330	042764	001277	024534	TTYRS3:	BIC	#TIED!277,TTYST(E)	;INPUT STUFF
MOVTIBTETIBLE	025336	016464	023556	023702		MOV	TIBT+2(E),TIBL(E)
MOVTIBTETIBPE	025344	016464	023554	023602		MOV	TIBT(E),TIBP(E)	;TYI BUF
MOVTIBTETYIBPE	025352	016464	023554	023622		MOV	TIBT(E),TYIBP(E)
MOVTIBTETIEBPE	025360	016464	023556	024006		MOV	TIBT+2(E),TIEBP(E)	;EDIT BUFFER
CLRTIDPE	025366	005064	024314			CLR	TIDP(E)		;DSK WD CNT
CLRTIEDPE	025372	005064	024434			CLR	TIEDP(E)
CLRTYIFDPE	025376	005064	024354			CLR	TYIFDP(E)
CLRTIEFDPE	025402	005064	024454			CLR	TIEFDP(E)
CLRTITNE	025406	005064	023642			CLR	TITN(E)
CLRTTYBRE	025412	005064	024474			CLR	TTYBR(E)
CLRTTYEBRE	025416	005064	024514			CLR	TTYEBR(E)
RTSPC	025422	000207				RTS	PC
					
					;EDITA--
					;CALL TO START EDIT
EDITABISTIEDTTYSTE	025424	052764	001000	024534	EDITA:	BIS	#TIED,TTYST(E)
MOVTIEBTETIBLE	025432	016464	023762	023702		MOV	TIEBT(E),TIBL(E)	;USE 1/2 TYI BUFFER FOR EDIT BUF
MOVTIEBTETIEBPE	025440	016464	023762	024006		MOV	TIEBT(E),TIEBP(E)
RTSPC	025446	000207				RTS	PC
					
					;EDITZ--
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 106
	TYI 152	PAGE 7.1 	CHAR DISPATCH TABLES

					;CALL TO END EDIT
EDITZBICTIEDTTYSTE	025450	042764	001000	024534	EDITZ:	BIC	#TIED,TTYST(E)
MOVTIBTETIBLE	025456	016464	023556	023702		MOV	TIBT+2(E),TIBL(E)	;USE EDIT BUF FOR TYI AGAIN
RTSPC	025464	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 107
	TYI 152	PAGE 8 	CHAR DISPATCH TABLES

					
.STITL						.STITLE TYPE IN
					;TISQ --
					;MOVE CHARS FROM TUMBLE TABLE TO TEMPORARY TYPE IN QUEUES
TISQBICD	025466	042703	177600		TISQ:	BIC	#177600,D
TISQ1MOVTTYUEU	025472	016405	024554		TISQ1:	MOV	TTYU(E),U
CMPDBRKCHR	025476	020367	154676			CMP	D,BRKCHR
BEQBREAK	025502	001426				BEQ	BREAK
CMPFLSRESUFRTYIH	025504	026527	002466	000010		CMP	FLSRES(U),#FRTYIH
BNETISQ3	025512	001021				BNE	TISQ3
CMPTITQNETITQSZ	025514	026427	023534	000006		CMP	TITQN(E),#TITQSZ
BGEDING	025522	002042				BGE	DING
TISQ2MOVBDTITQLE	025524	110374	023514		TISQ2:	MOVB	D,@TITQL(E)
INCTITQNE	025530	005264	023534			INC	TITQN(E)
INCTITQLE	025534	005264	023514			INC	TITQL(E)
CMPTITQLETITQTE	025540	026464	023514	023450		CMP	TITQL(E),TITQT+2(E)
BLTTISQ3	025546	002403				BLT	TISQ3
MOVTITQTETITQLE	025550	016464	023446	023514		MOV	TITQT(E),TITQL(E)
TISQ3RTSPC	025556	000207			TISQ3:	RTS	PC
					
					;BREAK
BREAKCMPFLSRESUFRTYIH	025560	026527	002466	000010	BREAK:	CMP	FLSRES(U),#FRTYIH
BEQBREAK1	025566	001406				BEQ	BREAK1
BISTIBRTTYSTE	025570	052764	002000	024534		BIS	#TIBR,TTYST(E)
MOVPCBRAKE	025576	010767	154712			MOV	PC,BRAKE
RTSPC	025602	000207				RTS	PC
BREAK1JSRPCTTYRS2	025604	004767	177376		BREAK1:	JSR	PC,TTYRS2
BRTISQ2	025610	000745				BR	TISQ2
					
					
					;BRAKR -- TO EXECUTE BREAK WHEN NOT IN TYIH
BRAKRTSTJDCSW	025612	005767	154564		BRAKR:	TST	JDCSW
BEQTISQ3	025616	001757				BEQ	TISQ3
MOVUTTYUE	025620	016504	002512			MOV	UTTY(U),E
JMPTTYRS2	025624	000167	177356			JMP	TTYRS2
					
					;DING --
DINGINCTODINGE	025630	005264	024214		DING:	INC	TODING(E)
RTSPC	025634	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 108
	TYI 152	PAGE 9 	TYPE IN

					
					;DMSQ -- DM11 TYPE IN
DMSQBITDMCSR	025636	032767	060000	147134	DMSQ:	BIT	#60000,DMCSR
BNEDMSQ4	025644	001042				BNE	DMSQ4	;NXM OR SYS OVERRUN
SPUSH						SPUSH	C
MOVCPSPUSH						SPUSH	D
MOVDPSPUSH						SPUSH	E
MOVEPSPUSH						SPUSH	U
MOVUPMOVTTPC	025656	016702	000054			MOV	TTP,C
BRDMSQ3	025662	000422				BR	DMSQ3
					
DMSQ1BICC	025664	042712	120200		DMSQ1:	BIC	#120200,(C)
BITC	025670	032712	040000			BIT	#40000,(C)
BNEDMSQ2	025674	001007				BNE	DMSQ2	;BR IF NO STOP RCVD
MOVBCE	025676	116204	000001			MOVB	1(C),E	;TTY*2
MOVBCD	025702	111203				MOVB	(C),D	;CHAR
ADDNFDMTYE	025704	062704	000002			ADD	#NFDMTY,E
JSRPCTISQ1	025710	004767	177556			JSR	PC,TISQ1
DMSQ2TSTC	025714	005722			DMSQ2:	TST	(C)+	;INC TTP
CMPCDMTT	025716	020227	001400			CMP	C,#DMTT+200
BLTDMSQ3	025722	002402				BLT	DMSQ3
MOVDMTTC	025724	012702	001200			MOV	#DMTT,C	;IF TTP AT END OF TT, RESET
DMSQ3TSTC	025730	005712			DMSQ3:	TST	(C)
BLTDMSQ1	025732	002754				BLT	DMSQ1
					
MOVCPC	025734	010227				MOV	C,(PC)+	;SAVE PNTR
TTPDMTTDMTT	025736	001200			TTP:	DMTT
SPOP						SPOP	U
MOVPUSPOP						SPOP	E
MOVPESPOP						SPOP	D
MOVPDSPOP						SPOP	C
MOVPCRTSPC	025750	000207				RTS	PC
					
DMSQ4HALT	025752	000000			DMSQ4:	HALT		;NXM OR SYS OVERRUN
BICDMCSR	025754	042767	060000	147016		BIC	#60000,DMCSR
RTSPC	025762	000207				RTS	PC
					
					
					
CNSQJSRAGENSQ	025764	004067	000004		CNSQ:	JSR	A,GENSQ
TKBTKB	025770	177562				TKB
NFTYNFTY	025772	000000				NFTY
					
GENSQSPUSH					GENSQ:	SPUSH	D
MOVDPSPUSH						SPUSH	E
MOVEPSPUSH						SPUSH	U
MOVUPMOVAD	026002	013003				MOV	@(A)+,D
MOVAE	026004	011004				MOV	(A),E
JSRPCTISQ	026006	004767	177454			JSR	PC,TISQ
SPOP						SPOP	U
MOVPUSPOP						SPOP	E
MOVPESPOP						SPOP	D
MOVPDSPOP						SPOP	A
MOVPARTI	026022	000002				RTI
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 109
	TYI 152	PAGE 10 	TYPE IN

					
					;TI2Q--
					;FOR ALL USERS, EMPTY TEMP TYI BUFFER TO TYI BUF
TI2QSPUSH					TI2Q:	SPUSH	C
MOVCPSPUSH						SPUSH	D
MOVDPSPUSH						SPUSH	E
MOVEPCLRE	026032	005004				CLR	E
					
TI2Q1MOVTIPCEC	026034	016402	023722		TI2Q1:	MOV	TIPC(E),C	;TRY TO PROCESS ALL CHARS
BITTIDTRATTYSTE	026040	032764	174000	024534		BIT	#TIDTRA,TTYST(E)
BNETI2Q3	026046	001030				BNE	TI2Q3	;BR IF DSK TRA OR TYO BUF FULL
TSTTOPCE	026050	005764	024134			TST	TOPC(E)
BNETI2Q3	026054	001025				BNE	TI2Q3
TSTC	026056	005702				TST	C
BNETI2Q2	026060	001033				BNE	TI2Q2
TSTTITQNE	026062	005764	023534			TST	TITQN(E)
BLETI2Q3	026066	003420				BLE	TI2Q3
MOVBTITQPED	026070	117403	023474			MOVB	@TITQP(E),D	;CHAR
JSRPCTGTC	026074	004767	000064			JSR	PC,TGTC	;PROCESS
DECTITQNE	026100	005364	023534			DEC	TITQN(E)
INCTITQPE	026104	005264	023474			INC	TITQP(E)
CMPTITQPETITQTE	026110	026464	023474	023450		CMP	TITQP(E),TITQT+2(E)
BLTTI2Q1	026116	002746				BLT	TI2Q1
MOVTITQTETITQPE	026120	016464	023446	023474		MOV	TITQT(E),TITQP(E)
BRTI2Q1	026126	000742				BR	TI2Q1
					
TI2Q3TSTE	026130	005724			TI2Q3:	TST	(E)+
CMPENUSER2	026132	020467	154116			CMP	E,NUSER2	;THROUGH WITH ALL TTYS?
BLTTI2Q1	026136	002736				BLT	TI2Q1	;BR IF NO
SPOP						SPOP	E
MOVPESPOP						SPOP 	D
MOVPDSPOP						SPOP	C
MOVPCRTSPC	026146	000207				RTS	PC
					
TI2Q2MOVTISVDED	026150	016403	023742		TI2Q2:	MOV	TISVD(E),D
CLRTIPCE	026154	005064	023722			CLR	TIPC(E)
JSRPCC	026160	004712				JSR	PC,(C)
BRTI2Q1	026162	000724				BR	TI2Q1
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 110
	TYI 152	PAGE 11 	TYPE IN

					
					
					;TGTC --
					;GET CHAR FROM 5 WD BUFFER & PROCESS INTO WD ASSEMBLY BUFFER
TGTCBITFCQFTTYSTE	026164	032764	000200	024534	TGTC:	BIT	#FCQF,TTYST(E)
BEQTGTC5	026172	001402				BEQ	TGTC5
JMPTICPY	026174	000167	000676			JMP	TICPY	;YES, COPY CHAR
TGTC5BITD	026200	032703	000200		TGTC5:	BIT	#200,D	;QUOTED?
BNETGTC2	026204	001020				BNE	TGTC2	;BR IF YES
BITBFSFDTBLD	026206	132763	000200	006142		BITB	#FSF,DTBL(D)	;SPECIAL CHAR?
BEQTGTC1	026214	001404				BEQ	TGTC1
MOVBDTBL2DC	026216	116302	006342			MOVB	DTBL2(D),C	;YES
JMPCTISC	026222	000172	024630			JMP	@CTIS(C)	;DISPATCH
					
TGTC1BITBFQFDTBLD	026226	132763	000020	006142	TGTC1:	BITB	#FQF,DTBL(D)	;QUOTING CHAR?
BEQTGTC2	026234	001404				BEQ	TGTC2
MOVBDTBL2DC	026236	116302	006342			MOVB	DTBL2(D),C	;YES
JSRPCCTIQC	026242	004772	024662			JSR	PC,@CTIQ(C)	;DISPATCH
					
TGTC2JSRPCTIINB	026246	004767	001044		TGTC2:	JSR	PC,TIINB	;PUT CHAR IN BUFFER
TGTC3JSRPCUTYO1	026252	004767	003300		TGTC3:	JSR	PC,UTYO1
JSRPCTOSNDE	026256	004774	024234			JSR	PC,@TOSND(E)
TGTC4RTSPC	026262	000207			TGTC4:	RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 111
	TYI 152	PAGE 12 	TYPE IN

					
					
					;SPECIAL CHAR ROUTINES
					
					;^C -- COPY NEXT CHAR
TICCBITTIEDTTYSTE	026264	032764	001000	024534	TICC:	BIT	#TIED,TTYST(E)
BNETICC1	026272	001002				BNE	TICC1
JMPTIQM	026274	000167	000674			JMP	TIQM	;IF NOT EDITING JUST ECHO ^C
TICC1JSRPCGEDC	026300	004767	001060		TICC1:	JSR	PC,GEDC	;GET EDIT CHAR
BRTGTC5	026304	000735				BR	TGTC5
					
					;^C -- DELETES NEXT CHAR
TICDBITTIEDTTYSTE	026306	032764	001000	024534	TICD:	BIT	#TIED,TTYST(E)
BNETICD1	026314	001002				BNE	TICD1
JMPTIQM	026316	000167	000652			JMP	TIQM	;IGNORE IF NOT EDITING
TICD1JSRPCGEDC	026322	004767	001036		TICD1:	JSR	PC,GEDC	;REMOVE CHAR
MOVD	026326	012703	000004			MOV	#4,D
BRTGTC3	026332	000747				BR	TGTC3	;SUCCEED, ECHO ^C
					
					;^M (C.R.) -- MAYBE END OF LINE
TICMTSTTTYBRE	026334	005764	024474		TICM:	TST	TTYBR(E)
BGTTGTC2	026340	003342				BGT	TGTC2	;IF NOT EOL
TICM1JSRPCTGTC2	026342	004767	177700		TICM1:	JSR	PC,TGTC2	;ECHO C.R.
JSRPCTIDTSC	026346	004767	000474			JSR	PC,TIDTSC
MOVTITNETYITNE	026352	016464	023642	023662		MOV	TITN(E),TYITN(E)
TSTTIDPE	026360	005764	024314			TST	TIDP(E)
BLETICM4	026364	003430				BLE	TICM4
CMPTIBPETIBTE	026366	026464	023602	023554		CMP	TIBP(E),TIBT(E)
BLETICM2	026374	003405				BLE	TICM2
MOVTICM2TIPCE	026376	012764	026410	023722		MOV	#TICM2,TIPC(E)
JMPTIDKO	026404	000167	001464			JMP	TIDKO
TICM2MOVTIDPETYIDPE	026410	016464	024314	024334	TICM2:	MOV	TIDP(E),TYIDP(E)
JSRPCTTYRS3	026416	004767	176706			JSR	PC,TTYRS3
JSRPCTIDTS1	026422	004767	000426			JSR	PC,TIDTS1
JSRPCTYIDKI	026426	004767	002236			JSR	PC,TYIDKI
TICM3MOVTTYUED	026432	016403	024554		TICM3:	MOV	TTYU(E),D
MOVFRTYIWFLSRESD	026436	012763	000004	002466		MOV	#FRTYIW,FLSRES(D)
RTSPC	026444	000207				RTS	PC
TICM4JSRPCTTYRS3	026446	004767	176656		TICM4:	JSR	PC,TTYRS3
JSRPCTEDKO	026452	004767	002110			JSR	PC,TEDKO
BRTICM3	026456	000765				BR	TICM3
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 112
	TYI 152	PAGE 13 	TYPE IN

					
					;^N -- COPY NEXT WORD
TICNBITTIEDTTYSTE	026460	032764	001000	024534	TICN:	BIT	#TIED,TTYST(E)
BNETICN1	026466	001006				BNE	TICN1
JMPTIQM	026470	000167	000500			JMP	TIQM
					
TICN2JSRPCTGTC5	026474	004767	177500		TICN2:	JSR	PC,TGTC5
JSRPCTIDTSC	026500	004767	000342			JSR	PC,TIDTSC
TICN1JSRPCGEDC	026504	004767	000654		TICN1:	JSR	PC,GEDC	;GET NEXT CHAR IN ED BUF
BITD	026510	032703	000200			BIT	#200,D
BNETICN2	026514	001367				BNE	TICN2
BITBWSFDTBLD	026516	132763	000002	006142		BITB	#WSF,DTBL(D)
BEQTICN2	026524	001763				BEQ	TICN2
JMPTGTC5	026526	000167	177446			JMP	TGTC5
					
					;^Q -- QUOTE NEXT CHAR
TICQBISFCQFTTYSTE	026532	052764	000200	024534	TICQ:	BIS	#FCQF,TTYST(E)	;^Q FLAG ON
BRTGTC3	026540	000644				BR	TGTC3	;ECHO BUT NOT IN BUFFER
					
					;^R -- COPY REST OF EDIT BUFFER
TICRBITTIEDTTYSTE	026542	032764	001000	024534	TICR:	BIT	#TIED,TTYST(E)
BNETICR1	026550	001002				BNE	TICR1
JMPTIQM	026552	000167	000416			JMP	TIQM	;IF NOT EDITING, IGNORE
TICR1JSRPCGEDC	026556	004767	000602		TICR1:	JSR	PC,GEDC
JSRPCTGTC5	026562	004767	177412			JSR	PC,TGTC5	;SUCCEED, ECHO
JSRPCTIDTSC	026566	004767	000254			JSR	PC,TIDTSC
BRTICR1	026572	000771				BR	TICR1
					
					;^S -- SKIP (DELETE) NEXT WORD
TICSBITTIEDTTYSTE	026574	032764	001000	024534	TICS:	BIT	#TIED,TTYST(E)
BNE	026602	001002				BNE	.+6
JMPTIQM	026604	000167	000364			JMP	TIQM
JSRPCTGTC3	026610	004767	177436			JSR	PC,TGTC3
TICS1JSRPCTIDTSC	026614	004767	000226		TICS1:	JSR	PC,TIDTSC
JSRPCGEDC	026620	004767	000540			JSR	PC,GEDC
BITD	026624	032703	000200			BIT	#200,D
BNETICS1	026630	001371				BNE	TICS1
BITBWSFDTBLD	026632	132763	000002	006142		BITB	#WSF,DTBL(D)
BEQTICS1	026640	001765				BEQ	TICS1
JMPTGTC4	026642	000167	177414			JMP	TGTC4
					
					;TICW -- ^W RUBOUT TILL PREVIOUS SPACE
TICW1JSRPCTGTC3	026646	004767	177400		TICW1:	JSR	PC,TGTC3	;ECHO CHAR
JSRPCTIDTSC	026652	004767	000170			JSR	PC,TIDTSC
TICWJSRPCTIDEL1	026656	004767	000332		TICW:	JSR	PC,TIDEL1
BITD	026662	032703	000200			BIT	#200,D
BNETICW1	026666	001367				BNE	TICW1
BITBWSFDTBLD	026670	132763	000002	006142		BITB	#WSF,DTBL(D)
BEQTICW1	026676	001763				BEQ	TICW1
JMPTGTC3	026700	000167	177346			JMP	TGTC3
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 113
	TYI 152	PAGE 14 	TYPE IN

					
					;TICY	-- ^Y RECOVER PREVIOUS LINE
TICYBITTIEDTTYSTE	026704	032764	001000	024534	TICY:	BIT	#TIED,TTYST(E)
BNETIQM	026712	001130				BNE	TIQM
JSRPCTICZ1	026714	004767	000116			JSR	PC,TICZ1
JSRPCTIDTSC	026720	004767	000122			JSR	PC,TIDTSC
MOVD	026724	012703	000137			MOV	#137,D
JSRPCTGTC3	026730	004767	177316			JSR	PC,TGTC3
TSTTIEDPE	026734	005764	024434			TST	TIEDP(E)
BLE	026740	003402				BLE	.+6
JSRPCTEDKI	026742	004767	001442			JSR	PC,TEDKI
CLRTTYBRE	026746	005064	024474			CLR	TTYBR(E)
MOVTIBTETIBPE	026752	016464	023554	023602		MOV	TIBT(E),TIBP(E)
CLRTIDPE	026760	005064	024314			CLR	TIDP(E)
CLRTITNE	026764	005064	023642			CLR	TITN(E)
JMPEDITA	026770	000167	176430			JMP	EDITA
					
					;^Z -- EMPTY TYI BUFFER
TICZMOVTTYUEC	026774	016402	024554		TICZ:	MOV	TTYU(E),C
MOVFRTYIWFLSRESC	027000	012762	000004	002466		MOV	#FRTYIW,FLSRES(C)
JSRPCTICZ1	027006	004767	000024			JSR	PC,TICZ1
CLRTTYBRE	027012	005064	024474			CLR	TTYBR(E)
MOVTIBTE	027016	012774	000015	023554		MOV	#15,@TIBT(E)
MOVTYITNE	027024	012764	000001	023662		MOV	#1,TYITN(E)
JMPTTYRS3	027032	000167	176272			JMP	TTYRS3
					
TICZ1MOVPCHARNOE	027036	010664	023406		TICZ1:	MOV	P,CHARNO(E)
JMPTGTC3	027042	000167	177204			JMP	TGTC3
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 114
	TYI 152	PAGE 15 	TYPE IN

					
					
					;TIDTSC -- DID SPEC CHAR CAUSE DSK TRANS OR TYO BUF FULL?
TIDTSCTSTTOPCE	027046	005764	024134		TIDTSC:	TST	TOPC(E)
BNETIDTS2	027052	001004				BNE	TIDTS2
TIDTS1BITTIDTRATTYSTE	027054	032764	174000	024534	TIDTS1:	BIT	#TIDTRA,TTYST(E)
BEQTIDTS3	027062	001404				BEQ	TIDTS3
TIDTS2MOVDTISVDE	027064	010364	023742		TIDTS2:	MOV	D,TISVD(E)
MOVPTIPCE	027070	012664	023722			MOV	(P)+,TIPC(E)
TIDTS3RTSPC	027074	000207			TIDTS3:	RTS	PC
					
					;TICPY -- QUOTE CHAR IN D
TICPYBICFCQFTTYSTE	027076	042764	000200	024534	TICPY:	BIC	#FCQF,TTYST(E)	;^Q FLAG OFF
BITBFSFFQFWSFDTBLD	027104	132763	000222	006142		BITB	#FSF!FQF!WSF,DTBL(D)
BEQTICPY1	027112	001413				BEQ	TICPY1
CMPD	027114	020327	000003			CMP	D,#3
BEQTICPY2	027120	001412				BEQ	TICPY2
CMPD	027122	020327	000032			CMP	D,#32
BEQTICPY2	027126	001407				BEQ	TICPY2
CMPD	027130	020327	000177			CMP	D,#177
BEQTICPY1	027134	001402				BEQ	TICPY1
BISD	027136	052703	000200			BIS	#200,D	;TURN ON HIGH BYTE BIT
TICPY1JMPTGTC2	027142	000167	177100		TICPY1:	JMP	TGTC2
TICPY2JMPTGTC3	027146	000167	177100		TICPY2:	JMP	TGTC3
					
					;TIOBR -- [
TIOBRINCTTYBRE	027152	005264	024474		TIOBR:	INC	TTYBR(E)
RTSPC	027156	000207				RTS	PC
					
					;TICBR -- ]
TICBRTSTTTYBRE	027160	005764	024474		TICBR:	TST	TTYBR(E)
BLETIQM	027164	003403				BLE	TIQM
DECTTYBRE	027166	005364	024474			DEC	TTYBR(E)
RTSPC	027172	000207				RTS	PC
					
					;TIQM -- PRINTS ?
TIQMMOVD	027174	012703	000077		TIQM:	MOV	#'?,D
JMPTGTC3	027200	000167	177046			JMP	TGTC3
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 115
	TYI 152	PAGE 16 	TYPE IN

					
					
					;REGULAR CHAR ROUTINES
					;TINB MOVES INTO BUFFER, TIDEL1 MOVES OUT
					
TIDELJSRPCTIDEL1	027204	004767	000004		TIDEL:	JSR	PC,TIDEL1	;THIS ALSO WANTS TO BE SUBR
JMPTGTC3	027210	000167	177036			JMP	TGTC3	;SUCCEED, ECHO CHAR
					
TIDEL1CMPTIBPETIBTE	027214	026464	023602	023554	TIDEL1:	CMP	TIBP(E),TIBT(E)
BLETIDEL5	027222	003420				BLE	TIDEL5	;BR IF NO CHARS IN BUF
DECTIBPE	027224	005364	023602			DEC	TIBP(E)
MOVBTIBPED	027230	117403	023602			MOVB	@TIBP(E),D	;CHAR
BITD	027234	032703	000200			BIT	#200,D
BNETIDEL3	027240	001004				BNE	TIDEL3	;BR IF QUOTED
BITBFQFDTBLD	027242	132763	000020	006142		BITB	#FQF,DTBL(D)
BNE	027250	001001				BNE	.+4
TIDEL3RTSPC	027252	000207			TIDEL3:	RTS 	PC
MOVBDTBL2DC	027254	116302	006342			MOVB	DTBL2(D),C	;UNDO QUOTING ACTION
JMPCTIUQC	027260	000172	024664			JMP	@CTIUQ(C)
					
TIDEL5TSTTIDPE	027264	005764	024314		TIDEL5:	TST	TIDP(E)
BLETIDEL6	027270	003410				BLE	TIDEL6
MOVDTISVDE	027272	010364	023742			MOV	D,TISVD(E)
SUBP	027276	162716	000004			SUB	#4,(P)
MOVPTIPCE	027302	012664	023722			MOV	(P)+,TIPC(E)
JMPTIDKI	027306	000167	000722			JMP	TIDKI
TIDEL6TSTP	027312	005726			TIDEL6:	TST	(P)+
RTSPC	027314	000207				RTS	PC
					
TIINBCMPTIBPETIBLE	027316	026464	023602	023702	TIINB:	CMP	TIBP(E),TIBL(E)
BGETIINB2	027324	002015				BGE	TIINB2
MOVBDTIBPE	027326	110374	023602			MOVB	D,@TIBP(E)	;CHAR IN BUF
INCTITNE	027332	005264	023642			INC	TITN(E)
INCTIBPE	027336	005264	023602			INC	TIBP(E)
CMPTIBPETIBLE	027342	026464	023602	023702		CMP	TIBP(E),TIBL(E)
BGETIINB1	027350	002001				BGE	TIINB1
RTSPC	027352	000207				RTS	PC
					
TIINB1JMPTIDKO	027354	000167	000514		TIINB1:	JMP	TIDKO
					
TIINB2HALT	027360	000000			TIINB2:	HALT	;TIBP ZONKED
RTSPC	027362	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 116
	TYI 152	PAGE 17 	TYPE IN

					
					
					;GEDC -- GET EDIT CHAR (FROM EDIT BUF)
GEDCCMPTIEBPETIBTE	027364	026464	024006	023556	GEDC:	CMP	TIEBP(E),TIBT+2(E)	;ANYTHING IN BUFFER?
BGETIDEL6	027372	002347				BGE	TIDEL6
CMPBTIEBPE	027374	127427	024006	000015		CMPB	@TIEBP(E),#15	;IS NEXT CHAR C.R.?
BEQGEDCA	027402	001432				BEQ	GEDCA	;BR IF YES
GEDC1MOVBTIEBPED	027404	117403	024006		GEDC1:	MOVB	@TIEBP(E),D	;CHAR IN D
INCTIEBPE	027410	005264	024006			INC	TIEBP(E)
BITD	027414	032703	000200			BIT	#200,D
BNEGEDC2	027420	001011				BNE	GEDC2
BITBFQFDTBLD	027422	132763	000020	006142		BITB	#FQF,DTBL(D)	;IS IT QUOTING?
BEQGEDC2	027430	001405				BEQ	GEDC2
MOVBDTBL2DC	027432	116302	006342		 	MOVB	DTBL2(D),C
ADDEDQFCTTYEBRE	027436	066264	027506	024514		ADD	EDQF(C),TTYEBR(E)
GEDC2CMPTIEBPETIBTE	027444	026464	024006	023556	GEDC2:	CMP	TIEBP(E),TIBT+2(E)	;OUT OF BUF?
BLTGEDC3	027452	002403				BLT	GEDC3	;BR IF STILL STUFF IN BUF
TSTTIEDPE	027454	005764	024434			TST	TIEDP(E)	;IS THERE STUFF ON DSK?
BNEGEDC4	027460	001001				BNE	GEDC4	;BR IF YES
GEDC3RTSPC	027462	000207			GEDC3:	RTS	PC
					
GEDC4JMPTEDKI	027464	000167	000720		GEDC4:	JMP	TEDKI
					
							;NEXT CHAR C.R.
GEDCATSTTTYEBRE	027470	005764	024514		GEDCA:	TST	TTYEBR(E)
BGTGEDC1	027474	003343				BGT	GEDC1	;BR IF IN QUOTES
MOVTIBTETIEBPE	027476	016464	023556	024006		MOV	TIBT+2(E),TIEBP(E)	;END OF EDIT LINE, PUT PNTR TO END OF EDIT BUFFER
BRTIDEL6	027504	000702				BR	TIDEL6
					
					
EDQF	027506	000001			EDQF:	1	;[
	027510	177777				-1	;]
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 117
	TYI 152	PAGE 18 	TYPE IN

					
					
					;UTYI -- USER TYI
					;RETURNS CHAR IN CH
JTYITSTUSER	027512	005767	151772		JTYI:	TST USER
BGE	027516	002002				BGE .+6
JMPSTYI	027520	000167	170650			JMP STYI
PUSH						PUSH	E
MOVEPJSRPCPPUSHTPUSH						PUSH	U
MOVUPJSRPCPPUSHTMOVUSERU	027540	016705	151744			MOV	USER,U
MOVUTTYUE	027544	016504	002512			MOV	UTTY(U),E
BITTIDTRATTYSTE	027550	032764	174000	024534		BIT	#TIDTRA,TTYST(E)
BEQUTYI2	027556	001413				BEQ	UTYI2
MOVFRTYIWFLSRESU	027560	012765	000004	002466		MOV	#FRTYIW,FLSRES(U)
UTYI1JSRPCFLUSH	027566	004767	161040		UTYI1:	JSR	PC,FLUSH	;IF DSKING,FLUSH USER
BITTIDTRATTYSTE	027572	032764	174000	024534		BIT	#TIDTRA,TTYST(E)
BNEUTYI1	027600	001372				BNE	UTYI1
JSRPCRUNME	027602	004767	160072			JSR	PC,RUNME
UTYI2BITTIBRTTYSTE	027606	032764	002000	024534	UTYI2:	BIT	#TIBR,TTYST(E)
BNEUTYI3	027614	001023				BNE	UTYI3
DECTYITNE	027616	005364	023662			DEC	TYITN(E)
BLTUTYI4	027622	002427				BLT	UTYI4
CMPTIEDPETYIFDPE	027624	026464	024434	024354		CMP	TIEDP(E),TYIFDP(E)
BGE	027632	002002				BGE	.+6
JSRPCTEDKO	027634	004767	000726			JSR	PC,TEDKO
MOVBTYIBPED	027640	117403	023622			MOVB	@TYIBP(E),D
INCTYIBPE	027644	005264	023622			INC	TYIBP(E)
CMPTYIBPETIBLE	027650	026464	023622	023702		CMP	TYIBP(E),TIBL(E)	;USED UP BUFFER?
BLTUTYI3	027656	002402				BLT	UTYI3
JSRPCTYIDKI	027660	004767	001004			JSR	PC,TYIDKI
UTYI3POP					UTYI3:	POP	U
MOVPUJSRPCPPOPTPOP						POP	E
MOVPEJSRPCPPOPTRTSPC	027700	000207				RTS	PC
					
UTYI4HALT	027702	000000			UTYI4:	HALT	;TYI ASKED FOR TOO MANY CHARS
BR	027704	000776				BR	.-2
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 118
	TYI 152	PAGE 19 	TYPE IN

					
.STITL					.STITLE 	TYI DSK TRANSFER, START, & STOP ROUTINES
					
					;DISK TRANSFER ROUTINES
					;LOCS MUST BE FILLED AS FOLLOWS
					;(A) START ROUTINE ADDRESS
					;2(A) -WORD COUNT (NOT BYTE COUNT)
					;4(A) CORE ADDRESS-2
					;6(A) LOW ORDER OF DSK ADDR
					;10(A) HIGH ORDER
					;12(A) FREE WD STORE TTY HERE
					;14(A) READ OR WRITE CODE (IN LOW BYTE)
					
					;TIDCM -- COMMON CODE
					;CALLED WITH JSR D,
TIDCMMOVD	027706	012367	000002		TIDCM:	MOV	(D)+,.+6	;ZOT NXT INSTR
MOVEA	027712	016460	000002	000004		MOV	2(E),4(A)
SUBA	027720	162760	000002	000004		SUB	#2,4(A)		;CORE ADDR-2
MOVEA	027726	010460	000012			MOV	E,12(A)		;USER
BISDTTYSTE	027732	052364	024534			BIS	(D)+,TTYST(E)
TSTD	027736	005723				TST	(D)+
MOVDA	027740	010310				MOV	D,(A)
MOVDA	027742	014360	000014			MOV	-(D),14(A)
SPOP						SPOP	D
MOVPDTIDCM1SPOP					TIDCM1:	SPOP	A
MOVPARTSPC	027752	000207				RTS	PC
					
					;TSTAB
					;TEST FOR ABORT (CALLED WITH JSR D,) AT BEGIN OF START ROUTINE
TSTABSPUSH					TSTAB:	SPUSH	E
MOVEPMOVAE	027756	016004	000012			MOV	12(A),E
BITTIBRTTYSTE	027762	032764	002000	024534		BIT	#TIBR,TTYST(E)
BEQTSTAB1	027770	001422				BEQ	TSTAB1
CLRA	027772	005060	000014			CLR	14(A)	;IF BREAK FLAG, ABORT TRANS
BICDTTYSTE	027776	046364	177770	024534		BIC	-10(D),TTYST(E)
TSTAB4BITTIDTRATTYSTE	030004	032764	174000	024534	TSTAB4:	BIT	#TIDTRA,TTYST(E)
BNETSTAB1	030012	001011				BNE	TSTAB1
MOVTTYUED	030014	016403	024554			MOV	TTYU(E),D
CMPFRTYIHFLSRESD	030020	022763	000010	002466		CMP	#FRTYIH,FLSRES(D)
BNETSTAB3	030026	001004				BNE	TSTAB3
BICTIBRTTYSTE	030030	042764	002000	024534		BIC	#TIBR,TTYST(E)
TSTAB1MOVDA	030036	010310			TSTAB1:	MOV	D,(A)	;STOP ROUTINE
TSTAB3SPOP					TSTAB3:	SPOP	E
MOVPESPOP						SPOP	D
MOVPDRTSPC	030044	000207				RTS	PC
					
					;TSTAB2
					;CALLED AT START OF STOP ROUTINE
TSTAB2SPUSH					TSTAB2:	SPUSH	E
MOVEPMOVAE	030050	016004	000012			MOV	12(A),E	;TTY
BICDTTYSTE	030054	046364	177764	024534		BIC	-14(D),TTYST(E)
BITTIBRTTYSTE	030062	032764	002000	024534		BIT	#TIBR,TTYST(E)
BNETSTAB4	030070	001345				BNE	TSTAB4
JMPD	030072	000113				JMP	(D)
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 119
	TYI 152	PAGE 20 	TYI DSK TRANSFER, START, & STOP ROUTINES

					
					;TIDKO -- TTY
					;FROM TYI BUFFER 
					;TO END OF DSK TYI BUFFER
TIDKOSPUSH					TIDKO:	SPUSH	A
MOVAPJSRPCSYDRBG	030076	004767	157044			JSR	PC,SYDRBG
MOVTIBTEA	030102	016460	023554	000002		MOV	TIBT(E),2(A)
SUBTIBPEA	030110	166460	023602	000002		SUB	TIBP(E),2(A)
BLT	030116	002403				BLT	.+10
HALT	030120	000000				HALT
JMPTIDCM1	030122	000167	177622			JMP	TIDCM1
ASRA	030126	006260	000002			ASR	2(A)
SBCA	030132	005660	000002			SBC	2(A)		;-WD CNT
MOVTILDEA	030136	016460	024254	000006		MOV	TILD(E),6(A)
MOVTIHDEA	030144	016460	024274	000010		MOV	TIHD(E),10(A)
ADDTIDPEA	030152	066460	024314	000006		ADD	TIDP(E),6(A)	;LOW ORDER DSK
ADCA	030160	005560	000010			ADC	10(A)		;HIGH ORDER
JSRDTIDCM	030164	004367	177516			JSR	D,TIDCM
TIBTTIBT	030170	023554				TIBT
TIDWTIDW	030172	040000				TIDW
DWRTECDWRTEC	030174	000103				DWRTEC
JSRDTSTAB	030176	004367	177552			JSR	D,TSTAB		;START ROUTINE
JSRDTSTAB2	030202	004367	177640			JSR	D,TSTAB2	;STOP ROUTINE
SUBATIDPE	030206	166064	000002	024314		SUB	2(A),TIDP(E)	;UPDATE # OF WDS (NOT BYTES) ON DSK
SUBATYIDPE	030214	166064	000002	024334		SUB	2(A),TYIDP(E)
MOVTIBTETIBPE	030222	016464	023554	023602		MOV	TIBT(E),TIBP(E)
JMPTSTAB3	030230	000167	177604			JMP	TSTAB3
					
					;TIDKI --
					;FROM END OF DISK TYI
					;TO CORE TYI
TIDKISPUSH					TIDKI:	SPUSH	A
MOVAPJSRPCSYDRBG	030236	004767	156704			JSR	PC,SYDRBG
MOVTIBLEA	030242	016460	023702	000002		MOV	TIBL(E),2(A)
SUBTIBTEA	030250	166460	023554	000002		SUB	TIBT(E),2(A)
CMPATIDPE	030256	026064	000002	024314		CMP	2(A),TIDP(E)
BLETIDKI1	030264	003403				BLE	TIDKI1
MOVTIDPEA	030266	016460	024314	000002		MOV	TIDP(E),2(A)
TIDKI1NEGA	030274	005460	000002		TIDKI1:	NEG	2(A)		;- WD CNT
MOVTILDEA	030300	016460	024254	000006		MOV	TILD(E),6(A)
MOVTIHDEA	030306	016460	024274	000010		MOV	TIHD(E),10(A)
ADDAA	030314	066060	000002	000006		ADD	2(A),6(A)	;DSK ADDR=DSK TOP+# OF WDS ON DSK-
ADDTIDPEA	030322	066460	024314	000006		ADD	TIDP(E),6(A)	;# BEING TRANSFERRED
ADCA	030330	005560	000010			ADC	10(A)
JSRDTIDCM	030334	004367	177346			JSR	D,TIDCM
TIBTTIBT	030340	023554				TIBT
TIDRTIDR	030342	020000				TIDR
DREADCDREADC	030344	000105				DREADC
JSRDTSTAB	030346	004367	177402			JSR	D,TSTAB		;START ROUTINE
JSRDTSTAB2	030352	004367	177470			JSR	D,TSTAB2	;STOP ROUTINE
ADDATIDPE	030356	066064	000002	024314		ADD	2(A),TIDP(E)
BGE	030364	002002				BGE	.+6
HALT	030366	000000				HALT		;NEG WD CNT
BR	030370	000776				BR	.-2
ASLA	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 120
	TYI 152	PAGE 20.1 	TYI DSK TRANSFER, START, & STOP ROUTINES

	030372	006360	000002			ASL	2(A)
SUBATIBPE	030376	166064	000002	023602		SUB	2(A),TIBP(E)	;CORE PNTR
JMPTSTAB3	030404	000167	177430			JMP	TSTAB3
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 121
	TYI 152	PAGE 21 	TYI DSK TRANSFER, START, & STOP ROUTINES

					
					
					;TIEDKI --
					;FROM FRONT OF DSK EDIT BUF
					;TO CORE EDIT BUFFER
TEDKISPUSH					TEDKI:	SPUSH	A
MOVAPJSRPCSYDRBG	030412	004767	156530			JSR	PC,SYDRBG
MOVEDBFSZA	030416	012760	000020	000002		MOV	#<EDBFSZ/2>,2(A)
CMPATIEDPE	030424	026064	000002	024434		CMP	2(A),TIEDP(E)
BLETEDK1	030432	003411				BLE	TEDK1
TSTTIEDPE	030434	005764	024434			TST	TIEDP(E)
BGT	030440	003003				BGT	.+10
HALT	030442	000000				HALT
JMPTIDCM1	030444	000167	177300			JMP	TIDCM1
MOVTIEDPEA	030450	016460	024434	000002		MOV	TIEDP(E),2(A)
TEDK1NEGA	030456	005460	000002		TEDK1:	NEG	2(A)		;NEG WD CNT
MOVTIELDEA	030462	016460	024374	000006		MOV	TIELD(E),6(A)
MOVTIEHDEA	030470	016460	024414	000010		MOV	TIEHD(E),10(A)
ADDTIEFDPEA	030476	066460	024454	000006		ADD	TIEFDP(E),6(A)	;LOW ORDER DSK
ADCA	030504	005560	000010			ADC	10(A)
JSRDTIDCM	030510	004367	177172			JSR	D,TIDCM
TIEBTTIEBT	030514	023762				TIEBT
TIEDRTIEDR	030516	010000				TIEDR
DREADCDREADC	030520	000105				DREADC
JSRDTSTAB	030522	004367	177226			JSR	D,TSTAB		;START ROUTINE
JSRDTSTAB2	030526	004367	177314			JSR	D,TSTAB2	;STOP ROUTINE
ADDATIEDPE	030532	066064	000002	024434		ADD	2(A),TIEDP(E)	;# OF WDS ON DSK
BGE	030540	002002				BGE	.+6
HALT	030542	000000				HALT
BR	030544	000776				BR	.-2
SUBATIEFDPE	030546	166064	000002	024454		SUB	2(A),TIEFDP(E)	;# OF WDS OFF DSK
MOVTIEBTETIEBPE	030554	016464	023762	024006		MOV	TIEBT(E),TIEBP(E)
JMPTSTAB3	030562	000167	177252			JMP	TSTAB3
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 122
	TYI 152	PAGE 22 	TYI DSK TRANSFER, START, & STOP ROUTINES

					
					
					;TIEDKO --
					;FROM CORE TYI
					;TOEND OF DSK EDIT BUFFER
TEDKOSPUSH					TEDKO:	SPUSH	A
MOVAPJSRPCSYDRBG	030570	004767	156352			JSR	PC,SYDRBG
MOVTIBFSZA	030574	012760	177740	000002		MOV	#-<TIBFSZ/2>,2(A)	;NEG WD CNT
MOVTIELDEA	030602	016460	024374	000006		MOV	TIELD(E),6(A)
MOVTIEHDEA	030610	016460	024414	000010		MOV	TIEHD(E),10(A)
ADDTIEDPEA	030616	066460	024434	000006		ADD	TIEDP(E),6(A)
ADCA	030624	005560	000010			ADC	10(A)
JSRDTIDCM	030630	004367	177052			JSR	D,TIDCM
TIBTTIBT	030634	023554				TIBT
TIEDWTIEDW	030636	004000				TIEDW
DWRTECDWRTEC	030640	000103				DWRTEC
JSRDTSTAB	030642	004367	177106			JSR	D,TSTAB		;START ROUTINE
JSRDTSTAB2	030646	004367	177174			JSR	D,TSTAB2	;STOP ROUTINE
SUBATIEDPE	030652	166064	000002	024434		SUB	2(A),TIEDP(E)
BGE	030660	002001				BGE	.+4
HALT	030662	000000				HALT
JMPTSTAB3	030664	000167	177150			JMP	TSTAB3
					
					;TYIDKI
					;FROM FRONT OF DSK TYI BUFFER
					;TO CORE TYI BUFFER
TYIDKISPUSH					TYIDKI:	SPUSH	A
MOVAPJSRPCSYDRBG	030672	004767	156250			JSR	PC,SYDRBG
MOVTIBFSZA	030676	012760	177740	000002		MOV	#-<TIBFSZ/2>,2(A)	;NEG WD CNT
MOVTILDEA	030704	016460	024254	000006		MOV	TILD(E),6(A)
MOVTIHDEA	030712	016460	024274	000010		MOV	TIHD(E),10(A)
ADDTYIFDPEA	030720	066460	024354	000006		ADD	TYIFDP(E),6(A)	;LOW ORDER DKS
ADCA	030726	005560	000010			ADC	10(A)		;HIGH ORDER
JSRDTIDCM	030732	004367	176750			JSR	D,TIDCM
TIBTTIBT	030736	023554				TIBT
TYIDRTYIDR	030740	100000				TYIDR
DREADCDREADC	030742	000105				DREADC
JSRDTSTAB	030744	004367	177004			JSR	D,TSTAB		;START ROUTINE
JSRDTSTAB2	030750	004367	177072			JSR	D,TSTAB2	;STOP ROUTINE
SUBATYIFDPE	030754	166064	000002	024354		SUB	2(A),TYIFDP(E)
ADDATYIDPE	030762	066064	000002	024334		ADD	2(A),TYIDP(E)
MOVTIBTETYIBPE	030770	016464	023554	023622		MOV	TIBT(E),TYIBP(E)
JMPTSTAB3	030776	000167	177036			JMP	TSTAB3
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 123
	TYI 152	PAGE 23 	TYI DSK TRANSFER, START, & STOP ROUTINES

					
.STITL					.STITLE	TYPE OUT
					
					;DMINT --
					;DM11 TRANSMIT INTERRUPT
DMINTSPUSH					DMINT:	SPUSH	E
MOVEPMOVNFDMTYE	031004	012704	000002			MOV	#NFDMTY,E
DMINT1BITDMBITEDMTRAN	031010	036467	024572	000206	DMINT1:	BIT	DMBIT(E),DMTRAN
BEQDMINT5	031016	001425				BEQ	DMINT5		;LINE WASN'T TRANSMITTING
TSTDMWCE	031020	005764	001036			TST	DMWC(E)
BLTDMINT5	031024	002422				BLT	DMINT5	;TRANSMITTING
BICDMBITEDMTRAN	031026	046467	024572	000170		BIC	DMBIT(E),DMTRAN
CMPDMCAETOBTE	031034	026464	000776	024030		CMP	DMCA(E),TOBT+2(E)
BLTDMINT2	031042	002403				BLT	DMINT2
MOVTOBTEDMCAE	031044	016464	024026	000776		MOV	TOBT(E),DMCA(E)
DMINT2TSTTOPCE	031052	005764	024134		DMINT2:	TST	TOPC(E)
BNEDMINT4	031056	001021				BNE	DMINT4
TSTTOTNE	031060	005764	024114			TST	TOTN(E)
BEQDMINT5	031064	001402				BEQ	DMINT5
DMINT3JSRPCDMSND4	031066	004767	000062		DMINT3:	JSR	PC,DMSND4
DMINT5TSTE	031072	005724			DMINT5:	TST	(E)+
CMPENFDMTYNDMTY	031074	020427	000020			CMP	E,#NFDMTY+<2*NDMTY>
BLTDMINT1	031100	002743				BLT	DMINT1	;MORE TTYS TO SERVICE
SPOP						SPOP	E
MOVPECMPJDCSW	031104	026727	151272	000001		CMP	JDCSW,#1
BGT	031112	003002				BGT	.+6
JSRPCTI2Q	031114	004767	174704			JSR	PC,TI2Q
RTI	031120	000002				RTI
					
DMINT4JSRPCTOENT	031122	004767	000374		DMINT4:	JSR	PC,TOENT
BRDMINT3	031126	000757				BR	DMINT3
					
					;DMSND --
					;TRANSMIT CHARS FROM TOBE(E) TO TOBP(E) IN CIRC BUF
DMSNDTSTDMWCE	031130	005764	001036		DMSND:	TST	DMWC(E)
BLTDMSND5	031134	002437				BLT	DMSND5
CMPDMCAETOBTE	031136	026464	000776	024030		CMP	DMCA(E),TOBT+2(E)
BLTDMSND4	031144	002403				BLT	DMSND4
MOVTOBTEDMCAE	031146	016464	024026	000776		MOV	TOBT(E),DMCA(E)
DMSND4MOVDMCAEDMWCE	031154	016464	000776	001036	DMSND4:	MOV	DMCA(E),DMWC(E)
CMPDMWCETOBPE	031162	026464	001036	024074		CMP	DMWC(E),TOBP(E)
BLTDMSND1	031170	002404				BLT	DMSND1
SUBTOBTEDMWCE	031172	166464	024030	001036		SUB	TOBT+2(E),DMWC(E)	;MESSAGE WRAPS AROUND
BRDMSND2	031200	000403				BR	DMSND2
DMSND1SUBTOBPEDMWCE	031202	166464	024074	001036	DMSND1:	SUB	TOBP(E),DMWC(E)
DMSND2BGEDMSND3	031210	002012			DMSND2:	BGE	DMSND3
ADDDMWCETOTNE	031212	066464	001036	024114		ADD	DMWC(E),TOTN(E)
BISDMBITEPC	031220	056427	024572			BIS	DMBIT(E),(PC)+
DMTRAN	031224	000000			DMTRAN:	0
BISDMBITEDMBAR	031226	056467	024572	143546		BIS	DMBIT(E),DMBAR
DMSND5RTSPC	031234	000207			DMSND5:	RTS	PC
DMSND3HALT	031236	000000			DMSND3:	HALT		;WC>=0, SND SHOULD NOT HAVE BEEN CALLED
BR	031240	000774				BR	.-6
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 124
	TYI 152	PAGE 24 	TYPE OUT

					
CNINTSPUSH					CNINT:	SPUSH	E
MOVEPCLRE	031244	005004				CLR	E
JSRPCCNSND	031246	004767	000004			JSR	PC,CNSND
SPOP						SPOP	E
MOVPERTI	031254	000002				RTI
					
CNSNDJSRAGNSND	031256	004067	000004		CNSND:	JSR	A,GNSND
TPSTPS	031262	177564				TPS
TPBTPB	031264	177566				TPB
						
GNSNDBITA	031266	032730	000200		GNSND:	BIT	#200,@(A)+
BEQGNSND1	031272	001421				BEQ	GNSND1
TSTTOTNE	031274	005764	024114			TST	TOTN(E)
BLEGNSND1	031300	003416				BLE	GNSND1
MOVBTOBFFEA	031302	117470	024054	000000		MOVB	@TOBFF(E),@(A)
DECTOTNE	031310	005364	024114			DEC	TOTN(E)
INCTOBFFE	031314	005264	024054			INC	TOBFF(E)
CMPTOBFFETOBTE	031320	026464	024054	024030		CMP	TOBFF(E),TOBT+2(E)
BLTGNSND1	031326	002403				BLT	GNSND1
MOVTOBTETOBFFE	031330	016464	024026	024054		MOV	TOBT(E),TOBFF(E)
GNSND1SPOP					GNSND1:	SPOP	A
MOVPARTSPC	031340	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 125
	TYI 152	PAGE 25 	TYPE OUT

					
					
					;UTYO -- USER TYO
					;PUTS CHARS IN CIRC TYO BUFFER
JTYOTSTUSER	031342	005767	150142		JTYO:	TST USER
BGE	031346	002002				BGE .+6
JMPSTYO	031350	000167	166734			JMP STYO
PUSH						PUSH	C
MOVCPJSRPCPPUSHTPUSH						PUSH	E
MOVEPJSRPCPPUSHTPUSH						PUSH	U
MOVUPJSRPCPPUSHTMOVUSERU	031376	016705	150106			MOV	USER,U
MOVUTTYUE	031402	016504	002512			MOV	UTTY(U),E
BITTIBRTTYSTE	031406	032764	002000	024534		BIT	#TIBR,TTYST(E)
BEQ	031414	001403				BEQ	.+10
UTYO11JSRPCTTYRS2	031416	004767	173564		UTYO11:	JSR	PC,TTYRS2
BRUTYO10	031422	000425				BR	UTYO10
TSTTOPCE	031424	005764	024134			TST	TOPC(E)
BEQUTYO9	031430	001412				BEQ	UTYO9
MOVFRTYOWFLSRESU	031432	012765	000005	002466		MOV	#FRTYOW,FLSRES(U)
UTYO8JSRPCFLUSH	031440	004767	157166		UTYO8:	JSR	PC,FLUSH	;FLUSH USER WITH FULL TYPE OUT BUFFER
TSTTOPCE	031444	005764	024134			TST	TOPC(E)
BNEUTYO8	031450	001373				BNE	UTYO8
JSRPCRUNME	031452	004767	156222			JSR	PC,RUNME
UTYO9BITTIBRTTYSTE	031456	032764	002000	024534	UTYO9:	BIT	#TIBR,TTYST(E)
BNEUTYO11	031464	001354				BNE	UTYO11
JSRPCUTYO1	031466	004767	000064			JSR	PC,UTYO1
JSRPCTOSNDE	031472	004774	024234			JSR	PC,@TOSND(E)
UTYO10POP					UTYO10:	POP	U
MOVPUJSRPCPPOPTPOP						POP	E
MOVPEJSRPCPPOPTPOP						POP	C
MOVPCJSRPCPPOPTRTSPC	031520	000207				RTS	PC
					
					
TOENTSPUSH					TOENT:	SPUSH	C
MOVCPSPUSH						SPUSH	D
MOVDPSPUSH						SPUSH	TOPC(E)
MOVTOPCEPCLRTOPCE	031532	005064	024134			CLR	TOPC(E)
MOVTOSVCEC	031536	016402	024154			MOV	TOSVC(E),C
MOVTOSVDED	031542	016403	024174			MOV	TOSVD(E),D
JSRPCP	031546	004736				JSR	PC,@(P)+
SPOP						SPOP	D
MOVPDSPOP						SPOP	C
MOVPCRTSPC	031554	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 126
	TYI 152	PAGE 26 	TYPE OUT

					
					
UTYO1TSTTOPCE	031556	005764	024134		UTYO1:	TST	TOPC(E)
BEQ	031562	001402				BEQ	.+6
HALT	031564	000000				HALT		;TYO BUFFER FULL
BR	031566	000776				BR	.-2
TSTTODINGE	031570	005764	024214			TST	TODING(E)
BLEUTYO1B	031574	003411				BLE	UTYO1B
MOVDC	031576	010302				MOV	D,C
MOVD	031600	012703	000007			MOV	#7,D
UTYO1AJSRPCTOINBE	031604	004764	032006		UTYO1A:	JSR	PC,TOINB(E)
DECTODINGE	031610	005364	024214			DEC	TODING(E)
BGTUTYO1A	031614	003373				BGT	UTYO1A
MOVCD	031616	010203				MOV	C,D
UTYO1BBICD	031620	042703	177600		UTYO1B:	BIC	#177600,D
BITBFOFDTBLD	031624	132763	000100	006142		BITB	#FOF,DTBL(D)
BEQUTYO2	031632	001404				BEQ	UTYO2
MOVBDTBL2DC	031634	116302	006342			MOVB	DTBL2(D),C
JMPCTOSC	031640	000172	024670			JMP	@CTOS(C)
					
UTYO2CMPD	031644	020327	000040		UTYO2:	CMP	D,#40
BGEUTYO3	031650	002017				BGE	UTYO3
MOVDC	031652	010302				MOV	D,C	;PRINT ^ AND CHAR + 100
MOVD	031654	012703	000136			MOV	#'^,D
JSRPCTOINB	031660	004767	000122			JSR	PC,TOINB
MOVCD	031664	010203				MOV	C,D
ADDD	031666	062703	000100			ADD	#100,D
JSRPCTOINB	031672	004767	000110			JSR	PC,TOINB
MOVCD	031676	010203				MOV	C,D
ADDCHARNOE	031700	062764	000002	023406		ADD	#2,CHARNO(E)
BRUTYO5	031706	000404				BR	UTYO5
					
UTYO3INCCHARNOE	031710	005264	023406		UTYO3:	INC	CHARNO(E)
UTYO4JSRPCTOINB	031714	004767	000066		UTYO4:	JSR	PC,TOINB
UTYO5CMPCHARNOELINELE	031720	026464	023406	023426	UTYO5:	CMP	CHARNO(E),LINEL(E)
BLTUTYO6	031726	002426				BLT	UTYO6
TOCMCLRCHARNOE	031730	005064	023406		TOCM:	CLR	CHARNO(E)
MOVDC	031734	010302				MOV	D,C
MOVD	031736	012703	000015			MOV	#15,D
JSRPCTOINB	031742	004767	000040			JSR	PC,TOINB
MOVD	031746	012703	000012			MOV	#12,D
JSRPCTOINB	031752	004767	000030			JSR	PC,TOINB
TSTSIMTST	031756	005767	172774			TST	SIMTST
BNEUTYO7	031762	001007				BNE	UTYO7
CLRD	031764	005003				CLR	D
JSRPCTOINB	031766	004767	000014			JSR	PC,TOINB
JSRPCTOINB	031772	004767	000010			JSR	PC,TOINB
JSRPCTOINB	031776	004767	000004			JSR	PC,TOINB
UTYO7MOVCD	032002	010203			UTYO7:	MOV	C,D
UTYO6RTSPC	032004	000207			UTYO6:	RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 127
	TYI 152	PAGE 27 	TYPE OUT

					
					
					;TOINB -- PUT CHAR IN TYO BUFFER
TOINBCMPTOBPETOBTE	032006	026464	024074	024030	TOINB:	CMP	TOBP(E),TOBT+2(E)
BLTTOINB1	032014	002403				BLT	TOINB1
MOVTOBTETOBPE	032016	016464	024026	024074		MOV	TOBT(E),TOBP(E)
TOINB1MOVBDTOBPE	032024	110374	024074		TOINB1:	MOVB	D,@TOBP(E)
INCTOTNE	032030	005264	024114			INC	TOTN(E)
INCTOBPE	032034	005264	024074			INC	TOBP(E)
CMPTOSNDEDMSND	032040	026427	024234	031130		CMP	TOSND(E),#DMSND
BEQTOINB4	032046	001414				BEQ	TOINB4
CMPTOTNETOBFSZ	032050	026427	024114	000040		CMP	TOTN(E),#TOBFSZ
BGETOINB2	032056	002027				BGE	TOINB2
CMPTOBPETOBTE	032060	026464	024074	024030		CMP	TOBP(E),TOBT+2(E)
BLTTOINB3	032066	002431				BLT	TOINB3
MOVTOBTETOBPE	032070	016464	024026	024074		MOV	TOBT(E),TOBP(E)
RTSPC	032076	000207				RTS	PC
					
TOINB4CMPTOBPEDMCAE	032100	026464	024074	000776	TOINB4:	CMP	TOBP(E),DMCA(E)
BEQTOINB2	032106	001413				BEQ	TOINB2
CMPTOBPETOBTE	032110	026464	024074	024030		CMP	TOBP(E),TOBT+2(E)
BLTTOINB3	032116	002415				BLT	TOINB3
MOVTOBTETOBPE	032120	016464	024026	024074		MOV	TOBT(E),TOBP(E)
CMPTOBPEDMCAE	032126	026464	024074	000776		CMP	TOBP(E),DMCA(E)
BNETOINB3	032134	001006				BNE	TOINB3
TOINB2MOVPTOPCE	032136	012664	024134		TOINB2:	MOV	(P)+,TOPC(E)
MOVCTOSVCE	032142	010264	024154			MOV	C,TOSVC(E)
MOVDTOSVDE	032146	010364	024174			MOV	D,TOSVD(E)
TOINB3RTSPC	032152	000207			TOINB3:	RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 128
	TYI 152	PAGE 28 	TYPE OUT

					
					;CHAR ROUTINES
					
					;^B -- ECHOES AS SPACE
TOCBMOVD	032154	012703	000040		TOCB:	MOV	#40,D
INCCHARNOE	032160	005264	023406			INC	CHARNO(E)
JSRPCTOINB	032164	004767	177616			JSR	PC,TOINB
MOVD	032170	012703	000002			MOV	#2,D
BRUTYO5	032174	000651				BR	UTYO5
					
					;^H -- BACKSPACE
TOCHTSTCHARNOE	032176	005764	023406		TOCH:	TST	CHARNO(E)
BEQUTYO6	032202	001700				BEQ	UTYO6
DECCHARNOE	032204	005364	023406			DEC	CHARNO(E)
JMPUTYO4	032210	000167	177500			JMP	UTYO4
					
					;^I -- TAB
TOCIMOVD	032214	012703	000040		TOCI:	MOV	#40,D
TOCI1INCCHARNOE	032220	005264	023406		TOCI1:	INC	CHARNO(E)
JSRPCTOINB	032224	004767	177556			JSR	PC,TOINB
BITCHARNOE	032230	032764	000007	023406		BIT	#7,CHARNO(E)
BNETOCI1	032236	001370				BNE	TOCI1
MOVD	032240	012703	000011			MOV	#11,D
JMPUTYO5	032244	000167	177450			JMP	UTYO5
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 129
	READ 62	PAGE 2 	READ -

						.STITLE  READ -
VERN%FNAM2VERN		001035			VERN==VERN+%FNAM2
					
READPUSH					READ:	PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPSPUSH						SPUSH D
MOVDPSPUSH						SPUSH E
MOVEPSPUSH						SPUSH F
MOVFPCLRRDFLAG	032270	005067	151276			CLR RDFLAG
MOVSGNCN	032274	017767	151130	151324		MOV @S,GNCN
BICGNCN	032302	042767	170000	151316		BIC #170000,GNCN
CLRF	032310	005005				CLR F
READAJSRPCRDWRD	032312	004767	000240		READA:	JSR PC,RDWRD
BRREADB	032316	000413				BR READB
BISSEPFRDFLAG	032320	052767	000004	151244		BIS #SEPF,RDFLAG
JSRPCCKDOTF	032326	004767	000662			JSR PC,CKDOTF
READCJSRPCLISTB	032332	004767	000724		READC:	JSR PC,LISTB
BITSEPFRDFLAG	032336	032767	000004	151226		BIT #SEPF,RDFLAG
BEQREADA	032344	001762				BEQ READA
READBBICSEPFRDFLAG	032346	042767	000004	151216	READB:	BIC #SEPF,RDFLAG	;CHECK SPECIAL CHAR IN D
JSRPCCKDOTF	032354	004767	000634			JSR PC,CKDOTF	;FIRST CHECK FOR PENDING ":"
CMPD	032360	022703	000015			CMP #15,D
BEQREADR	032364	001432				BEQ READR	;C-R
CMPD	032366	022703	000042			CMP #'",D
BEQREADS	032372	001441				BEQ READS	;STRING
CMPD	032374	022703	000133			CMP #'[,D
BEQREADL	032400	001447				BEQ READL	;LIST
CMPD	032402	022703	000135			CMP #'],D
BNE	032406	001001				BNE .+4
ERRORERRORCOP	032410	104402				ERROR+COP	;CHAR (]) OUT OF PLACE
CMPD	032412	022703	000072			CMP #':,D
BEQREADD	032416	001453				BEQ READD	;DOTS
BITBOPERFDTBLD	032420	132763	000010	006142		BITB #OPERF,DTBL(D)	;IS CHAR AN OPERATOR
BEQREADA	032426	001731				BEQ READA	;NO
MOVBDTBL2DA	032430	116300	006342			MOVB DTBL2(D),A
ASLA	032434	006300				ASL A
MOVSOBLSUAB	032436	016001	004262			MOV SOBLSU(A),B
							;SET TYPE TO SFUN OR INFIX
MOVBA	032442	011100				MOV @B,A	;THIS HACK WORKS BECAUSE #SFUN=0
BICINFIXA	032444	042700	167777			BIC #-INFIX-1,A	; AND #INFIX=10000
BRREADC	032450	000730				BR READC
READRPOPS	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 130
	READ 62	PAGE 3 	READ -

					READR:	POPS A
MOVSAJSRPCSPOPTMOVAS	032462	010077	150742			MOV A,@S
CLRTOPS	032466	005067	151016			CLR	TOPS
JMPRETF	032472	000167	012772			JMP RETF
READSJSRPCGNC	032476	004767	001106		READS:	JSR PC,GNC
JSRPCRDST	032502	004767	000212			JSR PC,RDST
BR	032506	000400				BR .+2	;RDST ALWAYS SKIPS
BISSEPFRDFLAG	032510	052767	000004	151054		BIS #SEPF,RDFLAG
BRREADC	032516	000705				BR READC
READLJSRPCRDLST	032520	004767	000354		READL:	JSR PC,RDLST
POPS						POPS TOPS
MOVSTOPSJSRPCSPOPTBICSEPFRDFLAG	032536	042767	000004	151026		BIC #SEPF,RDFLAG
BRREADC	032544	000672				BR READC
READDBISDOTFRDFLAG	032546	052767	000400	151016	READD:	BIS #DOTF,RDFLAG
BRREADA	032554	000656				BR READA
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 131
	READ 62	PAGE 4 	READ - READ WORD

						.STITLE READ - READ WORD
						;READ CHARS UP THRU NEXT SEPARATOR CHAR.  IF JUST A SEP,
						;RETURN WITH IT IN D.  OTHERWISE NUMBERIFY OR INTERN CHAR STRING,
						;SKIP RETURN WITH TOKEN IN A,,B
RDWRDCLRBRDFLAG	032556	105067	151010		RDWRD:	CLRB RDFLAG
JSRPCBLSTI	032562	004767	000610			JSR PC,BLSTI
RDWAJSRPCGNC	032566	004767	001016		RDWA:	JSR PC,GNC
MOVBDTBLDA	032572	116300	006142			MOVB DTBL(D),A	;GET FLAGS IN A
BITSEPFA	032576	032700	000004			BIT #SEPF,A	;IS THIS CHAR A SEPARATOR?
BNERDWB	032602	001005				BNE RDWB	;YES
BISBARDFLAG	032604	150067	150762			BISB A,RDFLAG
JSRPCBLST	032610	004767	000602			JSR PC,BLST
BRRDWA	032614	000764				BR RDWA
RDWBJSRPCBLSTF	032616	004767	000666		RDWB:	JSR PC,BLSTF	;FINISH OFF STRING
RTSPC	032622	000207				RTS PC	;NO CHARS SEEN BEFORE SEP
BITNNUMFRDFLAG	032624	032767	000040	150740		BIT #NNUMF,RDFLAG
BNERDWC	032632	001010				BNE RDWC	;NOT A POSSIBLE NUMBER
MOVTOPSB	032634	016701	150650			MOV TOPS,B
MOVLNUMA	032640	012700	130000			MOV #LNUM,A
JSRPCCONVER	032644	004767	013000			JSR PC,CONVER	;TRY MAKING A #
SKPRETSKPRET	032650	104000				SKPRET	;LOST SO LEAVE AS LSTR
SKPRETSKPRET	032652	104000				SKPRET	;OK
RDWCMOVUFUNA	032654	012700	020000		RDWC:	MOV #UFUN,A	;TRY TO INTERN STRING IN TOPS AS A SYSTEM OR USER FUNCTION
BITDOTFRDFLAG	032660	032767	000400	150704		BIT #DOTF,RDFLAG	; UNLESS DOTF ON, THEN AS USER VARIABLE
BEQRDWD	032666	001405				BEQ RDWD
MOVUVARA	032670	012700	030000			MOV #UVAR,A
BICDOTFRDFLAG	032674	042767	000400	150670		BIC #DOTF,RDFLAG
RDWDJSRPC.INTRN	032702	004767	021420		RDWD:	JSR PC,.INTRN	;RDSTR COMES HERE ALSO
BRRDWE	032706	000402				BR RDWE
JSRPCFRELST	032710	004767	022546			JSR PC,FRELST
RDWEBISAB	032714	050001			RDWE:	BIS A,B
SKPRETSKPRET	032716	104000				SKPRET
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 132
	READ 62	PAGE 5 	READ - READ STRING

						.STITLE READ - READ STRING
						;READ CHAR UP TO NEXT SPACE OR ] IF INSIDE
						;A LIST.  DONT ALLOW ] OR [.
						;ALWAYS SKIPS
RDSTCLRBRDFLAG	032720	105067	150646		RDST:	CLRB RDFLAG
JSRPCBLSTI	032724	004767	000446			JSR PC,BLSTI
BRRDSB	032730	000402				BR RDSB
RDSAJSRPCGNC	032732	004767	000652		RDSA:	JSR PC,GNC
RDSBMOVBDTBLDA	032736	116300	006142		RDSB:	MOVB DTBL(D),A
BITSEPFA	032742	032700	000004			BIT #SEPF,A
BEQRDSE	032746	001414				BEQ RDSE
CMPD	032750	022703	000040			CMP #' ,D
BEQRDSX	032754	001422				BEQ RDSX
CMPD	032756	022703	000135			CMP #'],D
BEQRDSC	032762	001413				BEQ RDSC
CMPD	032764	022703	000133			CMP #'[,D
BEQRDSX	032770	001414				BEQ RDSX
CMPD	032772	022703	000015			CMP #15,D
BEQRDSX	032776	001411				BEQ RDSX
RDSEBISARDFLAG	033000	050067	150566		RDSE:	BIS A,RDFLAG
JSRPCBLST	033004	004767	000406			JSR PC,BLST
BRRDSA	033010	000750				BR RDSA
RDSCTSTLISTBD	033012	005767	150556		RDSC:	TST LISTBD	;ARE WE IN LIST
BNERDSX	033016	001001				BNE RDSX	;YES
RDSDERRORERRORCOP	033020	104402			RDSD:	ERROR+COP	;CHAR (D) OUT OF PLACE
RDSXMOVLSTRA	033022	012700	140000		RDSX:	MOV #LSTR,A
MOVLSTRB	033026	012701	140000			MOV #LSTR, B
JSRPCBLSTF	033032	004767	000452			JSR PC,BLSTF
RDSRRTSPC	033036	000207			RDSR:	RTS PC	;EMPTY STRING
MOVLSTRA	033040	012700	140000			MOV #LSTR,A
MOVTOPSB	033044	016701	150440			MOV TOPS,B
BITNNUMFRDFLAG	033050	032767	000040	150514		BIT #NNUMF,RDFLAG
BEQRDSR	033056	001767				BEQ RDSR	;IT IS A POSSIBLE NUMBER
BITSEPFRDFLAG	033060	032767	000004	150504		BIT #SEPF,RDFLAG
BNERDSR	033066	001363				BNE RDSR	;IT HAS A SEP CHAR IN IT
MOVATOMA	033070	012700	110000			MOV #ATOM,A
JMPRDWD	033074	000167	177602			JMP RDWD	; INTERN IT
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 133
	READ 62	PAGE 6 	READ - READ LIST

						.STITL READ - READ LIST
						;READ THRU MATCHING ] MAKING A LIST AS U GO
RDLSTCLRBRDFLAG	033100	105067	150466		RDLST:	CLRB RDFLAG
JSRPCSLISTB	033104	004767	000206			JSR PC,SLISTB
RDLAJSRPCGNC	033110	004767	000474		RDLA:	JSR PC,GNC
CMPD	033114	022703	000040			CMP #' ,D
BEQRDLA	033120	001773				BEQ RDLA	;SKIP OVER SPACES
CMPD	033122	022703	000133			CMP #'[,D
BEQRDLB	033126	001421				BEQ RDLB	;READ A LIST
CMPD	033130	022703	000135			CMP #'],D
BEQRDLY	033134	001413				BEQ RDLY	;DONE
JSRPCRDST	033136	004767	177556			JSR PC,RDST	;READ A STRING
BR	033142	000400				BR .+2	;RDST ALWAYS SKIPS
RDLXJSRPCLISTB	033144	004767	000112		RDLX:	JSR PC,LISTB	;ADD THIS NODE TO LIST
CMPD	033150	022703	000133			CMP #'[,D
BEQRDLB	033154	001406				BEQ RDLB
CMPD	033156	022703	000135			CMP #'],D	;AT END?
BNERDLA	033162	001352				BNE RDLA	;NO, GET NEXT ELEMENT
RDLYJSRPCFLISTB	033164	004767	000142		RDLY:	JSR PC,FLISTB
RTSPC	033170	000207				RTS PC
RDLBJSRPCRDLST	033172	004767	177702		RDLB:	JSR PC,RDLST
POPS						POPS TOPS
MOVSTOPSJSRPCSPOPTCLRD	033210	005003				CLR D
BRRDLX	033212	000754				BR RDLX
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 134
	READ 62	PAGE 7 	READ - MISC

						.STITLE READ - MISC
CKDOTFBITDOTFRDFLAG	033214	032767	000400	150350	CKDOTF:	BIT #DOTF,RDFLAG
BEQLISTBR	033222	001434				BEQ LISTBR
BICDOTFRDFLAG	033224	042767	000400	150340		BIC #DOTF,RDFLAG
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPMOVSFUNA	033242	012700	000000			MOV #SFUN,A
MOV$DOTSB	033246	012701	006112			MOV #$DOTS,B
JSRPCLISTB	033252	004767	000004			JSR PC,LISTB
JMPRETB	033256	000167	012236			JMP RETB
LISTBMOVFC	033262	010502			LISTB:	MOV F,C	;BUILD A LIST, ADD NODE IN A,,B TO
JSRPCGRBAD1	033264	004767	022022			JSR PC,GRBAD1	;LIST WHOSE LAST NODE PTR IS IN F
TSTF	033270	005705				TST F
BNELISTB1	033272	001007				BNE LISTB1
PUSHS						PUSHS	C
JSRPCSPUSHTMOVCSBISLISTS	033304	052777	170000	150116		BIS #LIST,@S
LISTB1MOVCF	033312	010205			LISTB1:	MOV C,F
LISTBRRTSPC	033314	000207			LISTBR:	RTS PC
SLISTBMOVPA	033316	011600			SLISTB:	MOV @P,A	;START LISTB   SAVE RETURN
MOVFP	033320	010516				MOV F,@P	;SAVE CURRENT LAST NODE PTR
CLRF	033322	005005				CLR F
INCLISTBD	033324	005267	150244			INC LISTBD
JMPA	033330	000110				JMP @A
FLISTBPOP					FLISTB:	POP C	;SAVE RETURN
MOVPCJSRPCPPOPTTSTF	033340	005705				TST F
BNEFLSB1	033342	001005				BNE FLSB1
PUSHS						PUSHS #LIST
JSRPCSPUSHTMOVLISTSFLSB1POP					FLSB1:	POP F	;RESTORE OLD CURRENT NODE PTR
MOVPFJSRPCPPOPTMOVLISTA	033364	012700	170000			MOV #LIST,A
MOVSB	033370	017701	150034			MOV @S,B
JMPC	033374	000112				JMP @C
BLSTICLRNCHR	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 135
	READ 62	PAGE 8 	READ - MISC

	033376	005067	150204		BLSTI:	CLR NCHR
CLRE	033402	005004				CLR E
CLRTOPS	033404	005067	150100			CLR TOPS
BLSTI1BISE	033410	052704	100000		BLSTI1:	BIS #100000,E
RTSPC	033414	000207				RTS PC
BLST					BLST:		;BUILD STRING - CHAR IN D, USES E
									;DESTROYS A,B,C
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPBITD	033430	032703	000200			BIT #200,D	;CHECK IF IGNORE BIT ON
BNEBLSTRT	033434	001012				BNE BLSTRT
BITD	033436	032703	000177			BIT #177,D	;CHECK IF NULL
BEQBLSTRT	033442	001407				BEQ BLSTRT
INCNCHR	033444	005267	150136			INC NCHR	;WE HAVE A CHAR
ADDE	033450	062704	040000			ADD #40000,E
BGEBLST2	033454	002004				BGE BLST2	;IS IT  THE SECOND
MOVBDTEMP	033456	110367	150120			MOVB D,TEMP	;NO, 1ST
BLSTRTJMPRETC	033462	000167	012024		BLSTRT:	JMP RETC
BLST2MOVBDTEMP	033466	110367	150111		BLST2:	MOVB D,TEMP+1	;IT IS THE SECOND CHAR
MOVTEMPB	033472	016701	150104			MOV TEMP,B
						;STORE THE CHARACTERS
BLST3JSRPCBSAN	033476	004767	000052		BLST3:	JSR PC,BSAN
BISE	033502	052704	100000			BIS #100000,E
BRBLSTRT	033506	000765				BR BLSTRT
BLSTF					BLSTF:	;FINISH BUILDING STRING, PUT PTR IN TOPS.
							; DONT SKIP IF EMPTY STRING (TOPS=0)
TSTNCHR	033510	005767	150072			TST NCHR
BEQBSANR	033514	001434				BEQ BSANR	;EMPTY STRING
ADDE	033516	062704	040000			ADD #40000,E
BGE	033522	002001				BGE .+4	;IS LAST NODE USED
SKPRETSKPRET	033524	104000				SKPRET
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPMOVBTEMPB	033540	116701	150036			MOVB TEMP,B	;YES
JSRPCBSAN	033544	004767	000004			JSR PC,BSAN
BLSTF1JMPSRETC	033550	000167	014414		BLSTF1:	JMP SRETC
BSANMOVEC	033554	010402			BSAN:	MOV E,C
MOVSSTRA	033556	012700	070000			MOV #SSTR,A
JSRPCGRBAD1	033562	004767	021524			JSR PC,GRBAD1
TSTE	033566	005704				TST E
BNEBSAN1	033570	001005				BNE BSAN1
MOVCTOPS	033572	010267	147712			MOV C,TOPS	;SAVE NEW STRING PTR ON S
BISLSTRTOPS	033576	052767	140000	147704		BIS #LSTR,TOPS
BSAN1MOVCE	033604	010204			BSAN1:	MOV C,E
BSANRRTSPC	033606	000207			BSANR:	RTS PC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 136
	READ 62	PAGE 9 	GNC - GET NEXT CHAR

						.STITL GNC - GET NEXT CHAR
GNCPUSH					GNC:	PUSH A		;GET NEXT CHAR INTO D
MOVAPJSRPCPPUSHTSPUSH						SPUSH B		;INITIALIZE BY MOVING LSTR PTR INTO GNCN
MOVBPGNC4MOVBGNCND	033620	116703	150004		GNC4:	MOVB GNCN+2,D	;    AND CLEARING TYPE FIELD (#170000)
MOVGNCNB	033624	016701	147776			MOV GNCN,B	;SKIPS UNLESS NO MORE CHAR
BLTGNC1	033630	002423				BLT GNC1	;JUST GOT 2ND CHAR
BNEGNC3	033632	001004				BNE GNC3
MOVD	033634	012703	000015			MOV #15,D
JMPRETB	033640	000167	011654			JMP RETB	;NONE LEFT
GNC3JSRPC.LOAD	033644	004767	017716		GNC3:	JSR PC,.LOAD	;GET NEXT NODE
BISA	033650	052700	100000			BIS #100000,A	;SET "STILL ANOTHER CHAR" BIT
MOVAGNCN	033654	010067	147746			MOV A,GNCN
MOVBBD	033660	110103				MOVB B,D	;FOR OUTPUT
SWABB	033662	000301				SWAB B
MOVBBGNCN	033664	110167	147740			MOVB B,GNCN+2
GNC2TSTD	033670	005703			GNC2:	TST D
BEQGNC4	033672	001752				BEQ GNC4	;IGNORE NULL CHARS
JMPRETB	033674	000167	011620			JMP RETB
GNC1BICGNCN	033700	042767	170000	147720	GNC1:	BIC #170000,GNCN	;CLEAR "STILL ..." BIT
BRGNC2	033706	000770				BR GNC2
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 137
	READ 62	PAGE 10 	ERRORS AND HANDLER

						.STITL ERRORS AND HANDLER
EMTBKMOVSRETP	033710	012716	050212		EMTBK:	MOV #SRET,@P	;FAKE IT OUT
RTI	033714	000002				RTI
ERRBKPUSH					ERRBK:	PUSH A
MOVAPJSRPCPPUSHTMOVPA	033724	016600	000002			MOV 2(P),A	;GET LOC OF ERROR
MOVTYOPCHR	033730	012767	020304	147676		MOV #TYO,PCHR
JSRPCPRONL	033736	004767	000254			JSR PC,PRONL	;PRINT ADDR WHERE ERROR OCCURED
SPACE						SPACE
JSRPC.SPACEMOVAA	033746	016000	177776			MOV -2(A),A	;GET ERROR #
BICA	033752	042700	177400			BIC #177400,A
ASLA	033756	006300				ASL A
MOVERTABAA	033760	016000	036446			MOV ERTAB(A),A	;POINTS TO LIST FOR THIS ERROR
JMPA	033764	000110				JMP @A	;XFER TO LIST
ERRRTPOP					ERRRT:	POP A
MOVPAJSRPCPPOPTRTI	033774	000002				RTI
					
ERTASSPUSH					ERTAS:	SPUSH A
MOVAPMOVPA	034000	016600	000002			MOV 2(P),A	;TYPE ASCIZ STRING, STRING FOLLOWS CALL
JSRPCPRAS	034004	004767	000156			JSR PC,PRAS
BITA	034010	030027	000001			BIT A,#1	;IF STRING STOPPED ON ODD ADDR
BEQ	034014	001401				BEQ .+4
INCA	034016	005200				INC A	;MAKE IT EVEN
MOVAP	034020	010066	000002			MOV A,2(P)
SPOP						SPOP A
MOVPARTSPC	034026	000207				RTS PC
PRLOPUSH					PRLO:	PUSH A	;PRINT LAST OPERATOR
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPMOVLOA	034040	016700	147516			MOV LO,A
BEQEMPTY	034044	001434				BEQ EMPTY
MOVLOB	034046	016701	147512			MOV LO+2,B
BRPRCO1	034052	000411				BR PRCO1
PRCOPUSH					PRCO:	PUSH A,	;PRINT CURRENT OPERATOR
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPMOVCOA	034064	016700	147462			MOV CO,A
MOVCOB	034070	016701	147460			MOV CO+2,B
BEQEMPTY	034074	001420				BEQ EMPTY
PRCO1SPUSH					PRCO1:	SPUSH D
MOVDPJSRPCPROAB	034100	004767	000006			JSR PC,PROAB
SPOP						SPOP D
MOVPDJMPRETB	034106	000167	011406			JMP RETB
PROABCMPAUFUN	034112	020027	020000		PROAB:	CMP A,#UFUN	;PRINT OPERATOR IN A,B
BLOPRCO2	034116	103402				BLO PRCO2
JMPPPNAME	034120	000167	000626			JMP PPNAME	;PRINT PNAME
PRCO2MOVBA	034124	010100			PRCO2:	MOV B,A	;SYSTEM FUNCTION
ADDA	034126	062700	000004			ADD #4,A
JMPPRAS	034132	000167	000030			JMP PRAS	;PRINT ASCIZ PNAME
EMPTYPRTXT	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 138
	READ 62	PAGE 11 	ERRORS AND HANDLER

					EMPTY:	PRTXT ^\ EMPTY \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJMPRETB	034152	000167	011342			JMP RETB
ERTAPMOVPA	034156	017600	000000		ERTAP:	MOV @(P),A	;TYPE ASCIZ STRING, POINTER FOLLOWS CALL
INCP	034162	005216				INC @P
INCP	034164	005216				INC @P
PRASSPUSH					PRAS:	SPUSH D	;PRINT ASCIZ STRING POINTED TO BY A
MOVDPPRAS1MOVBAD	034170	112003			PRAS1:	MOVB (A)+,D
BEQPRASR	034172	001403				BEQ PRASR
JSRPCPCHR	034174	004777	147434			JSR PC,@PCHR
BRPRAS1	034200	000773				BR PRAS1
PRASRSPOP					PRASR:	SPOP D
MOVPDRTSPC	034204	000207				RTS PC
PRONBICTF2TFLAGS	034206	042767	000200	147370	PRON:	BIC #TF2,TFLAGS	;PRINT OCTAL NO., NO. IN A
BRPRON1	034214	000403				BR PRON1	;CALL-	JSR PC,PRON
PRONLBISTF2TFLAGS	034216	052767	000200	147360	PRONL:	BIS #TF2,TFLAGS
PRON1PUSH					PRON1:	PUSH A		;PRON DOESN'T PRINT LEADING ZEROS, PRONL DOES
MOVAPJSRPCPPUSHTSPUSH						SPUSH D
MOVDPCLRD	034234	005003				CLR D
SEC	034236	000261				SEC
ROLA	034240	006100				ROL A	;TO TELL WHEN WE ARE DONE
BRPRON2	034242	000407				BR PRON2
PRON3CLRD	034244	005003			PRON3:	CLR D
ASLA	034246	006300				ASL A
BEQPRON5	034250	001422				BEQ PRON5
ROLD	034252	006103				ROL D
ASLA	034254	006300				ASL A
ROLD	034256	006103				ROL D
ASLA	034260	006300				ASL A
PRON2ROLD	034262	006103			PRON2:	ROL D
BNEPRON4	034264	001004				BNE PRON4
BITTF2TFLAGS	034266	032767	000200	147310		BIT #TF2,TFLAGS
BEQPRON3	034274	001763				BEQ PRON3
PRON4BISTF2TFLAGS	034276	052767	000200	147300	PRON4:	BIS #TF2,TFLAGS
BISD	034304	052703	000060			BIS #60,D
JSRPCPCHR	034310	004777	147320			JSR PC,@PCHR
					BRPRON3	034314	000753				BR PRON3
PRON5BISD	034316	052703	000060		PRON5:	BIS #60,D
BITTF2TFLAGS	034322	032767	000200	147254		BIT #TF2,TFLAGS
BNE	034330	001002				BNE .+6	;IF NOTHING HAS BEEN TYPED, TYPE A ZERO
JSRPCPCHR	034332	004777	147276			JSR PC,@PCHR
SPOP						SPOP D
MOVPDSPOP						SPOP A
MOVPARTSPC	034342	000207				RTS PC
PRDNLBISTF1TFLAGS	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 139
	READ 62	PAGE 12 	ERRORS AND HANDLER

	034344	052767	000100	147232	PRDNL:	BIS #TF1,TFLAGS
BR	034352	000403				BR .+10
PRDNBICTF1TFLAGS	034354	042767	000100	147222	PRDN:	BIC #TF1,TFLAGS	;PRINT DECIMAL NO. IN A
PUSH						PUSH B
MOVBPJSRPCPPUSHTSPUSH						SPUSH D
MOVDPMOVB	034372	012701	000010			MOV #10,B
MOVAMQ	034376	010067	142702			MOV A,MQ
BGEPRDN1	034402	002006				BGE PRDN1
NEGMQ	034404	005467	142674			NEG MQ	;ITS NEGATIVE
MOVD	034410	012703	000055			MOV #'-,D
JSRPCPCHR	034414	004777	147214			JSR PC,@PCHR
PRDN1MOVDTOTBBDIVIDE	034420	016167	034532	142652	PRDN1:	MOV DTOTB(B),DIVIDE
BITTF1TFLAGS	034426	032767	000100	147150		BIT #TF1,TFLAGS
BNEPRDN2	034434	001007				BNE PRDN2
BITBMQZEAESR	034436	132767	000010	142645		BITB #MQZ,EAESR	;> ZERO?
BNEPRDN3	034444	001011				BNE PRDN3	;NO
BISTF1TFLAGS	034446	052767	000100	147130		BIS #TF1,TFLAGS
PRDN2MOVMQD	034454	016703	142624		PRDN2:	MOV MQ,D
ADDD	034460	062703	000060			ADD #'0,D
JSRPCPCHR	034464	004777	147144			JSR PC,@PCHR
PRDN3MOVACMQ	034470	016767	142606	142606	PRDN3:	MOV AC,MQ
SUBB	034476	162701	000002			SUB #2,B
BNEPRDN1	034502	001346				BNE PRDN1
MOVMQD	034504	016703	142574			MOV MQ,D
ADDD	034510	062703	000060			ADD #'0,D
JSRPCPCHR	034514	004777	147114			JSR PC,@PCHR
POP						POP D
MOVPDJSRPCPPOPTSPOP						SPOP B
MOVPBRTSPC	034530	000207				RTS PC
DTOTB	034532	000001			DTOTB:	1.
	034534	000012				10.
	034536	000144				100.
	034540	001750				1000.
	034542	023420				10000.
EMPTY1JMPEMPTY	034544	000167	177366		EMPTY1:	JMP EMPTY
PRS1PUSH	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 140
	READ 62	PAGE 13 	ERRORS AND HANDLER

					PRS1:	PUSH A	;PRINT TOP ELEMENT OF SS
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPMOVCSPDLPA	034560	016700	146762			MOV CSPDLP,A
ADDSPRBAOA	034564	066700	146654			ADD SPRBAO,A
CMPAS	034570	020067	146634			CMP A,S
BLOSEMPTY1	034574	101763				BLOS EMPTY1
MOVSB	034576	017701	146626			MOV @S,B
SPUSH						SPUSH D
MOVDPJSRPCPNODAB	034604	004767	000006			JSR PC,PNODAB
SPOP						SPOP D
MOVPDJMPRETB	034612	000167	010702			JMP RETB
PNODABMOVBA	034616	010100			PNODAB:	MOV B,A
BICA	034620	042700	007777			BIC #7777,A
CMPSSTRA	034624	022700	070000			CMP #SSTR,A
BEQPRS11	034630	001404				BEQ PRS11
CMPATOMA	034632	022700	110000			CMP #ATOM,A
BLOSPRS11	034636	101401				BLOS PRS11
ERRORERRORINVN	034640	104413				ERROR+INVN	;INVALID NODE
PRS11JSRPCPRDATA	034642	004767	000122		PRS11:	JSR PC,PRDATA
RTSPC	034646	000207				RTS PC
PRCTPUSH					PRCT:	PUSH A	;PRINT CURRENT TOKEN
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH D
MOVDPMOVCTA	034662	016700	146700			MOV CT,A
MOVCTB	034666	016701	146676			MOV CT+2,B
JSRPCPRTAB	034672	004767	000006			JSR PC,PRTAB
SPOP						SPOP D
MOVPDJMPRETB	034700	000167	010614			JMP RETB
PRTABBICA	034704	042700	007777		PRTAB:	BIC #7777,A	;PRINT TOKEN IN A,B
CMPAUVAR	034710	020027	030000			CMP A,#UVAR
BHIS	034714	103002				BHIS .+6
JMPPROAB	034716	000167	177170			JMP PROAB
CMPAUVAR	034722	020027	030000			CMP A,#UVAR
BEQPRUV	034726	001405				BEQ PRUV
BRPRDATA	034730	000417				BR PRDATA
PRATMBISPQFFLAGS2	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 141
	READ 62	PAGE 14 	ERRORS AND HANDLER

	034732	052767	000004	146654	PRATM:	BIS #PQF,FLAGS2	;PRINT ATOM IN A,B
BRPRUV1	034740	000407				BR PRUV1
PRUVMOVBD	034742	112703	000072		PRUV:	MOVB #':,D	;PRINT USER VARIABLE IN A,B
JSRPCPCHR	034746	004777	146662			JSR PC,@PCHR
PPNAMEBICPQFFLAGS2	034752	042767	000004	146634	PPNAME:	BIC #PQF,FLAGS2	;PRINT PNAME - UOE PTR IN B
PRUV1JSRPC.LOAD	034760	004767	016602		PRUV1:	JSR PC,.LOAD
JMPPRLSTR	034764	000167	000062			JMP PRLSTR	;PRINT PNAME
PRDATACMPLNUMA	034770	022700	130000		PRDATA:	CMP #LNUM,A	;PRINT DATA IN A,B. 7777 FIELD OF A IS 0000
BEQPRNUM	034774	001467				BEQ PRNUM	;NUMBER
CMPSNUMA	034776	022700	120000			CMP #SNUM,A
BEQPRNUM	035002	001464				BEQ PRNUM
BISPQFFLAGS2	035004	052767	000004	146602		BIS #PQF,FLAGS2	;SET PRINT QUOTE FLAG
CMPATOMA	035012	022700	110000			CMP #ATOM,A
BEQPRUV1	035016	001760				BEQ PRUV1
CMPLSTRA	035020	022700	140000			CMP #LSTR,A
BEQPRLSTR	035024	001412				BEQ PRLSTR	;LONG STRING
CMPSSTRA	035026	022700	070000			CMP #SSTR,A
BEQPRSSTR	035032	001411				BEQ PRSSTR	;SHORT STRING
BICPQFFLAGS2	035034	042767	000004	146552		BIC #PQF,FLAGS2
CMPLISTA	035042	022700	170000			CMP #LIST,A
BEQPRLST	035046	001463				BEQ PRLST
ERRORERRORCPS	035050	104403				ERROR+CPS	;CANT PRINT A SNAP
PRLSTRJSRPC.LOAD	035052	004767	016510		PRLSTR:	JSR PC,.LOAD	;PRINT LONG STRING
PRSSTRJSRPCPRQQ	035056	004767	000042		PRSSTR:	JSR PC,PRQQ	;PRINT SHORT STRING
PRSTR2MOVBBD	035062	110103			PRSTR2:	MOVB B,D
BLEPRSTR3	035064	003402				BLE	PRSTR3	;NULL CHAR
JSRPCPCHR	035066	004777	146542			JSR PC,@PCHR
PRSTR3SWABB	035072	000301			PRSTR3:	SWAB B
MOVBBD	035074	110103				MOVB B,D
BLEPRSTR4	035076	003402				BLE	PRSTR4	;NULL CHARACTER
JSRPCPCHR	035100	004777	146530			JSR PC,@PCHR
PRSTR4MOVAB	035104	010001			PRSTR4:	MOV A,B
BICB	035106	042701	170000			BIC #170000,B
BEQPRSRET	035112	001403				BEQ PRSRET
JSRPC.LOAD	035114	004767	016446			JSR PC,.LOAD
BRPRSTR2	035120	000760				BR PRSTR2
PRSRETRTSPC	035122	000207			PRSRET:	RTS PC
PRQQBITPQFFLAGS2	035124	032767	000004	146462	PRQQ:	BIT #PQF,FLAGS2	;PRINT ' " ' IF PQF=1
BEQPRSRET	035132	001773				BEQ PRSRET
BITDPQFFLAGS2	035134	032767	000010	146452		BIT #DPQF,FLAGS2
BNEPRSRET	035142	001367				BNE PRSRET
MOVBD	035144	112703	000042			MOVB #'",D
JMPPCHR	035150	000177	146460			JMP @PCHR
PRNUMCLRTEMP	035154	005067	146422		PRNUM:	CLR TEMP
BICA	035160	042700	007777			BIC #7777,A
CMPSNUMA	035164	022700	120000			CMP #SNUM,A
BEQPRNUM2	035170	001406				BEQ PRNUM2
PRNUM1JSRPC.LOAD	035172	004767	016370		PRNUM1:	JSR PC,.LOAD	;GET FIRST NODE
BITA	035176	032700	007777			BIT #7777,A	;ONLY PRINT SNUM S FOR NOW
BEQPRNUM2	035202	001401				BEQ PRNUM2
ERRORERRORNTB	035204	104423				ERROR+NTB	;# TOO BIG
PRNUM2MOVBA	035206	010100			PRNUM2:	MOV B,A
JSRPCPRDN	035210	004767	177140			JSR PC,PRDN
RTSPC	035214	000207				RTS PC
PRLSTPUSH	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 142
	READ 62	PAGE 15 	ERRORS AND HANDLER

					PRLST:	PUSH A	;PRINT LIST, PTR IN B
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPTSTNBKTS	035230	005767	146376			TST NBKTS
BEQPRL4	035234	001404				BEQ PRL4
MOVD	035236	012703	000133			MOV #'[,D
JSRPCPCHR	035242	004777	146366			JSR PC,@PCHR
PRL4INCNBKTS	035246	005267	146360		PRL4:	INC NBKTS
MOVBC	035252	010102				MOV B,C
PRL1BITC	035254	032702	007777		PRL1:	BIT #7777,C	;EMPTY LIST
BEQPRL2	035260	001420				BEQ PRL2	;YES, DONE
BISDPQFFLAGS2	035262	052767	000010	146324		BIS #DPQF,FLAGS2	;DONT PRINT QUOTE BEFORE STRINGS
BRPRL3	035270	000402				BR PRL3
PRL6SPACE					PRL6:	SPACE
JSRPC.SPACEPRL3JSRPC.LOADC	035276	004767	016262		PRL3:	JSR PC,.LOADC	;GET THIS NODE
MOVAC	035302	010002				MOV A,C	;SAVE PTR TO NEXT
BICA	035304	042700	007777			BIC #7777,A
JSRPCPRTAB	035310	004767	177370			JSR PC,PRTAB
BITC	035314	032702	007777			BIT #7777,C
BNEPRL6	035320	001364				BNE PRL6
PRL2DECNBKTS	035322	005367	146304		PRL2:	DEC NBKTS
BEQPRL5	035326	001404				BEQ PRL5
MOVD	035330	012703	000135			MOV #'],D
JSRPCPCHR	035334	004777	146274			JSR PC,@PCHR
PRL5JMPRETC	035340	000167	010146		PRL5:	JMP RETC
PRNODEPUSH					PRNODE:	PUSH A	;PRINT NODE POINTED TO BY B
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH D
MOVDPJSRPC.LOAD	035356	004767	016204			JSR PC,.LOAD
JSRPCPRON	035362	004767	176620			JSR PC,PRON
SPACE						SPACE
JSRPC.SPACEMOVBA	035372	010100				MOV B,A
JSRPCPRON	035374	004767	176606			JSR PC,PRON
SPOP						SPOP D
MOVPDJMPRETB	035402	000167	010112			JMP RETB
SEX1JSRPCPRNODE	035406	004767	177732		SEX1:	JSR PC,PRNODE	;FOR FOO$X COMMAND IN 11SIM
HALT	035412	000000				HALT
SEXJSRPCPRNODE	035414	004767	177724		SEX:	JSR PC,PRNODE	;FOR RUG
JMPRUG	035420	000167	042354			JMP RUG
ERTLN	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 143
	READ 62	PAGE 16 	ERRORS AND HANDLER

					ERTLN:			;ERR RETURN TO LEVEL N
ERTL0					ERTL0:			;ERR RETURN TO LEVEL 0
MOVFUNLEVA	035424	016700	146110			MOV FUNLEV,A
BEQERTL1	035430	001435				BEQ ERTL1
PRTXT						PRTXT ^\LEVEL \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPRDN	035446	004767	176702			JSR PC,PRDN
PRTXT						PRTXT ^\  LINE \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVCLNA	035466	016700	146034			MOV CLN,A
JSRPCPRDN	035472	004767	176656			JSR PC,PRDN
PRTXT						PRTXT ^\  IN \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVCPPB	035510	016701	146006			MOV CPP,B
JSRPCPPNAME	035514	004767	177232			JSR PC,PPNAME
PRCR						PRCR
JSRPC.CRLFERTL1MOVUSERU	035524	016705	143760		ERTL1:	MOV USER,U
MOVDBITTBA	035530	012700	003636			MOV #DBITTB,A
ADDUA	035534	060500				ADD U,A
MOVA	035536	012720	000001			MOV #1,(A)+
CLRA	035542	005020				CLR (A)+
CLRA	035544	005020				CLR (A)+
CLRA	035546	005020				CLR (A)+
CLRA	035550	005020				CLR (A)+	;THAT SHOULD BE ENOUGH
MOVUDSKADUUNXTDBU	035552	016565	002542	002536		MOV UDSKAD(U),UNXTDB(U)
MOVPDLINKSLOT1A	035560	012700	001204			MOV #PDLINK-SLOT1,A
ADDBASEUSA	035564	066700	145674			ADD BASEUS,A
CLRA	035570	005010				CLR @A
CLRA	035572	005060	000002			CLR 2(A)
MOVAP	035576	010006				MOV A,P
MOVAPRBAO	035600	010067	145652			MOV A,PRBAO
MOVAPPOPL	035604	010067	145636			MOV A,PPOPL
SUBA	035610	162700	000524			SUB #524,A
MOVAPPUSHL	035614	010067	145630			MOV A,PPUSHL
MOVSDLINKSLOT1A	035620	012700	002010			MOV #SDLINK-SLOT1,A
ADDBASEUSA	035624	066700	145634			ADD BASEUS,A
CLRA	035630	005060	000002			CLR 2(A)
CLRA	035634	005010				CLR @A
MOVAS	035636	010067	145566			MOV A,S
MOVASPRBAO	035642	010067	145576			MOV A,SPRBAO
MOVASPOPL	035646	010067	145562			MOV A,SPOPL
SUBA	035652	162700	000524			SUB #524,A
MOVASPUSHL	035656	010067	145554			MOV A,SPUSHL
MOVTOPSA	035662	012700	003510			MOV #TOPS,A
MOVNCHRTOPSB	035666	012701	000037			MOV #<NCHR-TOPS>/2,B
CLRA	035672	005020				CLR (A)+
DECB	035674	005301				DEC B
BGE	035676	002375				BGE .-4
CLRBRAKE	035700	005067	144610			CLR	BRAKE
JMPMLOOP	035704	000167	160610			JMP MLOOP
SHOWJSRPCGUOEB	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 144
	READ 62	PAGE 17 	ERRORS AND HANDLER

	035710	004767	005522		SHOW:	JSR PC,GUOEB	;SHOW "FOO"
BRSHOW5	035714	000403				BR SHOW5
MOVBE	035716	010104				MOV B,E
JSRPC.BINDF	035720	004767	016226			JSR PC,.BINDF
SHOW5ERRORERRORPNH	035724	104434			SHOW5:	ERROR+PNH	;PROCEDURE NOT HERE
MOVBF	035726	010105				MOV B,F
PRCR						PRCR
JSRPC.CRLFPRTXT						PRTXT ^\TO \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVEB	035744	010401				MOV E,B
JSRPCPPNAME	035746	004767	177000			JSR PC,PPNAME
MOVFC	035752	010502				MOV F,C
JSRPC.LOADC	035754	004767	015604			JSR PC,.LOADC
MOVAF	035760	010005				MOV A,F	;SAVE PTR TO NEXT NODE
JSRPC.LOAD	035762	004767	015600			JSR PC,.LOAD	;#ARGS IN B
TSTB	035766	005701				TST B
BEQSHOW2	035770	001413				BEQ SHOW2
MOVAC	035772	010002				MOV A,C
SHOW1SPACE					SHOW1:	SPACE
JSRPC.SPACEJSRPC.LOADC	036000	004767	015560			JSR PC,.LOADC	;NEXT ARG
MOVAC	036004	010002				MOV A,C
JSRPCPRUV	036006	004767	176730			JSR PC,PRUV	;PRINT ITS PNAME
BITC	036012	032702	007777			BIT #7777,C
BNESHOW1	036016	001366				BNE SHOW1
SHOW2PRCR					SHOW2:	PRCR
JSRPC.CRLFBITF	036024	032705	007777			BIT #7777,F
BEQSHOW4	036030	001413				BEQ SHOW4
MOVFC	036032	010502				MOV F,C
SHOW3JSRPC.LOADC	036034	004767	015524		SHOW3:	JSR PC,.LOADC
MOVAC	036040	010002				MOV A,C
MOVBS	036042	010177	145362			MOV B,@S
JSRPCPRLN	036046	004767	000026			JSR PC,PRLN
BITC	036052	032702	007777			BIT #7777,C
BNESHOW3	036056	001366				BNE SHOW3
SHOW4PRTXT					SHOW4:	PRTXT ^\END\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTPRCR						PRCR
JSRPC.CRLFJMPNORT	036074	000167	011336			JMP NORT
PRLNPUSH	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 145
	READ 62	PAGE 18 	ERRORS AND HANDLER

					PRLN:	PUSH A	;PRINT TOKENS IN LIST ON S
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPSPUSH						SPUSH D
MOVDPBICDPQFFLAGS2	036114	042767	000010	145472		BIC #DPQF,FLAGS2	;DO PRINT QUOTE BEFORE STRINGS
MOVSC	036122	017702	145302			MOV @S,C
BRPRLN2	036126	000402				BR PRLN2
PRLN1SPACE					PRLN1:	SPACE
JSRPC.SPACEPRLN2JSRPC.LOADC	036134	004767	015424		PRLN2:	JSR PC,.LOADC
MOVAC	036140	010002				MOV A,C
JSRPCPRTAB	036142	004767	176536			JSR PC,PRTAB
BITC	036146	032702	007777			BIT #7777,C	;DONE?
BNEPRLN1	036152	001366				BNE PRLN1	;NO
PRCR						PRCR
JSRPC.CRLFJMPRETD	036160	000167	007320			JMP RETD
STRACEBITTRACEFFLAGS2	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 146
	READ 62	PAGE 19 	ERRORS AND HANDLER

	036164	032767	000002	145422	STRACE:	BIT #TRACEF,FLAGS2	;SYSTEM TRACE
BNE	036172	001001				BNE .+4
RTSPC	036174	000207				RTS PC
INCNBKTS	036176	005267	145430			INC NBKTS
PUSH						PUSH A
MOVAPJSRPCPPUSHTPRTXT						PRTXT ^/CT=/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTBICDPQFFLAGS2	036220	042767	000010	145366		BIC #DPQF,FLAGS2
JSRPCPRCT	036226	004767	176416			JSR PC,PRCT
PRTXT						PRTXT ^/ CO=/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPRCO	036244	004767	175604			JSR PC,PRCO
PRTXT						PRTXT ^/ S=/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTBICDPQFFLAGS2	036260	042767	000010	145326		BIC #DPQF,FLAGS2
JSRPCPRS1	036266	004767	176256			JSR PC,PRS1
PRCR						PRCR
JSRPC.CRLFCLRNBKTS	036276	005067	145330			CLR NBKTS
POP						POP A
MOVPAJSRPCPPOPTRTSPC	036310	000207				RTS PC
ETRACEBICTF6TFLAGS	036312	042767	000001	145264	ETRACE:	BIC #TF6,TFLAGS
BRTRA1	036320	000403				BR TRA1
TRACEBISTF6TFLAGS	036322	052767	000001	145254	TRACE:	BIS #TF6,TFLAGS
TRA1JSRPCGUOEB	036330	004767	005102		TRA1:	JSR PC,GUOEB
BRTRA5	036334	000402				BR TRA5
JSRPC.BNDFS	036336	004767	015736			JSR PC,.BNDFS
TRA5ERRORERRORPNH	036342	104434			TRA5:	ERROR+PNH	;PROC NOT HERE
MOVBC	036344	010102				MOV B,C	;B POINTS TO LIST OF GOODIES. FIRST IS FLAGS,,#ARGS
JSRPC.LDP2	036346	004767	015316			JSR PC,.LDP2
BICTPTFA	036352	042700	000400			BIC #TPTF,A
BITTF6TFLAGS	036356	032767	000001	145220		BIT #TF6,TFLAGS
BEQTRA2	036364	001402				BEQ TRA2
BISTPTFA	036366	052700	000400			BIS #TPTF,A
TRA2JSRPC.STP2	036372	004767	015240		TRA2:	JSR PC,.STP2
JMPNORT	036376	000167	011034			JMP NORT
SETSTFBISTRACEFFLAGS2	036402	052767	000002	145204	SETSTF:	BIS #TRACEF,FLAGS2	;SET SYSTEM TRACE FLAG
JMPNORT	036410	000167	011022			JMP NORT
CLRSTFBICTRACEFFLAGS2	036414	042767	000002	145172	CLRSTF:	BIC #TRACEF,FLAGS2
JMPNORT	036422	000167	011010			JMP NORT
FLEVMOVFUNLEVB	036426	016701	145106		FLEV:	MOV FUNLEV,B	;RETURN USER PROC CALL DEPTH
JMPR1NARG	036432	000167	010156			JMP R1NARG
VERSNMOVLVERNFB	036436	016701	142326		VERSN:	MOV LVERNF,B
JMPR1NARG	036442	000167	010146			JMP R1NARG
.MACRERMM	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 147
	READ 62	PAGE 20 	ERRORS AND HANDLER

						.MACR ERMM AA
						.XLIST
					AA==ERMNO
					ERMNO==ERMNO+1
						AA'.E
						.LIST
						.ENDM
					
.MACRBEGER						.MACR BEGER A
					A'.E:	.OFFSE 0	;(THIS WILL BE NON-ZERO LATER)
						.ENDM
					
.MACRENDER						.MACR ENDER
						.XLIST
						PRCR
						JMP ERTLN
						.OFFSE 0
						.LIST
						.ENDM
					
ERMNO		000000			ERMNO==0
ERTABERMM					ERTAB:	ERMM BSS	;BAD SS
.XLISTERMNOBSSERMNOERMNOBSS.EBSS.E.LISTERMM						ERMM CFL	;CANT FIND LINE #
.XLISTERMNOCFLERMNOERMNOCFL.ECFL.E.LISTERMM						ERMM COP	;CHAR (D) OUT OF PALCE
.XLISTERMNOCOPERMNOERMNOCOP.ECOP.E.LISTERMM						ERMM CPS	;CANT PRINT SNAP
.XLISTERMNOCPSERMNOERMNOCPS.ECPS.E.LISTERMM						ERMM CTIP	;CANT "TO" IN PROCEDURE
.XLISTERMNOCTIPERMNOERMNOCTIP.ECTIP.E.LISTERMM						ERMM CTIT	;CANT "TO" IN "TO"
.XLISTERMNOCTITERMNOERMNOCTIT.ECTIT.E.LISTERMM						ERMM ERP	;EXTRA RIGHT PAREN
.XLISTERMNOERPERMNOERMNOERP.EERP.E.LISTERMM						ERMM HNM	;... HAS NO MEANING
.XLISTERMNOHNMERMNOERMNOHNM.EHNM.E.LISTERMM						ERMM HNV	;... HAS NO VALUE
.XLISTERMNOHNVERMNOERMNOHNV.EHNV.E.LISTERMM						ERMM ILN	;..(CT).. IS AN INVALID LOGO NAME.
.XLISTERMNOILNERMNOERMNOILN.EILN.E.LISTERMM						ERMM INF1	;INFIX IN THE WRONG PLACE
.XLISTERMNOINF1ERMNOERMNOINF1.EINF1.E.LISTERMM						ERMM INVN	;INVALID NODE
.XLISTERMNOINVNERMNOERMNOINVN.EINVN.E.LISTERMM						ERMM ITB	;INPUT TOO BIG
.XLISTERMNOITBERMNOERMNOITB.EITB.E.LISTERMM						ERMM LCE	;LINE ... CHANGED BY EDIT
.XLISTERMNOLCEERMNOERMNOLCE.ELCE.E.LISTERMM						ERMM LDE	;LINE ..(B).. DOESN'T EXIST
.XLISTERMNOLDEERMNOERMNOLDE.ELDE.E.LISTERMM						ERMM LNTB	;LINE # TOO BIG
.XLISTERMNOLNTBERMNOERMNOLNTB.ELNTB.E.LISTERMM						ERMM NDU	;NOT A DISPLAY USER
.XLISTERMNONDUERMNOERMNONDU.ENDU.E.LISTERMM						ERMM NOU	;NO OUTPUT
.XLISTERMNONOUERMNOERMNONOU.ENOU.E.LISTERMM						ERMM NSL	;NO STORAGE LEFT
.XLISTERMNONSLERMNOERMNONSL.ENSL.E.LISTERMM						ERMM NTB	;# TOO BIG
.XLISTERMNONTBERMNOERMNONTB.ENTB.E.LISTERMM						ERMM NTF	;(S) NOT "TRUE" OR "FALSE"
.XLISTERMNONTFERMNOERMNONTF.ENTF.E.LISTERMM						ERMM NTL	;NUMBER TOO LONG
.XLISTERMNONTLERMNOERMNONTL.ENTL.E.LISTERMM						ERMM NY		;NOT YET!!
.XLISTERMNONYERMNOERMNONY.ENY.E.LISTERMM						ERMM OIP	;ONLY IN PROCEDURE
.XLISTERMNOOIPERMNOERMNOOIP.EOIP.E.LISTERMM						ERMM OOB	;OUT OF BOUNDS
.XLISTERMNOOOBERMNOERMNOOOB.EOOB.E.LISTERMM						ERMM OOP	;(CO) OUT OF PLACE
.XLISTERMNOOOPERMNOERMNOOOP.EOOP.E.LISTERMM						ERMM OOT	;OUT OF TOKENS
.XLISTERMNOOOTERMNOERMNOOOT.EOOT.E.LISTERMM						ERMM PAE	;PROCEDURE ..(CT).. ALREADY EXISTS
.XLISTERMNOPAEERMNOERMNOPAE.EPAE.E.LISTERMM						ERMM PNH	;PROCEDURE ... NOT HERE
.XLISTERMNOPNHERMNOERMNOPNH.EPNH.E.LISTERMM						ERMM RTB	;RESULT TOO BIG
.XLISTERMNORTBERMNOERMNORTB.ERTB.E.LISTERMM						ERMM STD	;SNAP TOO DEEP
.XLISTERMNOSTDERMNOERMNOSTD.ESTD.E.LISTERMM						ERMM TIP	;TOO MUCH INSIDE PARENS
.XLISTERMNOTIPERMNOERMNOTIP.ETIP.E.LISTERMM						ERMM TML	;TOO MANY LINES
.XLISTERMNOTMLERMNOERMNOTML.ETML.E.LISTERMM	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 148
	READ 62	PAGE 20.1 	ERRORS AND HANDLER

						ERMM TMS	;TOO AMNY SNAPS
.XLISTERMNOTMSERMNOERMNOTMS.ETMS.E.LISTERMM						ERMM UEL	;UNEXPECTED END OF LINE
.XLISTERMNOUELERMNOERMNOUEL.EUEL.E.LISTERMM						ERMM WDW	;WHAT SHOULD I DO WITH ...
.XLISTERMNOWDWERMNOERMNOWDW.EWDW.E.LISTERMM						ERMM WIC	;YOU CAN'T WIPE WHILE IN CAMERA
.XLISTERMNOWICERMNOERMNOWIC.EWIC.E.LISTERMM						ERMM WIT	;(CT) IS WRONG INPUT TO "TO"
.XLISTERMNOWITERMNOERMNOWIT.EWIT.E.LISTERMM						ERMM WTA	;..(CO)..DOESN'T LIKE..(CT)..AS INPUT
.XLISTERMNOWTAERMNOERMNOWTA.EWTA.E.LISTERMM						ERMM WTAA	;..(CO)..DOESN'T LIKE..(A)...AS INPUT
.XLISTERMNOWTAAERMNOERMNOWTAA.EWTAA.E.LISTERMM						ERMM WTAB	;..(CO)..DOESN'T LIKE..(B)...AS INPUT
.XLISTERMNOWTABERMNOERMNOWTAB.EWTAB.E.LISTERMM						ERMM YND	;YOU DON'T HAVE THE DISPLAY
.XLISTERMNOYNDERMNOERMNOYND.EYND.E.LISTERMM						ERMM YNT	;YOU DON'T HAVE THE TURTLE
.XLISTERMNOYNTERMNOERMNOYNT.EYNT.E.LISTERTENDERMNOERMNO	036574	000053			ERTEND:	ERMNO	;NEXT AVAILABLE ERR NO.
BEGER	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 149
	READ 62	PAGE 21 	ERRORS AND HANDLER

						BEGER WTAA
WTAA.E.OFFSEPUSHS						PUSHS A
JSRPCSPUSHTMOVASJSRPCPRCO	036606	004767	175242			JSR PC,PRCO
PRTXT						PRTXT ^/ DOESN'T LIKE /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPRS1	036636	004767	175706			JSR PC,PRS1
PRTXT						PRTXT ^/ AS INPUT./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER WTAB
WTAB.E.OFFSEPUSHS						PUSHS B
JSRPCSPUSHTMOVBSJSRPCPRCO	036702	004767	175146			JSR PC,PRCO
PRTXT						PRTXT ^/ DOESN'T LIKE /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPRS1	036732	004767	175612			JSR PC,PRS1
PRTXT						PRTXT ^/ AS INPUT./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER WTA
WTA.E.OFFSEJSRPCPRCO	036766	004767	175062			JSR PC,PRCO
PRTXT						PRTXT ^/ DOESN'T LIKE /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPRS1	037016	004767	175526			JSR PC,PRS1
PRTXT						PRTXT ^/ AS INPUT./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER INF1
INF1.E.OFFSEJSRPCPRCO	037052	004767	174776			JSR PC,PRCO
PRTXT						PRTXT ^/ IS IN THE WRONG PLACE./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER NOU
NOU.E.OFFSEJSRPCPRLO	037122	004767	174702			JSR PC,PRLO
PRTXT						PRTXT ^/ DIDN'T OUTPUT!/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER OOT
OOT.E.OFFSEPRTXT						PRTXT ^/OUT OF TOKENS./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER BSS
BSS.E.OFFSEPRTXT						PRTXT ^/BAD SS./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER NY
NY.E.OFFSEPRTXT						PRTXT ^/NOT YET!!/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER WDW
WDW.E.OFFSEPRTXT						PRTXT ^/WHAT SHOULD I DO WITH /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPRS1	037324	004767	175220			JSR PC,PRS1
ENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER HNV
HNV.E.OFFSEJSRPCPRCT	037340	004767	175304			JSR PC,PRCT
PRTXT						PRTXT ^/ HAS NO VALUE./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 150
	READ 62	PAGE 21.1 	ERRORS AND HANDLER

					
BEGER						BEGER ERP
ERP.E.OFFSEPRTXT						PRTXT ^/EXTRA RIGHT PAREN./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER TIP
TIP.E.OFFSEPRTXT						PRTXT ^/TOO MUCH INSIDE PARENS./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER OOP
OOP.E.OFFSEJSRPCPRCO	037504	004767	174344			JSR PC,PRCO
PRTXT						PRTXT ^/ OUT OF PLACE./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER UEL
UEL.E.OFFSEPRTXT						PRTXT ^/UNEXPECTED END OF LINE./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER NSL
NSL.E.OFFSEPRTXT						PRTXT ^/NO STORAGE LEFT./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER NTF
NTF.E.OFFSEJSRPCPRS1	037646	004767	174676			JSR PC,PRS1
PRTXT						PRTXT ^/ NOT "TRUE" OF "FALSE"./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER LDE
LDE.E.OFFSEPRTXT						PRTXT ^\LINE \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPRDN	037730	004767	174420			JSR PC,PRDN	;LINE # SHOULD BE IN B
PRTXT						PRTXT ^\ DOESN'T EXIST.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER LNTB
LNTB.E.OFFSEPRTXT						PRTXT ^\LINE NUMBER TOO BIG.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER COP
COP.E.OFFSEPRTXT						PRTXT ^\CHAR \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCTYO	040044	004767	160234			JSR PC,TYO
PRTXT						PRTXT ^\ OUT OF PLACE.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER CPS
CPS.E.OFFSEPRTXT						PRTXT ^\CANT PRINT A SNAP\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER NTB
NTB.E.OFFSEPRTXT						PRTXT ^\# TOO BIG\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 151
	READ 62	PAGE 22 	ERRORS AND HANDLER

					;MORE ERROR MESSAGES:
					
BEGER						BEGER NDU
NDU.E.OFFSEPRTXT						PRTXT ^/YOU DON'T HAVE A DISPLAY CONSOLE/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER NTL
NTL.E.OFFSEPRTXT						PRTXT ^/NUMBER TOO LONG/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER OOB
OOB.E.OFFSEPRTXT						PRTXT ^/OUT OF BOUNDS/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER TML
TML.E.OFFSEPRTXT						PRTXT ^/TOO MANY LINES/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER STD
STD.E.OFFSEPRTXT						PRTXT ^/SNAP TOO DEEP/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER TMS
TMS.E.OFFSEPRTXT						PRTXT ^/TOO MANY SNAPS/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER WIC
WIC.E.OFFSEPRTXT						PRTXT ^/YOU CANT WIPE WHILE IN CAMERA/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER YND
YND.E.OFFSEPRTXT						PRTXT ^/YOU DONT HAVE THE DISPLAY/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER YNT
YNT.E.OFFSEPRTXT						PRTXT ^/YOU DONT HAVE THE TURTLE/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LISTBEGER						BEGER 	CFL
CFL.E.OFFSEPRTXT						PRTXT ^/CANT FIND LINE NO. /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER HNM
HNM.E.OFFSEPRTXT						PRTXT ^/... HAS NO MEANING./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER LCE
LCE.E.OFFSEPRTXT						PRTXT ^\LINE ... CHANGED BY EDIT.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER PNH
PNH.E.OFFSEPRTXT						PRTXT ^/PROCEDURE ... NOT HERE/
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER PAE
PAE.E.OFFSECLRTOPRNM	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 152
	READ 62	PAGE 22.1 	ERRORS AND HANDLER

	041056	005067	142526			CLR TOPRNM
PRTXT						PRTXT ^/PROCEDURE /
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPRCT	041102	004767	173542			JSR PC,PRCT
PRTXT						PRTXT ^/ ALREADY EXISTS./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER ILN
ILN.E.OFFSEJSRPCPRCT	041144	004767	173500			JSR PC,PRCT
PRTXT						PRTXT ^/ IS AN INVALID LOGO NAME./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER WIT
WIT.E.OFFSECLRTOPRNM	041216	005067	142366			CLR TOPRNM
JSRPCPRCT	041222	004767	173422			JSR PC,PRCT
PRTXT						PRTXT ^/ CAN'T BE A DUMMY INPUT TO "TO"./
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER RTB
RTB.E.OFFSEPRTXT						PRTXT ^\ARITHMETIC RESULT TOO BIG.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST					
BEGER						BEGER ITB
ITB.E.OFFSEPRTXT						PRTXT ^\ARITHMETIC INPUT TOO BIG.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LISTBEGER						BEGER CTIP
CTIP.E.OFFSEPRTXT						PRTXT ^\CANT "TO" IN A PROCEDURE.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LISTBEGER						BEGER CTIT
CTIT.E.OFFSEPRTXT						PRTXT ^\CANT "TO" IN "TO".\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LISTBEGER						BEGER INVN
INVN.E.OFFSEPRTXT						PRTXT ^\INVALID NODE.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LISTBEGER						BEGER OIP
OIP.E.OFFSEPRTXT						PRTXT ^\ ONLY WHEN IN A PROCEDURE.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTENDER						ENDER
.XLISTPRCRJSRPC.CRLFJMPERTLN.OFFSE.LIST.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 153
	EVAL 336	PAGE 1 	SYSTEM PRIMITIVES

					.STITL SYSTEM PRIMITIVES
					
VERN%FNAM2VERN		001555				VERN==VERN+%FNAM2
					
					
SENTEN					SENTENCE:
MOVSPD	041632	011603				MOV	(SP),D	;NUMBER OF ARGS (DON'T CHANGE THE REGISTER FROM D WITHOUT CHANGING SNAP, TOO)
					
MOVSENTSP	041634	012716	170000			MOV	#SENT,(SP)	;WHAT TYPE THIS LIST IS
SNPSENCLRC	041640	005002			SNPSEN:	CLR	C
TSTD	041642	005703				TST	D
SENT.1BLESENT.R	041644	003447			SENT.1:	BLE	SENT.R	;RETURN
MOVSB	041646	017701	141556			MOV	@S,B	;ARGUMENT.  LEAVE ON S-PDL FOR GARBGE COLLECTOR
MOVBA	041652	010100				MOV	B,A
BICA	041654	042700	007777			BIC	#7777,A	;LEAVE ONLY DATA TYPE
CMPSENTA	041660	022700	170000			CMP	#SENT,A
BEQSENT.S	041664	001420				BEQ	SENT.S	;ARG IS SENTENCE
CMPATOMA	041666	022700	110000			CMP	#ATOM,A
BNESENT.2	041672	001004				BNE	SENT.2
					
					;ARG IS AN ATOM
SENT.AJSRPC.LOAD	041674	004767	011666		SENT.A:	JSR	PC,.LOAD	;CONVERT ATOM TO LSTR
MOVLSTRA	041700	012700	140000			MOV	#LSTR,A
					
SENT.2BISCA	041704	050200			SENT.2:	BIS	C,A	;C POINTS TO PREVIOUS STUFF OF SENTENCE
JSRPCGRBAD	041706	004767	013376			JSR	PC,GRBAD
					
SENT.3MOVCGCPREV	041712	010267	141602		SENT.3:	MOV	C,GCPREV	;POINTER TO PREVIOUS STUFF OF SENTENCE
SENT.4JSRPCSPOPT	041716	004767	150254		SENT.4:	JSR	PC,SPOPT	;POP S
DECD	041722	005303				DEC	D	;COUNTER
BRSENT.1	041724	000747				BR	SENT.1
					
SENT.SBITB	041726	032701	007777		SENT.S:	BIT	#7777,B	;ARGUMENT IS A SENTENCE
BEQSENT.4	041732	001771				BEQ	SENT.4	;EMPTY
TSTC	041734	005702				TST	C	;0 IF FIRST TIME CALLED
BEQSENS.1	041736	001406				BEQ	SENS.1
					;SECOND OR LATER TIME THROUGH
SENS.2JSRPCCOPYL	041740	004767	001012		SENS.2:	JSR	PC,COPYL	;COPY LIST. RETURN POINTER IN B
BISGCPREVA	041744	056700	141550			BIS	GCPREV,A	;POINTER TO PREVIOUS STUFF
JSRPC.STP1	041750	004767	011666			JSR	PC,.STP1	;C STILL POINTS TO LAST NODE COPIED
SENS.1BICB	041754	042701	170000		SENS.1:	BIC	#170000,B	;LEAVE POINTER ONLY
MOVBC	041760	010102				MOV	B,C
BRSENT.3	041762	000753				BR	SENT.3
					
					;RETURN.  POINTER TO SENTENCE IN C
SENT.RBISSPC	041764	052602			SENT.R:	BIS	(SP)+,C	;THE TYPE
S.ORTCLRGCPREV	041766	005067	141526		S.ORT:	CLR	GCPREV
JMPORTC	041772	000167	006112			JMP	ORTC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 154
	EVAL 336	PAGE 2 	SYSTEM PRIMITIVES

					
					
LIST.P					LIST.P:
MOVSPD	041776	011603				MOV	(SP),D	;COUNT
MOVORTCSP	042000	012716	050110			MOV	#ORTC,(SP)	;RETURN ADDRESS
LIST1CLRC	042004	005002			LIST1:	CLR	C
LIST.1DECD	042006	005303			LIST.1:	DEC	D	;COUNT
BLTLIST.9	042010	002415				BLT	LIST.9	;DONE
MOVSB	042012	017701	141412			MOV	@S,B
MOVBA	042016	010100				MOV	B,A
BICA	042020	042700	007777			BIC	#7777,A	;LEAVE DATA TYPE ONLY
LIST.2BISCA	042024	050200			LIST.2:	BIS	C,A	;POINTER TO REST OF LIST
JSRPCGRBAD	042026	004767	013256			JSR	PC,GRBAD
MOVCGCPREV	042032	010267	141462			MOV	C,GCPREV	;PROTECT FROM GARBAGE COLLECTOR
JSRPCSPOPT	042036	004767	150134			JSR	PC,SPOPT
BRLIST.1	042042	000761				BR	LIST.1	;GET NEXT ARG
					
LIST.9CLRGCPREV	042044	005067	141450		LIST.9:	CLR	GCPREV
BISLISTC	042050	052702	170000			BIS	#LIST,C
RTSPC	042054	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 155
	EVAL 336	PAGE 3 	SYSTEM PRIMITIVES

					
					
FPUT					FPUT:
CLRF	042056	005005				CLR	F
BR	042060	000402				BR	.+6
LPUT					LPUT:
MOVLPUT1FPUT1F	042062	012705	000030			MOV	#<LPUT1-FPUT1>,F
MOVSPD	042066	011603				MOV	(SP),D	;NUMBER OF ARGS
MOVORTCSP	042070	012716	050110			MOV	#ORTC,(SP)	;RETURN ADDRESS
DECD	042074	005303				DEC	D
BGT	042076	003001				BGT	.+4
ERRORERRORUEL	042100	104442				ERROR+UEL	;NEED AT LEAST 2 ARGS
JSRPCGLWARG	042102	004767	004436			JSR	PC,GLWARG
BR	042106	000401				BR	.+4	;LIST
ERRORERRORWTA	042110	104446				ERROR+WTA	;FIRST ARG MUST BE LIST
ADDFPC	042112	060507				ADD	F,PC	;CHOOSE BETWEEN LPUT AND FPUT
					
FPUT1MOVBA	042114	010100			FPUT1:	MOV	B,A	;POINTS TO ARG
BICA	042116	042700	170000			BIC	#170000,A	;CLEAR DATA TYPE
JSRPCSPOPT	042122	004767	150050			JSR	PC,SPOPT
MOVSB	042126	017701	141276			MOV	@S,B	;FIRST ELEMENT TO BE PUT
MOVBC	042132	010102				MOV	B,C
BICC	042134	042702	007777			BIC	#7777,C	;THIS DATA TYPE WILL BE SET INTO A
DECD	042140	005303				DEC	D
BRLIST.2	042142	000730				BR	LIST.2
					
LPUT1JSRPCCOPYL	042144	004767	000606		LPUT1:	JSR	PC,COPYL	;COPY LIST. RETURN PTR IN B
MOVBGCP1	042150	010167	141340			MOV	B,GCP1
JSRPCSPOPT	042154	004767	150016			JSR	PC,SPOPT	;POP 1ST ARG
JSRPCLIST1	042160	004767	177620			JSR	PC,LIST1	;LIST REST OF ARGS
BICC	042164	042702	170000			BIC	#170000,C	;POINTER TO THAT LIST
MOVCD	042170	010203				MOV	C,D	;SAVE IT
MOVFC	042172	010502				MOV	F,C	;POINTER TO LAST NODE OF COPIED LIST
JSRPC.LDP1	042174	004767	011474			JSR	PC,.LDP1
BISDA	042200	050300				BIS	D,A	;JOIN COPIED LIST TO LIST OF ARGS
JSRPC.STP1	042202	004767	011434			JSR	PC,.STP1
MOVGCP1C	042206	016702	141302			MOV	GCP1,C
CLRGCP1	042212	005067	141276			CLR	GCP1
RTSPC	042216	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 156
	EVAL 336	PAGE 4 	SYSTEM PRIMITIVES

					
					
WORD					WORD:
CLRC	042220	005002				CLR	C
MOVSPD	042222	012603				MOV	(SP)+,D	;NUMBER OF ARGS
WORD.1BLEWORDR	042224	003450			WORD.1:	BLE	WORDR
MOVSB	042226	017701	141176			MOV	@S,B	;GET ARG,  BUT LEAVE ON STACK
CMPBLNUM	042232	020127	130000			CMP	B,#LNUM	;IS ARG NUMBER?
BLOWORD.2	042236	103403				BLO	WORD.2
CMPBLNUM	042240	020127	140000			CMP	B,#<LNUM+10000>
BLOWORD.N	042244	103431				BLO	WORD.N	;NUMBER
WORD.2MOVLSTRA	042246	012700	140000		WORD.2:	MOV	#LSTR,A
JSRPCCONVER	042252	004767	003372			JSR	PC,CONVERT
ERRORERRORWTAB	042256	104450				ERROR+WTAB
BITB	042260	032701	007777			BIT	#7777,B	;IS ARG THE EMPTY WORD
BEQWORD.4	042264	001415				BEQ	WORD.4	;YES
					
TSTGCPREV	042266	005767	141226			TST	GCPREV	;IS 0 FIRST TIME THROUGH
BEQWORD.3	042272	001410				BEQ	WORD.3
					
					;SECOND OR LATER ARG
WORD.5JSRPCCPYSTR	042274	004767	000520		WORD.5:	JSR	PC,CPYSTR	;COPY STRING
WORD.6JSRPC.LDP1	042300	004767	011370		WORD.6:	JSR	PC,.LDP1	;LAST NODE OF COPIED STRING
BISGCPREVA	042304	056700	141210			BIS	GCPREV,A	;BIS POINTER TO PREVIOUS STUFF
JSRPC.STP1	042310	004767	011326			JSR	PC,.STP1	;STORE BACK
					
WORD.3MOVBGCPREV	042314	010167	141200		WORD.3:	MOV	B,GCPREV	;POINTER TO PREVIOUS STUFF
WORD.4JSRPCSPOPT	042320	004767	147652		WORD.4:	JSR	PC,SPOPT	;POP S
DECD	042324	005303				DEC	D
BRWORD.1	042326	000736				BR	WORD.1
					
					;ARGUMENT IS NUMBER. CONVERT TO STRING
WORD.NJSRPC.CLNLS	042330	004767	003662		WORD.N:	JSR	PC,.CLNLS
ERRORERRORWTAB	042334	104450				ERROR+WTAB	;PROBABLY MORE THAN 16 BITS
TSTGCPREV	042336	005767	141156			TST	GCPREV	;IS 0 FIRST TIME THROUGH
BEQWORD.3	042342	001764				BEQ	WORD.3	;IS FIRST ARG
BRWORD.6	042344	000755				BR	WORD.6	;SECOND OR LATER, BUT DON'T RECOPY!!
					
					;RETURN
WORDRMOVGCPREVC	042346	016702	141146		WORDR:	MOV	GCPREV,C
BISLSTRC	042352	052702	140000			BIS	#LSTR,C
BRS.ORT	042356	000603				BR	S.ORT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 157
	EVAL 336	PAGE 5 	SYSTEM PRIMITIVES

					
					
FIRST					FIRST:
JSRPCGLWANE	042360	004767	004210			JSR	PC,GLWANE
BRF.SENT	042364	000415				BR	F.SENT	;ARG IS SENTENCE
					
					;ARG IS WORD
JSRPCINSTR	042366	004767	000552			JSR	PC,INSTR	;RETURN ONE CHAR IN D
BNE	042372	001001				BNE	.+4	;FOUND A CHAR
F.WTAERRORERRORWTA	042374	104446			F.WTA:	ERROR+WTA	;NO CHARS IN STRING
TSTSP	042376	005726				TST	(SP)+	;POP OFF CO-ROUTINE LINK
MOVDB	042400	010301				MOV	D,B
F.STORCLRF	042402	005005			F.STOR:	CLR	F
JSRPCACTSTO	042404	004767	000524			JSR	PC,ACTSTO	;STORE THE CHAR.
BISLSTRC	042410	052702	140000			BIS	#LSTR,C	;POINTER TO THE NODE OF THE CHAR
JMPORTNC	042414	000167	005434			JMP	ORTNC
					
F.SENTMOVBC	042420	010102			F.SENT:	MOV	B,C
JSRPC.LDP2	042422	004767	011242			JSR	PC,.LDP2
JMPORTNA	042426	000167	005412			JMP	ORTNA
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 158
	EVAL 336	PAGE 6 	SYSTEM PRIMITIVES

					
					
BUTFIR					BUTFIRST:
JSRPCGLWANE	042432	004767	004136			JSR	PC,GLWANE
BRBF.SEN	042436	000422				BR	BF.SEN
					
					;ARG IS WORD
BF.WJSRPCINSTR	042440	004767	000500		BF.W:	JSR	PC,INSTR	;RETURN ONE CHAR
BEQF.WTA	042444	001753				BEQ	F.WTA	;NO CHARS IN STRING
TSTSP	042446	005726				TST	(SP)+
					;A CONTAINS FIRST 2 CHARS OF THE STRING
					;BUT IT MAY ONLY HAVE ONE.
CMPA	042450	020027	000177			CMP	A,#177	;IS TOP CHAR OF A 0?
BLOSBF.W1	042454	101405				BLOS	BF.W1	;YES. ONLY ONE CHAR IN A
CLRBA	042456	105000				CLRB	A	;KILL THE FIRST CHAR
MOVAB	042460	010001				MOV	A,B
MOVCA	042462	010200				MOV	C,A	;POINTER TO REST
JSRPCGRBAD	042464	004767	012620			JSR	PC,GRBAD
BF.W1BICC	042470	042702	170000		BF.W1:	BIC	#170000,C
BISLSTRC	042474	052702	140000			BIS	#LSTR,C
JMPORTNC	042500	000167	005350			JMP	ORTNC
					
					;ARG IS SENTENCE
BF.SENMOVBC	042504	010102			BF.SEN:	MOV	B,C
JSRPC.LDP1	042506	004767	011162			JSR	PC,.LDP1	;POINTER TO REST OF SENTENCE
BICA	042512	042700	170000			BIC	#170000,A	;LEAVE ONLY POINTER
BISSENTA	042516	052700	170000			BIS	#SENT,A
JMPORTNA	042522	000167	005316			JMP	ORTNA
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 159
	EVAL 336	PAGE 7 	SYSTEM PRIMITIVES

					
					
LAST					LAST:
JSRPCGLWANE	042526	004767	004042			JSR	PC,GLWANE
BRL.SENT	042532	000413				BR	L.SENT	;ARG IS SENTENCE
					
					;ARG IS WORD
MOVBC	042534	010102				MOV	B,C
SPUSH						SPUSH	#INSTR1	;ADDRESS OF CO-ROUTINE
MOVINSTR1PCLRD	042542	005003				CLR	D
L.W1MOVDB	042544	010301			L.W1:	MOV	D,B	;SAVE LAST CHAR
JSRPCSP	042546	004736				JSR	PC,@(SP)+	;RETURNS CHAR IN D
BNEL.W1	042550	001375				BNE	L.W1	;FOUND ONE
TSTB	042552	005701				TST	B	;STRING DONE
BNEF.STOR	042554	001312				BNE	F.STOR	;STORE THE CHAR AND RETURN
ERRORERRORWTA	042556	104446				ERROR+WTA	;NO CHARS FOUND
					
L.SEN1MOVAB	042560	010001			L.SEN1:	MOV	A,B
					;ARG IS SENTENCE
L.SENTJSRPC.LOAD	042562	004767	011000		L.SENT:	JSR	PC,.LOAD
BITA	042566	032700	007777			BIT	#7777,A	;LAST NODE OF SENTENCE YET?
BNEL.SEN1	042572	001372				BNE	L.SEN1
					
L.SRETJMPORTNB	042574	000167	005250		L.SRET:	JMP	ORTNB
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 160
	EVAL 336	PAGE 8 	SYSTEM PRIMITIVES

					
					
BUTLAS					BUTLAST:
JSRPCGLWANE	042600	004767	003770			JSR	PC,GLWANE
BRBL.SEN	042604	000422				BR	BL.SEN	;ARG IS A SENTENCE
					
					;ARG IS A WORD
JSRPCCPYSTR	042606	004767	000206			JSR	PC,CPYSTR	;COPY STRING.
JSRPC.LDP2	042612	004767	011052			JSR	PC,.LDP2	;LAST NODE OF NEW STRING
SWABA	042616	000300				SWAB	A
BNEBL.W2	042620	001005				BNE	BL.W2	;THE LAST CHARACTER IS REALLY THERE
CLRA	042622	005000				CLR	A	;(WE KNOW THE FIST CHAR IS REALLY THERE)
CMPBC	042624	020102				CMP	B,C	;IS THERE ONLY ONE NODE
BNEBL.W1	042626	001003				BNE	BL.W1	;MORE TAN ONE NODE
CLRB	042630	005001				CLR	B	;ANSWER IS EMPTY WORD
BRBL.W3	042632	000403				BR	BL.W3
					
BL.W2CLRBA	042634	105000			BL.W2:	CLRB	A	;CLEAR LAST CHAR
BL.W1JSRPC.STP2	042636	004767	010774		BL.W1:	JSR	PC,.STP2	;STORE NODE BACK
BL.W3BISLSTRB	042642	052701	140000		BL.W3:	BIS	#LSTR,B	;POINTER TO THE WORD
BL.ORTJMPORTNB	042646	000167	005176		BL.ORT:	JMP	ORTNB
					
					;ARG IS A SENTENCE
BL.SENJSRPCCOPYL	042652	004767	000100		BL.SEN:	JSR	PC,COPYL	;COPY LIST
MOVEC	042656	010402				MOV	E,C	;POINTS TO NEXT TO LAST NODE
BEQBL.SR	042660	001407				BEQ	BL.SR	;ANSWER IS EMPTY
JSRPC.LDP1	042662	004767	011006			JSR	PC,.LDP1
BICA	042666	042700	007777			BIC	#7777,A
JSRPC.STP1	042672	004767	010744			JSR	PC,.STP1
MOVBC	042676	010102				MOV	B,C
BL.SRBISLISTC	042700	052702	170000		BL.SR:	BIS	#LIST,C
JMPORTNC	042704	000167	005144			JMP	ORTNC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 161
	EVAL 336	PAGE 9 	SYSTEM PRIMITIVES

					
					
COUNT					COUNT:
JSRPCGLWARG	042710	004767	003630			JSR	PC,GLWARG
BRCT.SEN	042714	000414				BR	CT.SEN
					
					;ARG IS WORD
MOVBC	042716	010102				MOV	B,C
CLRB	042720	005001				CLR	B
MOVINSTR1SP	042722	012746	043146			MOV	#INSTR1,-(SP)	;ADDRESS OF A CO-ROUTINE
CT.W1INCB	042726	005201			CT.W1:	INC	B	;INCREMENT COUNTER
JSRPCSP	042730	004736				JSR	PC,@(SP)+	;RETURNS CHAR IN B
BNECT.W1	042732	001375				BNE	CT.W1
DECB	042734	005301				DEC	B	;WHEN RETURNS HERE, NO MORE CHARS
CT.ORTJSRPCP1NARG	042736	004767	003656		CT.ORT:	JSR	PC,P1NARG
JMPORTNB	042742	000167	005102			JMP	ORTNB
					
					;ARG WAS A SENTENCE
CT.SENMOVBC	042746	010102			CT.SEN:	MOV	B,C
JSRPCCLE	042750	004767	010106			JSR	PC,CLE	;RETURNS NUMBER OF LIST ELEMENTS IN B
BRCT.ORT	042754	000770				BR	CT.ORT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 162
	EVAL 336	PAGE 10 	SYSTEM PRIMITIVES

					
					
					;COPY LIST.
					;	CALL WITH B POINTING TO LIST
					;	RETURNS B POIOTING TO NEW LIST, C POINTING TO LAST NODE
COPYLCLRE	042756	005004			COPYL:	CLR	E	;WILL POINT TO 2ND NODE FROM LAST
CLRF	042760	005005				CLR	F
COPYL1BITB	042762	032701	007777		COPYL1:	BIT	#7777,B
BEQCOPYLR	042766	001407				BEQ	COPYLR	;DONE
JSRPC.LOAD	042770	004767	010572			JSR	PC,.LOAD
MOVFE	042774	010504				MOV	F,E	;LISTB PLACES  LAST NODE PTR INTO F
JSRPCLISTB	042776	004767	170260			JSR	PC,LISTB
MOVAB	043002	010001				MOV	A,B
BRCOPYL1	043004	000766				BR	COPYL1
					
COPYLRPOPS					COPYLR:	POPS	B	;LISTB KEEPS POINTER TO NEW LIST ON S.
MOVSBJSRPCSPOPTRTSPC	043016	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 163
	EVAL 336	PAGE 11 	SYSTEM PRIMITIVES

					
					
					;COPY STRING
					;CALL WITH B POINTING TO STRING TO BE COPIED,
					;ASSUMES THAT INPUT STRING HAS BEEN GARBAGE COLLECT PROTECTED ALREAEDY
					;B POINTS TO FIRST NODE OF NEW STRING,  C POINTS TO LAST
					;DOESN'T SKIP IF EXITS BECAUSE IT RAN OUT OF INPUT STRING
					
CPYSTRMOVINSTRA	043020	012700	043144		CPYSTR:	MOV	#INSTR,A
MAKSTRMOVDSP	043024	010346			MAKSTR:	MOV	D,-(SP)
MOVESP	043026	010446				MOV	E,-(SP)
MOVFSP	043030	010546				MOV	F,-(SP)
					
MOVASP	043032	010046				MOV	A,-(SP)	;ADDRESS OF INPUT STRING ROUTINE
CLRF	043034	005005				CLR	F
					
OUTSTRJSRPCSP	043036	004736			OUTSTR:	JSR	PC,@(SP)+	;CALL INPUT STRING CO-ROUTINE
BEQOSTRE1	043040	001416				BEQ	OSTRE1	;INPUT STRING DONE
					
OSTR1MOVDB	043042	010301			OSTR1:	MOV	D,B	;SAVE CHARACTER
JSRPCSP	043044	004736				JSR	PC,@(SP)+	;CALL INPUT STRING CO-ROUTINE
BEQOSTRE2	043046	001411				BEQ	OSTRE2	;INPUT STRING DONE
					
OSTR2SPUSH					OSTR2:	SPUSH	A	;SAVE REGISTERS USED BY INPUT STRING
MOVAPSPUSH						SPUSH	C
MOVCPSWABD	043054	000303				SWAB	D
BISDB	043056	050301				BIS	D,B	;BIS SECOND CHARACTER
JSRPCACTSTO	043060	004767	000050			JSR	PC,ACTSTO	;ACTUAL STORE
SPOP						SPOP	C
MOVPCSPOP						SPOP	A
MOVPABROUTSTR	043070	000762				BR	OUTSTR
					
					;INPUT STRING HAS ENDED
OSTRE2JSRPCACTSTO	043072	004767	000036		OSTRE2:	JSR	PC,ACTSTO	;STORE CHAR IN B
OSTRE1POPS					OSTRE1:	POPS	B	;POINTER TO FIRST NODE OF STRING
MOVSBJSRPCSPOPTMOVFC	043106	010502				MOV	F,C	;POINTER TO LAST NODE
BICB	043110	042701	170000			BIC	#170000,B
BICC	043114	042702	170000			BIC	#170000,C
.RDEFCLRGCP1	043120	005067	140370		.RDEF:	CLR	GCP1
MOVSPF	043124	012605				MOV	(SP)+,F
MOVSPE	043126	012604				MOV	(SP)+,E
MOVSPD	043130	012603				MOV	(SP)+,D
OSTRRRTSPC	043132	000207			OSTRR:	RTS	PC
					
					
					;ACTUALLY STORE OUTPUT NODE
ACTSTOMOVSSTRA	043134	012700	070000		ACTSTO:	MOV	#SSTR,A
JMPLISTB	043140	000167	170116			JMP	LISTB
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 164
	EVAL 336	PAGE 12 	SYSTEM PRIMITIVES

					
					
					;INPUT STRING
					;A CO-ROUTINE THAT HANDS BACK A CHARACTER IN BOTTOM BYTE OF D
					;DOES RTS PC WHEN INPUT STRING FINISHED
					
INSTRMOVBC	043144	010102			INSTR:	MOV	B,C
INSTR1BITC	043146	032702	007777		INSTR1:	BIT	#7777,C
BEQOSTRR	043152	001767				BEQ	OSTRR	;RTS PC
JSRPC.LDP2I	043154	004767	010540			JSR	PC,.LDP2I
MOVBAD	043160	110003				MOVB	A,D
BEQINSTR2	043162	001403				BEQ	INSTR2	;NULL CHAR
BICD	043164	042703	177400			BIC	#177400,D	;CLEAR TOP BYTE
JSRPCSP	043170	004736				JSR	PC,@(SP)+	;RETURN TO CO-ROUTINE
					
INSTR2CLRBA	043172	105000			INSTR2:	CLRB	A
SWABA	043174	000300				SWAB	A
BEQINSTR1	043176	001763				BEQ	INSTR1	;NULL CHAR
MOVAD	043200	010003				MOV	A,D
JSRPCSP	043202	004736				JSR	PC,@(SP)+	;RETURN TO CO-ROUTINE
BRINSTR1	043204	000760				BR	INSTR1
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 165
	EVAL 336	PAGE 13 	SYSTEM PRIMITIVES

					
MAKEBICMMFFLAGS2	043206	042767	000020	140400	MAKE:	BIC #MMF,FLAGS2
BR	043214	000403				BR .+10
MMAKEBISMMFFLAGS2	043216	052767	000020	140370	MMAKE:	BIS #MMF,FLAGS2
POPS						POPS TOPS	;PUT VALUE INTO TOPS
MOVSTOPSJSRPCSPOPTMOVSB	043236	017701	140166			MOV @S,B
MOVBA	043242	010100				MOV B,A
BICA	043244	042700	007777			BIC #7777,A
CMPATOMA	043250	022700	110000			CMP #ATOM,A	;IS TYPE ATOM?
BNEMAKE2	043254	001027				BNE MAKE2
MAKE4MOVVBINDA	043256	012700	030000		MAKE4:	MOV #VBIND,A	;YES< SET VARIABLE BINDING?
JSRPC.BIND	043262	004767	010502			JSR PC,.BIND
BITMMFFLAGS2	043266	032767	000020	140320		BIT #MMF,FLAGS2	;IS IT MULTIPLE MAKE?
BEQMAKE1	043274	001407				BEQ MAKE1
MOVTOPSS	043276	016777	140206	140124		MOV TOPS,@S
CLRTOPS	043304	005067	140200			CLR TOPS
JMPORT	043310	000167	004622			JMP ORT
MAKE1POPS					MAKE1:	POPS A
MOVSAJSRPCSPOPTCLRTOPS	043324	005067	140160			CLR TOPS
JMPNORT	043330	000167	004102			JMP NORT
MAKE2CMPLSTRA	043334	022700	140000		MAKE2:	CMP #LSTR,A
BEQMAKE3	043340	001401				BEQ MAKE3
MAKE5ERRORERRORWTAB	043342	104450			MAKE5:	ERROR+WTAB	;WRONG TYPE OF ARG
MAKE3BITB	043344	032701	007777		MAKE3:	BIT #7777,B
BEQMAKE5	043350	001774				BEQ MAKE5
MOVTOPSS	043352	016777	140132	140050		MOV TOPS,@S
MOVBTOPS	043360	010167	140124			MOV B,TOPS	;FOR .INTRN
JSRPCUINTRN	043364	004767	011130			JSR PC,UINTRN	;.INTRN FOR STRINGS THAT MAY INCLUDE NULL CHARS
BR	043370	000400				BR .+2
MOVSTOPS	043372	017767	140032	140110		MOV @S,TOPS
BRMAKE4	043400	000726				BR MAKE4
DOTSJSRPCGUOEB	043402	004767	000030		DOTS:	JSR PC,GUOEB	;GET UOE PTR FROM S INTO B
ERRORERRORHNV	043406	104410				ERROR+HNV	;HAS NO VALUE
DOTS2JSRPC.BNDVS	043410	004767	010576		DOTS2:	JSR PC,.BNDVS
ERRORERRORHNV	043414	104410				ERROR+HNV	;HAS NO VALUE
PUSHS						PUSHS B
JSRPCSPUSHTMOVBSCLRTOPS	043426	005067	140056			CLR TOPS
JMPORT	043432	000167	004500			JMP ORT
GUOEBPOPS	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 166
	EVAL 336	PAGE 14 	SYSTEM PRIMITIVES

					GUOEB:	POPS B	;GET UOE OR LSTR IN B FROM S
MOVSBJSRPCSPOPTMOVBA	043446	010100				MOV B,A	;    SKIP IF UOE
BICA	043450	042700	007777			BIC #7777,A
CMPATOMA	043454	022700	110000			CMP #ATOM,A
BEQGUOE1	043460	001411				BEQ GUOE1
CMPLSTRA	043462	022700	140000			CMP #LSTR,A
BEQGUOE2	043466	001401				BEQ GUOE2
ERRORERRORWTAB	043470	104450				ERROR+WTAB	;.(B). ISWRONG TYPE OF ARG
GUOE2MOVBTOPS	043472	010167	140012		GUOE2:	MOV B,TOPS
JSRPCUOBSCH	043476	004767	011010			JSR PC,UOBSCH	;.OBSCH FOR STRINGS THAT HAVE NULL CHARS
RTSPC	043502	000207				RTS PC	;NOT THERE
GUOE1JMPSRET	043504	000167	004502		GUOE1:	JMP SRET
DOMOVSA	043510	017700	137714		DO:	MOV @S,A	;DO...
MOVAB	043514	010001				MOV A,B
BICA	043516	042700	007777			BIC #7777,A
CMPLSTRA	043522	022700	140000			CMP #LSTR,A
BEQDO1	043526	001404				BEQ DO1
CMPLISTA	043530	022700	170000			CMP #LIST,A
BEQDO1	043534	001401				BEQ DO1
ERRORERRORWTAB	043536	104450				ERROR+WTAB
DO1JSRPCBLSTI	043540	004767	167632		DO1:	JSR PC,BLSTI
MOVBLSTPCHR	043544	012767	033416	140062		MOV #BLST,PCHR
CLRNBKTS	043552	005067	140054			CLR NBKTS
JSRPCPNODAB	043556	004767	171034			JSR PC,PNODAB
JSRPCBLSTF	043562	004767	167722			JSR PC,BLSTF
BRDO3	043566	000415				BR DO3	;EMPTY STRING
MOVTOPSS	043570	016777	137714	137632		MOV TOPS,@S
MOVTYOPCHR	043576	012767	020304	140030		MOV #TYO,PCHR
DO2JSRPCREAD	043604	004767	166440		DO2:	JSR PC,READ
JSRPCEVLINE	043610	004767	154026			JSR PC,EVLINE
JMPORT	043614	000167	004316			JMP ORT
BRDO4	043620	000404				BR DO4
DO3POPS					DO3:	POPS A
MOVSAJSRPCSPOPTDO4JMPNORT	043632	000167	003600		DO4:	JMP NORT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 167
	EVAL 336	PAGE 15 	SYSTEM PRIMITIVES

							;PRINT TOP (C) THINGS ON S
PRINTINCNBKTS	043636	005267	137770		PRINT:	INC NBKTS	;PRINTS OUTER [,]'S
FPRINTJSRPCREVS	043642	004767	001700		FPRINT:	JSR	PC,REVS	;DOESNT "
POP						POP	C
MOVPCJSRPCPPOPTJSRPCTYPE1	043654	004767	000032			JSR	PC,TYPE1
JSRPC.CRLF	043660	004767	146346			JSR	PC,.CRLF
JMPNORT	043664	000167	003546			JMP	NORT
					
TYPEJSRPCREVS	043670	004767	001652		TYPE:	JSR	PC,REVS
POP						POP	C
MOVPCJSRPCPPOPTJSRPCTYPE1	043702	004767	000004			JSR	PC,TYPE1	;PRINT WITHOUT CRLF AT END
JMPNORT	043706	000167	003524			JMP	NORT
					
TYPE1BISDPQFFLAGS2	043712	052767	000010	137674	TYPE1:	BIS #DPQF,FLAGS2	;DONT PRINT QUOTE BEFORE STRINGS
JSRPCPRS1	043720	004767	170624			JSR PC,PRS1
POPS						POPS A
MOVSAJSRPCSPOPTDECC	043734	005302				DEC C
BGTTYPE1	043736	003365				BGT	TYPE1
RTSPC	043740	000207				RTS	PC
					
LPARJSRPCGNT	043742	004767	154054		LPAR:	JSR PC,GNT
CMP$RPARCT	043746	022767	006034	137614		CMP #$RPAR,CT+2
BEQLPAR1	043754	001401				BEQ LPAR1
ERRORERRORTIP	043756	104437				ERROR+TIP	;TOO MUCH INSIDE PARENS
LPAR1JMPORT	043760	000167	004152		LPAR1:	JMP ORT
RPARERRORERRORERP	043764	104406			RPAR:	ERROR+ERP	;EXTRA RIGHT PAREN
					
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 168
	EVAL 336	PAGE 16 	SYSTEM PRIMITIVES

					
					;SINGLE PRECISION ARITHMETIC ROUTINES
					
UPLUSJMPORT	043766	000167	004144		UPLUS:	JMP ORT	;UNARY PLUS - NOTHING TO DO
UMINSJSRPCG1NARG	043772	004767	002516		UMINS:	JSR PC,G1NARG	;UNARY MINUS
NEGB	043776	005401				NEG B
JMPR1NARG	044000	000167	002610			JMP R1NARG
					
SUM					SUM:
CLRA	044004	005000				CLR	A
MOVSPD	044006	012603				MOV	(SP)+,D	;NUMBER OF ARGS
BLESUM.2	044010	003406				BLE	SUM.2	;DONE
SUM.1JSRPCG1NARG	044012	004767	002476		SUM.1:	JSR	PC,G1NARG	;GET 1 NUMBER IN B
ADDBA	044016	060100				ADD	B,A
BVSRTBE	044020	102432				BVS	RTBE	;RESULT TOO BIG
DECD	044022	005303				DEC	D	;COUNTER
BGTSUM.1	044024	003372				BGT	SUM.1
SUM.2MOVAB	044026	010001			SUM.2:	MOV	A,B
BRDONEMP	044030	000404				BR	DONEMP
					
DIFF					DIFF:
JSRPCG2NARG	044032	004767	002450			JSR	PC,G2NARG	;GET 2 NUMBERS
SUBAB	044036	160001				SUB	A,B
BVSRTBE	044040	102422				BVS	RTBE	;RESULT TOO BIG
DONEMPJMPR1NARG	044042	000167	002546		DONEMP:	JMP	R1NARG
					
PROD					PROD:
MOVMQF	044046	012705	177304			MOV	#MQ,F
MOVEAESRE	044052	012704	177311			MOV	#EAESR,E
MOVF	044056	012725	000001			MOV	#1,(F)+	;INITIALIZE MULTIPLICAND TO 1
MOVSIPRBTC	044062	012702	000002			MOV	#SIPRBT,C
MOVSPD	044066	012603				MOV	(SP)+,D	;NUMBER OF ARGS
PROD.1DECD	044070	005303			PROD.1:	DEC	D
BLTPROD.2	044072	002406				BLT	PROD.2	;DONE
JSRPCG1NARG	044074	004767	002414			JSR	PC,G1NARG	;GET ONE ARG IN B
MOVBF	044100	010115				MOV	B,(F)	;MULTIPLY
BITBCE	044102	130214				BITB	C,(E)
BNEPROD.1	044104	001371				BNE	PROD.1
RTBEERRORERRORRTB	044106	104435			RTBE:	ERROR+RTB	;RESULT TOO BIG
					
PROD.2MOVFB	044110	014501			PROD.2:	MOV	-(F),B	;PICK ANSWER OUT OF EAE
BRDONEMP	044112	000753				BR	DONEMP
					
MOD					MOD:
CLRD	044114	005003				CLR	D
BRDIV.1	044116	000402				BR	DIV.1
DIVDE					DIVDE:
MOVDONEMPDIV.8D	044120	012703	177670			MOV	#<DONEMP-DIV.8>,D
DIV.1JSRPCG2NARG	044124	004767	002356		DIV.1:	JSR	PC,G2NARG
TSTA	044130	005700				TST	A
BEQRTBE	044132	001765				BEQ	RTBE	;DIVISOR = 0
MOVMQF	044134	012705	177304			MOV	#MQ,F
MOVBF	044140	010115				MOV	B,(F)	;DIVIDEND
MOVADIVIDE	044142	010067	133132			MOV	A,DIVIDE
MOVFB	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 169
	EVAL 336	PAGE 16.1 	SYSTEM PRIMITIVES

	044146	012501				MOV	(F)+,B	;PICK UP QUOTIENT
ADDDPC	044150	060307				ADD	D,PC	;IF DIVIDE DESIRED, BRANCHES TO DONEMP
DIV.8MOVFB	044152	012501			DIV.8:	MOV	(F)+,B	;IF MOD DESIRED, STAYS HERE
BRDONEMP	044154	000732				BR	DONEMP	;AND PICKS UP REMAINDER
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 170
	EVAL 336	PAGE 17 	SYSTEM PRIMITIVES

					
					;PREDICATES
					
EQUALMOVSF	044156	016705	137246		EQUAL:	MOV	S,F
MOVFB	044162	012501				MOV	(F)+,B	;ARG1.  LEAVE ON STACK FOR GC PROTECTION
MOVFC	044164	011502				MOV	(F),C	;ARG2
MOVE	044166	012704	007777			MOV	#7777,E	;AN OFT USED CONSTANT
JSRPCEQUAL1	044172	004767	000026			JSR	PC,EQUAL1
BREQ.F	044176	000403				BR	EQ.F	;RETURNS HERE IF FALSE
MOVTRUEB	044200	012701	140024			MOV	#TRUE,B
BREQ.RET	044204	000402				BR	EQ.RET
					
EQ.FMOVFALSEB	044206	012701	140026		EQ.F:	MOV	#FALSE,B
EQ.RETADDS	044212	062767	000002	137210	EQ.RET:	ADD	#2,S
JMPORTNB	044220	000167	003624			JMP	ORTNB
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 171
	EVAL 336	PAGE 18 	SYSTEM PRIMITIVES

					
					
					;COMPARE THE DATA ITEM POINTED TO BY B WITH
					;THE DATA ITEM POINTED TO BY C.
					;SKIP IF THEY ARE EQUAL
					
EQUAL1CMPBC	044224	020102			EQUAL1:	CMP	B,C	;ARE THE POINTERS THE SAME
BEQEQTRUE	044226	001440				BEQ	EQTRUE
MOVBA	044230	010100				MOV	B,A
JSRPCEQ.SUB	044232	004767	000104			JSR	PC,EQ.SUB	;IS ARG1 A WORD?
BNEEQ.W1	044236	001047				BNE	EQ.W1	;A WORD
JSRPCEQ.SB1	044240	004767	000074			JSR	PC,EQ.SB1	;IS ARG2 A WORD?
BNEEQFALS	044244	001030				BNE	EQFALS	;ARG1 ISN'T WORD, BUT ARG2 IS.
					;BOTH ARGS ARE LISTS
EQ.LSTJSRPC.LOAD	044246	004767	007314		EQ.LST:	JSR	PC,.LOAD	;FIRST NODE OF ARG1
PUSH						PUSH	A	;SAVE POINTER TO BF
MOVAPJSRPCPPUSHTJSRPC.LDP2I	044260	004767	007434			JSR	PC,.LDP2I	;FIRST NODE OF ARG2
SPUSH						SPUSH	C	;SAVE POINTER TO BF
MOVCPMOVAC	044266	010002				MOV	A,C	;POINTER TO FIRST OF ARG1
					;B POINTS TO FIRST ARG2.  C POINTS TO FIRST ARG1.
JSRPCEQUAL1	044270	004767	177730			JSR	PC,EQUAL1	;ARE THE FIRSTS EQUAL?
BREQ.FF	044274	000416				BR	EQ.FF	;NO.  RETURN FALSE
POP						POP	B	;POINTER TO BF
MOVPBJSRPCPPOPTSPOP						SPOP	C	;POINTER TO BF OF OTHER ARG
MOVPCBICB	044306	042701	170000			BIC	#170000,B
BICC	044312	042702	170000			BIC	#170000,C
CMPBC	044316	020102				CMP	B,C
BEQEQTRUE	044320	001403				BEQ	EQTRUE
JSRPCEQ.LST	044322	004767	177720			JSR	PC,EQ.LST	;ARE THE BF'S EQUAL?
EQFALSRTSPC	044326	000207			EQFALS:	RTS	PC	;NO
EQTRUESKPRETSKPRET	044330	104000			EQTRUE:	SKPRET	;YES
					
EQ.FFCMPSPSP	044332	022626			EQ.FF:	CMP	(SP)+,(SP)+	;POP OFF THE POINTERS TO THE BF'S
JMPPPOPT	044334	000167	145576			JMP	PPOPT	;DON'T OVERPOP!
					
EQ.SB1MOVCA	044340	010200			EQ.SB1:	MOV	C,A	;IS ARG A WORD?
EQ.SUBBITEA	044342	030400			EQ.SUB:	BIT	E,A	;EMPTY?
BEQEQFALS	044344	001770				BEQ	EQFALS	;ONE ARG FINISHED
BICEA	044346	040400				BIC	E,A
CMPSENTA	044350	022700	170000			CMP	#SENT,A
RTSPC	044354	000207				RTS	PC
					
					;ARG1 IS A WORD
EQ.W1JSRPCEQ.SB1	044356	004767	177756		EQ.W1:	JSR	PC,EQ.SB1	;IS ARG2 A WORD?
BEQEQFALS	044362	001761				BEQ	EQFALS	;NOT A WORD
					;FALLS INTO WEQUAL
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 172
	EVAL 336	PAGE 19 	SYSTEM PRIMITIVES

					
					;COMPARE TWO WORDS
					
WEQUALMOVSNUMA	044364	012700	120000		WEQUAL:	MOV	#SNUM,A
JSRPCCONVER	044370	004767	001254			JSR	PC,CONVERT	;TRY CONVERTING ARG TO SNUM
BREQ.STR	044374	000403				BR	EQ.STR	;NOT NUMERIC
MOVEQFALSEQ.FALD	044376	012703	177660			MOV	#<EQFALS-EQ.FAL>,D	;ADD TO PC IN A WHILE
BREQ.A2	044402	000406				BR	EQ.A2
					
					;ARG NOT NUMERIC.  TRY STRING COMPARE
EQ.STRMOVLSTRA	044404	012700	140000		EQ.STR:	MOV	#LSTR,A
JSRPCCONVER	044410	004767	001234			JSR	PC,CONVERT
ERRORERRORWTAB	044414	104450				ERROR+WTAB	;EQUAL NOT DEFINED FOR SNAPS, ETC
CLRD	044416	005003				CLR	D	;ADD TO PC IN A WHILE
EQ.A2EXCH					EQ.A2:	EXCH	B,C
MOVBEXCH1MOVCBMOVEXCH1CJSRPCCONVER	044432	004767	001212			JSR	PC,CONVERT	;TRY CONVERTING 2ND ARG, TOO
BREQFALS	044436	000733				BR	EQFALS	;NOT SAME TYPE AS FIRST ARG
CMPBC	044440	020102				CMP	B,C
BEQEQTRUE	044442	001732				BEQ	EQTRUE
ADDDPC	044444	060307				ADD	D,PC	;JUMP TO EQFALS IF NUMERIC.
EQ.FAL		044446				EQ.FAL==.
					
					;COMPARE TWO STRINGS.  POINTERS IN B AND C.
MOVBGCP1	044446	010167	137042			MOV	B,GCP1
MOVCGCP2	044452	010267	137040			MOV	C,GCP2
SPUSH						SPUSH	#INSTR1
MOVINSTR1PMOVBF	044462	010105				MOV	B,F
CMPST1BITEF	044464	030405			CMPST1:	BIT	E,F	;IS ARG 1 ENDED
BEQCMPSTE	044466	001430				BEQ	CMPSTE	;YES
SPUSH						SPUSH	A	;SAVE A
MOVAPMOVFB	044472	010501				MOV	F,B	;POINTER TO REST OF ARG1
JSRPC.LOAD	044474	004767	007066			JSR	PC,.LOAD
MOVAF	044500	010005				MOV	A,F	;POINTER TO REST OF ARG1
SPOP						SPOP	A	;RESTORE A
MOVPATSTBB	044504	105701				TSTB	B	;IS CHAR REAL OR NULL?
BEQCMPST2	044506	001404				BEQ	CMPST2	;NULL
JSRPCSP	044510	004736				JSR	PC,@(SP)+	;PUTS 1 CHAR OF ARG 2 INTO B
BEQCSFAL1	044512	001411				BEQ	CSFAL1	;ARG 2 ENDED
CMPBDB	044514	120301				CMPB	D,B	;COMPARE CHARS!!
BNECSFALS	044516	001006				BNE	CSFALS
CMPST2SWABB	044520	000301			CMPST2:	SWAB	B
BEQCMPST1	044522	001760				BEQ	CMPST1	;NULL CHAR
JSRPCSP	044524	004736				JSR	PC,@(SP)+	;1 CHAR OF ARG 2 IN B
BEQCSFAL1	044526	001403				BEQ	CSFAL1
CMPBDB	044530	120301				CMPB	D,B	;COMPARE CHARS!!
BEQCMPST1	044532	001754				BEQ	CMPST1
CSFALSTSTSP	044534	005726			CSFALS:	TST	(SP)+	;POP CO-ROUTINE LINKAGE
CSFAL1CLRGCP1	044536	005067	136752		CSFAL1:	CLR	GCP1
CLRGCP2	044542	005067	136750			CLR	GCP2
BREQFALS	044546	000667				BR	EQFALS
					
					;ARG 1 HAS ENDED
CMPSTEJSRPCSP	044550	004736			CMPSTE:	JSR	PC,@(SP)+
BNECSFALS	044552	001370				BNE	CSFALS	;BUT ARG 2 HASN'T ENDED
CLRGCP1	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 173
	EVAL 336	PAGE 19.1 	SYSTEM PRIMITIVES

	044554	005067	136734			CLR	GCP1
CLRGCP2	044560	005067	136732			CLR	GCP2
BREQTRUE	044564	000661				BR	EQTRUE	;BOTH ENDED AT THE SAME TIME!!!!
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 174
	EVAL 336	PAGE 20 	SYSTEM PRIMITIVES

					
					;MORE PREDICATES
					
GREATRJSRPCG2NARG	044566	004767	001714		GREATR:	JSR PC,G2NARG
CMPBA	044572	020100				CMP B,A
BGTRTTRUE	044574	003013				BGT RTTRUE
RTFALSPUSHS					RTFALS:	PUSHS #FALSE
JSRPCSPUSHTMOVFALSESRTNCMPJMPORT	044610	000167	003322		RTNCMP:	JMP ORT
					
LESSJSRPCG2NARG	044614	004767	001666		LESS:	JSR PC,G2NARG
CMPBA	044620	020100				CMP B,A
BGERTFALS	044622	002365				BGE RTFALS
RTTRUEPUSHS					RTTRUE:	PUSHS #TRUE
JSRPCSPUSHTMOVTRUESBRRTNCMP	044636	000764				BR RTNCMP
					
GREQJSRPCG2NARG	044640	004767	001642		GREQ:	JSR PC,G2NARG
CMPBA	044644	020100				CMP B,A
BGERTTRUE	044646	002366				BGE RTTRUE
BRRTFALS	044650	000752				BR RTFALS
					
LSEQJSRPCG2NARG	044652	004767	001630		LSEQ:	JSR PC,G2NARG
CMPBA	044656	020100				CMP B,A
BLERTTRUE	044660	003761				BLE RTTRUE
BRRTFALS	044662	000745				BR RTFALS
					
NUMBPPOPS					NUMBP:	POPS B
MOVSBJSRPCSPOPTMOVLNUMA	044674	012700	130000			MOV	#LNUM,A
JSRPCCONVER	044700	004767	000744			JSR	PC,CONVERT
BRRTFALS	044704	000734				BR	RTFALS	;COULDN'T CONVERT IT
BRRTTRUE	044706	000746				BR	RTTRUE
					
EMPTYPPOPS					EMPTYP:	POPS B
MOVSBJSRPCSPOPTBITB	044720	032701	007777			BIT	#7777,B
BEQRTTRUE	044724	001737				BEQ	RTTRUE
BRRTFALS	044726	000723				BR	RTFALS
					
LISTPPOPS					LISTP:	POPS B
MOVSBJSRPCSPOPTBICB	044740	042701	007777			BIC	#7777,B
CMPSENTB	044744	022701	170000			CMP	#SENT,B
BEQRTTRUE	044750	001725				BEQ	RTTRUE
BRRTFALS	044752	000711				BR	RTFALS
					
WORDPPOPS					WORDP:	POPS B
MOVSBJSRPCSPOPTBICB	044764	042701	007777			BIC	#7777,B
CMPSENTB	044770	022701	170000			CMP	#SENT,B
BEQRTFALS	044774	001700				BEQ	RTFALS
BRRTTRUE	044776	000712				BR	RTTRUE
IFINCIFLEV	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 175
	EVAL 336	PAGE 21 	SYSTEM PRIMITIVES

	045000	005267	136536		IF:	INC IFLEV
BISIFFFLAGS	045004	052767	000040	136532		BIS #IFF,FLAGS
JSRPCTSTST	045012	004767	000200			JSR PC,TSTST	;TEST S, SKIP IF "TRUE"
BR	045016	000401				BR .+4
BRIFR	045020	000406				BR IFR
JSRPCSTNE	045022	004767	000066			JSR PC,STNE
BRIFR	045026	000403				BR IFR
BICRTFFLAGS	045030	042767	000002	136506		BIC #RTF,FLAGS
IFRJMPNORT	045036	000167	002374		IFR:	JMP NORT
THENBITIFFFLAGS	045042	032767	000040	136474	THEN:	BIT #IFF,FLAGS
BNEIFR	045050	001372				BNE IFR
ERRORERROROOP	045052	104431				ERROR+OOP	;THEN OUT OF PLACE
BRIFR	045054	000770				BR IFR
ELSEBITIFFFLAGS	045056	032767	000040	136460	ELSE:	BIT #IFF,FLAGS
BNE	045064	001001				BNE .+4
ERRORERROROOP	045066	104431				ERROR+OOP	;ELSE OUT OF PLACE
JSRPCSTNE	045070	004767	000020			JSR PC,STNE
BRIFR	045074	000760				BR IFR
DECIFLEV	045076	005367	136440			DEC IFLEV
BGTIFR	045102	003355				BGT IFR
BICIFFFLAGS	045104	042767	000040	136432		BIC #IFF,FLAGS
BRIFR	045112	000751				BR IFR
STNEJSRPCGNT	045114	004767	152702		STNE:	JSR PC,GNT	;SCAN TOO NEXT ELSE
CMP$ELSECT	045120	022767	004500	136442		CMP #$ELSE,CT+2
BNESTNE1	045126	001005				BNE STNE1
BISRTFFLAGS	045130	052767	000002	136406		BIS #RTF,FLAGS	;IF "ELSE", SET RTF AND SKIP RETURN
JMPSRET	045136	000167	003050			JMP SRET
STNE1BITCRFFLAGS	045142	032767	000004	136374	STNE1:	BIT #CRF,FLAGS
BEQSTNE2	045150	001407				BEQ STNE2
STNE3BISRTFFLAGS	045152	052767	000002	136364	STNE3:	BIS #RTF,FLAGS	;IF "CR" SET RTF AND RETURN
BICCRFFLAGS	045160	042767	000004	136356		BIC #CRF,FLAGS
RTSPC	045166	000207				RTS PC
STNE2CMP$IFCT	045170	022767	004750	136372	STNE2:	CMP #$IF,CT+2	;IF "IF", LOOK FOR NEXT ELSE!
BNESTNE	045176	001346				BNE STNE
JSRPCSTNE	045200	004767	177710			JSR PC,STNE
BRSTNE3	045204	000762				BR STNE3
BICRTFFLAGS	045206	042767	000002	136330		BIC #RTF,FLAGS
BRSTNE	045214	000737				BR STNE
TSTSTPUSH	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 176
	EVAL 336	PAGE 22 	SYSTEM PRIMITIVES

					TSTST:	PUSH A		;TEST S, SKIP IF TRUE
MOVAPJSRPCPPUSHTMOVSA	045224	017700	136200			MOV @S,A	;ERROR IF NEITHER "TRUE" OR "FALSE"
PUSHS						PUSHS A
JSRPCSPUSHTMOVASPUSHS						PUSHS #TRUE
JSRPCSPUSHTMOVTRUESJSRPCCSEQ	045252	004767	000066			JSR PC,CSEQ
BRTSTST1	045256	000406				BR TSTST1
POPS						POPS A	;"TRUE", SKIP
MOVSAJSRPCSPOPTJMPSRETA	045270	000167	002710			JMP SRETA
TSTST1MOVSA	045274	017700	136130		TSTST1:	MOV @S,A
PUSHS						PUSHS A
JSRPCSPUSHTMOVASPUSHS						PUSHS #FALSE
JSRPCSPUSHTMOVFALSESJSRPCCSEQ	045322	004767	000016			JSR PC,CSEQ
ERRORERRORNTF	045326	104424				ERROR+NTF	;NOT "TRUE" OR "FALSE"
POPS						POPS A
MOVSAJSRPCSPOPTJMPRETA	045340	000167	000162			JMP RETA
CSEQPUSH					CSEQ:	PUSH A		;COMPARE TWO STRINGS - POINTERS ON S
MOVAPJSRPCPPUSHTPUSH						PUSH B		;SKIP IF EQUAL
MOVBPJSRPCPPUSHTPUSH						PUSH C		;ASSUMES NO "NULL" (8-BIT ON) CHARACTERS
MOVCPJSRPCPPUSHTPUSH						PUSH D
MOVDPJSRPCPPUSHTMOVSC	045374	016702	136030			MOV S,C
MOVCD	045400	012203				MOV (C)+,D	;GET STR 1 POINTER IN D
MOVCC	045402	011202				MOV @C,C	;GET STR 2 POINTER INTO C
CSEQ1MOVDB	045404	010301			CSEQ1:	MOV D,B
CMPCD	045406	020203				CMP C,D	;CHECK IF POINTERS EQUAL
BEQCSEQ3	045410	001452				BEQ CSEQ3
BITB	045412	032701	007777			BIT #7777,B	;CHECK IF EITHER STRING DONE
BEQCSEQ2	045416	001412				BEQ CSEQ2
BITA	045420	032700	007777			BIT #7777,A
BEQCSEQ2	045424	001407				BEQ CSEQ2
JSRPC.LOAD	045426	004767	006134			JSR PC,.LOAD	;GET NEXT NODE OF STR 1
MOVAD	045432	010003				MOV A,D	;SAVE POINTER IN D
JSRPC.LDP2I	045434	004767	006260			JSR PC,.LDP2I	;GET NEXT NODE OF STR 2
CMPAB	045440	020001				CMP A,B
BEQCSEQ1	045442	001760				BEQ CSEQ1
CSEQ2POPS					CSEQ2:	POPS A
MOVSAJSRPCSPOPTSPOPS						SPOPS A
MOVSAADDSBRRETD	045466	000406				BR RETD	;STRINGS NOT EQUAL
RETFPOP					RETF:	POP F
MOVPFJSRPCPPOPTRETEPOP					RETE:	POP E
MOVPEJSRPCPPOPTRETDPOP					RETD:	POP D
MOVPDJSRPCPPOPTRETCPOP					RETC:	POP C
MOVPCJSRPCPPOPTRETBPOP					RETB:	POP B
MOVPBJSRPCPPOPTRETAPOP					RETA:	POP A
MOVPAJSRPCPPOPTRETRTSPC	045534	000207			RET:	RTS PC
CSEQ3ADDP	045536	062766	000002	000010	CSEQ3:	ADD #2,8.(P)	;STRINGS EQUAL
BRCSEQ2	045544	000737				BR CSEQ2
REVSCMPP	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 177
	EVAL 336	PAGE 23 	SYSTEM PRIMITIVES

	045546	022766	000001	000002	REVS:	CMP #1,2(P)
BLT	045554	002401				BLT .+4
RTSPC	045556	000207				RTS PC
PUSH						PUSH A	;REVERSES THE TOP ((P)+1) THINGS ON S
MOVAPJSRPCPPUSHTPUSH						PUSH B
MOVBPJSRPCPPUSHTPUSH						PUSH C
MOVCPJSRPCPPUSHTPUSH						PUSH D
MOVDPJSRPCPPUSHTMOVPC	045610	016602	000012			MOV 10.(P),C
MOVSA	045614	016700	135610			MOV S,A
MOVCB	045620	010201				MOV C,B
ASLB	045622	006301				ASL B
ADDAB	045624	060001				ADD A,B
ASRC	045626	006202				ASR C
BEQREVS1	045630	001405				BEQ REVS1
REVS2MOVAD	045632	011003			REVS2:	MOV @A,D
MOVBA	045634	014120				MOV -(B),(A)+
MOVDB	045636	010311				MOV D,@B
DECC	045640	005302				DEC C
BGTREVS2	045642	003373				BGT REVS2
REVS1JMPRETD	045644	000167	177634		REVS1:	JMP RETD
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 178
	EVAL 336	PAGE 24 	CONVERSION ROUTINES

						.STITL CONVERSION ROUTINES
					
					
					;CONVERT
					;CALL WITH DESIRED DATA TYPE IN A
					;CALL WITH POINTER TO DATA IN B
					;IF CONVERSION SUCCEEDS, RETURN POINTER TO CONVERTED DATA IN B AND
					;LEAVE A UNCHANGED.
					;
					;IF CONVERSION FAILS, LEAVE B UNCHANGED,BUT RETURN ITS DATA TYPE IN A
					
CONVER					CONVERT:
MOVASP	045650	010046				MOV	A,-(SP)	;SAVE A,B,C HERE
MOVBSP	045652	010146				MOV	B,-(SP)
MOVCSP	045654	010246				MOV	C,-(SP)
					
BICA	045656	042700	107777			BIC	#107777,A	;LEAVE DATA TYPE ONLY
MOVBC	045662	010102				MOV	B,C
BICC	045664	042702	107777			BIC	#107777,C
ASRA	045670	006200				ASR	A	;SHIFT DESTINATION DATA TYPE 3 PLACES
ASRA	045672	006200				ASR	A
ASRA	045674	006200				ASR	A
BISCA	045676	050200				BIS	C,A	;SET SOURCE DATA TYPE IN THE 3 VACATED BITS
ASRA	045700	006200				ASR	A	;AND PLACE THE ENTIRE MESS IN BOTTOM 6 BITS
SWABA	045702	000300				SWAB	A
					;(A IS NOW A 6 BIT DISPATCH ADDRESS)
MOVBCNVTBLAA	045704	116000	046406			MOVB	CNVTBL(A),A	;PICK UP ENTRY FROM TABLE
BICA	045710	042700	177400			BIC	#177400,A	;CLEAR TOP BYTE
ASLA	045714	006300				ASL	A		;IT IS A BYTE ADDRESS
JSRPCCNVTOPA	045716	004760	045754			JSR	PC,CNVTOP(A)	;RELATIVE TO CONVERT TOP
BRCONV.F	045722	000405				BR	CONV.F	;THE CONVERSION FAILED
MOVSPC	045724	012602				MOV	(SP)+,C
TSTSP	045726	005726				TST	(SP)+	;DON'T RESTORE B
MOVSPA	045730	012600				MOV	(SP)+,A
JMPSRET	045732	000167	002254			JMP	SRET	;SKIP RETURN
					
CONV.FMOVSPC	045736	012602			CONV.F:	MOV	(SP)+,C
MOVSPB	045740	012601				MOV	(SP)+,B
MOVBA	045742	010100				MOV	B,A
BICA	045744	042700	007777			BIC	#7777,A	;DATA TYPE OF ARG LEFT IN A
TSTSP	045750	005726				TST	(SP)+	;DON'T RESTORE A
RTSPC	045752	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 179
	EVAL 336	PAGE 25 	CONVERSION ROUTINES

					
					
					;CONVERT ROUTINE JUMPS TO THE PROGRAMS HERE
					
CNVTOP		045754			CNVTOP==.	;TOP OF CONVERT ROUTINES
					
					;THE ARGUMENT CAN'T BE CONVERTED TO DESIRED DATA TYPE
.CERRRTSPC	045754	000207			.CERR:	RTS	PC
					
CNVTOPCNVNOP		000001			CNVNOP==<.-CNVTOP>/2
					;THE ARGUMENT ALREADY HAS THE DESIRED TYPE
.CNOPSKPRETSKPRET	045756	104000			.CNOP:	SKPRET
					
CNVTOPCA2LS		000002			CA2LS==<.-CNVTOP>/2
					;CONVERT ATOM TO LSTR
.CATLSJSRPC.LOAD	045760	004767	005602		.CATLS:	JSR	PC,.LOAD
SKPRETSKPRET	045764	104000				SKPRET
					
CNVTOPCSN2LN		000005			CSN2LN==<.-CNVTOP>/2
					;CONVERT SNUM TO LNUM.  ASSUME NUMBER IN B, RATHER THAN POINTER
.CSNLNMOVSNUMA	045766	012700	120000		.CSNLN:	MOV	#SNUM,A
JSRPCGRBAD	045772	004767	007312			JSR	PC,GRBAD	;STORE THE NODE A,B IN A NEW NODE
BISLNUMC	045776	052702	130000			BIS	#LNUM,C	;CPOINTS TO NEW NODE
MOVCB	046002	010201				MOV	C,B
SKPRETSKPRET	046004	104000				SKPRET
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 180
	EVAL 336	PAGE 26 	CONVERSION ROUTINES

					
					;MORE CONVERSION ROUTINES
					
CNVTOPCSN2LS		000015			CSN2LS==<.-CNVTOP>/2
					;CONVERT SNUM TO LSTR
.CSNLSMOVDSP	046006	010346			.CSNLS:	MOV	D,-(SP)
MOVESP	046010	010446				MOV	E,-(SP)
MOVFSP	046012	010546				MOV	F,-(SP)
MOVMQA	046014	012700	177304			MOV	#MQ,A
MOV.CSNL4.CSNL5E	046020	012704	000010			MOV	#<.CSNL4-.CSNL5>,E
CLRSP	046024	005046				CLR	-(SP)	;MARK STACK
MOVBA	046026	010110				MOV	B,(A)
BGT.CSNL0	046030	003006				BGT	.CSNL0
BLT.CSNLL	046032	002403				BLT	.CSNLL
SPUSH						SPUSH	#'0	;NUMBER IS 0
MOVPBR.CSNL2	046040	000416				BR	.CSNL2
					
.CSNLLCLRE	046042	005004			.CSNLL:	CLR	E
NEGA	046044	005410				NEG	(A)	;SNUM WAS NEGATIVE
.CSNL0MOVD	046046	012703	000012		.CSNL0:	MOV	#10.,D
.CSNL1JSRPC.CNXTD	046052	004767	000100		.CSNL1:	JSR	PC,.CNXTD	;GET NEXT DIGIT IN B
BR.CSNL2	046056	000407				BR	.CSNL2	;NO MORE CHARS
SWABB	046060	000301				SWAB	B
MOVBSP	046062	010146				MOV	B,-(SP)
JSRPC.CNXTD	046064	004767	000066			JSR	PC,.CNXTD
BR.CSNL2	046070	000402				BR	.CSNL2
BISBBSP	046072	150116				BISB	B,(SP)	;SET NEW CHAR INTO PREVIOUS ONE
BR.CSNL1	046074	000766				BR	.CSNL1
					
.CSNL2MOVSSTRA	046076	012700	070000		.CSNL2:	MOV	#SSTR,A
CLRF	046102	005005				CLR	F
ADDEPC	046104	060407				ADD	E,PC
.CSNL5MOVB	046106	012701	000055		.CSNL5:	MOV	#'-,B	;STAYS HERE IF ARG WAS NEGATIVE
.CSNL3JSRPCLISTB	046112	004767	165144		.CSNL3:	JSR	PC,LISTB	;PUT NEXT 2 CHARS ONTO LIST
.CSNL4MOVSPB	046116	012601			.CSNL4:	MOV	(SP)+,B
BNE.CSNL3	046120	001374				BNE	.CSNL3	;0 MARKS END OF DIGITS
POPS						POPS	B	;POINTER TO FIRST NODE OF ANSWER
MOVSBJSRPCSPOPTBICB	046132	042701	170000			BIC	#170000,B	;CLEAR DATA TYPE
BISLSTRB	046136	052701	140000			BIS	#LSTR,B	;REPLACE BY LSTR
					
.SRDEFCLRGCP1	046142	005067	135346		.SRDEF:	CLR	GCP1
MOVSPF	046146	012605				MOV	(SP)+,F
MOVSPE	046150	012604				MOV	(SP)+,E
MOVSPD	046152	012603				MOV	(SP)+,D
SKPRETSKPRET	046154	104000				SKPRET
					
					;GET NEXT CHARACTER IN B
					;SKIP UNLESS NO MORE CHARS
.CNXTDTSTA	046156	005710			.CNXTD:	TST	(A)	;IS THERE MORE NUMBER LEFT
BEQ.CLNR	046160	001414				BEQ	.CLNR	;RTS PC
CLRA	046162	005040				CLR	-(A)	;CLEAR REMAINDER
MOVDA	046164	010340				MOV	D,-(A)	;DIVIDE BY 10.
TSTA	046166	005720				TST	(A)+
MOVAB	046170	012001				MOV	(A)+,B	;REMAINDER IS NEXT DIGIT
ADDB	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 181
	EVAL 336	PAGE 26.1 	CONVERSION ROUTINES

	046172	062701	000060			ADD	#60,B	;CONVERT TO ASCII
SKPRETSKPRET	046176	104000				SKPRET
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 182
	EVAL 336	PAGE 27 	CONVERSION ROUTINES

					
					;MORE CONVERSION ROUTINES
					
CNVTOPCLN2SN		000112			CLN2SN==<.-CNVTOP>/2
					;CONVERT LNUM TO SNUM.  RETURN NUMBER IN B
.CLNSNJSRPC.LOAD	046200	004767	005362		.CLNSN:	JSR	PC,.LOAD
CMPASNUM	046204	020027	120000			CMP	A,#SNUM
BEQ.CLNS1	046210	001401				BEQ	.CLNS1
.CLNRRTSPC	046212	000207			.CLNR:	RTS	PC	;CAN'T CONVERT IF LNUM HAS MORE THAN ONE NODE
.CLNS1SKPRETSKPRET	046214	104000			.CLNS1:	SKPRET
					
CNVTOPCLN2LS		000121			CLN2LS==<.-CNVTOP>/2
					;CONVERT LNUM TO LSTR
.CLNLS					.CLNLS:		;CONVERT LNUM TO LSTR
JSRPC.CLNSN	046216	004767	177756			JSR	PC,.CLNSN	;FOR NOW, CAN ONLY CONVERT
RTSPC	046222	000207				RTS	PC	;IF LNUM HAS ONE NODE
JMP.CSNLS	046224	000167	177556			JMP	.CSNLS	;(WHICH MUST BE CHANGED SOMEDAY)
					
CNVTOPCLS2SN		000126			CLS2SN==<.-CNVTOP>/2
					;CONVERT LSTR TO SNUM
.CLSSNBITB	046230	032701	007777		.CLSSN:	BIT	#7777,B	;IS B EMPTY
BEQ.CLNR	046234	001766				BEQ	.CLNR	;CAN'T CONVERT EMPTY
MOVDSP	046236	010346				MOV	D,-(SP)
MOVESP	046240	010446				MOV	E,-(SP)
MOVFSP	046242	010546				MOV	F,-(SP)
MOVBGCP1	046244	010167	135244			MOV	B,GCP1	;POINT TO INPUT. (GETS CLEARED AT .RDEF & .SRDEF)
					
MOVBC	046250	010102				MOV	B,C
MOVINSTR1SP	046252	012746	043146			MOV	#INSTR1,-(SP)	;ADD. OF CO-ROUTINE
CLRB	046256	005001				CLR	B
MOVE	046260	012704	000012			MOV	#10.,E
MOVMQF	046264	012705	177304			MOV	#MQ,F
CLRF	046270	005015				CLR	(F)	;ZERO AC AND MQ
					
.CLSS0TSTF	046272	005725			.CLSS0:	TST	(F)+	;POINT TO MULTIPLY
.CLSS1JSRPCSP	046274	004736			.CLSS1:	JSR	PC,@(SP)+	;OUTPUTS CHAR IN D
BEQ.CLSS9	046276	001432				BEQ	.CLSS9
TSTB	046300	005701				TST	B	;IF NOT THE FIRST CHARACTER,
BNE.CNXN2	046302	001011				BNE	.CNXN2	;BRANCH.
INCB	046304	005201				INC	B	;1
CMPBD	046306	120327	000055			CMPB	D,#55	;IS CHARACTER MINUS?
BNE.CNXN1	046312	001002				BNE	.CNXN1
NEGB	046314	005401				NEG	B	;-1 (MUST BE EXACTLY -1 FOR LATER USE)
BR.CLSS1	046316	000766				BR	.CLSS1
					
.CNXN1CMPBD	046320	120327	000053		.CNXN1:	CMPB	D,#53	;PLUS?
BEQ.CLSS1	046324	001763				BEQ	.CLSS1	;(REMEMBER THAT D=1)
					
.CNXN2SUBD	046326	162703	000060		.CNXN2:	SUB	#60,D	;CONVERT ASCII TO BINARY
BLT.CNXN9	046332	002411				BLT	.CNXN9
CMPBDE	046334	120304				CMPB	D,E	;COMPARE TO 10.
BGE.CNXN9	046336	002007				BGE	.CNXN9
MOVEF	046340	010415				MOV	E,(F)	;MULTIPLY MQ BY 10.
BITBSIPRBTEAESR	046342	132767	000002	130741		BITB	#SIPRBT,EAESR	;TEST SINGLE PRECISION BIT
BEQ.CNXN9	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 183
	EVAL 336	PAGE 27.1 	CONVERSION ROUTINES

	046350	001402				BEQ	.CNXN9	;ANSWER NO LONGER SINGLE PRECISION
ADDDF	046352	060345				ADD	D,-(F)	;ADD NEW NUMBER TO MQ
BR.CLSS0	046354	000746				BR	.CLSS0
					
.CNXN9TSTSP	046356	005726			.CNXN9:	TST	(SP)+	;POP OFF ADDRESS OF CO-ROUTINE
JMP.RDEF	046360	000167	174534			JMP	.RDEF	;RESTORE D,E,F
					
.CLSS9MOVBF	046364	010115			.CLSS9:	MOV	B,(F)	;END OF STRING.  MULTIPLY BY 1 OR -1
MOVFB	046366	014501				MOV	-(F),B	;PICK NUMBER OUT OF EAE
JMP.SRDEF	046370	000167	177546			JMP	.SRDEF	;RESTORE D,E,F AND SKPRET
					
CNVTOPCLS2LN		000210			CLS2LN==<.-CNVTOP>/2
					;CONVERT LSTR TO LNUM
					;FOR NOW ONLY WORKS IF NUMBER LESS THAN 16 BITS
.CLSLNJSRPC.CLSSN	046374	004767	177630		.CLSLN:	JSR	PC,.CLSSN	;CONVERT TO SNUM
RTSPC	046400	000207				RTS	PC
JMP.CSNLN	046402	000167	177360			JMP	.CSNLN
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 184
	EVAL 336	PAGE 28 	CONVERSION ROUTINES

					
					
					;THE DISPATCH TABLE FOR CONVERT
					
CNVTBL					CNVTBL:
.BYTECNVNOP	046406	   001				.BYTE CNVNOP	;SNAP TO SNAP
REPT1					REPT1 7,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.BYTE.BYTE.BYTE.BYTE.BYTE.LIST					
REPT1					REPT1 2,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.LIST.BYTE	046420	   000				.BYTE 0	;ATOM TO SNUM
.BYTE	046421	   000				.BYTE 0	;ATOM TO LNUM
.BYTECA2LS	046422	   002				.BYTE CA2LS	;ATOM TO LSTR
REPT1					REPT1 3,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.BYTE.LIST					
REPT1					REPT1 2,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.LIST.BYTECNVNOP	046430	   001				.BYTE CNVNOP	;SNUM TO SNUM
.BYTECSN2LN	046431	   005				.BYTE CSN2LN	;SNUM TO LNUM
.BYTECSN2LS	046432	   015				.BYTE CSN2LS	;SNUM TO LSTR
REPT1					REPT1 3,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.BYTE.LIST					
REPT1					REPT1 2,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.LIST.BYTECLN2SN	046440	   112				.BYTE CLN2SN	;LNUM TO SNUM
.BYTECNVNOP	046441	   001				.BYTE CNVNOP	;LNUM TO LNUM
.BYTECLN2LS	046442	   121				.BYTE CLN2LS	;LNUM TO LSTR
REPT1					REPT1 3,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.BYTE.LIST					
REPT1					REPT1 2,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.LIST.BYTECLS2SN	046450	   126				.BYTE CLS2SN	;LSTR TO SNUM
.BYTECLS2LN	046451	   210				.BYTE CLS2LN	;LSTR TO LNUM
.BYTECNVNOP	046452	   001				.BYTE CNVNOP	;LSTR TO LSTR
REPT1					REPT1 3,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.BYTE.LIST					
REPT1					REPT1 8.,^\.BYTE 0\	;NOT USED AT THIS TIME (RNUM TO ANYTHING)
.XLIST.REPT.BYTE.BYTE.BYTE.BYTE.BYTE.BYTE.BYTE.BYTE.LIST					
REPT1					REPT1 6,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.BYTE.BYTE.BYTE.BYTE.LIST.BYTECNVNOP	046474	   001				.BYTE CNVNOP	;SENT TO SENT
REPT1					REPT1 1,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.LIST					
REPT1					REPT1 7,^\.BYTE 0\	;NOT USED AT THIS TIME
.XLIST.REPT.BYTE.BYTE.BYTE.BYTE.BYTE.BYTE.BYTE.LIST.BYTECNVNOP	046505	   001				.BYTE CNVNOP	;LIST TO LIST
					
.EVEN		046506				.EVEN
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 185
	EVAL 336	PAGE 29 	CONVERSION ROUTINES

					
.STITL						.STITL GET ARGUMENT ROUTINES
					
					;GET 2 SNUM'S OFF OF S PDL
					;RETURN TOP ONE IN A, BOTTOM ONE IN B
G2NARGJSRPCG1NARG	046506	004767	000002		G2NARG:	JSR	PC,G1NARG	;NUMBER IN B
MOVBA	046512	010100				MOV	B,A
					
					;GET 1 SNUM OFF OF S PDL
					;RETURN IT IN B
G1NARGPOPS					G1NARG:	POPS B
MOVSBJSRPCSPOPTG1NAR1MOVASP	046524	010046			G1NAR1:	MOV	A,-(SP)	;ENTER HERE WITH ARG IN B
MOVSNUMA	046526	012700	120000			MOV	#SNUM,A
JSRPCCONVER	046532	004767	177112			JSR	PC,CONVERT
G1WTAERRORERRORWTAB	046536	104450			G1WTA:	ERROR+WTAB	;WRONG TYPE OF ARG
MOVSPA	046540	012600				MOV	(SP)+,A
G1RETRTSPC	046542	000207			G1RET:	RTS	PC
					
					;GET ONE LIST OR WORD ARG
					;SKIP IF WORD
GLWARGMOVSB	046544	017701	134660		GLWARG:	MOV	@S,B	;DON'T POP ARG.  LEAVE IT GC PROTECTED
GLWAR1MOVLSTRA	046550	012700	140000		GLWAR1:	MOV	#LSTR,A
JSRPCCONVER	046554	004767	177070			JSR	PC,CONVERT
BRGSW1	046560	000401				BR	GSW1	;NOT WORD
SKPRETSKPRET	046562	104000				SKPRET
GSW1CMPASENT	046564	020027	170000		GSW1:	CMP	A,#SENT
BNEG1WTA	046570	001362				BNE	G1WTA	;NOT SENTENCE EITHER
GSW2RTSPC	046572	000207			GSW2:	RTS	PC
					
					;GET ONE LIST OR WORD.  ERRROR IF EMPTY
GLWANEMOVSB	046574	017701	134630		GLWANE:	MOV	@S,B
BITB	046600	032701	007777			BIT	#7777,B
BEQG1WTA	046604	001754				BEQ	G1WTA
BRGLWAR1	046606	000760				BR	GLWAR1
					
					;RETURN ONE NUMERIC ARGUMENT
					;CALL WITH SNUM IN B
R1INTJSRPCGETINT	046610	004767	012044		R1INT:	JSR	PC,GETINT
R1NARGMOVORTBSP	046614	012746	050104		R1NARG:	MOV	#ORTB,-(SP)	;ENTER HERE FROM LOGO
P1NARGJSRPC.CSNLN	046620	004767	177142		P1NARG:	JSR	PC,.CSNLN	;CONVERT SNUM TO LNUM
NOP						NOP 1
.XLIST.IFGBRNOP.XLIST.IFG.LIST.LISTRTSPC	046626	000207				RTS	PC
					
PSHINTJSRPCGETINT	046630	004767	012024		PSHINT:	JSR	PC,GETINT
					;PUSH A NUMBER ONTO THE S-PDL
PSHNUMJSRPC.CSNLN	046634	004767	177126		PSHNUM:	JSR	PC,.CSNLN
NOP						NOP 1
.XLIST.IFGBRNOP.XLIST.IFG.LIST.LISTSPUSHS						SPUSHS	B
SUBSMOVBSRTSPC	046654	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 186
	EVAL 336	PAGE 30 	GET ARGUMENT ROUTINES

					
					
					;GET 1 SNAP
					;	RETURN POINTER TO SNAP IN D, DELTA X IN E, DELTA Y IN F
G1SNAPMOVSC	046656	017702	134546		G1SNAP:	MOV	@S,C	;POINTER TO ARG
BITC	046662	032702	007777			BIT	#7777,C	;IS IT EMPTY?
BEQG1RET	046666	001725				BEQ	G1RET	;YES. RETURN WITHOUT SKIPPING
JSRPCLD3NUM	046670	004767	000002			JSR	PC,LD3NUM	;LOAD D,E,F
SKPRETSKPRET	046674	104000				SKPRET
					
					
					;LOAD 3 NUMBERS
					;	GROVEL DOWN A LIST OF NUMBERS RETURNING 3 NUMBERS IN D,E,F
					;	CALL WITH C POINTING TO LIST
					;	IF LIST CONTAINS 1)NON-NUMBERS OR 2)MORE THAN 3 ELEMENTS,
					;	THEN ERROR+WTA
LD3NUMPUSH					LD3NUM:	PUSH	A
MOVAPJSRPCPPUSHTSPUSH						SPUSH	B
MOVBPSPUSH						SPUSH	C
MOVCPMOVD	046710	012703	007777			MOV	#7777,D	;AN OFT USED CONSTANT
MOVF	046714	012705	000003			MOV	#3,F	;COUNTER
LDN.LBITDC	046720	030302			LDN.L:	BIT	D,C	;IS THERE MORE LIST?
BEQLDN.E	046722	001407				BEQ	LDN.E	;ERROR
JSRPC.LDP2I	046724	004767	004770			JSR	PC,.LDP2I	;LOAD A WITH NEXT ELEMENT
MOVAB	046730	010001				MOV	A,B
MOVSNUMA	046732	012700	120000			MOV	#SNUM,A
JSRPCCONVER	046736	004767	176706			JSR	PC,CONVERT
LDN.EERRORERRORWTA	046742	104446			LDN.E:	ERROR+WTA
SPUSH						SPUSH	B	;PUSH THIS ELEMENT
MOVBPDECF	046746	005305				DEC	F
BGTLDN.L	046750	003363				BGT	LDN.L	;LOOP BACK
BITDC	046752	030302				BIT	D,C	;IS THE LIST FINISHED?
BNELDN.E	046754	001372				BNE	LDN.E	;NO. ERROR
JMPRETF	046756	000167	176506			JMP	RETF	;SKIP RETURN AND RESTORE ALL AC'S!
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 187
	EVAL 336	PAGE 31 	EVAL

						.STITL EVAL
HALTEVBUG		000000				EVBUG=HALT
					
EVALJSRPCGNT	046762	004767	151034		EVAL:	JSR PC,GNT
JSRPCSTRACE	046766	004767	167172			JSR PC,STRACE
BICA	046772	042700	007777			BIC #7777,A
CMPAUFUN	046776	020027	020000			CMP A,#UFUN
BLOSEVFUN	047002	101521				BLOS EVFUN
CMPAUVAR	047004	020027	030000			CMP A,#UVAR
BEQEVVAR	047010	001421				BEQ EVVAR
CMPASSTR	047012	020027	070000			CMP A,#SSTR
BHIS	047016	103001				BHIS .+4
EVBUGEVBUG	047020	000000				EVBUG
CMPAATOM	047022	020027	110000			CMP A,#ATOM
BEQEVATM	047026	001404				BEQ EVATM
CMPARNUM	047030	020027	150000			CMP A,#RNUM
BNEEVCON	047034	001001				BNE EVCON
EVBUGEVBUG	047036	000000				EVBUG
EVCON					EVCON:
EVATMPUSHS					EVATM:	PUSHS CT+2
JSRPCSPUSHTMOVCTSBREVI	047052	000411				BR EVI
EVVARBICA	047054	042700	007777		EVVAR:	BIC #7777,A
JSRPC.BINDL	047060	004767	004660			JSR PC,.BINDL
ERRORERRORHNV	047064	104410				ERROR+HNV	;... HAS NO VALUE
PUSHS						PUSHS B
JSRPCSPUSHTMOVBSEVIJSRPCGNT	047076	004767	150720		EVI:	JSR PC,GNT	;ABOUT TO OUTPUT A VLAUE.  BEFORE WE DO, CHECK TO SEE IF
								;NEXT TOKEN IS INFIX WHICH SHOULD GOBBLE IT.
BICA	047102	042700	007777			BIC #7777,A	;IS NEXT TOKEN INFIX?
CMPINFIXA	047106	022700	010000			CMP #INFIX,A
BEQCKPRCD	047112	001410				BEQ CKPRCD	;YES
EVI1BISRTFFLAGS	047114	052737	000002	003544	EVI1:	BIS #RTF,@#FLAGS	;SET REPEAT TOKEN FLAG
BICCRFFLAGS	047122	042767	000004	134414		BIC #CRF,FLAGS
JMPSRET	047130	000167	001056			JMP SRET
CKPRCDTSTCO	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 188
	EVAL 336	PAGE 32 	EVAL

	047134	005767	134414		CKPRCD:	TST CO+2	;COMPARE PRECEDENCE
BEQEVI2	047140	001407				BEQ EVI2
MOVCTA	047142	017700	134422			MOV @CT+2,A
BICA	047146	042700	007777			BIC #7777,A
CMPACOF	047152	020067	134402			CMP A,COF
BLOSEVI1	047156	101756				BLOS EVI1	;PRECD OF CO IS >= PRECD OF NEXT OPR
							;NEXT TOKEN SHOULD GOBBLE THIS OUTPUT
EVI2JSRPCSTRACE	047160	004767	167000		EVI2:	JSR PC,STRACE
PUSH						PUSH CO
MOVCOPJSRPCPPUSHTSPUSH						SPUSH CO+2
MOVCOPSPUSH						SPUSH NOR
MOVNORPMOVCTCO	047204	016767	134356	134340		MOV CT,CO
MOVCTCO	047212	016767	134352	134334		MOV CT+2,CO+2
MOVCOCOF	047220	017767	134330	134332		MOV @CO+2,COF	;GET FLAGS
JSRPCCKTYP	047226	004767	000760			JSR PC,CKTYP
ERRORERRORWTA	047232	104446				ERROR+WTA	;WRONG TYPE OF ARG
MOVNOR	047234	012767	000001	134314		MOV #1,NOR
JMPEVW	047242	000167	000404			JMP EVW
EVFUNBITCRFFLAGS	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 189
	EVAL 336	PAGE 33 	EVAL

	047246	032767	000004	134270	EVFUN:	BIT #CRF,FLAGS	;CT IS A FUNCTION
BEQ	047254	001401				BEQ .+4
ERRORERRORUEL	047256	104442				ERROR+UEL	;UNEXPECTED END OF LINE
CMP$LPARCT	047260	022767	006026	134302		CMP #$LPAR,CT+2
BNEEVF1	047266	001012				BNE EVF1
TSTCO	047270	005767	134260			TST CO+2
BEQEVF11	047274	001404				BEQ EVF11
CMP$LLPARCO	047276	022767	006012	134250		CMP #$LLPAR,CO+2
BNEEVF1	047304	001003				BNE EVF1
EVF11MOV$LLPARCT	047306	012767	006012	134254	EVF11:	MOV #$LLPAR,CT+2
EVF1PUSH					EVF1:	PUSH CO
MOVCOPJSRPCPPUSHTSPUSH						SPUSH CO+2
MOVCOPSPUSH						SPUSH NOR
MOVNORPMOVCTCO	047334	016767	134226	134210		MOV CT,CO
MOVCTCO	047342	016767	134222	134204		MOV CT+2,CO+2
CMPAUFUN	047350	020027	020000			CMP A,#UFUN	;IS IT A  USER FUNCTION?
BLOMFUN	047354	103414				BLO MFUN	;NO, MACHINE
EVF2MOVCOF	047356	012767	040000	134174	EVF2:	MOV #40000,COF	;SET PRECD TO 2
JSRPCGNASN	047364	004767	004126			JSR PC,GNASN	;GET NO. OF ARGS IN B
ERRORERRORHNM	047370	104407				ERROR+HNM	;... HAS NO MEANING
MOVBBB	047372	110101				MOVB B,B	;CLEAR ANY LEFT HALF FLAGS
MOVBNOR	047374	010167	134156			MOV B,NOR
BNEEVL1	047400	001110				BNE EVL1
EVXPJMPPEVAL	047402	000167	000746		EVXP:	JMP PEVAL	;SET TO EVALUATE THIS USER PROCEDURE
							;PEVAL RETURNS TO "NORT" IF THERE WAS NO OUTPUT
							;GOES TO "ORT:" IF THERE WAS
MFUNMOVCOA	047406	017700	134142		MFUN:	MOV @CO+2,A	;GET FLAGS FOR THIS MACHINE PROCEDURE
MOVACOF	047412	010067	134142			MOV A,COF
SWABA	047416	000300				SWAB A
BICA	047420	042700	177774			BIC #177774,A
MOVANOR	047424	010067	134126			MOV A,NOR
BNEEVS	047430	001036				BNE EVS	;IS  NO. ARGS = 0?
EVXMJMPMEVAL	047432	000167	000702		EVXM:	JMP MEVAL	;YES.  EXECUTE THIS MACHINE PROCEDURE
NORTMOVEVDNOA	047436	012700	047524		NORT:	MOV #EVDNO,A
NORT1MOVCOLO	047442	016767	134106	134114	NORT1:	MOV CO+2,LO+2
MOVCOLO	047450	016767	134076	134104		MOV CO,LO
POP						POP NOR
MOVPNORJSRPCPPOPTSPOP						SPOP B
MOVPBMOVBCO	047470	010167	134060			MOV B,CO+2
SPOP						SPOP CO
MOVPCOCLRCOF	047500	005067	134054			CLR COF
TSTB	047504	005701				TST B
BEQNORT2	047506	001405				BEQ NORT2
BITB	047510	032701	170000			BIT #170000,B	;IS IT A UFUN
BNENORT2	047514	001002				BNE NORT2
MOVBCOF	047516	011167	134036			MOV @B,COF
NORT2JMPA	047522	000110			NORT2:	JMP @A
EVDNORTSPC	047524	000207			EVDNO:	RTS PC
EVSBITCOFINFIX	047526	036727	134026	010000	EVS:	BIT COF,#INFIX	;IS CO INFIX OP
BEQEVL	047534	001420				BEQ EVL	;NO
JSRPCCKUI	047536	004767	000472			JSR PC,CKUI	;CHECK FOR VALID UNARY INFIX +,-
ERRORERRORINF1	047542	104412				ERROR+INF1	;INFIX IN WRONG PLACE
BREVW	047544	000442				BR EVW
PROCJSRPCGUOEB	047546	004767	173664		PROC:	JSR PC,GUOEB	;PEVAL INVOKED VIA "#"
ERRORERRORHNM	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 190
	EVAL 336	PAGE 33.1 	EVAL

	047552	104407				ERROR+HNM	;HAS NO MEANING
CLRTOPS	047554	005067	133730			CLR TOPS
MOVUFUNCO	047560	012767	020000	133764		MOV #UFUN,CO
MOVBCO	047566	010167	133762			MOV B,CO+2
JMPEVF2	047572	000167	177560			JMP EVF2
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 191
	EVAL 336	PAGE 34 	EVAL

					
EVLBITPTLPFFLAGS	047576	032767	000001	133740	EVL:	BIT #PTLPF,FLAGS	;WAS PREVIOUS TOKEN A LEFT PAREN
BEQEVL1	047604	001406				BEQ EVL1
BITVNAFCOF	047606	032767	002000	133744		BIT #VNAF,COF
BEQEVL1	047614	001402				BEQ EVL1
CLRNOR	047616	005067	133734			CLR NOR
EVL1JSRPCGNT	047622	004767	150174		EVL1:	JSR PC,GNT
CMP$OFCT	047626	022767	005210	133734		CMP #$OF,CT+2
BEQEVW	047634	001406				BEQ EVW
EVW1BISRTFFLAGS	047636	052767	000002	133700	EVW1:	BIS #RTF,FLAGS	;SET RTF
BICCRFFLAGS	047644	042767	000004	133672		BIC #CRF,FLAGS
EVWJSRPCEVAL	047652	004767	177104		EVW:	JSR PC,EVAL
BREVW2	047656	000455				BR EVW2
JSRPCCKTYP	047660	004767	000326			JSR PC,CKTYP
ERRORERRORWTA	047664	104446				ERROR+WTA	;WRONG TYPE
DECNOR	047666	005367	133664			DEC NOR
BEQEVX	047672	001427				BEQ EVX	;WHEN NOR = 0, WE'VE ENUF INPUTS
JSRPCGNT	047674	004767	150122			JSR PC,GNT
CMP$ANDCT	047700	022767	004324	133662		CMP #$AND,CT+2	;SKIP NEXT TOKEN IF IT IS "AND"
BEQEVW	047706	001761				BEQ EVW
TSTNOR	047710	005767	133642			TST NOR	;IF NOR < 0 AND NEXT TOKEN IS ")" THEN THE ")" 
BGEEVW1	047714	002350				BGE EVW1	;TERMINATES THE ARG SCAN FOR THE CO
CMP$RPARCT	047716	022767	006034	133644		CMP #$RPAR,CT+2
BNEEVW1	047724	001344				BNE EVW1
BISRTFFLAGS	047726	052767	000002	133610		BIS #RTF,FLAGS
BICCRFFLAGS	047734	042767	000004	133602		BIC #CRF,FLAGS
NEGNOR	047742	005467	133610			NEG NOR
JMPMEVALN	047746	000167	000356			JMP MEVALN
EVXBITCO	047752	032767	160000	133572	EVX:	BIT #160000,CO	;IS IT A MACHINE PROCEDURE
BNEEVXP	047760	001210				BNE EVXP	;NO
BITVNAFCOF	047762	032767	002000	133570		BIT #VNAF,COF	;MACHINE PROC NOW HAS ITS "STD" NO. OF ARGS.
							;IF IT CAN TAKE A VARIABLE NO., THEN THE "STD" NO. HAS TO 
							;BE PUSHED ON P
BEQMEVAL	047770	001563				BEQ MEVAL
MOVCOFA	047772	016700	133562			MOV COF,A
SWABA	047776	000300				SWAB A
BICA	050000	042700	177774			BIC #177774,A
MOVANOR	050004	010067	133546			MOV A,NOR
BRMEVALN	050010	000547				BR MEVALN
EVW2CMP$LLPARCO	050012	022767	006012	133534	EVW2:	CMP #$LLPAR,CO+2	;EVAL SHOULD OUTPUT WHEN NOT AT TOP LEVEL
BEQLLPAR	050020	001401				BEQ LLPAR	;EXCEPT WHEN CO IS LLPAR
ERRORERRORNOU	050022	104421				ERROR+NOU	;WHAT, NO OUTPUT??!!
LLPARJSRPCGNT	050024	004767	147772		LLPAR:	JSR PC,GNT
CMP$RPARCT	050030	022767	006034	133532		CMP #$RPAR,CT+2
BNEEVW1	050036	001277				BNE EVW1
JMPNORT	050040	000167	177372			JMP NORT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 192
	EVAL 336	PAGE 35 	EVAL

					
ORTNASPUSH					ORTNA:	SPUSH A
MOVAPBRORTNP	050046	000411				BR	ORTNP
ORTNBSPUSH					ORTNB:	SPUSH B
MOVBPBRORTNP	050052	000407				BR	ORTNP
ORTNCSPUSH					ORTNC:	SPUSH C
MOVCPBRORTNP	050056	000405				BR	ORTNP
ORTNDSPUSH					ORTND:	SPUSH D
MOVDPBRORTNP	050062	000403				BR	ORTNP
ORTNESPUSH					ORTNE:	SPUSH E
MOVEPBRORTNP	050066	000401				BR	ORTNP
ORTNFSPUSH					ORTNF:	SPUSH F
MOVFPORTNPMOVSPS	050072	012677	133332		ORTNP:	MOV	(SP)+,@S
BRORT	050076	000417				BR	ORT
					
					
ORTASPUSH					ORTA:	SPUSH A
MOVAPBRORTSP	050102	000411				BR	ORTSP
ORTBSPUSH					ORTB:	SPUSH B
MOVBPBRORTSP	050106	000407				BR	ORTSP
ORTCSPUSH					ORTC:	SPUSH C
MOVCPBRORTSP	050112	000405				BR	ORTSP
ORTDSPUSH					ORTD:	SPUSH D
MOVDPBRORTSP	050116	000403				BR	ORTSP
ORTESPUSH					ORTE:	SPUSH E
MOVEPBRORTSP	050122	000401				BR	ORTSP
ORTFSPUSH					ORTF:	SPUSH F
MOVFPORTP		050126			ORTP==.
ORTSPPUSHS					ORTSP:	PUSHS	(SP)+
JSRPCSPUSHTMOVSPSORTMOVEVIA	050136	012700	047076		ORT:	MOV #EVI,A
JMPNORT1	050142	000167	177274			JMP NORT1
SRETFPOP					SRETF:	POP F
MOVPFJSRPCPPOPTSRETEPOP					SRETE:	POP E
MOVPEJSRPCPPOPTSRETDPOP					SRETD:	POP D
MOVPDJSRPCPPOPTSRETCPOP					SRETC:	POP C
MOVPCJSRPCPPOPTSRETBPOP					SRETB:	POP B
MOVPBJSRPCPPOPTSRETAPOP					SRETA:	POP A	;POP A THEN SKIP RETURN
MOVPAJSRPCPPOPTCKTYP					CKTYP:
SRET					SRET:
CMPP	050212	022776	000200	000000		CMP #200,@0(P)	;SKIP RETURN. IS NEXT INST A 'JMP' OR HALT
BLOS	050220	101402				BLOS .+6
ADDP	050222	062716	000002			ADD #2,@P	;YES, SKIP 2 EXTRA
ADDP	050226	062716	000002			ADD #2,@P
RTSPC	050232	000207				RTS PC
CKUIPUSH					CKUI:	PUSH A
MOVAPJSRPCPPUSHTMOVCOA	050242	016700	133306			MOV CO+2,A
CMPA$PLUS	050246	020027	006050			CMP A,#$PLUS	;+
BNECKUI1	050252	001013				BNE CKUI1
MOV$UPLUSCO	050254	012767	006056	133272		MOV #$UPLUS,CO+2
CKUI0MOVCOCOF	050262	017767	133266	133270	CKUI0:	MOV @CO+2,COF
MOVNOR	050270	012767	000001	133260		MOV #1,NOR
JMPSRETA	050276	000167	177702			JMP SRETA
CKUI1CMPA$MINUS	050302	020027	006066		CKUI1:	CMP A,#$MINUS	;-
BNECKUI2	050306	001004				BNE CKUI2
MOV$UMINSCO	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 193
	EVAL 336	PAGE 35.1 	EVAL

	050310	012767	006074	133236		MOV #$UMINS,CO+2
BRCKUI0	050316	000761				BR CKUI0
CKUI2POP					CKUI2:	POP A
MOVPAJSRPCPPOPTRTSPC	050326	000207				RTS PC
MEVALNPUSH					MEVALN:	PUSH NOR
MOVNORPJSRPCPPUSHTMEVALMOVCOA	050340	016700	133210		MEVAL:	MOV CO+2,A	;GET SOE POINTER
CLRNBKTS	050344	005067	133262			CLR NBKTS
JMPA	050350	000170	000002			JMP @2(A)	;JMP ADDR IS IN 2ND WORD
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 194
	EVAL 336	PAGE 36 	PROCEDURE EVALUATOR

						.STITL PROCEDURE EVALUATOR
PEVALMOVCOB	050354	016701	133174		PEVAL:	MOV CO+2,B	;FIRST CHECK IF PROC IS THERE
JSRPC.BINDF	050360	004767	003566			JSR PC,.BINDF
ERRORERRORHNM	050364	104407				ERROR+HNM	;PROCEDURE HAS NO MEANING
PUSH						PUSH CPP		;PUSH THE WORLD!
MOVCPPPJSRPCPPUSHTSPUSH						SPUSH CPSN
MOVCPSNPSPUSH						SPUSH CLN
MOVCLNPSPUSH						SPUSH CLP
MOVCLPPSPUSH						SPUSH CLGN
MOVCLGNPSPUSH						SPUSH CTN
MOVCTNPPUSH						PUSH CTP
MOVCTPPJSRPCPPUSHTSPUSH						SPUSH FLAGS
MOVFLAGSPSPUSH						SPUSH CO
MOVCOPSPUSH						SPUSH CO+2
MOVCOPSPUSH						SPUSH IFLEV
MOVIFLEVP						;GET ARG LIST - PUT UOE POINTERS AND VALUES FROM THERE ON S
MOVBC	050452	010102				MOV B,C	;SAVE PTR TO LLP
MOVCOB	050454	016701	133074			MOV CO+2,B
JSRPCGNASN	050460	004767	003032			JSR PC,GNASN	;GET FLAGS,,#ARGS
HALT	050464	000000				HALT
HALT	050466	000000				HALT
MOVBFLAGS	050470	010167	133050			MOV B,FLAGS
MOVBBB	050474	110101				MOVB B,B
SPUSH						SPUSH B
MOVBPBICTPTFFLAGS	050500	042767	177377	133036		BIC #-TPTF-1,FLAGS
BEQPEV6	050506	001423				BEQ PEV6
MOVCOB	050510	016701	133040			MOV CO+2,B
INCFUNLEV	050514	005267	133020			INC FUNLEV
JSRPCTINDNT	050520	004767	000444			JSR PC,TINDNT
DECFUNLEV	050524	005367	133010			DEC FUNLEV
JSRPCPPNAME	050530	004767	164216			JSR PC,PPNAME
PRTXT						PRTXT ^\'S INPUTS: \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTMOVPB	050554	011601				MOV @P,B
PEV6SPUSH					PEV6:	SPUSH C	;SAVE FOR BELOW
MOVCPMOVBD	050560	010103				MOV B,D
BEQPEV2	050562	001470				BEQ PEV2
JSRPC.LOADC	050564	004767	002774			JSR PC,.LOADC
JSRPC.LOAD	050570	004767	002772			JSR PC,.LOAD
SPUSH						SPUSH A	;SAV PTR TO REST OF LLP
MOVAPSPUSH						SPUSH B	;FOR REVS
MOVBPJSRPCREVS	050600	004767	174742			JSR PC,REVS
JSRPCPUSHSN	050604	004767	000300			JSR PC,PUSHSN	;PUSH S BY (B) WORDS
MOVSD	050610	016703	132614			MOV S,D
SPOP						SPOP B	;REVS DOESNT POP
MOVPBMOVDE	050616	010304				MOV D,E
ASLB	050620	006301				ASL B
ADDBE	050622	060104				ADD B,E	;E POINTS TO FIRST ARG
MOVPB	050624	011601				MOV @P,B	;GET SAVED LLP PTR
PEV1BITTPTFFLAGS	050626	032767	000400	132710	PEV1:	BIT #TPTF,FLAGS
BEQPEV5	050634	001411				BEQ PEV5
MOVEB	050636	011401				MOV @E,B
MOVBA	050640	010100				MOV B,A
SPUSH						SPUSH D
MOVDPJSRPCPRTAB	050644	004767	164034			JSR PC,PRTAB
SPACE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 195
	EVAL 336	PAGE 36.1 	PROCEDURE EVALUATOR

						SPACE
JSRPC.SPACESPOP						SPOP D
MOVPDMOVPB	050656	011601				MOV @P,B
PEV5JSRPC.LOAD	050660	004767	002702		PEV5:	JSR PC,.LOAD
MOVAP	050664	010016				MOV A,@P
MOVBD	050666	010123				MOV B,(D)+	;SAVE UOE PTR
JSRPC.BNDVN	050670	004767	003326			JSR PC,.BNDVN	;NOW GET VARIB. BINDING
BRPEV3	050674	000477				BR PEV3	;NOT THERE
PEV4BITA	050676	032700	100000		PEV4:	BIT #100000,A	;IF OLD VALUE SWAPPED OUT, CLEAR TYPE FIELD
BEQ	050702	001402				BEQ .+6
BICB	050704	042701	170000			BIC #170000,B
MOVEA	050710	012400				MOV (E)+,A	;GET NEW VALUE PTR
MOVBD	050712	010123				MOV B,(D)+	;SAVE OLD VALUE PO[NTER
MOVAB	050714	010001				MOV A,B
JSRPC.LDP1	050716	004767	002752			JSR PC,.LDP1
BICA	050722	042700	100000			BIC #100000,A	;MAKE SURE BINDING NODE SAYS "VBIND"
JSRPC.STORE	050726	004767	002656			JSR PC,.STORE	;STORE NEW BINDING AWAY
MOVPB	050732	011601				MOV @P,B
BITB	050734	032701	007777			BIT #7777,B
BNEPEV1	050740	001332				BNE PEV1	;GO DO NEXT ARG
SPOP						SPOP C	;USED LLP POINTER
MOVPCPEV2SPOP					PEV2:	SPOP C	;PTR TO LLP THAT WAS SAVED WAY ABOVE
MOVPCSPUSH						SPUSH CSPDLP
MOVCSPDLPPMOVSCSPDLP	050752	016767	132452	132566		MOV S,CSPDLP
SUBSPRBAOCSPDLP	050760	166767	132460	132560		SUB SPRBAO,CSPDLP	;SPECIAL PDL RELATIVE BASE ADDR OFFSET
SPUSH						SPUSH CPDLP
MOVCPDLPPMOVPCPDLP	050772	010667	132552			MOV P,CPDLP
SUBPRBAOCPDLP	050776	166767	132454	132544		SUB PRBAO,CPDLP	;PDL RELATIVE BASE ADDR OFFSET
BISCPDLP	051004	052767	100000	132536		BIS #100000,CPDLP	;TO INDICATE PROC PUSH AS OPPOSED TO A LOCAL PUSH
MOVCOCPP	051012	016767	132536	132502		MOV CO+2,CPP
CLRCLN	051020	005067	132502			CLR CLN
MOVCCLP	051024	010267	132500			MOV C,CLP
MOVCPPB	051030	016701	132466			MOV CPP,B	;GET CPSN IN A
JSRPCGNASN	051034	004767	002456			JSR PC,GNASN
EVBUGEVBUG	051040	000000				EVBUG
HALT	051042	000000				HALT
MOVACPSN	051044	010067	132454			MOV A,CPSN
CLRCO	051050	005067	132476			CLR CO
CLRCO	051054	005067	132474			CLR CO+2
CLRIFLEV	051060	005067	132456			CLR IFLEV
INCFUNLEV	051064	005267	132450			INC FUNLEV
JMPMLOOP	051070	000167	145424			JMP MLOOP
PEV3MOVVBINDA	051074	012700	030000		PEV3:	MOV #VBIND,A
CLRB	051100	005001				CLR B
JSRPCGRBAD1	051102	004767	004204			JSR PC,GRBAD1
BRPEV4	051106	000673				BR PEV4
PUSHSNTSTB	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 196
	EVAL 336	PAGE 37 	PROCEDURE EVALUATOR

	051110	005701			PUSHSN:	TST B	;PUSH (B) EMPTY WORDS ONTO S
BGT	051112	003001				BGT .+4
RTSPC	051114	000207				RTS PC
PSN1PUSHS					PSN1:	PUSHS #0
JSRPCSPUSHTMOVSDECB	051130	005301				DEC B
BGTPSN1	051132	003371				BGT PSN1
RTSPC	051134	000207				RTS PC
PUSHNTSTB	051136	005701			PUSHN:	TST B	;PUSH (B) EMPTY WORDS ON P
BGT	051140	003001				BGT .+4
RTSPC	051142	000207				RTS PC
MOVPTEMP	051144	011667	132432			MOV @P,TEMP
PN1PUSH					PN1:	PUSH #0
MOVPJSRPCPPUSHTDECB	051160	005301				DEC B
BGTPN1	051162	003372				BGT PN1
JMPTEMP	051164	000177	132412			JMP @TEMP
TINDNTPUSH					TINDNT:	PUSH A	;TRACE INDENT
MOVAPJSRPCPPUSHTPRCR						PRCR
JSRPC.CRLFMOVFUNLEVA	051202	016700	132332			MOV FUNLEV,A
TIND2DECA	051206	005300			TIND2:	DEC A
BGTTIND1	051210	003002				BGT TIND1
JMPRETA	051212	000167	174310			JMP RETA
TIND1SPACE					TIND1:	SPACE
JSRPC.SPACEBRTIND2	051222	000771				BR TIND2
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 197
	EVAL 336	PAGE 38 	PROC EVAL - "OUTPUT" "STOP"

					.STITL PROC EVAL - "OUTPUT" "STOP"
PSTP30ERRORERROROIP	051224	104427			PSTP30:	ERROR+OIP	;ONLY IN PROCEDURE
PSTP35JMPPSTP33	051226	000167	000426		PSTP35:	JMP PSTP33
PSTP31MOVVBINDA	051232	012700	030000		PSTP31:	MOV #VBIND,A
POPS						POPS B
MOVSBJSRPCSPOPTTSTB	051246	005701				TST B	;IF OLD BINDING EMPTY, DONT BOTHER
BEQPSTP35	051250	001766				BEQ PSTP35
JSRPCGRBAD1	051252	004767	004034			JSR PC,GRBAD1
BRPSTP32	051256	000567				BR PSTP32
OUTPUTTSTFUNLEV	051260	005767	132254		OUTPUT:	TST FUNLEV
BLEPSTP30	051264	003757				BLE PSTP30
MOVORTPSTOPR	051266	012767	050136	132302		MOV #ORT,PSTOPR ;"OUTPUT"
POPS						POPS TOPS1	;SAVE THE OUTPUT
MOVSTOPS1JSRPCSPOPTBRPSTP10	051306	000410				BR PSTP10
STOP					STOP:
PSTOPTSTFUNLEV	051310	005767	132224		PSTOP:	TST FUNLEV
BLEPSTP30	051314	003743				BLE PSTP30
MOVNORTPSTOPR	051316	012767	047436	132252		MOV #NORT,PSTOPR	;"STOP" AND "END"
CLRTOPS1	051324	005067	132162			CLR TOPS1
PSTP10BITTPTFFLAGS	051330	032767	000400	132206	PSTP10:	BIT #TPTF,FLAGS
BEQPSTP14	051336	001433				BEQ PSTP14
JSRPCTINDNT	051340	004767	177624			JSR PC,TINDNT
MOVCPPB	051344	016701	132152			MOV CPP,B
JSRPCPPNAME	051350	004767	163376			JSR PC,PPNAME
MOVTOPS1B	051354	016701	132132			MOV TOPS1,B
BEQPSTP13	051360	001414				BEQ PSTP13
PRTXT						PRTXT ^\ OUTPUTS \
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTJSRPCPNODAB	051400	004767	163212			JSR PC,PNODAB	;USES A
SPACE						SPACE
JSRPC.SPACEBRPSTP14	051410	000406				BR PSTP14
PSTP13PRTXT					PSTP13:	PRTXT ^\ STOPS.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTPSTP14ADDP	051426	062706	000012		PSTP14:	ADD #12,P	;TO GET BACK IN PHASE
MOVCPDLPA	051432	016700	132112			MOV CPDLP,A
BICTF3TFLAGS	051436	042767	000400	132140		BIC #TF3,TFLAGS ;SAVE MODE OF PROC/LOCAL PUSH FLAG
BITA	051444	032700	100000			BIT #100000,A
BEQ	051450	001403				BEQ .+10
BISTF3TFLAGS	051452	052767	000400	132124		BIS #TF3,TFLAGS
BICA	051460	042700	100000			BIC #100000,A
BEQ	051464	001402				BEQ .+6
BISA	051466	052700	100000			BIS #100000,A
ADDPRBAOA	051472	066700	131760			ADD PRBAO,A
PSTP11CMPAP	051476	020006			PSTP11:	CMP A,P
BEQPSTOP1	051500	001406				BEQ PSTOP1
BGT	051502	003001				BGT .+4
HALT	051504	000000				HALT	;PDL SCREWED
POP						POP B
MOVPBJSRPCPPOPTBRPSTP11	051514	000770				BR PSTP11
PSTOP1POP					PSTOP1:	POP CPDLP	 ;RESTORE OLD CPDLP
MOVPCPDLPJSRPCPPOPTMOVCSPDLPA	051526	016700	132014			MOV CSPDLP,A
ADDSPRBAOA	051532	066700	131706			ADD SPRBAO,A
PSTP21CMPAS	051536	020067	131666		PSTP21:	CMP A,S
BEQPSTOP2	051542	001407				BEQ PSTOP2
BGT	051544	003001				BGT .+4
HALT	051546	000000				HALT	;SPECIAL PDL OUT OF PHASE
POPS	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 198
	EVAL 336	PAGE 38.1 	PROC EVAL - "OUTPUT" "STOP"

						POPS B
MOVSBJSRPCSPOPTBRPSTP21	051560	000766				BR PSTP21
PSTOP2SPOP					PSTOP2:	SPOP CSPDLP	;RESTORE OLD CSPDLP
MOVPCSPDLPSPOP						SPOP D	;# ARGS SAVED
MOVPDBEQPSTOP4	051570	001435				BEQ PSTOP4	;NO ARGS
PSTOP3POPS					PSTOP3:	POPS B	;GET NEXT UOE PTR
MOVSBJSRPCSPOPTJSRPC.BNDVN	051602	004767	002414			JSR PC,.BNDVN	;GET VARIB BINDING PTR
BRPSTP31	051606	000611				BR PSTP31	;NONE THERE
BITA	051610	032700	100000			BIT #100000,A	;IS IT SWAPPED OUT
BEQ	051614	001402				BEQ .+6	;NO
JSRPCDSVB	051616	004767	003434			JSR PC,DSVB	;YES, DELETE SWAPPED VARIB
POPS						POPS B	;GET OLD VARIB BINDING
MOVSBJSRPCSPOPTBICA	051632	042700	100000			BIC #100000,A
PSTP32TSTB	051636	005701			PSTP32:	TST B	;IF OLD PTR 0, SKIP SWAPPED TEST
BEQPSTP34	051640	001405				BEQ PSTP34
BITB	051642	032701	170000			BIT #170000,B	;IS OLD BINDING SWAPPED
BNEPSTP34	051646	001002				BNE PSTP34
BISA	051650	052700	100000			BIS #100000,A	;YES
PSTP34JSRPC.STORE	051654	004767	001730		PSTP34:	JSR PC,.STORE	;RESTORE OLD BINDING
PSTP33DECD	051660	005303			PSTP33:	DEC D
BGTPSTOP3	051662	003343				BGT PSTOP3
PSTOP4BITTF3TFLAGS	051664	032767	000400	131712	PSTOP4:	BIT #TF3,TFLAGS	;WAS IT A LOCAL PUSH OR PROC PUSH
BEQPSTOP	051672	001606				BEQ PSTOP	;LOCAL
CMPORTPSTOPR	051674	022767	050136	131674		CMP #ORT,PSTOPR	;WAS IT "OUTPUT"
BNEPSTP42	051702	001007				BNE PSTP42	;NO
PUSHS						PUSHS TOPS1	;PUT THE OUTPUT BACK ON S
JSRPCSPUSHTMOVTOPS1SCLRTOPS	051716	005067	131566			CLR TOPS
PSTP42POP					PSTP42:	POP IFLEV	;PROC, RESTORE REST OF WORLD
MOVPIFLEVJSRPCPPOPTSPOP						SPOP CO+2
MOVPCOSPOP						SPOP CO
MOVPCOSPOP						SPOP FLAGS
MOVPFLAGSSPOP						SPOP CTP
MOVPCTPSPOP						SPOP CTN
MOVPCTNSPOP						SPOP CLGN
MOVPCLGNPOP						POP CLP
MOVPCLPJSRPCPPOPTSPOP						SPOP CLN
MOVPCLNSPOP						SPOP CPSN
MOVPCPSNSPOP						SPOP CPP
MOVPCPPDECFUNLEV	052006	005367	131526			DEC FUNLEV	;IF AT TOP LEVEL, ALMOST DONE!
BLEPSTOP9	052012	003462				BLE PSTOP9
MOVCPPB	052014	016701	131502			MOV CPP,B
JSRPC.BINDF	052020	004767	002126			JSR PC,.BINDF	;MAKE SURE PROC IS IN
ERRORERRORPNH	052024	104434				ERROR+PNH	;PROCEDURE ... NOT HERE
MOVCPPB	052026	016701	131470			MOV CPP,B	;SEE IF PROC'S CPSN AGREE
JSRPCGNASN	052032	004767	001460			JSR PC,GNASN	;GET CPSN
EVBUGEVBUG	052036	000000				EVBUG	;IMPOSSIBLE!!!
HALT	052040	000000				HALT
MOVCLPC	052042	016702	131462			MOV CLP,C
BISTF3TFLAGS	052046	052767	000400	131530		BIS #TF3,TFLAGS
CMPACPSN	052054	020067	131444			CMP A,CPSN
BEQPSTP41	052060	001410				BEQ PSTP41	;OK
BICTF3TFLAGS	052062	042767	000400	131514		BIC #TF3,TFLAGS
MOVCLNB	052070	016701	131432			MOV CLN,B	;DON'T AGREE, GO RELOCATE LINE WE WERE IN
JSRPCGTLINE	052074	004767	001250			JSR PC,GTLINE
BRPSTOP5	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 199
	EVAL 336	PAGE 38.2 	PROC EVAL - "OUTPUT" "STOP"

	052100	000422				BR PSTOP5	;LINE NOT THERE
PSTP41MOVCCLP	052102	010267	131422		PSTP41:	MOV C,CLP
JSRPC.LOADC	052106	004767	001452			JSR PC,.LOADC	;GET LLP NODE
JSRPC.LOAD	052112	004767	001450			JSR PC,.LOAD	;GET LINE #
MOVAC	052116	010002				MOV A,C
JSRPC.LOADC	052120	004767	001440			JSR PC,.LOADC	;GET NEXT NODE-SEE IF SNUM (I.E. GEN NO.)
BICA	052124	042700	007777			BIC #7777,A
CMPSNUMA	052130	022700	120000			CMP #SNUM,A
BEQ	052134	001401				BEQ .+4
CLRB	052136	005001				CLR B	;NOT SNUM, SO SET GEN NO. TO 0
CMPBCLGN	052140	020167	131366			CMP B,CLGN	;ARE GEN #'S =?
BEQ	052144	001401				BEQ .+4
PSTOP5ERRORERRORLCE	052146	104415			PSTOP5:	ERROR+LCE	;NO, LINE CHANGED BY EDIT
BITTF3TFLAGS	052150	032767	000400	131426		BIT #TF3,TFLAGS	;IF PROC WASNT SWAPPED
BEQPSTOP8	052156	001404				BEQ PSTOP8	;THEN CTP IS GOOD
PSTOP9CLRD	052160	005003			PSTOP9:	CLR D
MOVCTPC	052162	016702	131350			MOV CTP,C
BRPSTOP6	052166	000407				BR PSTOP6
PSTOP8MOVCTND	052170	016703	131340		PSTOP8:	MOV CTN,D	;OK, NOW GET NODE NO.
TSTB	052174	005701				TST B	;IF B > 0, WE WERE LOOKING GEN NO.
BEQPSTOP6	052176	001403				BEQ PSTOP6
JSRPC.LDP1	052200	004767	001470			JSR PC,.LDP1
PSTOP7MOVAC	052204	010002			PSTOP7:	MOV A,C
PSTOP6JSRPC.LOADC	052206	004767	001352		PSTOP6:	JSR PC,.LOADC
DECD	052212	005303				DEC D
BGTPSTOP7	052214	003373				BGT PSTOP7
MOVCCTP	052216	010267	131314			MOV C,CTP
MOVACT	052222	010067	131340			MOV A,CT
MOVBCT	052226	010167	131336			MOV B,CT+2
JMPPSTOPR	052232	000177	131340			JMP @PSTOPR
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 200
	EVAL 336	PAGE 39 	"TO" ETC.

						.STITL "TO" ETC.
EDITBISEDITFFLAGS	052236	052767	000010	131300	EDIT:	BIS #EDITF,FLAGS
BR	052244	000403				BR .+10
TOBICEDITFFLAGS	052246	042767	000010	131270	TO:	BIC #EDITF,FLAGS
TSTTOPRNM	052254	005767	131330			TST TOPRNM
BEQTO8	052260	001401				BEQ TO8
ERRORERRORCTIT	052262	104405				ERROR+CTIT	;CANT "TO" IN TO
TO8JSRPCGNT	052264	004767	145532		TO8: 	JSR PC,GNT
BICA	052270	042700	007777			BIC #7777,A
CMPUFUNA	052274	022700	020000			CMP #UFUN,A
BEQTO1	052300	001413				BEQ TO1
CMPATOMA	052302	022700	110000			CMP #ATOM,A
BEQTO1	052306	001410				BEQ TO1
MOVBTOPS	052310	010167	131174			MOV B,TOPS	;FOR .INTRN
CMPLSTRA	052314	022700	140000			CMP #LSTR,A
BNETO2	052320	001143				BNE TO2
JSRPC.INTRN	052322	004767	002000			JSR PC,.INTRN
BRTO1	052326	000400				BR TO1
TO1MOVBTOPRNM	052330	010167	131254		TO1:	MOV B,TOPRNM
CLRTOPS	052334	005067	131150			CLR TOPS
JSRPC.BINDF	052340	004767	001606			JSR PC,.BINDF
BRTO6	052344	000532				BR TO6
MOVBFNLLP	052346	010167	131240			MOV B,FNLLP
BITEDITFFLAGS	052352	032767	000010	131164		BIT #EDITF,FLAGS	;IS IT "EDIT"?
BNETO5	052360	001116				BNE TO5	;YES
ERRORERRORPAE	052362	104433				ERROR+PAE	;PROCEDURE ALREADY EXISTS
TO7MOVCTTOPS	052364	016767	131176	131116	TO7:	MOV CT,TOPS
TO3JSRPCGNT	052372	004767	145424		TO3:	JSR PC,GNT
BITCRFFLAGS	052376	032767	000004	131140		BIT #CRF,FLAGS
BNETO4	052404	001006				BNE TO4	;DONE
BICA	052406	042700	007777			BIC #7777,A
CMPUVARA	052412	022700	030000			CMP #UVAR,A
BEQTO3	052416	001765				BEQ TO3
ERRORERRORWIT	052420	104445				ERROR+WIT	;WRONG TYPE OF INPUT TO "TO"
TO4MOVUFUNA	052422	012700	020000		TO4:	MOV #UFUN,A
MOVAB	052426	010001				MOV A,B
JSRPCGRBAD1	052430	004767	002656			JSR PC,GRBAD1	;THE UFUN BINDING NODE
MOVLISTA	052434	012700	170000			MOV #LIST,A
MOVAB	052440	010001				MOV A,B
JSRPCGRBAD2	052442	004767	002636			JSR PC,GRBAD2	;FIRST NODE IN LLP
MOVCFNLLP	052446	010267	131140			MOV C,FNLLP
MOVTOPSC	052452	016702	131032			MOV TOPS,C	;PTR TO REST OF LINE
CLRTOPS	052456	005067	131026			CLR TOPS
JSRPCCLE	052462	004767	000374			JSR PC,CLE	;COUNT 'EM
MOVCA	052466	010200				MOV C,A
BICA	052470	042700	170000			BIC #170000,A
BISSNUMA	052474	052700	120000			BIS #SNUM,A
MOVFNLLPC	052500	016702	131106			MOV FNLLP,C
JSRPCGRBAD2	052504	004767	002574			JSR PC,GRBAD2	;FIRST NODE OF LINE 0 (ARG LINE)
MOVBD	052510	010103				MOV B,D
MOVTOPRNMB	052512	016701	131072			MOV TOPRNM,B
JSRPC.BNDFS	052516	004767	001556			JSR PC,.BNDFS	;GET SWAPPED FUNC BINDING NODE FOR THIS PROC
BREND1	052522	000421				BR END1		;NOT THERE
MOVBC	052524	010102				MOV B,C	;PTR TO LIST OF GOODIES
JSRPC.LDP2	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 201
	EVAL 336	PAGE 39.1 	"TO" ETC.

	052526	004767	001136			JSR PC,.LDP2	;ALL THIS TO PRESERVE "TRACED" FLAG
BICA	052532	042700	000377			BIC #377,A
ADDDA	052536	060300				ADD D,A	;#ARGS FROM ABOVE
JSRPC.STP2	052540	004767	001072			JSR PC,.STP2	;STORE # ARGS IN FIRST NODE
JSRPC.LOADC	052544	004767	001014			JSR PC,.LOADC	;TO GET ADDR OF NEXT NODE
MOVAC	052550	010002				MOV A,C
JSRPC.LDP2	052552	004767	001112			JSR PC,.LDP2
INCA	052556	005200				INC A
JSRPC.STP2	052560	004767	001052			JSR PC,.STP2	;GET, INC AND STORE BACK CPSN
BRTO5	052564	000414				BR TO5
END1MOVLNUMB	052566	012701	130000		END1:	MOV #LNUM,B	;CREATE S. F. B. NODE STUFF
JSRPCGRBAD1	052572	004767	002514			JSR PC,GRBAD1
MOVSNUMA	052576	012700	120000			MOV #SNUM,A
MOVDB	052602	010301				MOV D,B	;# ARGS FROM ABOVE
JSRPCGRBAD2	052604	004767	002474			JSR PC,GRBAD2	; - # ARGS NODE
CLRB	052610	005001				CLR B
JSRPCGRBAD1	052612	004767	002474			JSR PC,GRBAD1	; - CPSN NODE (START CPSN AT 0)
TO5MOVPRMTCH	052616	012767	000076	131000	TO5:	MOV #'>,PRMTCH
JMPNORT	052624	000167	174606			JMP NORT
TO2ERRORERRORILN	052630	104411			TO2:	ERROR+ILN	;INVALID LOGO NAME
TO6BITEDITFFLAGS	052632	032767	000010	130704	TO6:	BIT #EDITF,FLAGS	;IS IT "EDIT"
BEQTO7	052640	001651				BEQ TO7	;NO
ERRORERRORPNH	052642	104434				ERROR+PNH	;YES, PROCEDUTE NOT HERE
GOJSRPCG1NARG	052644	004767	173644		GO:	JSR PC,G1NARG
MOVBCLN	052650	010167	130652			MOV B,CLN
CLRCLP	052654	005067	130650			CLR CLP
JMPNORT	052660	000167	174552			JMP NORT
TOLNPUSH	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 202
	EVAL 336	PAGE 40 	"TO" ETC.

					TOLN:	PUSH A	;TOKEN
MOVAPJSRPCPPUSHTSPUSH						SPUSH B	;LIST ON S
MOVBPMOVSB	052674	017701	130530			MOV @S,B
JSRPC.LOAD	052700	004767	000662			JSR PC,.LOAD
BICA	052704	042700	007777			BIC #7777,A
CMPSNUMA	052710	022700	120000			CMP #SNUM,A	;IS FIRST THING A NUMBER
BNETOLN1	052714	001010				BNE TOLN1	;NO
JSRPCADLN	052716	004767	000206			JSR PC,ADLN	;ADD LINE-LINE IS ON S
							;FNLLP POINTS TO FIRST NODE OF LIST OF LINE POINTERS
TOLN2POPS					TOLN2:	POPS A	;FINISHED WITH LINE
MOVSAJSRPCSPOPTJMPRETB	052732	000167	172562			JMP RETB
TOLN1CMP$ENDB	052736	022701	004526		TOLN1:	CMP #$END,B
BEQEND	052742	001422				BEQ END
PRTXT						PRTXT ^\NO DIRECT WITHIN TO DEF YET.\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTBRTOLN2	053006	000745				BR TOLN2
ENDMOVTOPRNMB	053010	016701	130574		END:	MOV TOPRNM,B
BEQEND2	053014	001420				BEQ END2
JSRPCPPNAME	053016	004767	161730			JSR PC,PPNAME
PRTXT						PRTXT ^\ DEFINED\
.XLISTJSRPCERTASTEXT.XLIST.ASCII.BYTE.EVEN.LIST.LISTPRCR						PRCR
JSRPC.CRLFCLRTOPRNM	053044	005067	130540			CLR TOPRNM
MOVPRMTCH	053050	012767	000077	130546		MOV #'?,PRMTCH
END2JMPNORT	053056	000167	174354		END2:	JMP NORT
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 203
	EVAL 336	PAGE 41 	UTILITY - COUNT LIST ELEMENTS

						.STITL UTILITY - COUNT LIST ELEMENTS
CLE					CLE:		;COUNT LIST ELEMENTS
							  ;IN - LIST PTR IN C
							 ;OUT - # OF ELEMENTS IN B
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH C
MOVCPCLRB	053072	005001				CLR B
MOVCA	053074	010200				MOV C,A
CLE1BITA	053076	032700	007777		CLE1:	BIT #7777,A
BEQCLE2	053102	001405				BEQ CLE2
MOVAC	053104	010002				MOV A,C
JSRPC.LDP1	053106	004767	000562			JSR PC,.LDP1
INCB	053112	005201				INC B
BRCLE1	053114	000770				BR CLE1
CLE2POP					CLE2:	POP C
MOVPCJSRPCPPOPTSPOP						SPOP A
MOVPARTSPC	053126	000207				RTS PC
ADLN	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 204
	EVAL 336	PAGE 42 	UTILITY - COUNT LIST ELEMENTS

					ADLN:		;ON S IS A "NEW LINE" INSERT IN PROPER PLACE
							;IN LLP POINTED TO BY FNLLP.
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPSPUSH						SPUSH D
MOVDPSPUSH						SPUSH E
MOVEPSPUSH						SPUSH F
MOVFPMOVSC	053150	017702	130254			MOV @S,C
JSRPC.LOADC	053154	004767	000404			JSR PC,.LOADC
MOVBF	053160	010105				MOV B,F
MOVFNLLPC	053162	016702	130424			MOV FNLLP,C
MOVCD	053166	010203				MOV C,D
JSRPC.LOADC	053170	004767	000370			JSR PC,.LOADC
MOVAC	053174	010002				MOV A,C
						;LOOK DOWN LLP FOR LINE #(@P)
ADLN1MOVDE	053176	010304			ADLN1:	MOV D,E	;SAVE PTR TO PREDECESSOR IN E
MOVCD	053200	010203				MOV C,D	;SAVE PTR TO CURRENT IN D
MOVLISTA	053202	012700	170000			MOV #LIST,A
BITC	053206	032702	007777			BIT #7777,C
BEQADLN2	053212	001411				BEQ ADLN2	;AT END, ADD NEW NODE
JSRPC.LOADC	053214	004767	000344			JSR PC,.LOADC
MOVAC	053220	010002				MOV A,C	;SAVE PTR TO SUCCESSOR IN C
JSRPC.LOAD	053222	004767	000340			JSR PC,.LOAD
CMPBF	053226	020105				CMP B,F
BLTADLN1	053230	002762				BLT ADLN1	;NOT THERE YET
BEQADLN3	053232	001410				BEQ ADLN3	;FOUND LINE
MOVDA	053234	010300				MOV D,A	;PASSED IT, INSERT NEW LINE
ADLN2MOVSB	053236	017701	130166		ADLN2:	MOV @S,B	;ADD NEW NODE TO END
MOVEC	053242	010402				MOV E,C
JSRPCGRBAD1	053244	004767	002042			JSR PC,GRBAD1
ADLN5JMPRETF	053250	000167	172214		ADLN5:	JMP RETF
ADLN3					ADLN3:		;FOUND LINE #.REPLACE THEN CHECK GEN. NO.
MOVAE	053254	010004				MOV A,E	;SAVE A, POINT TO FIRST TOKEN IN OLD LINE
MOVSA	053256	017700	130146			MOV @S,A
MOVDC	053262	010302				MOV D,C	;D POINTS TO RELEVENT LLP NODE
JSRPC.STP2	053264	004767	000346			JSR PC,.STP2	;STORE LINK TO NEW LINE
TSTFUNLEV	053270	005767	130244			TST FUNLEV	;IF AT FUNLEV 0, DON'T BOTHER WITH GEN #
BEQADLN5	053274	001765				BEQ ADLN5
MOVEC	053276	010402				MOV E,C	;E POINTS TO OLD LINE
JSRPC.LOAD	053300	004767	000262			JSR PC,.LOAD	;GET NEXT NODE IN OLD LINE(1ST TOKEN OR GEN )
BICA	053304	042700	007777			BIC #7777,A
CMPSNUMA	053310	022700	120000			CMP #SNUM,A
BEQADLN4	053314	001401				BEQ ADLN4
CLRB	053316	005001				CLR B
ADLN4INCB	053320	005201			ADLN4:	INC B	;ALREADY HAS GEN NO.
MOVSC	053322	017702	130102			MOV @S,C
JSRPC.LDP1	053326	004767	000342			JSR PC,.LDP1
BICA	053332	042700	170000			BIC #170000,A
BISSNUMA	053336	052700	120000			BIS #SNUM,A
JSRPCGRBAD1	053342	004767	001744			JSR PC,GRBAD1
BRADLN5	053346	000740				BR ADLN5
GTLINE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 205
	EVAL 336	PAGE 43 	UTILITY - COUNT LIST ELEMENTS

					GTLINE:		;GET LLP POINTER OF LINE WHOSE NO. IS IN B
								;FOR PROCEDURE PONTED TO BY "CPP"
								;OUTPUT - LLP PTR WILL BE IN C AND WILL SKIP
BISTF1TFLAGS	053350	052767	000100	130226		BIS #TF1,TFLAGS
BR	053356	000403				BR .+10
GNLINE					GNLINE:		;SAME EXCEPT LOOKING FOR LINE WHOSE # IS > # IN B
BICTF1TFLAGS	053360	042767	000100	130216		BIC #TF1,TFLAGS
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPSPUSH						SPUSH D
MOVDPSPUSH						SPUSH E
MOVEPMOVBD	053404	010103				MOV B,D
MOVCPPB	053406	016701	130110			MOV CPP,B
JSRPC.BINDF	053412	004767	000534			JSR PC,.BINDF	;LOOK FOR PROC BINDING
EVBUGEVBUG	053416	000000				EVBUG	;WHAT NO PROC BINDING??!!
HALT	053420	000000				HALT
MOVBC	053422	010102				MOV B,C
JSRPC.LDP2I	053424	004767	000270			JSR PC,.LDP2I
MOVCE	053430	010204				MOV C,E
GNL1BITE	053432	032704	007777		GNL1:	BIT #7777,E
BEQGNL4	053436	001415				BEQ GNL4	;NONE LEFT
MOVEC	053440	010402				MOV E,C
JSRPC.LOADC	053442	004767	000116			JSR PC,.LOADC	;GET NEXT NODE IN LLP
MOVAE	053446	010004				MOV A,E
JSRPC.LOAD	053450	004767	000112			JSR PC,.LOAD	;GET FIRST NODE OF THAT LINE
CMPBD	053454	020103				CMP B,D
BLTGNL1	053456	002765				BLT GNL1	;NOT THERE YET
BEQGNL2	053460	001406				BEQ GNL2	;FOUND IT
BITTF1TFLAGS	053462	032767	000100	130114		BIT #TF1,TFLAGS	;WENT PAST, WERE WE LOOKING FOR IT?
BEQGNL3	053470	001406				BEQ GNL3	;NO, OK
GNL4JMPRETE	053472	000167	172000		GNL4:	JMP RETE	;YES "NO SUCH LINE NO."
GNL2BITTF1TFLAGS	053476	032767	000100	130100	GNL2:	BIT #TF1,TFLAGS	;FOUND IT, LOOKING FOR IT?
BEQGNL1	053504	001752				BEQ GNL1	;NO, GET NEXT
GNL3MOVCP	053506	010266	000004		GNL3:	MOV C,4(P)	;OUTPUT (C) INTO C
JMPSRETE	053512	000167	174436			JMP SRETE
GNASN					GNASN:		;GET NO. OF ARGS AND CPSN OF USER PROC
							;IN: PROC PTR IN B
							;OUTPUT: CPSN IN A # IN B
							;DONT SKIP IF NO PROC
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPJSRPC.BNDFS	053530	004767	000544			JSR PC,.BNDFS
JMPRETC	053534	000167	171752			JMP RETC
JSRPC.LOAD	053540	004767	000022			JSR PC,.LOAD
MOVBP	053544	010166	000002			MOV B,2(P)	;# IN OLD B
JSRPC.LOAD	053550	004767	000012			JSR PC,.LOAD
MOVBP	053554	010166	000004			MOV B,4(P)	;CPSN IN OLD A
JMPSRETC	053560	000167	174404			JMP SRETC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 206
	EVAL 336	PAGE 44 	UTILITY - LOAD AND STORE

						.STITL UTILITY - LOAD AND STORE
.LOADCMOVCB	053564	010201			.LOADC:	MOV C,B	;NODE ADDR IN C
							;NODE RETURNED IN A,B
.LOADBICB	053566	042701	170000		.LOAD:	BIC #170000,B	;NODE ADDR IN B
ASLB	053572	006301				ASL B	;NODE RETURNED IN A,B
ASLB	053574	006301				ASL B
ADDUABB	053576	066701	127624			ADD UAB,B
MOVBA	053602	012100				MOV (B)+,A
MOVBB	053604	011101				MOV @B,B
RTSPC	053606	000207				RTS PC
.STORESPUSH					.STORE:	SPUSH C	;NODE ADDR IN C
MOVCPBICC	053612	042702	170000			BIC #170000,C
ASLC	053616	006302				ASL C	;NODE IN A,B IS STORED AT C
ASLC	053620	006302				ASL C
ADDUABC	053622	066702	127600			ADD UAB,C
MOVAC	053626	010022				MOV A,(C)+
MOVBC	053630	010112				MOV B,@C
SPOP						SPOP C
MOVPCRTSPC	053634	000207				RTS PC
					
.STP2					.STP2:		;SAME AS .STP1 EXCEPT STORE IN 2ND WORD OF NODE
SEC	053636	000261				SEC	;THEN RESULT OF ROL'S WILL BE TWO GREATER THAN  .STP1
BR	053640	000401				BR .+4
.STP1CLC	053642	000241			.STP1:	CLC	;STORE (A) IN FIRST WORD OF NODE AT C
SPUSH						SPUSH C	;NODE ADDR IN C
MOVCPBICC	053646	042702	170000			BIC #170000,C
ROLC	053652	006102				ROL C
ROLC	053654	006102				ROL C
ADDUABC	053656	066702	127544			ADD UAB,C
MOVAC	053662	010012				MOV A,@C
SPOP						SPOP C
MOVPCRTSPC	053666	000207				RTS PC
					
.LDP2SEC	053670	000261			.LDP2:	SEC		;NODE ADDR IN C (TYPE FIELD =0)
BR	053672	000401				BR .+4		;LOAD 2ND WORD OF NODE INTO A
.LDP1CLC	053674	000241			.LDP1:	CLC		;SAME AS .LDP2 EXCEPT 1ST WORD
MOVCA	053676	010200				MOV C,A
BICA	053700	042700	170000			BIC #170000,A
ROLA	053704	006100				ROL A
ROLA	053706	006100				ROL A
ADDUABA	053710	066700	127512			ADD UAB,A
MOVAA	053714	011000				MOV @A,A
RTSPC	053716	000207				RTS PC
					
.LDP2IMOVCA	053720	010200			.LDP2I:	MOV C,A	;SAME AS .LDP2 EXCEPT C WILL
BICA	053722	042700	170000			BIC #170000,A	;CONTAIN ADDR OF NEXT NODE
ASLA	053726	006300				ASL A
ASLA	053730	006300				ASL A
ADDUABA	053732	066700	127470			ADD UAB,A
MOVAC	053736	012002				MOV (A)+,C
MOVAA	053740	011000				MOV @A,A
RTSPC	053742	000207				RTS PC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 207
	EVAL 336	PAGE 45 	UTILITY - BINDING

						.STITL UTILITY - BINDING
						;INPUT:	A=TYPE	B=UOE POINTER
						;		TOPS=0 OR TYPE+VALUE POINTER
						;OUTPUT:	A - UCHANGED
						;		B - EITHER UNCHANGED OR VALUE POINTER
						;		C - POINTS TO BINDING NODE, EITHER 
						;		    RELEVANT ONE OR LAST IN BINDING LIST
						;		IF TOPS = 0, SKIPS IF BINDING FOUND
						;		IF TOPS NOT = 0, TOPS WILL BE INSERTED
						;		   AS THE NEW VALUE POINTER (A NEW BINDING
						;		   NODE WILL BE ADDED IF NECESSARY) NEVER SKIPS.
.BINDLTSTTOPS	053744	005767	127540		.BINDL:	TST TOPS
BEQ.BIND	053750	001407				BEQ .BIND
PUSHS						PUSHS TOPS
JSRPCSPUSHTMOVTOPSSCLRTOPS	053764	005067	127520			CLR TOPS
.BINDPUSH					.BIND:	PUSH D
MOVDPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH A
MOVAPBINDF1MOVBC	054002	010102			BINDF1:	MOV B,C
JSRPC.LOADC	054004	004767	177554			JSR PC,.LOADC
MOVAD	054010	010003				MOV A,D
BICD	054012	042703	007777			BIC #7777,D
CMPPD	054016	021603				CMP @P,D
BEQBINDF4	054020	001426				BEQ BINDF4	;FOUND IT
MOVAB	054022	010001				MOV A,B
BITA	054024	032700	007777			BIT #7777,A
BNEBINDF1	054030	001364				BNE BINDF1
TSTTOPS	054032	005767	127452			TST TOPS	;DIDNT FIND IT
BEQBINDF2	054036	001412				BEQ BINDF2	;SHOULD ONE BE CREATED?
SPOP						SPOP A
MOVPAMOVTOPSB	054042	016701	127442			MOV TOPS,B
JSRPCGRBAD1	054046	004767	001240			JSR PC,GRBAD1
BINDF5POP					BINDF5:	POP D	;OLD B
MOVPDJSRPCPPOPTBINDF3SPOP					BINDF3:	SPOP D
MOVPDRTSPC	054062	000207				RTS PC
BINDF2POP					BINDF2:	POP A	;NO, DONT CREATE NODE
MOVPAJSRPCPPOPTSPOP						SPOP B
MOVPBBRBINDF3	054074	000771				BR BINDF3
BINDF4TSTTOPS	054076	005767	127406		BINDF4:	TST TOPS	;FOUND, CHANGE VALUE POINTER?
BEQBINDF6	054102	001410				BEQ BINDF6
MOVTOPSA	054104	016700	127400			MOV TOPS,A	;YES + DONT SKIP
JSRPC.STP2	054110	004767	177522			JSR PC,.STP2
POP						POP A
MOVPAJSRPCPPOPTBRBINDF5	054122	000753				BR BINDF5
BINDF6POP					BINDF6:	POP A	;NO, LEAVE VALUE POINTER, BUT SKIP
MOVPAJSRPCPPOPTPOP						POP D	;OLD B
MOVPDJSRPCPPOPTPOP						POP D
MOVPDJSRPCPPOPTJMPSRET	054146	000167	174040			JMP SRET
.BINDFMOVFBINDA	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 208
	EVAL 336	PAGE 46 	UTILITY - BINDING

	054152	012700	020000		.BINDF:	MOV #FBIND,A	;GET FUNCTION BINDING, SWAP IN IF NECESSARY
							;PTR TO UOE IN B
							;OUTPUT AS IN .BIND: EXCEPT A = #FBIND
JSRPC.BINDL	054156	004767	177562			JSR PC,.BINDL	;LOOK FOR FUNCTION BINDING
BRBIF1	054162	000402				BR BIF1	;NOT THERE
JMPSRET	054164	000167	174022			JMP SRET
BIF1MOVSFBINDA	054170	012700	120000		BIF1:	MOV #SFBIND,A	;OK, THEN, LOOK FOR SWAPPED FUNCTION BINDING
JSRPC.BINDL	054174	004767	177544			JSR PC,.BINDL
RTSPC	054200	000207				RTS PC	;PROC NOT DEFINED
JSRPCPSWPIN	054202	004767	001040			JSR PC,PSWPIN	;GO GET IT
JMPSRET	054206	000167	174000			JMP SRET
.BNDVS					.BNDVS:		;GET VARIABLE BINDING, SWAPIN IF NECESSARY
								;INPUT AND OUTPUT SIMILAR TO .BINDF
BISTF2TFLAGS	054212	052767	000200	127364		BIS #TF2,TFLAGS
BR	054220	000403				BR .+10
.BNDVN					.BNDVN:		;SAME AS ABOVE EXCEPT DONT SWAP
BICTF2TFLAGS	054222	042767	000200	127354		BIC #TF2,TFLAGS
MOVVBINDA	054230	012700	030000			MOV #VBIND,A
JSRPC.BINDL	054234	004767	177504			JSR PC,.BINDL	;LOOK FOR BINDING
BRBIV1	054240	000402				BR BIV1	;NOPE
JMPSRET	054242	000167	173744			JMP SRET	;FOUND IT
BIV1MOVSVBINDA	054246	012700	130000		BIV1:	MOV #SVBIND,A	;LOOK FOR SWAPPED BINDING
JSRPC.BINDL	054252	004767	177466			JSR PC,.BINDL
RTSPC	054256	000207				RTS PC	;LOSE AGAIN - UNDEFINED
BITTF2TFLAGS	054260	032767	000200	127316		BIT #TF2,TFLAGS	;FOUND IT, SWAP IT IN?
BEQ	054266	001402				BEQ .+6
JSRPCVSWPIN	054270	004767	000756			JSR PC,VSWPIN	;YES
JMPSRET	054274	000167	173712			JMP SRET
.BNDFSMOVSFBINDA	054300	012700	120000		.BNDFS:	MOV #SFBIND,A	;LOOK FOR SWAPPED FUNCTION BINDING
JSRPC.BINDL	054304	004767	177434			JSR PC,.BINDL
RTSPC	054310	000207				RTS PC
JMPSRET	054312	000167	173674			JMP SRET
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 209
	EVAL 336	PAGE 47 	.INTRN!!

						.STITL .INTRN!!
.OBSCH					.OBSCH:		;SAME AS .INTRN EXCEPT WONT INSERT IF ENTRY ISNT FOUND
							;(ALSO SEE UOBSCH ON NEXT PAGE)
BICTF5TFLAGS	054316	042767	020000	127260		BIC #TF5,TFLAGS
BR	054324	000403				BR .+10
.INTRN					.INTRN:		;(ALSO SEE UINTRN ON NEXT PAGE)
							;INPUT:  TYPE IN A, LSTR IN "TOPS"
							;OUTPUT:  IF TYPE IS UFUN OR SFUN, SEARCH SYSTEM OBLIST FIRST.
							;  IF FOUND THERE, RETURN THAT PTR IN B, MAKING TYPE OF A
							;  TO "SFUN".  IF NOT FOUND THERE, AND IF A=UFUN, OR IF TYPE
							;  IS > "UFUN", DO THE LOOKUP IN THE USER OBLIST.
							;  RETURN WITH THE UOE PTR IN B. DONT SKIP IF A NEW ONE
							;  HAD TO BE ADDED.
BISTF5TFLAGS	054326	052767	020000	127250		BIS #TF5,TFLAGS
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPMOVTOPSC	054346	016702	127136			MOV TOPS,C
CMPUFUNA	054352	022700	020000			CMP #UFUN,A	;IS TYPE SFUN OR UFUN
BLOINT2	054356	103411				BLO INT2	;NO
JSRPCSSOL	054360	004767	000246			JSR PC,SSOL	;YES, SEARCH SYSTEM OBLIST
BRINT1	054364	000404				BR INT1	;NOT THERE
CLRA	054366	005000				CLR A	;SET A TO TYPE "SFUN" (=0)
MOVAP	054370	010066	000004			MOV A,4(P)
BRINT5	054374	000410				BR INT5
INT1TSTA	054376	005700			INT1:	TST A	;IS A = TYPE SFUN
BEQINT0	054400	001442				BEQ INT0	;YES, DONE, DONT SKIP
INT2JSRPCHSSL	054402	004767	000406		INT2:	JSR PC,HSSL	;NO, HASH TO AND SEARCH SUBLIST
BRINT3	054406	000407				BR INT3
MOVBB	054410	011101				MOV @B,B
JSRPC.LOAD	054412	004767	177150			JSR PC,.LOAD	;GET UOE PTR
INT5MOVBP	054416	010166	000002		INT5:	MOV B,2(P)
JMPSRETC	054422	000167	173542			JMP SRETC	;FOUND IT
INT3BITTF5TFLAGS	054426	032767	020000	127150	INT3:	BIT #TF5,TFLAGS	;NOT THERE, SHOULD IT BE ADDED
BEQINT0	054434	001424				BEQ INT0	;NO, RETURN AND DONT SKIP
JSRPC.GRAB	054436	004767	000616			JSR PC,.GRAB	;YES
MOVBA	054442	011100				MOV @B,A
MOVCB	054444	010211				MOV C,@B	;UPDATE BUCKET POINTER
JSRPC.GRAB	054446	004767	000606			JSR PC,.GRAB
MOVCP	054452	010266	000002			MOV  C,2(P)	;NEW  UOE PTR
MOVBC	054456	011102				MOV @B,C
MOVPB	054460	016601	000002			MOV 2(P),B
JSRPC.STORE	054464	004767	177120			JSR PC,.STORE
MOVBC	054470	010102				MOV B,C
MOVATOMA	054472	012700	110000			MOV #ATOM,A
MOVTOPSB	054476	016701	127006			MOV TOPS,B
JSRPC.STORE	054502	004767	177102			JSR PC,.STORE
INT0JMPRETC	054506	000167	171000		INT0:	JMP RETC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 210
	EVAL 336	PAGE 48 	.INTRN!!

					
					
					;"UNPURE" .INTRN AND .OBSCH
					;BY "UNPURE" IT IS MEANT THAT THE INPUT STRING MAY INCLUDE
					;NULL CHARACTERS
					;SPECIFICATIONS ARE OTHERWISE IDENTICAL TO .INTRN AND .OBSCH
UOBSCHMOVUOBCONUINCONSP	054512	012746	000014		UOBSCH:	MOV	#<UOBCON-UINCON>,-(SP)
BRUINOB	054516	000401				BR	UINOB
					
UINTRNCLRSP	054520	005046			UINTRN:	CLR	-(SP)
UINOBPUSH					UINOB:	PUSH A
MOVAPJSRPCPPUSHTPUSH						PUSH B
MOVBPJSRPCPPUSHTPUSH						PUSH C
MOVCPJSRPCPPUSHTMOVTOPSB	054544	016701	126740			MOV	TOPS,B
JSRPCCPYSTR	054550	004767	166244			JSR	PC,CPYSTR	;OUTPUT POINTER IN B TO STRINWITH NO NULLS
MOVBTOPS	054554	010167	126730			MOV	B,TOPS
POP						POP C
MOVPCJSRPCPPOPTPOP						POP B
MOVPBJSRPCPPOPTPOP						POP A
MOVPAJSRPCPPOPT					
ADDSPPC	054602	062607				ADD	(SP)+,PC
UINCONJSRPC.INTRN	054604	004767	177516		UINCON:	JSR	PC,.INTRN	;CONTINUES HERE IF UINTRN
RTSPC	054610	000207				RTS	PC	;THE PURE STRING WAS ADDED BY .INTRN
UOBSKPJSRPCFRELST	054612	004767	000644		UOBSKP:	JSR	PC,FRELST	;PURE LIST NOT ADDED.  FREE IT
SKPRETSKPRET	054616	104000				SKPRET
					
UOBCONJSRPC.OBSCH	054620	004767	177472		UOBCON:	JSR	PC,.OBSCH	;CONTINUES HERE IF UOBSCH
JMPFRELST	054624	000167	000632			JMP	FRELST	;FREE PURE STRING AND DON'T SKIP RETURN
BRUOBSKP	054630	000770				BR	UOBSKP	;FREE IT AND SKIP
SSOL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 211
	EVAL 336	PAGE 49 	.INTRN!!

					SSOL:		;SEARCH SYSTEM OBLIST
							;INPUT:  C POINTS TO STRING
							;OUTPUT:  SKIP = FOUND AND SOE PTR IN B
							;  NO SKIP = NOT FOUND AND NO CHANGE
							;NULL MUST BE USED AS FILLER CHAR BUT NOT BE IMBEDDED
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPSPUSH						SPUSH D
MOVDPSPUSH						SPUSH E
MOVEPSPUSH						SPUSH F
MOVFPJSRPC.LOADC	054652	004767	176706			JSR PC,.LOADC
MOVBD	054656	010103				MOV B,D
SPUSH						SPUSH A
MOVAPMOVSOBP2E	054662	016704	127146			MOV SOBP2,E
MOVSOBLSTF	054666	012705	004036			MOV #SOBLST,F
SSOL1ASRE	054672	006204			SSOL1:	ASR E
BITE	054674	032704	177776			BIT #177776,E
BEQSSOL5	054700	001440				BEQ SSOL5
ADDEF	054702	060405				ADD E,F
CMPFSOOMX	054704	020567	127122			CMP F,SOOMX
BHISSSOL2	054710	103037				BHIS SSOL2
MOVFB	054712	011501				MOV @F,B
ADDB	054714	062701	000004			ADD #4,B
MOVPC	054720	011602				MOV @P,C
MOVDA	054722	010300				MOV D,A
BRSSOL6	054724	000402				BR SSOL6
SSOL4JSRPC.LDP2I	054726	004767	176766		SSOL4:	JSR PC,.LDP2I
SSOL6CMPBAB	054732	120021			SSOL6:	CMPB A,(B)+
BHISSOL1	054734	101356				BHI SSOL1
BLOSSOL2	054736	103424				BLO SSOL2
SWABA	054740	000300				SWAB A
CMPBAB	054742	120021				CMPB A,(B)+
BHISSOL1	054744	101352				BHI SSOL1
BLOSSOL2	054746	103420				BLO SSOL2
BITC	054750	032702	007777			BIT #7777,C
BNESSOL4	054754	001364				BNE SSOL4
TSTBB	054756	105711				TSTB (B)	;AT END OF STRING, IS IT END OF SYS PNAME
BEQSSOL3	054760	001403				BEQ SSOL3	;YES
TSTBB	054762	105761	177777			TSTB -1(B)	;NO, BUT CHECK IF PREV CHAR WAS TERMINATOR
BNESSOL2	054766	001010				BNE SSOL2
SSOL3SPOP					SSOL3:	SPOP A
MOVPAMOVFP	054772	011566	000010			MOV @F,10(P)	;YES, SAVE F AS OUTPUT
JMPSRETF	054776	000167	173144			JMP SRETF
SSOL5SPOP					SSOL5:	SPOP A
MOVPAJMPRETF	055004	000167	170460			JMP RETF
SSOL2SUBEF	055010	160405			SSOL2:	SUB E,F
BRSSOL1	055012	000727				BR SSOL1
HSSL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 212
	EVAL 336	PAGE 50 	.INTRN!!

					HSSL:		;HASH, THEN SEARCH SUB-LIST
							;INPUT:  C POINTS TO LSTR
							;OUTPUT:  B POINTS TO SUBLIST PTR.  RELEVANT ENTRY WILL
							;  WILL BE AT HEAD OF SUBLIST.  SKIPS IF ONE FOUND.
PUSH						PUSH A
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPSPUSH						SPUSH D
MOVDPSPUSH						SPUSH E
MOVEPSPUSH						SPUSH F
MOVFPJSRPC.LOADC	055034	004767	176524			JSR PC,.LOADC	;GET FIRST CHARS INTO B
MOVBD	055040	010103				MOV B,D
MOVAE	055042	010004				MOV A,E		;PTR TO REST OF ARG
MOVMQA	055044	012700	177304			MOV #MQ,A
MOVBA	055050	010110				MOV B,(A)
CLRA	055052	005040				CLR -(A)	;DIVIDEND IS 0,,(B)
MOVHCCA	055054	012740	000103			MOV #HCC,-(A)	;DIVIDE BY HASH CODE CONSTANT
TSTA	055060	005720				TST (A)+
MOVAB	055062	011001				MOV (A),B	;GET REMAINDER
ROLB	055064	006101				ROL B
ADDSUHCTB	055066	066701	126366			ADD SUHCT,B
MOVBP	055072	010166	000010			MOV B,10(P)	;FOR OUTPUT
MOVBF	055076	011105				MOV @B,F
BEQHSSL6	055100	001444				BEQ HSSL6	;NO ENTRYS IN THIS BUCKET
MOVFC	055102	010502				MOV F,C
SPUSH						SPUSH C
MOVCPHSSL1JSRPC.LOADC	055106	004767	176452		HSSL1:	JSR PC,.LOADC	;GET NEXT SUBLIST NODE
MOVAP	055112	010016				MOV A,@P
JSRPC.LOAD	055114	004767	176446			JSR PC,.LOAD	;GET UOE PNAME NODE
JSRPC.LOAD	055120	004767	176442			JSR PC,.LOAD	;GET FIRST NODE OF PNAME
CMPBD	055124	020103				CMP B,D	;ARE THE FIRST 2 CHAR =
BNEHSSL2	055126	001021				BNE HSSL2	;NO
PUSHS						PUSHS A	;YES, COMPARE REST OF STRING
JSRPCSPUSHTMOVASSPUSHS						SPUSHS E
SUBSMOVESJSRPCCSEQ	055152	004767	170166			JSR PC,CSEQ
BRHSSL2	055156	000405				BR HSSL2	;NOT EQUAL
HSSL3CMPFC	055160	020502			HSSL3:	CMP F,C	;IF F = C, THEN LOCATED UOE WAS FIRST SO DONE
BNEHSSL4	055162	001015				BNE HSSL4
SPOP						SPOP A
MOVPAHSSL5JMPSRETF	055166	000167	172754		HSSL5:	JMP SRETF
HSSL2MOVCF	055172	010205			HSSL2:	MOV C,F	;NOPE, SAVE THIS PTR FOR PREDECESSOR
MOVPC	055174	011602				MOV @P,C	;GET SAVED PTR TO NEXT SUBLIST NODE
BITC	055176	032702	007777			BIT #7777,C
BNEHSSL1	055202	001341				BNE HSSL1
POP						POP A
MOVPAJSRPCPPOPTHSSL6JMPRETF	055212	000167	170252		HSSL6:	JMP RETF
HSSL4MOVPA	055216	017600	000012		HSSL4:	MOV @12(P),A	;MOVE ENTRY TO HEAD OF BUCKET
JSRPC.STP1	055222	004767	176414			JSR PC,.STP1	;NEW TOP NOW PIONTS TO OLD TOP
MOVCP	055226	010276	000012			MOV C,@12(P)	;UHCT ENTRY NOW POINTS TO NEW TOP
MOVFC	055232	010502				MOV F,C
SPOP						SPOP A
MOVPAJSRPC.STP1	055236	004767	176400			JSR PC,.STP1	;NEW TOP'S OLD PREDECESSOR NOW LINKED TO ITS SUC.
BRHSSL5	055242	000751				BR HSSL5
WIPOBSRTSPC	055244	000207			WIPOBS:	RTS	PC	;WIPE WIPERS FROM OBLIST
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 213
	EVAL 336	PAGE 51 	MINI SWAPPING

						.STITL MINI SWAPPING
PSWPINHALT	055246	000000			PSWPIN:	HALT
PSWPOTHALT	055250	000000			PSWPOT:	HALT
VSWPINHALT	055252	000000			VSWPIN:	HALT
VSWPOTHALT	055254	000000			VSWPOT:	HALT
DSVBHALT	055256	000000			DSVB:	HALT	;DELETE SWAPPED VARIABLE BINDING
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 214
	EVAL 336	PAGE 52 	UTILITY - GRAB NODE ROUTINES

						.STITL UTILITY - GRAB NODE ROUTINES
.GRABPUSH					.GRAB:	PUSH A	;GRAB A FREE NODE - PTR IN C; CLEAR IT
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPCLRA	055270	005000				CLR A
CLRB	055272	005001				CLR B
JSRPCGRBAD	055274	004767	000010			JSR PC,GRBAD
JMPRETB	055300	000167	170214			JMP RETB
GRBAD2SEC	055304	000261			GRBAD2:	SEC	;GRAB A FREE NODE, FILL IT WITH A,,B
								;IF C NOT =0, PUT PTR TO NEW NODE IN WORD 2 OF NODE(C)
BR	055306	000402				BR .+6
GRBADCLRC	055310	005002			GRBAD:	CLR	C	;SAME AS ABOVE EXCEPT NEW POINTER ALWAYS IN C
GRBAD1CLC	055312	000241			GRBAD1:	CLC	;SAME AS ABOVE EXCEPT NEW PTR IN WORD 1
SPUSH						SPUSH A
MOVAPBICC	055316	042702	170000			BIC #170000,C
BEQGRB2	055322	001404				BEQ GRB2	;C IS ZERO, FORGET STORING NEW NODE PTR
ROLC	055324	006102				ROL C
ROLC	055326	006102				ROL C
ADDUABC	055330	066702	126072			ADD UAB,C
GRB2MOVUNGRABA	055334	016700	126240		GRB2:	MOV UNGRAB,A
BNEGRB1	055340	001011				BNE GRB1
MOVFREEA	055342	016700	126140			MOV FREE,A
BNEGRB1	055346	001006				BNE GRB1
JSRPC.GCOLL	055350	004767	143374			JSR PC,.GCOLL
MOVFREEA	055354	016700	126126			MOV FREE,A
BNEGRB1	055360	001001				BNE GRB1
ERRORERRORNSL	055362	104422				ERROR+NSL	;NO STORAGE LEFT
GRB1CLRUNGRAB	055364	005067	126210		GRB1:	CLR UNGRAB
TSTC	055370	005702				TST C
BEQGRB3	055372	001405				BEQ GRB3
BICA	055374	042700	170000			BIC #170000,A
BICC	055400	042712	007777			BIC #7777,@C
ADDAC	055404	060012				ADD A,@C
GRB3MOVAC	055406	010002			GRB3:	MOV A,C
JSRPC.LDP1	055410	004767	176260			JSR PC,.LDP1
BICA	055414	042700	170000			BIC #170000,A
MOVAFREE	055420	010067	126062			MOV A,FREE
SPOP						SPOP A
MOVPAJSRPC.STORE	055426	004767	176156			JSR PC,.STORE
RTSPC	055432	000207				RTS PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 215
	EVAL 336	PAGE 53 	UTILITY - GRAB NODE ROUTINES

						;.STITL UTILITY  -  FREE NODE ROUTINES
.FREESPUSH					.FREE:	SPUSH A	;RETURN NODE IN C TO FREE STORAGE
MOVAPMOVFREEA	055436	016700	126044			MOV FREE,A
JSRPC.STP1	055442	004767	176174			JSR PC,.STP1
BICC	055446	042702	170000			BIC #170000,C
MOVCFREE	055452	010267	126030			MOV C,FREE
SPOP						SPOP A
MOVPARTSPC	055460	000207				RTS PC
FRELSTTSTTOPS	055462	005767	126022		FRELST:	TST TOPS
BNE	055466	001001				BNE .+4
RTSPC	055470	000207				RTS PC
PUSH						PUSH A	;RETURN LIST IN TOPS TO FREE STORAGE
MOVAPJSRPCPPUSHTSPUSH						SPUSH B
MOVBPSPUSH						SPUSH C
MOVCPMOVTOPSC	055504	016702	126000			MOV TOPS,C
FRL1JSRPC.LOADC	055510	004767	176050		FRL1:	JSR PC,.LOADC
BITA	055514	032700	007777			BIT #7777,A
BEQFRL2	055520	001402				BEQ FRL2
MOVAC	055522	010002				MOV A,C
BRFRL1	055524	000771				BR FRL1
FRL2ADDFREEA	055526	066700	125754		FRL2:	ADD FREE,A
JSRPC.STORE	055532	004767	176052			JSR PC,.STORE
MOVTOPSFREE	055536	016767	125746	125742		MOV TOPS,FREE
BICFREE	055544	042767	170000	125734		BIC #170000,FREE
CLRTOPS	055552	005067	125732			CLR TOPS
JMPRETC	055556	000167	167730			JMP RETC
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 216
	TURTLE 60	PAGE 1 	DISPLAY AND TURTLE

						.STITL DISPLAY AND TURTLE
VERN%FNAM2VERN		001651				VERN==VERN+%FNAM2
					
					;A  BRIEF DESCRIPTION OF WHAT IS LEFT TO BE DONE TO THIS PROGRAM.
					
					
					;2)	GARBAGE COLLECTION.  COLLAPSING ADDS AND NOPS IN THE STATIC AREA.
					;3)	ERROR RECOVERY.
					;4)	DECIDING WHAT SNAP AND WIPE REALLY ARE GOING TO DO.
					;AT THIS TIME, SNAP OUTPUTS THE ENTIRE SCREEN
					;AND WIPE ERASES ONLY TOP LEVEL OCCURRENCES OF THE SNAP
					;6)	RUNNING THE DISPLAY ON INTERRUPT LEVEL.
					
					
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 217
	TURTLE 60	PAGE 2 	DISPLAY AND TURTLE

					
					
					
					
					;CHOOSE BETWEEN DISPLAY AND REAL TURTLE
					;	THE ARGUMENT IS WHERE TO JUMP IF DISPLAY.
.MACRWHICHT					.MACR WHICHTUR DADD
						BITB	#TURTF,DFLAGS
						BNE	.+6
						JMP	DADD
					.ENDM
					
					;MOVE THE REAL TURTLE
					;	THE ARG IS THE CHARACTER CODE TO CAUSE 1-STEP OF MOTION
.MACRMOVTUR					.MACR MOVTUR CHAR
						MOV	#" 'CHAR,-(P)
						JMP	TURMOV
					.ENDM
					
					;SEND OUT SOME CONTROL COMMAND TO REAL TURTLE
					;	ARGUMENT IS THE CHARACTER FOR THE COMMAND
.MACRCONTUR					.MACR CONTUR CHAR
						MOV	#" 'CHAR,A
						JMP	TURCON
					.ENDM
					
					;CONVERT ADDRESS TO DISPLAY PUSHJ
					;	ARGUMENT IS AC
.MACRMAKEPJ					.MACR	MAKEPJ	F
						SUB	#DISREL,F
						ASR	F
						BIS	#DPUSHJ,F
					.ENDM
					
					;CONVERT DISPLAY CONTROLLER ADDRESSES TO REAL WORLD ADDRESSES
					;	ARG IS AC
.MACRMAKEAD					.MACR	MAKEAD	F
						ASL	F
						ADD	#DISREL,F
					.ENDM
					
					;START UP DISPLAY--FOR SIMULATOR ONLY
.MACRDISGO					.MACR	DISGO
						BISB	DISBIT,NGCSR
					.ENDM
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 218
	TURTLE 60	PAGE 3 	DISPLAY AND TURTLE

					;DISPLAY AND TURTLE COMMANDS THAT HAVE TO CHOOSE BETWEEN
					;THE TWO GO THROUGH HERE
					
FORWARJSRPCG1NARG	055562	004767	170726		FORWAR:	JSR	PC,G1NARG
WHICHT						WHICHTUR DFD
BITBTURTFDFLAGSBNEJMPDFDMOVTUR						MOVTUR C
MOVPJMPTURMOVBACKJSRPCG1NARG	055612	004767	170676		BACK:	JSR	PC,G1NARG
WHICHT						WHICHTUR DBK
BITBTURTFDFLAGSBNEJMPDBKMOVTUR						MOVTUR @
MOVPJMPTURMOVRIGHTJSRPCG1NARG	055642	004767	170646		RIGHT:	JSR	PC,G1NARG
WHICHT						WHICHTUR DRT
BITBTURTFDFLAGSBNEJMPDRTMOVTUR						MOVTUR B
MOVPJMPTURMOVLEFTJSRPCG1NARG	055672	004767	170616		LEFT:	JSR	PC,G1NARG
WHICHT						WHICHTUR DLT
BITBTURTFDFLAGSBNEJMPDLTMOVTUR						MOVTUR A
MOVPJMPTURMOVPENUPWHICHT					PENUP:	WHICHTUR DPU
BITBTURTFDFLAGSBNEJMPDPUCONTUR						CONTUR 8
MOVAJMPTURCONPENDOWWHICHT					PENDOW:	WHICHTUR DPD
BITBTURTFDFLAGSBNEJMPDPDCONTUR						CONTUR 0
MOVAJMPTURCON					
					
					;REST OF REAL TURTLE COMMANDS
LAMPONBITBTURTFDFLAGS	055772	132767	000010	125715	LAMPON:	BITB	#TURTF,DFLAGS
BNELMPON1	056000	001001				BNE LMPON1
ERRORERRORYNT	056002	104452				ERROR+YNT	;YOU DON'T HAVE THE TURTLE
LMPON1CONTUR					LMPON1:	CONTUR "
MOVAJMPTURCONLAMPOFBITBTURTFDFLAGS	056014	132767	000010	125673	LAMPOFF:	BITB	#TURTF,DFLAGS
BNELMPOF1	056022	001001				BNE	LMPOF1
ERRORERRORYNT	056024	104452				ERROR+YNT	;YOU DON'T HAVE THE TURTLE
LMPOF1CONTUR					LMPOF1:	CONTUR !
MOVAJMPTURCON					
TOOTBITBTURTFDFLAGS	056036	132767	000010	125651	TOOT:	BITB	#TURTF,DFLAGS
BNETOOT.0	056044	001001				BNE TOOT.0
ERRORERRORYNT	056046	104452				ERROR+YNT	;YOU DON'T HAVE THE TURTLE
TOOT.0JSRPCG1NARG	056050	004767	170440		TOOT.0:	JSR	PC,G1NARG	;GET NUMERIC ARG
MOVA	056054	012700	024040			MOV	#" (,A
BRTOOT.9	056060	000411				BR	TOOT.9
					
TOOT.1MOVE	056062	012704	000001		TOOT.1:	MOV	#1,E
JSRPCTUROUT	056066	004767	000224			JSR	PC,TUROUT	;A IS OUTPUT CHARACTER, E IS COUNT
SWABA	056072	000300				SWAB	A	;PUT SPACE AS BOTTOM CHARACTER OF A.
MOVE	056074	012704	000005			MOV	#5,E
JSRPCTUROUT	056100	004767	000212			JSR	PC,TUROUT	;THERE NEED TO BE 5 SPACES BETWEEN TOOTS.
TOOT.9DECB	056104	005301			TOOT.9:	DEC	B	;NUMBER OF TOOTS
BGETOOT.1	056106	002365				BGE	TOOT.1
JMPNORT	056110	000167	171322			JMP	NORT	;RETURN
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 219
	TURTLE 60	PAGE 4 	DISPLAY AND TURTLE

					
					;TURTLE  MOVER
					;	OUTUT THE APPROPRIATE CHARACTERS TO CAUSE THE REAL TURTLE
					;	TO MOVE.
					;	CALL WITH NUMBER OF STEPS IN B
					;	CALL WITH CHARACTER FOR 1-STEP ON STACK
					;
					;	IT IS NECESSARY TO ACCELERATE AND DECELERATE THE TURTLE
					;	MUCH OF THE ROUTINE BELOW IS TO DO THIS.
TURMOVJSRPCTURON	056114	004767	000222		TURMOV:	JSR	PC,TURON	;TURN ON THE TURTLE
MOVPA	056120	011600				MOV	(P),A	;THE CHARACTER FOR ONE STEP
MOVF	056122	012705	000010			MOV	#10,F	;AN OFT USED CONSTANT
CMPB	056126	020167	121652			CMP	B,4	;COMPARE # OF STEPS TO 4
BLTTM.8	056132	002460				BLT	TM.8	;THERE IS NO CHANCE FOR MORE THAN 1-STEPS
CMPB	056134	020167	121654			CMP	B,12.
BLTTM.3	056140	002435				BLT	TM.3	;NO CHANCE FOR MORE THAN 2-STEPS
					
MOVMQC	056142	012702	177304			MOV	#MQ,C	;START TO DIVIDE.
MOVBC	056146	010112				MOV	B,(C)	;THE DIVIDEND
CLRC	056150	005042				CLR	-(C)	;CLEAR THE TOP PART OF DIVIDEND.
MOVC	056152	012742	000004			MOV	#4,-(C)	;THE DIVISOR.
TSTC	056156	005722				TST	(C)+
MOVCD	056160	012203				MOV	(C)+,D	;THE REMAINDER.
MOVCC	056162	011202				MOV	(C),C	;THE QUOTIENT.
CLRB	056164	005001				CLR	B
ASRD	056166	006203				ASR	D	;DIVIDE BY 2
ROLB	056170	006101				ROL	B	;PUT REMAINDER IN B
TSTD	056172	005723				TST	(D)+	;ADD 2 TO D
TSTB	056174	005721				TST	(B)+	;ADD 2 TO B
					;NOW A=#OF 1-STEPS TO DECELERATE, B=# OF 2-STEPS TO DECELERATE
					;AND D= # OF 4-STEPS ALTOGETHER
MOVE	056176	012704	000002			MOV	#2,E
JSRPCTUROUT	056202	004767	000110			JSR	PC,TUROUT	;OUTPUT TO TURTLE. A=THE CHAR. E=COUNT
ADDFA	056206	060500				ADD	F,A	;TURN A INTO CHAR FOR 2-STEP
MOVE	056210	012704	000002			MOV	#2,E
JSRPCTUROUT	056214	004767	000076			JSR	PC,TUROUT
ADDFA	056220	060500				ADD	F,A	;TURN A INTO CHARACTER FOR 4-STEP
MOVDE	056222	010304				MOV	D,E	;NUMBER OF 4-STEPS
JSRPCTUROUT	056224	004767	000066			JSR	PC,TUROUT
SUBFA	056230	160500				SUB	F,A	;TURN A INTO CHARACTER FOR 2-STEP
BRTM.5	056232	000414				BR	TM.5
					
					;THERE ARE LESS THAN 12. STEPS.
					;	SO THERE IS NO CHANCE FOR ANY 4-STEPS
TM.3SUBB	056234	162701	000004		TM.3:	SUB	#4,B	;YOU LOSE AT LEAST 4 STEPS IN ACCELERATION AND DECEL.
MOVBD	056240	010103				MOV	B,D
CLRB	056242	005001				CLR	B
ASRD	056244	006203				ASR	D	;DIVIDE BY 2
ROLB	056246	006101				ROL	B	;PUT REMAINDER IN B
TSTB	056250	005721				TST	(B)+	;ADD 2 TO B
MOVE	056252	012704	000002			MOV	#2,E
JSRPCTUROUT	056256	004767	000034			JSR	PC,TUROUT	;ACCELERATE
ADDFA	056262	060500				ADD	F,A	;TURN A INTO CHAR FOR 2-STEP
					;OUTPUT THE NUMBER OF 2-STEPS
TM.5MOVDE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 220
	TURTLE 60	PAGE 4.1 	DISPLAY AND TURTLE

	056264	010304			TM.5:	MOV	D,E	;NUMBER OF STEPS
JSRPCTUROUT	056266	004767	000024			JSR	PC,TUROUT
SUBFA	056272	160500				SUB	F,A	;TURN A INTO CHAR FOR 1-STEP
					;OUTPUT THE 1-STEPS
TM.8MOVBE	056274	010104			TM.8:	MOV	B,E	;NUMBER OF 1-STEPS
JSRPCTUROUT	056276	004767	000014			JSR	PC,TUROUT
JSRPCTUROFF	056302	004767	000056			JSR	PC,TUROFF	;TURN OFF THE TURTLE
JMPNORT	056306	000167	171124			JMP	NORT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 221
	TURTLE 60	PAGE 5 	DISPLAY AND TURTLE

					
					
					;TURTLE OUTPUT
					;	CALL WITH A=CHARACTER TO OUTPUT
					;	E=NUMBER OF TIMES TO OUTPUT IT
					;	NOTE: JSR TO TUROUT NOT TO TO.1
TO.1JSRPC.IOT	056312	004767	000006		TO.1:	JSR	PC,.IOT	;NOT THE ENTRY POINT!!
					;ENTER HERE
TUROUTDECE	056316	005304			TUROUT:	DEC	E
BGETO.1	056320	002374				BGE	TO.1	;THERE'S MORE TO OUTPUT
RTSPC	056322	000207				RTS	PC
					
					;.IOT
					;	OUTPUT CAHRACTER IN A TO TELETYPE
.IOTBITTPS	056324	032767	000200	121232	.IOT:	BIT	#200,TPS	;TEST READY
BEQ.IOT	056332	001774				BEQ	.IOT
MOVATPB	056334	010067	121226			MOV	A,TPB	;OUTPUT THE CHARACTER
RTSPC	056340	000207				RTS	PC
					
					
					
					;TURN THE TURTLE ON
					;	OUTPUT CHARACTERS TO TURN OFF THE PRINTER AND TURN ON THE TURTLE
TURONMOVA	056342	012700	000143		TURON:	MOV	#143,A
JSRPC.IOT	056346	004767	177752			JSR	PC,.IOT
MOVA	056352	012700	000151			MOV	#151,A
JSRPC.IOT	056356	004767	177742			JSR	PC,.IOT
RTSPC	056362	000207				RTS	PC
					
					;TURN OFF THE TURTLE
					;	AND TURN THE PRINTER BACK ON
TUROFFMOVA	056364	012700	000150		TUROFF:	MOV	#150,A
JSRPC.IOT	056370	004767	177730			JSR	PC,.IOT
MOVA	056374	012700	000142			MOV	#142,A
JSRPC.IOT	056400	004767	177720			JSR	PC,.IOT
RTSPC	056404	000207				RTS	PC
					
					
					;OUTPUT A CONTROLLING CHARACTER TTO TURTLE
					;	CALL WITH B=CHARACTER
TURCONJSRPCTURON	056406	004767	177730		TURCON:	JSR	PC,TURON
MOVE	056412	012704	000001			MOV	#1,E
MOVBA	056416	010100				MOV	B,A
JSRPCTUROUT	056420	004767	177672			JSR	PC,TUROUT	;A HAS CHAR, E HAS COUNT
JSRPCTUROFF	056424	004767	177734			JSR	PC,TUROFF
JMPNORT	056430	000167	171002			JMP	NORT	;RETURN.
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 222
	TURTLE 60	PAGE 6 	DISPLAY AND TURTLE

					;HERE IS WHERE THE DISPLAY PRIMITIVES START.
					
					;STARTDISPLAY
					;	INITIALIZE EVERYTHING
					;	ALLOCATE DISPLAY BUFFERS
STARTD					STARTDISPLAY:
MOVBDISBITA	056434	116700	125310			MOVB	DISBIT,A	;HAS A BIT SET IF USER ALREADY HAS A DISPLAY
BEQSTRTD1	056440	001402				BEQ	STRTD1	;USER DOESN'T HAVE A DISPLAY YET
JSRPCKILLD2	056442	004767	000240			JSR	PC,KILLD2	;KILL HIS PREVIOUS DISPLAY FIRST
					
STRTD1MOVUSERMQ	056446	016767	123036	120630	STRTD1:	MOV	USER,MQ	;FIND USER'S DISPLAY CONSOLE NUMBER
MOVLDIVIDE	056454	012767	000060	120616		MOV	#L,DIVIDE	;LENGTH OF USER BLOCK
MOVMQA	056462	016700	120616			MOV	MQ,A	;USER NUMBER
MOVBDCONSAA	056466	116000	002404			MOVB	DCONS(A),A
BGE	056472	002001				BGE	.+4
ERRORERRORNDU	056474	104420				ERROR+NDU	;NOT A DISPLAY USER
					
MOVDORBEGC	056476	012702	003676			MOV	#DORBEG,C	;ZERO VARIOUS USER DISPLAY VARS
MOVDORENDB	056502	012701	003716			MOV	#DOREND,B	;LAST WORD
SDLOOPCLRC	056506	005022			SDLOOP:	CLR	(C)+	;ZERO WORD
CMPCB	056510	020201				CMP	C,B
BLESDLOOP	056512	003775				BLE	SDLOOP
					
MOVBSDISBTAB	056514	116001	002414			MOVB	SDISBT(A),B	;DISBIT
MOVBBDISBIT	056520	110167	125224			MOVB	B,DISBIT
					
ASLA	056524	006300				ASL	A	;MAKE INTO WORD INDEX
MOVSTLISTAC	056526	016002	002426			MOV	STLIST(A),C	;THIS USERS TURTLE DISPLAY AREA
MOVCTUB	056532	010267	125172			MOV	C,TUB	;TURTLE BOTTOM
MAKEPJ						MAKEPJ	C
SUBDISRELCASRCBISDPUSHJCMOVCPUSHJT	056550	010267	125172			MOV	C,PUSHJT	;PUSHJ TO TURTLE
					
MOVDISRELAD	056554	016003	063250			MOV	DISREL(A),D	;PUSHJ TO START OF DLIST
MAKEAD						MAKEAD	D
ASLDADDDISRELDMOVDRSTXYDPOPD	056566	012723	143200			MOV	#DRSTXY!DPOP,(D)+	;FIRST WORD OF DLIST
MOVCD	056572	010213				MOV	C,(D)	;PUSHJT IN 2ND WORD
					
					;SET UP BUFFER VARIABLES
MOVDSTB	056574	010367	125116			MOV	D,STB	;STATIC AREA BOTTOM
MOVDSTT	056600	010367	125114			MOV	D,STT	;STATIC AREA TOP
TSTD	056604	005743				TST	-(D)	;POINT D BACK TO FIRST WORD
ADDDLEND	056606	062703	000400			ADD	#DLEN,D
CLRD	056612	005043				CLR	-(D)	;SET UP DUMMY FREE AREA
MOVDDYT	056614	010367	125106			MOV	D,DYT	;(DYNAMIC AREA TOP)
CLRD	056620	005043				CLR	-(D)	;AT THE TOP OF DYNAMIC AREA
MOVDDYB	056622	010367	125074			MOV	D,DYB	;DYNAMIC AREA BOTTOM
MOVDDYR	056626	010367	125072			MOV	D,DYR	;DYNAMIC AREA ROVING POINTER
					
MOVSDPDLPADPDLPA	056632	016060	002420	063270		MOV	SDPDLP(A),DPDLP(A)	;SET DISPLAY PDL POINTER
					
JSRPCANGCRP	056640	004767	002152			JSR	PC,ANGCRP	;GET DIREC, SINA, COSA
JSRPCDR.TUR	056644	004767	003662			JSR	PC,DR.TUR	;DRAW THE TURTLE
JSRPCNEWSN2	056650	004767	001356			JSR	PC,NEWSN2	;SET UP FOR NEW SNAP
					
MOVDISRELNGREL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 223
	TURTLE 60	PAGE 6.1 	DISPLAY AND TURTLE

	056654	012767	063250	105160		MOV	#DISREL,NGREL	;SET THE RELOCATION, JUST IN CASE
BISBDISBITNGCSR	056662	156767	125062	105150		BISB	DISBIT,NGCSR	;AND START UP THIS GUYS DISPLAY
JMPNORT	056670	000167	170542			JMP	NORT	;RETURN
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 224
	TURTLE 60	PAGE 7 	DISPLAY AND TURTLE

										
					;KILLDISPLAY
					;	USER WANTS TO GIVE UP HIS DISPLAY
KILLDI					KILLDISPLAY:
MOVNORTSP	056674	012746	047436			MOV	#NORT,-(SP)	;ENTER HERE FROM EVAL
KILLD1MOVBDISBITA	056700	116700	125044		KILLD1:	MOVB	DISBIT,A	;HAS A BIT SET IF USER HAS DISPLAY
BEQKILLDR	056704	001410				BEQ	KILLDR	;USER DOESN'T HAVE DISPLAY
KILLD2BICANGCSR	056706	040067	105126		KILLD2:	BIC	A,NGCSR	;STOP HIS DISPLAY (ENTER HERE FROM STARTDISPLAY)
CLRSNLIST	056712	005067	125014			CLR	SNLIST	;CLEAR  SNAPS
CLRBDISBIT	056716	105067	125026			CLRB	DISBIT
JSRPC.GCOLL	056722	004767	142022			JSR	PC,.GCOLL
					
KILLDRRTSPC	056726	000207			KILLDR:	RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 225
	TURTLE 60	PAGE 8 	DISPLAY AND TURTLE

					
DBKNEGB	056730	005401			DBK:	NEG	B
					
					;DISPLAY FORWARD AND BACK
DFDMOVDIRECSP	056732	016746	125004		DFD:	MOV	DIREC,-(SP)	;SAVE DIREC SINCE DRAW
					;		WANTS TO USE IT FOR ITS OWN DEVIOUS PURPOSES
MOVBA	056736	010100				MOV	B,A
BPLDFD.0	056740	100006				BPL	DFD.0	;FIGURE THIS ONE OUT FOR HOMEWORK
SUBDIREC	056742	162767	000040	124772		SUB	#40,DIREC
BICDIREC	056750	042767	177707	124764		BIC	#177707,DIREC
DFD.0JSRPCMULSIN	056756	004767	001754		DFD.0:	JSR	PC,MULSIN	;PUTS DX IN B,,C
MOVBSP	056762	010146				MOV	B,-(SP)
MOVCSP	056764	010246				MOV	C,-(SP)
ADDCURXB	056766	066701	124704			ADD	CURX,B	;INTEGER PARTS
ADDCURXC	056772	066702	124702			ADD	CURX+2,C	;FRACTION PARTS
ADCB	056776	005501				ADC	B	;IF FRACTIONS > 1, ADD 1 TO INT
DFD.1MOVBNEWX	057000	010167	123430		DFD.1:	MOV	B,NEWX
MOVCNEWX	057004	010267	123426			MOV	C,NEWX+2
JSRPCFIX	057010	004767	001650			JSR	PC,FIX	;B HAS THE INTEGER PART OF B,,C
JSRPCCHKBND	057014	004767	001612			JSR	PC,CHKBND	;ERROR IF B IS OFF SCREEN
					
					;DO  DELTA Y NOW
JSRPCMULCOS	057020	004767	001704			JSR	PC,MULCOS	;DY IS IN B,,C
MOVBSP	057024	010146				MOV	B,-(SP)
MOVCSP	057026	010246				MOV	C,-(SP)
ADDCURYB	057030	066701	124646			ADD	CURY,B	;THE INTEGER PARTS.
ADDCURYC	057034	066702	124644			ADD	CURY+2,C	;THE FRACTION PARTS
ADCB	057040	005501				ADC	B	;IF FRACTIONS > 1, ADD 1 TO INT
DFD.2MOVBNEWY	057042	010167	123372		DFD.2:	MOV	B,NEWY
MOVCNEWY	057046	010267	123370			MOV	C,NEWY+2
JSRPCFIX	057052	004767	001606			JSR	PC,FIX	;B HAS THE INTEGER PART OF B,,C
JSRPCCHKBND	057056	004767	001550			JSR	PC,CHKBND	;ERROR IF B IS OFF SCREEN.
					
					;FALLS THROUGH
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 226
	TURTLE 60	PAGE 9 	DISPLAY AND TURTLE

					
					;FALLS IN
					
						
					;WHEN WE ACTUALLY DRAW THE LINE, DX AND DY ARE OF INTEREST.
					;THE STUFF IN REGISTERS NOW IS CURX+DX, ETC.
MOVSPC	057062	012602				MOV	(SP)+,C	;FRACTION PART OF DY
MOVSPB	057064	012601				MOV	(SP)+,B	;THE INTEGER PART OF DY
JSRPCFIX	057066	004767	001572			JSR	PC,FIX
MOVBE	057072	010104				MOV	B,E	;THIS IS DY.
					
MOVSPC	057074	012602				MOV	(SP)+,C	;THE FRACTION PART OF DX
MOVSPB	057076	012601				MOV	(SP)+,B	;THE INTEGER PART OF DX.
JSRPCFIX	057100	004767	001560			JSR	PC,FIX
MOVBD	057104	010103				MOV	B,D	;THIS IS DX.
					
MOVMTO.P2MTO.P1B	057106	012701	000004			MOV	#<MTO.P2-MTO.P1>,B	;A SORT OF FLAG FOR MOVETO
JSRPCMOVETO	057112	004767	000250			JSR	PC,MOVETO	;DRAW A LINE OR PUT ADDXY INTO DLIST
MOVSPDIREC	057116	012667	124620			MOV	(SP)+,DIREC	;RESTORE DIREC
					
DISGO						DISGO
BISBDISBITNGCSRJMPNORT	057130	000167	170302			JMP	NORT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 227
	TURTLE 60	PAGE 10 	DISPLAY AND TURTLE

					
					
					;SETX
					;	IF THE PEN IS UP, SIMPLY SET THE CURRENT X TO THE ARG.
					;	IF THE PEN IS DOWN, DRAW A LINE.
SETXMOVCURXA	057134	012700	003676		SETX:	MOV	#CURX,A
MOVNEWXF	057140	012705	002434			MOV	#NEWX,F
JSRPCSET.A	057144	004767	000142			JSR	PC,SET.A	;RETURNS DX IN B AND SET CURX
MOVAF	057150	012025				MOV	(A)+,(F)+	;SET NEWY TO CURY
MOVAF	057152	011015				MOV	(A),(F)	;SET FRACTION OF NEWY TO FRACTION OF CURY
MOVBD	057154	010103				MOV	B,D	;DX
CLRE	057156	005004				CLR	E	;DY
BRSETMOV	057160	000421				BR	SETMOV
					
					
					;SETY
					;	SIMILAR TO SETX
SETYMOVCURXA	057162	012700	003676		SETY:	MOV	#CURX,A
MOVNEWXF	057166	012705	002434			MOV	#NEWX,F
MOVAF	057172	012025				MOV	(A)+,(F)+	;SET NEWX TO CURX
MOVAF	057174	012025				MOV	(A)+,(F)+	;SET FRACTION OF NEWY TO FRACTION OF CURY
JSRPCSET.A	057176	004767	000110			JSR	PC,SET.A	;RETURNS DY IN B.
CLRD	057202	005003				CLR	D	;DX
MOVBE	057204	010104				MOV	B,E	;DY
BRSETMOV	057206	000406				BR	SETMOV
					
					
					;SETXY
					;	CALLED WITH TWO ARGS. AND DOES THE OBVIOUS THING.
SETXYJSRPCG2NARG	057210	004767	167272		SETXY:	JSR	PC,G2NARG	;B=X, A=Y
MOVAE	057214	010004				MOV	A,E
MOVBD	057216	010103				MOV	B,D
JSRPCSXY.S	057220	004767	000110			JSR	PC,SXY.S	;GETS DX AND DY
SETMOVMOVDIRECSP	057224	016746	124512		SETMOV:	MOV	DIREC,-(SP)
CLRB	057230	005001				CLR	B	;A FLAG THAT CAUSES DIREC TO BE CALCULATED IN MOVETO
JSRPCMOVETO	057232	004767	000130			JSR	PC,MOVETO	;DRAW LINE OR DO ADDXY
MOVSPDIREC	057236	012667	124500			MOV	(SP)+,DIREC	;BUT RESTORE GLOBAL DIREC
					
DISGO						DISGO
BISBDISBITNGCSRJMPNORT	057250	000167	170162			JMP	NORT
					
					
					;SETTURTLE
					;	ARGUMENT IS A LIST OF 3 NUMBERS
					;	SETXY TO FIRST TWO SNUMS, AND SETHEADING TO THE THIRD
SETTUR					SETTURTLE:
MOVSC	057254	017702	124150			MOV	@S,C	;ARGUMENT
JSRPCLD3NUM	057260	004767	167412			JSR	PC,LD3NUM	;GET 3 NUMBERS IN D,E,F
MOVFSP	057264	010546				MOV	F,-(SP)	;SAVE ANGLE FOR SETHEADING LATER
JSRPCSPOPT	057266	004767	132704			JSR	PC,SPOPT	;AND POP S	
JSRPCSXY.S	057272	004767	000036			JSR	PC,SXY.S	;GETS DX AND DY
CLRB	057276	005001				CLR	B	;A FLAG THAT CAUSES DIREC TO BE CALCULATED IN MOVETO
JSRPCMOVETO	057300	004767	000062			JSR	PC,MOVETO	;DRAW LINE OR DO ADDXY
MOVSPB	057304	012601				MOV	(SP)+,B	;PUT THE ANGLE INTO B
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 228
	TURTLE 60	PAGE 10.1 	DISPLAY AND TURTLE

					
JMPDRT.HD	057306	000167	000226			JMP	DRT.HD	;AND JUMP TO SETHEADING PROGRAM
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 229
	TURTLE 60	PAGE 11 	DISPLAY AND TURTLE

					
					;THIS PAGE IS VARIOUS SUBROUTINES USED BY THE SET COMMANDS.
					
					;SET.A
					;	CALL WITH A POINTING TO EITHER CURX OR CURY
					;	CALL WITH F POINTING TO EITHER NEWX OR NEWY
					;	TAKES AN ARGUMENT OFF OF THE S PDL.  PUTS THE ARG IN NEW
					;	PUTS ARG - CURRENT IN B
SET.AJSRPCG1NARG	057312	004767	167176		SET.A:	JSR	PC,G1NARG	;NUMERIC ARGUMENT IN B.
					
					;ENTER HERE IF ARGUMENT IS ALREADY IN B
SET.A1JSRPCCHKBND	057316	004767	001310		SET.A1:	JSR	PC,CHKBND	;IS NUMBER IN BOUNDS?
MOVBF	057322	010125				MOV	B,(F)+	;PUT IN NEW
CLRF	057324	005025				CLR	(F)+	;CLEAR THE FRACTION PART OF NEW.
JSRPCSUBXY	057326	004767	001266			JSR	PC,SUBXY	;RETURNS INTEGER OF B-CURRENT IN B.
RTSPC	057332	000207				RTS	PC
					
					
					;SXY.S
					;	CALL WITH D = NEW X
					;	CALL WITH E = NEW Y
					;	GET DX AND DY
SXY.SMOVCURXA	057334	012700	003676		SXY.S:	MOV	#CURX,A
MOVNEWXF	057340	012705	002434			MOV	#NEWX,F
MOVDB	057344	010301				MOV	D,B	;X
JSRPCSET.A1	057346	004767	177744			JSR	PC,SET.A1	;RETURN DX IN B
MOVBD	057352	010103				MOV	B,D
MOVEB	057354	010401				MOV	E,B	;Y
JSRPCSET.A1	057356	004767	177734			JSR	PC,SET.A1	;RETURN DY IN B
MOVBE	057362	010104				MOV	B,E
RTSPC	057364	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 230
	TURTLE 60	PAGE 12 	DISPLAY AND TURTLE

					
					
					;MOVE TO
					
					
					;ENTER HERE WITH D = DX, AND E = DY
					;IF THE PEN IS DOWN, DRAW A LINE
					;IF THE PEN IS UP, INSERT ADDX AND ADDY COMMANDS
					
MOVETOTSTD	057366	005703			MOVETO:	TST	D	;IS DX=0
BNEMTO.1	057370	001002				BNE	MTO.1	;NO
TSTE	057372	005704				TST	E	;IS DY=0, TOO
BEQMTO.R	057374	001421				BEQ	MTO.R	;RETURN
					
MTO.1BITBPENUFDFLAGS	057376	132767	000001	124311	MTO.1:	BITB	#PENUF,DFLAGS	;IS THE PEN UP?
BNEMTO.PU	057404	001016				BNE	MTO.PU	;YES
					;THE PEN IS DOWN.  DRAW A LINE
MTO.PDADDBPC	057406	060107			MTO.PD:	ADD	B,PC	;B WAS SET SUCH THAT
					;			IF MOVETO CALLED FROM SETXY, ETC. , THERE IS NO SKIP
					;			BUT IF MOVETO CALLED FROM FORWARD THERE IS A SKIP
MTO.P1JSRPCXYDIR	057410	004767	001736		MTO.P1:	JSR	PC,XYDIR
MTO.P2JSRPCDR.LIN	057414	004767	002760		MTO.P2:	JSR	PC,DR.LIN	;DRAW THE LINE
					
					;AT THIS POINT, WE HAVE SUCCESSFULLY DONE THE COMMAND.
					;THEREFORE SET CURX AND CURY TO THEIR NEW VALUES, AND EXIT
MTO.XYMOVCURXA	057420	012700	003676		MTO.XY:	MOV	#CURX,A	;POINT A TO CURX
MOVNEWXF	057424	012705	002434			MOV	#NEWX,F	;POINT F TO NEWX
MOVFA	057430	012520				MOV	(F)+,(A)+	;MOVE NEWX TO CURX
MOVFA	057432	012520				MOV	(F)+,(A)+	;MOVE FRACTION OF NEWX TO F. OF CURX
MOVFA	057434	012520				MOV	(F)+,(A)+	;MOVE NEWY TO CURY
MOVFA	057436	011510				MOV	(F),(A)	;MOVE FRACTION OF NEWY TO F. OF CURY
MTO.RRTSPC	057440	000207			MTO.R:	RTS	PC
					
					
					
					;THE PEN IS UP
					;PUT ADDX AND ADDY COMMANDS INTO DISPLAY LIST
MTO.PUSPUSH					MTO.PU:	SPUSH	#MTO.XY	;SO THAT THE RTS BELOW WILL WORK
MOVMTO.XYPMOVSTTA	057446	016700	124246			MOV	STT,A	;TOP OF STATIC DISPLAY AREA.
MTO.ADDA	057452	062700	000004		MTO.:	ADD	#4,A	;WHERE NEW TOP WILL BE
CMPADYB	057456	020067	124240			CMP	A,DYB	;PROVIDING THERE'S ROOM.
BLTMTO.RM	057462	002401				BLT	MTO.RM	;THERE'S ROOM
ERRORERRORTML	057464	104440				ERROR+TML	;TOO MANY LINES
					
MTO.RMMOVASTT	057466	010067	124226		MTO.RM:	MOV	A,STT
MOVPUSHJTA	057472	016710	124250			MOV	PUSHJT,(A)	;DISPLAY JUMP TO TURTLE
BICD	057476	042703	176000			BIC	#176000,D	;IN CASE EITHER DX OR DY WERE NEGATIVE
BICE	057502	042704	176000			BIC	#176000,E	;CLEAR THE TOP 6 BITS
BISADDYE	057506	052704	144000			BIS	#ADDY,E	;TURN E INTO ADDY COMMAND
MOVEA	057512	010440				MOV	E,-(A)	;STORE IN DLIST
BISADDXD	057514	052703	150000			BIS	#ADDX,D	;TURN D INTO ADDX COMMAND
MOVDA	057520	010340				MOV	D,-(A)	;STORE IN DLIST
BICBHOOKFDFLAGS	057522	142767	000002	124165		BICB	#HOOKF,DFLAGS	;FOR LINE DRAWER
RTSPC	057530	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 231
	TURTLE 60	PAGE 13 	DISPLAY AND TURTLE

					
DLTNEGB	057532	005401			DLT:	NEG	B
					
					;DISPLAY RIGHT AND LEFT
					
DRTADDCURAB	057534	066701	124146		DRT:	ADD	CURA,B
DRT.HDJSRPCMOD360	057540	004767	001126		DRT.HD:	JSR	PC,MOD360	;SET B=B MOD 360
MOVBCURA	057544	010167	124136			MOV	B,CURA
JSRPCANGCRP	057550	004767	001242			JSR	PC,ANGCRP	;DO ALL THE ANGLE CRAP.
					;			CALCULATE DIREC, SIN, AND COS.
BITBHIDETFDFLAGS	057554	132767	000004	124133		BITB	#HIDETF,DFLAGS	;IS THE TURTLE BEING HIDDEN ?
BNEDRTRET	057562	001002				BNE	DRTRET	;YES. SO RETURN
					
					;THE TURTLE IS BEING SHOWN. SO DRAW THE TURTLE
JSRPCDR.TUR	057564	004767	002742			JSR	PC,DR.TUR
					
DRTRETDISGO					DRTRET:	DISGO
BISBDISBITNGCSRJMPNORT	057576	000167	167634			JMP	NORT
					
					
					;SETHEAD
					;	LIKE RIGHT, EXCEPT SET CURA TO ARGUMENT
SETHEAJSRPCG1NARG	057602	004767	166706		SETHEAD:	JSR	PC,G1NARG	;NUMERIC ARGUMENT IN B
BRDRT.HD	057606	000754				BR	DRT.HD	;JUMP INTO RIGHT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 232
	TURTLE 60	PAGE 14 	DISPLAY AND TURTLE

					
					
					;HERE
					;	OUTPUT A SENTENCE OF CURX,CURY,CURA
HEREMOVCURXD	057610	012703	003676		HERE:	MOV	#CURX,D
JSRPCPSHINT	057614	004767	167010			JSR	PC,PSHINT	;PUSH INTEGER OF CURX ONTO S-PDL
JSRPCPSHINT	057620	004767	167004			JSR	PC,PSHINT	;PUSH INTEGER OF CURY
MOVDB	057624	011301				MOV	(D),B	;CURRENT ANGLE
HERE.1JSRPCPSHNUM	057626	004767	167002		HERE.1:	JSR	PC,PSHNUM	;PUSH CURRENT ANGLE
HERE.2SPUSH					HERE.2:	SPUSH	#3	;PUSH 3 ONTO P-PDL
MOVPJMPSENTEN	057636	000167	161770			JMP	SENTENCE
					
					;HOME
					;	OUTPUT A SENTENCE OF 0 0 0
HOMECLRB	057642	005001			HOME:	CLR	B
JSRPCPSHNUM	057644	004767	166764			JSR	PC,PSHNUM
SPUSHS						SPUSHS	B	;AND PUSH IT AGAIN
SUBSMOVBSSPUSHS						SPUSHS	B	;AND AGAIN
SUBSMOVBSBRHERE.2	057674	000756				BR	HERE.2
					
					
					;XCOR
					;	OUTPUT THE X COORDINATE
XCORMOVCURXD	057676	012703	003676		XCOR:	MOV	#CURX,D
BR	057702	000402				BR	.+6
					;YCOR
					;	OUTPUT THE Y COORDINATE
YCORMOVCURYD	057704	012703	003702		YCOR:	MOV	#CURY,D
JMPR1INT	057710	000167	166674			JMP	R1INT	;RETURN INTEGER
					
					
					;HEADING
					;	RETURN THE CURRENT ANGLE
HEADINMOVCURAB	057714	016701	123766		HEADING:	MOV	CURA,B
JMPR1NARG	057720	000167	166670			JMP	R1NARG
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 233
	TURTLE 60	PAGE 15 	DISPLAY AND TURTLE

					
					
					;	HIDETURTLE
HIDETU					HIDETURTLE:
BISBHIDETFDFLAGS	057724	152767	000004	123763		BISB	#HIDETF,DFLAGS	;SET THE HIDETURTLE FLAG
MOVDPOPDSTOPTUB	057732	012777	140600	123770		MOV	#DPOP!DSTOP,@TUB	;DISPLAY POP AND STOP
DISGO						DISGO
BISBDISBITNGCSRJMPNORT	057746	000167	167464			JMP	NORT
					
					
					;	SHOWTURTLE
SHOWTU					SHOWTURTLE:
BITBHIDETFDFLAGS	057752	132767	000004	123735		BITB	#HIDETF,DFLAGS	;IS TURTLE HIDDEN NOW ?
BEQSHOWT9	057760	001405				BEQ	SHOWT9	;NO, IT'S ALREADY BEING SHOWN
					;HAVE TO DRAW THE TURTLE
BICBHIDETFDFLAGS	057762	142767	000004	123725		BICB	#HIDETF,DFLAGS	;CLEAR THE FLAG FIRST
JSRPCDR.TUR	057770	004767	002536			JSR	PC,DR.TUR
SHOWT9DISGO					SHOWT9:	DISGO
BISBDISBITNGCSRJMPNORT	060002	000167	167430			JMP	NORT
					
					
					;	DISPLAY PENUP
DPUBISBPENUFDFLAGS	060006	152767	000001	123701	DPU:	BISB	#PENUF,DFLAGS
JMPNORT	060014	000167	167416			JMP	NORT
					
					
					;	DISPLAY PENDOWN
DPDBICBPENUFDFLAGS	060020	142767	000001	123667	DPD:	BICB	#PENUF,DFLAGS
JMPNORT	060026	000167	167404			JMP	NORT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 234
	TURTLE 60	PAGE 16 	DISPLAY AND TURTLE

					
					
					;SNAP
					;	OUTPUTS STUFF ON THE SCREEN
					;	TRANSFER D. CODE STARTING AT STB+2 AND GOING ALL THE WAY TO STT
					;	INTO THE DYNAMIC AREA.
					;	RETURNS A LIST OF CURX, CURY AND POINTER TO SNAP
SNAPMOVSNABOTD	060032	016703	123676		SNAP:	MOV	SNABOT,D	;BOTTOM OF STUFF TO BE SNAPPED
JSRPCDYXFR	060036	004767	001356			JSR	PC,DYXFR	;TRANSFER THE DCODE.
					;			SET D = POINTER TO DCODE
TSTD	060042	005703				TST	D	;IF 0
BEQSNAP.3	060044	001452				BEQ	SNAP.3	;NO CODE MOVED
					
					;NOW PUT THIS SNAP ON THE SNAP LIST
SNAP.1MOVSNLISTC	060046	016702	123660		SNAP.1:	MOV	SNLIST,C	;POINTER TO SNAP LIST
BNESNAP.2	060052	001007				BNE	SNAP.2
MOVSNUMA	060054	012700	120000			MOV	#SNUM,A	;FIRST SNAP
CLRB	060060	005001				CLR	B	;CREATE SNAP LIST. FIRST NODE IS A DUMMY
JSRPCGRBAD	060062	004767	175222			JSR	PC,GRBAD
MOVCSNLIST	060066	010267	123640			MOV	C,SNLIST
SNAP.2JSRPC.LDP1	060072	004767	173576		SNAP.2:	JSR	PC,.LDP1	;POINTER TO REST OF SNAP LIST
MOVDB	060076	010301				MOV	D,B	;PUT PTR TO SNAP IN B
JSRPCGRBAD1	060100	004767	175206			JSR	PC,GRBAD1	;:KILINK NODE IN A,B TO NODE IN (C)
					
					;CHECK THAT THIS SNAP WON'T CAUSE DISPLAY PDL OVERFLOW
TSTD	060104	005743				TST	-(D)	;POINTER TO SNAP
CMPDDPDLL	060106	024327	000060			CMP	-(D),#DPDLL	;DEPTH COUNTER
BLE	060112	003401				BLE	.+4
ERRORERRORSTD	060114	104436				ERROR+STD	;SNAP TOO DEEP
					;NOW SET UP THE 3 NODE SNAP STRUCTURE ITSELF
JSRPCPSHNUM	060116	004767	166512			JSR	PC,PSHNUM	;PUSH THE POINTER ONTO S-PDL
MOVCURXD	060122	012703	003676			MOV	#CURX,D
JSRPCGETINT	060126	004767	000526			JSR	PC,GETINT	;INTEGER OF CURX IN B
SUBOLDXB	060132	166701	123552			SUB	OLDX,B	;TO GET DELTA X
JSRPCPSHNUM	060136	004767	166472			JSR	PC,PSHNUM	;PUSH ON S-PDL
JSRPCGETINT	060142	004767	000512			JSR	PC,GETINT	;INTEGER OF CURY
SUBOLDYB	060146	166701	123540			SUB	OLDY,B	;TO GET DELTA-Y
JSRPCPSHNUM	060152	004767	166456			JSR	PC,PSHNUM
MOVSNPSP	060156	012746	100000			MOV	#SNP,-(SP)	;TYPE OF LIST SENTENCE WILL CREATE
MOVD	060162	012703	000003			MOV	#3,D	;NUMBER OF ARGS TO SENTENCE
JMPSNPSEN	060166	000167	161446			JMP	SNPSEN	;JUMP INTO SENTENCE
					
					;SINCE NO DISPLAY CODE WAS MOVED, RETURN EMPTY SNAP
SNAP.3MOVSNPA	060172	012700	100000		SNAP.3:	MOV	#SNP,A
JMPORTA	060176	000167	167676			JMP	ORTA
					
					
					
					;NEWSNAP
					;SET UP FOR NEXT SNAP TO START HERE
NEWSNAMOVNORTSP	060202	012746	047436		NEWSNAP:	MOV	#NORT,-(SP)	;ENTER HERE FROM LOGO
NEWSN1MOVCURXD	060206	012703	003676		NEWSN1:	MOV	#CURX,D	;ENTER HERE AS SUBROUTINE
JSRPCGETINT	060212	004767	000442			JSR	PC,GETINT	;GET INTEGER OF CURX IN B
MOVBOLDX	060216	010167	123466			MOV	B,OLDX
JSRPCGETINT	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 235
	TURTLE 60	PAGE 16.1 	DISPLAY AND TURTLE

	060222	004767	000432			JSR	PC,GETINT	;GET INTEGER OF CURY IN B
MOVBOLDY	060226	010167	123460			MOV	B,OLDY
NEWSN2MOVSTTSNABOT	060232	016767	123462	123474	NEWSN2:	MOV	STT,SNABOT	;RESET SNAP BOTTOM TO TOP OF DISPLAY
BICBHOOKFDFLAGS	060240	142767	000002	123447		BICB	#HOOKF,DFLAGS	;TELL LINE DRAWER THAT LAST WORD OF DLIST ISN'T INCREMENTS
RTSPC	060246	000207				RTS	PC	;EITHER RETURN FROM SUBROUTINE , OR JMP NORT
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 236
	TURTLE 60	PAGE 17 	DISPLAY AND TURTLE

					
					;DISPLAY A SINGLE SNAP
					
DISPLA					DISPLAY:
JSRPCG1SNAP	060250	004767	166402			JSR	PC,G1SNAP	;LOAD D,E,F WITH PTR TO SNAP,CURX,CURY
BRD.RET	060254	000446				BR	D.RET	;RETURNS HERE IF ARG IS EMPTY
MOVEB	060256	010401				MOV	E,B
ADDCURXB	060260	066701	123412			ADD	CURX,B
JSRPCCHKBND	060264	004767	000342			JSR	PC,CHKBND	;IS NEW X COR IN BOUNDS?
MOVFB	060270	010501				MOV	F,B
ADDCURYB	060272	066701	123404			ADD	CURY,B
JSRPCCHKBND	060276	004767	000330			JSR	PC,CHKBND	;IS NEW Y COR IN BOUNDS?
					
					;NOW SEE IF THERE'S ENOUGH ROOM IN THE DISPLAY AREA
MOVSTTA	060302	016700	123412			MOV	STT,A	;TOP OF THE STATIC AREA
ADDA	060306	062700	000004			ADD	#4,A	;RAISE IT 4 BYTES
CMPADYB	060312	020067	123404			CMP	A,DYB	;COMPARE TO BOTTOM OF DYNAMIC AREA
BLTDISRM	060316	002401				BLT	DISRM
ERRORERRORTML	060320	104440				ERROR+TML	;TOO MANY LINES
					
					;FINALLY, WE CAN PLACE THE PUSHJ TO THE SNAP INTO THE DISPLAY LIST
DISRMINCD	060322	005263	177776		DISRM:	INC	-2(D)	;INCREMENT THE REF COUNTER OF THE SNAP
MOVASTT	060326	010067	123366			MOV	A,STT	;SET STATIC TOP TO HERE IN DLIST
MOVPUSHJTA	060332	016710	123410			MOV	PUSHJT,(A)	;PUT PUSHJ TO TURTLE AT TOP OF DLIST
MAKEPJ						MAKEPJ D
SUBDISRELDASRDBISDPUSHJDMOVDA	060350	010340				MOV	D,-(A)	;PUT IN THE PUSHJ
CLRA	060352	005040				CLR	-(A)	;PRECEDE BY A NOP
					
					;NOW, SET CURX AND CURY
ADDECURX	060354	060467	123316			ADD	E,CURX	;E HAD DX OF THE SNAP
ADDFCURY	060360	060567	123316			ADD	F,CURY	;F HAS DY OF THE SNAP
					
BICBHOOKFDFLAGS	060364	142767	000002	123323		BICB	#HOOKF,DFLAGS	;TELL LINE DRAWER THAT LAST DWORD NOT INCREMENTS
D.RETDISGO					D.RET:	DISGO
BISBDISBITNGCSRJSRPCSPOPT	060400	004767	131572			JSR	PC,SPOPT	;POP S
JMPNORT	060404	000167	167026			JMP	NORT	;RETURN
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 237
	TURTLE 60	PAGE 18 	DISPLAY AND TURTLE

					
					;WIPE A SNAP
					
WIPEJSRPCG1SNAP	060410	004767	166242		WIPE:	JSR	PC,G1SNAP	;LOAD D,E,F WITH PTR TO SNAP, X,  Y
					
BRD.RET	060414	000766				BR	D.RET	;RETURNS HERE IF ARG IS EMPTY
BICE	060416	042704	176000			BIC	#176000,E	;CLEAR TOP 6 BITS
BISADDXE	060422	052704	150000			BIS	#ADDX,E	;AND TURN INTO ADDX COMMAND
BICF	060426	042705	176000			BIC	#176000,F	;CLEAR TOP 6 BITS
BISADDYF	060432	052705	144000			BIS	#ADDY,F	;TURN INTO ADDY
					
MOVDB	060436	010301				MOV	D,B
TSTD	060440	005743				TST	-(D)	;POINT D TO SNAP'S REF COUNTER
MAKEPJ						MAKEPJ B	;MAKE B INTO DPUSHJ TO SNAP
SUBDISRELBASRBBISDPUSHJBMOVSTTA	060454	016700	123240			MOV	STT,A	;POINTER TO TOP OF DISPLAY LIST
MOVSTBC	060460	016702	123232			MOV	STB,C	;POINTER TO BOTTOM OF DLIST
					
WIPE.LCMPAC	060464	020002			WIPE.L:	CMP	A,C	;ARE WE AT THE BOTTOM YET?
BLTD.RET	060466	002741				BLT	D.RET	;YES, SO WE ARE DONE
CMPBA	060470	020140				CMP	B,-(A)	;IS THE NEXT WORD A PUSHJ?
BNEWIPE.L	060472	001374				BNE	WIPE.L	;NO.  LOOP BACK AND TRY ANOTHER
					;YES!  IT IS A PUSHJ
					;PUT ADDX AND ADDY COMMANDS INTO DLIST
MOVFA	060474	010510				MOV	F,(A)
MOVEA	060476	010440				MOV	E,-(A)
					
DECD	060500	005313				DEC	(D)	;DECREMENT REF COUNTER
BRWIPE.L	060502	000770				BR	WIPE.L	;AND THEN LOOP BACK TO SEE IF THERE'S ANOTHER
					;			PUSHJ TO THIS SNAP
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 238
	TURTLE 60	PAGE 19 	DISPLAY AND TURTLE

					
					
					;WIPE THE ENTIRE DISPLAY
					
WIPECL					WIPECLEAN:
MOVSTBA	060504	016700	123206			MOV	STB,A	;POINTER TO BOTTOM OF DISPLAY LIST
MOVSTTB	060510	016701	123204			MOV	STT,B	;POINTER TO TOP OF DLIST
					MOVE	060514	012704	100000			MOV	#100000,E	;SMALLEST DPUSHJ
MOVF	060520	012705	140000			MOV	#140000,F	;SMALLEST COMMAND BIGGER THAN PUSHJ
					
WC.LPCMPBA	060524	020100			WC.LP:	CMP	B,A	;ARE WE AT BOTTOM YET?
BLTWC.DUN	060526	002412				BLT	WC.DUN	;YES, WE ARE DONE
CMPBE	060530	024104				CMP	-(B),E	;IS NEXT WORD DOWN A PUSHJ?
BLOWC.LP	060532	103774				BLO	WC.LP	;NO, IT'S TOO SMALL
CMPBF	060534	021105				CMP	(B),F
BHISWC.LP	060536	103372				BHIS	WC.LP	;NO, IT'S TOO BIG
					;THIS WORD IS A PUSHJ
MOVBD	060540	011103				MOV	(B),D	;MOVE	THE PUSHJ COMMAND INTO D
MAKEAD						MAKEAD D	;TURN INTO PDP-11 ADDRESS
ASLDADDDISRELDDECD	060550	005343				DEC	-(D)	;DECREMENT SNAP'S REF COUNTER
BRWC.LP	060552	000764				BR	WC.LP	;LOOP BACK TO LOOK FOR MORE PUSHJ'S
					
					;NOW PLACE ADDX AND ADDY COMMANDS IN THE DISPLAY LIST
					;SO THAT THE TURTLE WILL STAY AT THE SAME PLACE IT WAS BEFORE THE WIPE
WC.DUNMOVCURXD	060554	012703	003676		WC.DUN:	MOV	#CURX,D
JSRPCGETINT	060560	004767	000074			JSR	PC,GETINT	;GET INTEGER OF  CURX IN B
SPUSH						SPUSH	B	;SAVE DX
MOVBPJSRPCGETINT	060566	004767	000066			JSR	PC,GETINT	;GET INTEGER OF CURY IN B
MOVBE	060572	010104				MOV	B,E	;PUT DY IN E
SPOP						SPOP	D	;PUT DX IN B
MOVPDJSRPCMTO.	060576	004767	176650			JSR	PC,MTO.	;PUTS THE ADD COMMANDS INTO THE DLIST, STARTING AT A
JSRPCNEWSN1	060602	004767	177400			JSR	PC,NEWSN1	;SO THAT SNAPS WILL START HERE
					
DISGO						DISGO
BISBDISBITNGCSRJMPNORT	060614	000167	166616			JMP	NORT	;RETURN
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 239
	TURTLE 60	PAGE 20 	DISPLAY UTILITY ROUTINES

					.STITL DISPLAY UTILITY ROUTINES
					
					
					;SUBXY
					;	CALL WITH AN INTEGER IN B
					;	CALL WITH A POINTER TO CURX OR CURY IN A
					;	RETURNS THE INTEGER OF B-CURRENT X OR Y IN B
					;	ALSO LEAVES A POINTING TO WORD AFTER THE FRACTION PART
SUBXYSUBAB	060620	162001			SUBXY:	SUB	(A)+,B	;B-CUR
TSTA	060622	005720				TST	(A)+	;TEST THE FRACTION PART
BGESUBXY9	060624	002001				BGE	SUBXY9	;BRANCH IF THE HIGH BIT IS OFF
DECB	060626	005301				DEC	B	;ROUND THE ANSWER DOWN
SUBXY9RTSPC	060630	000207			SUBXY9:	RTS	PC
					
					
					;CHKBND
					;	CHECK BOUNDS.  ERROR IF B IS OFF SCREEN
CHKBNDCMPB	060632	020127	000144		CHKBND:	CMP	B,#100.
BGTERROOB	060636	003004				BGT	ERROOB
CMPB	060640	020127	177634			CMP	B,#-100.
BLTERROOB	060644	002401				BLT	ERROOB
RTSPC	060646	000207				RTS	PC
					;THE NUMBER IS OUT OF BOUNDS
ERROOBMOVPUSHJTSTT	060650	012777	003746	123042	ERROOB:	MOV	#PUSHJT,@STT	;A VERY SIMPLE ERROR RECOVERY 
ERRORERROROOB	060656	104430				ERROR+OOB
					
					
					;	CALL WITH D POINTING TO CURX OR CURY.
					;	RETURN THE INTEGER OF CURX OR CURY IN B
GETINTMOVDB	060660	012301			GETINT:	MOV	(D)+,B
MOVDC	060662	012302				MOV	(D)+,C
					;FIX
					;	CALL WITH INTEGER IN B AND FRACTION IN C
					;	RETURNS INTEGER ROUNDED CORRECTLY IN B
FIXROLC	060664	006102			FIX:	ROL	C	;PUT TOP BIT OF C INTO CARRY
ADCB	060666	005501				ADC	B	;SO THAT B IS ROUNDED UP IFF TOP BIT OF C SET
RTSPC	060670	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 240
	TURTLE 60	PAGE 21 	DISPLAY UTILITY ROUTINES

					
					
					;MOD360
					;	OUTPUT B MOD 360 IN B.
					;	ALWAYS OUTPUTS A POSITIVE NUMBER
MOD360MOVC	060672	012702	000550		MOD360:	MOV	#360.,C
MOVACA	060676	012700	177302			MOV	#AC,A
CLRA	060702	005010				CLR	(A)	;CLEAR HIGH PART OF DIVIDEND
MOVBA	060704	010160	000002			MOV	B,2(A)	;MOVE NUMBER TO LOW PART OF DIVIDEND
BGEM360A	060710	002001				BGE	M360A
COMA	060712	005110				COM	(A)	;EXTEND SIGN TO HIGH PART OF DIVIDEND
M360AMOVCA	060714	010240			M360A:	MOV	C,-(A)	;360 TO DIVISOR
MOVAB	060716	016001	000002			MOV	2(A),B	;REMAINDER
BGEM360R	060722	002001				BGE	M360R
ADDCB	060724	060201				ADD	C,B	;IF REMAINDER WAS NEGATIVE, ADD 360 TO IT
					
M360RRTSPC	060726	000207			M360R:	RTS	PC
					
					
					
					;MULCOS
					;	RETURN A*COSINE OF CURA IN B,,C
MULCOSMOVCOSAB	060730	016701	123004		MULCOS:	MOV	COSA,B
BRMULCS2	060734	000402				BR	MULCS2
					;MULSIN
					;	RETURN A*SINE OF CURA IN B,,C
MULSINMOVSINAB	060736	016701	122774		MULSIN:	MOV	SINA,B
MULCS2MOVDSP	060742	010346			MULCS2:	MOV	D,-(SP)	;GUESS WHY
CLRD	060744	005003				CLR	D	;USE D AS FLAG
TSTB	060746	005701				TST	B
BPLMULCS3	060750	100003				BPL	MULCS3
DECD	060752	005303				DEC	D	;TO MARK THAT B WAS NEGATIVE
BICB	060754	042701	100000			BIC	#100000,B	;WHEN TRIG THINGS ARE SUPPOSED TO BE NEG.
					;			THEY ARE INSTEAD STORED POSITIVE, BUT WITH TOP BIT SET
MULCS3MOVMQF	060760	012705	177304		MULCS3:	MOV	#MQ,F
MOVBF	060764	010125				MOV	B,(F)+	;MULTIPLICAND
MOVAF	060766	010015				MOV	A,(F)	;MULTIPLIER
MOVFC	060770	014502				MOV	-(F),C	;LOW ORDER PRODUCT = FRACTION
MOVFB	060772	014501				MOV	-(F),B	;HIGH ORDER PRODUCT = INTEGER
ASLC	060774	006302				ASL	C	;MULTIPLY FRACTION AND
ROLB	060776	006101				ROL	B	;INTEGER BY 2.
TSTD	061000	005703				TST	D	;WAS THE TRIG THING NEGATIVE?
BGEMULCS9	061002	002003				BGE	MULCS9
NEGC	061004	005402				NEG	C	;SINCE THE TRIG FUNCTION WAS NEGATIVE, NEGATE FRACTION
ADCB	061006	005501				ADC	B	;INCREMENT INTEGER UNLESS, FRACTION WAS 0
NEGB	061010	005401				NEG	B	;AND NEGATE THE INTEGER.
MULCS9MOVSPD	061012	012603			MULCS9:	MOV	(SP)+,D	;RESTORE D
RTSPC	061014	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 241
	TURTLE 60	PAGE 22 	DISPLAY UTILITY ROUTINES

					
					
					;ANGCRP
					;	CALCULATE ANGLE CRAP.
					;	CALCULATE DIREC, SINA, COSA
ANGCRPMOVCURAA	061016	016700	122664		ANGCRP:	MOV	CURA,A	;THE CURRENT ANGLE
MOVE	061022	012704	000132			MOV	#90.,E
MOVMQF	061026	012705	177304			MOV	#MQ,F
MOVAF	061032	010015				MOV	A,(F)	;THE DIVIDEND
CLRF	061034	005045				CLR	-(F)
MOVEF	061036	010445				MOV	E,-(F)	;THE DIVISOR = 90.
TSTF	061040	005725				TST	(F)+
MOVFA	061042	012500				MOV	(F)+,A	;THE REMAINDER
MOVFF	061044	011505				MOV	(F),F	;THE QUOTIENT
MOVAC	061046	010002				MOV	A,C	;SAVE THE REMAINDER
SUBAE	061050	160004				SUB	A,E	;NOW E = 90.- REMAINDER
JSRPCSINGET	061052	004767	000110			JSR	PC,SINGET	;D_SIN (A)
MOVDB	061056	010301				MOV	D,B
MOVEA	061060	010400				MOV	E,A
JSRPCSINGET	061062	004767	000100			JSR	PC,SINGET
MOVE	061066	012704	100000			MOV	#100000,E	;BIS THIS GUY WHEN TRIG THINGS ARE SUPPOSED TO BE NEGATIVE
ASLF	061072	006305				ASL	F	;F = 0,1,2,3
ADDFPC	061074	060507				ADD	F,PC	;JUMP THROUGH THIS DISPATCH TABLE
BRACR.D	061076	000416				BR	ACR.D
BRACRII	061100	000411				BR	ACRII	;QUADRANT II
BRACRIII	061102	000405				BR	ACRIII	;QUADRANT III
					;FOURTH QUADRANT
MOVBA	061104	010100				MOV	B,A	;SIN (A)
MOVDB	061106	010301				MOV	D,B	;SIN (90-A)
BISEB	061110	050401				BIS	E,B	;SINA=-SIN(90-A) IN 4TH QUADRANT
MOVAD	061112	010003				MOV	A,D	;AND COSA=SIN(A) IN 4TH QUADRANT
BRACR.D	061114	000407				BR	ACR.D
					
					;THE THIRD QUADRANT
ACRIIIBISEB	061116	050401			ACRIII:	BIS	E,B	;SINA = -SIN (A) IN 3RD QUADRANT
BISED	061120	050403				BIS	E,D	;COSA = - SIN (90-A) IN 3RD QUADRANT
BRACR.D	061122	000404				BR	ACR.D
					
					;SECOND QUADRANT
ACRIIMOVBA	061124	010100			ACRII:	MOV	B,A	;SIN (A)
MOVDB	061126	010301				MOV	D,B	;SINA = SIN (90-A) IN 2ND QUADRANT
MOVAD	061130	010003				MOV	A,D
BISED	061132	050403				BIS	E,D	;COSA = -SIN (A) IN 2ND QUADRANT
					
					;IN THE FIRST QUADRANT
					;SINA = SIN (A) AND
					;COSA = SIN (90-A)
ACR.DMOVBSINA	061134	010167	122576		ACR.D:	MOV	B,SINA
MOVDCOSA	061140	010367	122574			MOV	D,COSA
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 242
	TURTLE 60	PAGE 23 	DISPLAY UTILITY ROUTINES

					
					
					;NOW GET DIREC.  DIREC IS THE DIRECTION CODE FOR THE DISPLAY CODE
CMPC	061144	022702	000055			CMP	#45.,C	;IS THE REMAINDER MORE THAN 45?
ADCF	061150	005505				ADC	F	;CARRY WAS SET IF C<45
ASLF	061152	006305				ASL	F
ASLF	061154	006305				ASL	F
ASLF	061156	006305				ASL	F
MOVFDIREC	061160	010567	122556			MOV	F,DIREC
					
RTSPC	061164	000207				RTS	PC
					
					;GET SIN (A) INTO D.
					;THE SINE TABLE HAS ONLY EVEN ANGLES.  INTERPOLATE ODD ANGLES.
SINGETBITA	061166	032700	000001		SINGET:	BIT	#1,A	;ODD OR EVEN
BEQAEVEN	061172	001406				BEQ	AEVEN
ADDSINA	061174	062700	061217			ADD	#<SIN+1>,A	;POINT TO ANGLE AFTER IT
MOVAD	061200	011003				MOV	(A),D	;SIN (A+1)
ADDAD	061202	064003				ADD	-(A),D	;PLUS SIN (A-1)
ASRD	061204	006203				ASR	D	;DIVIDED BY 2
RTSPC	061206	000207				RTS	PC
AEVENMOVSINAD	061210	016003	061216		AEVEN:	MOV	SIN(A),D
RTSPC	061214	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 243
	TURTLE 60	PAGE 24 	DISPLAY UTILITY ROUTINES

					
					
					;BEAUTIFUL SINE TABLE IN WHOOPIE FORMAT
					
					
SIN					SIN:
					
	061216	000000				0	;0 DEGREES
	061220	002167				2167	;2 DEGREES
	061222	004355				4355	;4 DEGREES
	061224	006541				6541	;6 DEGREES
	061226	010720				10720	;8 DEGREES
	061230	013072				13072	;10 DEGREES
	061232	015234				15234	;12 DEGREES
	061234	017367				17367	;14 DEGREES
	061236	021510				21510	;16 DEGREES
	061240	023615				23615	;18 DEGREES
	061242	025707				25707	;20 DEGREES
	061244	027763				27763	;22 DEGREES
	061246	032017				32017	;24 DEGREES
	061250	034034				34034	;26 DEGREES
	061252	036027				36027	;28 DEGREES
	061254	040000				40000	;30 DEGREES
	061256	041724				41724	;32 DEGREES
	061260	043623				43623	;34 DEGREES
	061262	045474				45474	;36 DEGREES
	061264	047315				47315	;38 DEGREES
	061266	051106				51106	;40 DEGREES
	061270	052646				52646	;42 DEGREES
	061272	054352				54352	;44 DEGREES
	061274	056023				56023	;46 DEGREES
	061276	057437				57437	;48 DEGREES
	061300	061015				61015	;50 DEGREES
	061302	062335				62335	;52 DEGREES
	061304	063615				63615	;54 DEGREES
	061306	065035				65035	;56 DEGREES
	061310	066214				66214	;58 DEGREES
	061312	067331				67331	;60 DEGREES
	061314	070404				70404	;62 DEGREES
	061316	071413				71413	;64 DEGREES
	061320	072357				72357	;66 DEGREES
	061322	073255				73255	;68 DEGREES
	061324	074107				74107	;70 DEGREES
	061326	074674				74674	;72 DEGREES
	061330	075412				75412	;74 DEGREES
	061332	076062				76062	;76 DEGREES
	061334	076463				76463	;78 DEGREES
	061336	077016				77016	;80 DEGREES
	061340	077301				77301	;82 DEGREES
	061342	077514				77514	;84 DEGREES
	061344	077660				77660	;86 DEGREES
	061346	077754				77754	;88 DEGREES
	061350	077777				77777	;90 DEGREES
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 244
	TURTLE 60	PAGE 25 	DISPLAY UTILITY ROUTINES

					
					;XYDIR
					;	CALL WITH D=DX, E=DY
					;	CALCULATE DIREC BASED ON DX AND DY
XYDIRCLRA	061352	005000			XYDIR:	CLR	A	;BUILD INDEX IN A
TSTD	061354	005703				TST	D	;IS DX POSITIVE
BGEXYDIR1	061356	002002				BGE	XYDIR1
NEGD	061360	005403				NEG	D	;ABSOLUTE VALUE OF DX
TSTA	061362	005720				TST	(A)+	;PUT 2 INTO A
XYDIR1TSTE	061364	005704			XYDIR1:	TST	E	;IS DY POSITIVE
BGEXYDIR2	061366	002002				BGE	XYDIR2
NEGE	061370	005404				NEG	E	;ABSOLUTE VALUE OF DY
INCA	061372	005200				INC	A	;INCREMENT INDEX
XYDIR2CMPDE	061374	020304			XYDIR2:	CMP	D,E	;WILL GENERATE CARRY IF D<E
ROLA	061376	006100				ROL	A	;PUT CARRY INTO BOTTOM BIT OF INDEX.  AND MULTIPLY REST BY 2
MOVBDRECADIREC	061400	116067	061410	122334		MOVB	DREC(A),DIREC	;NOW MOVE THE RIGHT THING INTO DIREC
RTSPC	061406	000207				RTS	PC
DREC.BYTE	061410	   010			DREC:	.BYTE 10
.BYTE	061411	   000				.BYTE 0
.BYTE	061412	   020				.BYTE 20
.BYTE	061413	   030				.BYTE 30
.BYTE	061414	   060				.BYTE 60
.BYTE	061415	   070				.BYTE 70
.BYTE	061416	   050				.BYTE 50
.BYTE	061417	   040				.BYTE 40
.EVEN		061420				.EVEN
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 245
	TURTLE 60	PAGE 26 	DISPLAY UTILITY ROUTINES

					
					
					;DYXFR
					;	TRANSFER FROM STATIC AREA TO DYNAMIC AREA
					;	THE CODE BEING TRANSFERRED STARTS AT D AND GOES UP TO STT
					;	ON RETURN, D POINTS TO THE TRANSFERRED DCODE
					;	IF NO CODE WAS TRANSFERRED, THEN D = 0.
DYXFRMOVSTTE	061420	016704	122274		DYXFR:	MOV	STT,E
SUBDE	061424	160304				SUB	D,E	;LENGTH OF DCODE TO BE MOVED
BLEDYRET	061426	003527				BLE	DYRET	;NOTHING TO BE MOVED
					;ALLOCATE STORAGE
					;LENGTH OF BLOCK TO BE ALLOCATED IS IN E
DYALADDE	061430	062704	000006		DYAL:	ADD	#6,E	;INCREASE LENGTH TO ALLOW FOR REF CNTR, DEPTH CNTR, AND POPJ
MOVDYRB	061434	016701	122264			MOV	DYR,B	;INITIALIZE POINTER
MOVC	061440	012702	000001			MOV	#1,C	;INITIALIZE FLAG
DYAL1MOVBA	061444	016100	000002		DYAL1:	MOV	2(B),A	;POINTER TO NEXT FREE BLOCK
BNEDYAL2	061450	001005				BNE	DYAL2
DECC	061452	005302				DEC	C	;NO NEXT FREE BLOCK--TEST AND SET FLAG
BNEDYAL7	061454	001031				BNE	DYAL7	;NO MORE ROOM--GO TO EXPAND DY AREA
MOVDYBB	061456	016701	122240			MOV	DYB,B	;START AGAIN AT BOTTOM OF LIST
BRDYAL1	061462	000770				BR	DYAL1
DYAL2MOVAF	061464	011005			DYAL2:	MOV	(A),F	;FREE BLOCK FOUND--CHECK LENGTH
SUBEF	061466	160405				SUB	E,F
BPLDYAL4	061470	100002				BPL	DYAL4
DYAL3MOVAB	061472	010001			DYAL3:	MOV	A,B	;BLOCK TOO SHORT--MOVE TO NEXT BLOCK
BRDYAL1	061474	000763				BR	DYAL1
DYAL4BNEDYAL5	061476	001003			DYAL4:	BNE	DYAL5	;BLOCK LONG ENOUGH--IF FILLED EXACTLY
MOVAB	061500	016061	000002	000002		MOV	2(A),2(B)	;REMOVE BLOCK FROM LIST BY CHANGING POINTERS
DYAL5CMPF	061506	020567	116270		DYAL5:	CMP	F,2	;DONT LEAVE A BLOCK OF LENGTH 2 BYTES
BEQDYAL3	061512	001767				BEQ	DYAL3
MOVFA	061514	010510				MOV	F,(A)	;NEW LENGTH OF FREE BLOCK
MOVBC	061516	016102	000002			MOV	2(B),C	;RESET ROVING POINTER
BNEDYAL6	061522	001002				BNE	DYAL6	;DONT SET IT TO O
MOVDYBC	061524	016702	122172			MOV	DYB,C
DYAL6MOVCDYR	061530	010267	122170		DYAL6:	MOV	C,DYR	
ADDFA	061534	060500				ADD	F,A	;START STORING AT THIS ADDRESS
BRDYAL9	061536	000421				BR	DYAL9
DYAL7MOVDYBA	061540	016700	122156		DYAL7:	MOV	DYB,A	;ADD NEW BLOCK TO BOTTOM OF LIST
MOVAF	061544	016005	000002			MOV	2(A),F	;POINTER TO 2ND FREE BLOCK
SUBEA	061550	160400				SUB	E,A
CMPASTT	061552	020067	122142			CMP	A,STT
BGTDYAL8	061556	003001				BGT	DYAL8	;THERE IS ENOUGH ROOM IN THE DY AREA
ERRORERRORTML	061560	104440				ERROR+TML
DYAL8MOVADYB	061562	010067	122134		DYAL8:	MOV	A,DYB	;NEW BOTTOM OF DY
MOVADYR	061566	010067	122132			MOV	A,DYR	;FIX ROVING POINTER
MOVDYBC	061572	016702	122124			MOV	DYB,C	;SET UP NEW LIST BOTTOM
CLRA	061576	005020				CLR	(A)+
MOVFA	061600	010520				MOV	F,(A)+
DYAL9SUBE	061602	162704	000006		DYAL9:	SUB	#6,E	;RESTORE LENGTH
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 246
	TURTLE 60	PAGE 27 	DISPLAY UTILITY ROUTINES

					
					
					;NOW A CONTAINS ADDRESS OF FREE BLOCK
					;E CONTAINS NUMBER OF BYTES TO BE TRANSFERRED
					;NOW FINALLY YOU GET TO DO THE TRANSFER
					;WHILE YOU DO IT, INCREMENT THE REF COUNTER OF ANY PUSHJ'S
DYXFR1MOVC	061606	012702	100000		DYXFR1:	MOV	#100000,C	;THE CODE FOR DISPLAY PUSHJ
MOVB	061612	012701	140000			MOV	#140000,B	;NEXT HIGHER DISPLAY COMMAND
SPUSH						SPUSH	A	;SAVE POINTER TO DEPTH COUNTER
MOVAPCLRA	061620	005020				CLR	(A)+	;DEPTH_0
CLRA	061622	005020				CLR	(A)+	;SET REFERENCE COUNTER TO ZERO
ASRE	061624	006204				ASR	E	;E/2 = NUMBER OF WORDS TO BE TRANSFERRED
					;PICK UP A WORD.  SEE IF ITS A PUSHJ. AND TRANSFER IT
DYXFR2DECE	061626	005304			DYXFR2:	DEC	E	;NUMBER OF WORDS TO BE XFRED
BLTDYXFR3	061630	002420				BLT	DYXFR3
MOVDF	061632	012305				MOV	(D)+,F	;WORD OF DCODE IN F
MOVFA	061634	010520				MOV	F,(A)+	;PUT THIS WORD IN ITS NEW PLACE
CMPFC	061636	020502				CMP	F,C
BLODYXFR2	061640	103772				BLO	DYXFR2	;NOT A PUSHJ
CMPFB	061642	020501				CMP	F,B
BHISDYXFR2	061644	103370				BHIS	DYXFR2	;NOT A PUSHJ
					;IT IS A PUSHJ
MAKEAD						MAKEAD	F
ASLFADDDISRELFINCF	061654	005245				INC	-(F)	;INCREMENT THE REF COUNTER
CMPFSP	061656	024576	000000			CMP	-(F),@(SP)	;DEPTH _ MAX (DEPTH OF SUB SNAPS)
BLEDYXFR2	061662	003761				BLE	DYXFR2
MOVFSP	061664	011576	000000			MOV	(F),@(SP)	;DEPTH OF SUB SNAP BIGGEST YET
BRDYXFR2	061670	000756				BR	DYXFR2	;LOOP BACK
					
					;ALL TRANSFERRING DONE.  END THE BLOCK WITH A POPJ
DYXFR3MOVDPOPJA	061672	012710	140100		DYXFR3:	MOV	#DPOPJ,(A)
SPOP						SPOP	D	;POINTER TO DEPTH COUNTER
MOVPDINCD	061700	005223				INC	(D)+
TSTD	061702	005723				TST	(D)+	;POINTER TO FIRST D.WORD OF SNAP
RTSPC	061704	000207				RTS	PC	;AND RETURN
					
					;THERE WAS NOTHING TO BE MOVED
DYRETCLRD	061706	005003			DYRET:	CLR	D	;TO SIGNAL THIS FACT
RTSPC	061710	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 247
	TURTLE 60	PAGE 28 	DISPLAY UTILITY ROUTINES

					
					;DYFREE
					;	CALLED DURING GARBAGE COLLECTIONS
					;	CALL WITH D POINTING TO REF COUNTER (WORD BEFORE SNAP)
					;	FREES THE BLOCK!!
DYFREEPUSH					DYFREE:	PUSH	A	;SAVE REGISTERS
MOVAPJSRPCPPUSHTSPUSH						SPUSH	B
MOVBPSPUSH						SPUSH	C
MOVCPSPUSH						SPUSH	D
MOVDPSPUSH						SPUSH	E
MOVEPSPUSH						SPUSH	F
MOVFP					
MOVA	061732	012700	100000			MOV	#100000,A
MOVB	061736	012701	140000			MOV	#140000,B
MOVDPOPJC	061742	012702	140100			MOV	#DPOPJ,C
JSRPCDYF1	061746	004767	000004			JSR	PC,DYF1	;DOES THE FREEING
JMPRETF	061752	000167	163512			JMP	RETF	;RESTORE AC'S AND RETURN TO OUT OF DYFREE
					
					;REAL WORK OF FREEING STARTS HERE.
DYF1MOVDSP	061756	010346			DYF1:	MOV	D,-(SP)	;SAVE PTR TO 2ND WORD OF BLOCK
TSTD	061760	005723				TST	(D)+	;POINT D TO FIRST WORD
					
					;PICK UP EACH WORD OF BLOCK.  IF IT IS A PUSHJ, FREE THAT BLOCK
					;CONTINUE UNTIL A POPJ IS REACHED
DYF11MOVDF	061762	012305			DYF11:	MOV	(D)+,F	;NEXT WORD
CMPFA	061764	020500				CMP	F,A
BLODYF11	061766	103775				BLO	DYF11	;NOT PUSHJ OR POPJ
CMPFB	061770	020501				CMP	F,B
BHISDYF2	061772	103013				BHIS	DYF2	;NOT PUSHJ, BUT MAY BE POPJ
					
					;	ITS A PUSHJ
MAKEAD						MAKEAD	F
ASLFADDDISRELFDECF	062002	005345				DEC	-(F)	;REF COUNTER
BNEDYF11	062004	001366				BNE	DYF11	;SNAP BEING DISPLAYED, OR EXISTS IN LOGO
SPUSH						SPUSH	D	;SAVE WHERE YOU ARE IN THIS BLOCK
MOVDPMOVFD	062010	010503				MOV	F,D	;POINTER TO NEW BLOCK TO BE FREED
JSRPCDYF1	062012	004767	177740			JSR	PC,DYF1	;RECURSE (GOD DAMN IT AGAIN)
SPOP						SPOP	D	;RESTORE PLACE IN THIS BLOCK
MOVPDBRDYF11	062020	000760				BR	DYF11	;LOOK AT NEXT WORD
					
					;IS THE WORD A POPJ
DYF2CMPFC	062022	020502			DYF2:	CMP	F,C	;C CONTAINS A POPJ
BNEDYF11	062024	001356				BNE	DYF11	;NOT A POPJ.  LOOK AT NEXT WORD
SPOP						SPOP	C	;POINTER TO 2ND WORD OF BLOCK
MOVPCTSTC	062030	005742				TST	-(C)	;NOW IT POINTS TO BOTTOM WORD
SUBCD	062032	160203				SUB	C,D	;LENGTH OF BLOCK
MOVDF	062034	010305				MOV	D,F
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 248
	TURTLE 60	PAGE 29 	DISPLAY UTILITY ROUTINES

					
					
					;NOW LINK BLOCK BACK TO FREE CORE
					;C/ADDRESS OF BLOCK TO BE LIBERATED
					;F CONTAINS LENGTH OF BLOCK
					
DYLIBMOVDYBB	062036	016701	121660		DYLIB:	MOV	DYB,B	;INITIALIZE POINTER TO BOTTOM OF LIST
DYLIB1MOVBA	062042	016100	000002		DYLIB1:	MOV	2(B),A	;NEXT FREE BLOCK
BEQDYLIB3	062046	001422				BEQ	DYLIB3	;AT END OF LIST
CMPAC	062050	020002				CMP	A,C
BGTDYLIB2	062052	003002				BGT	DYLIB2	;PASSED BLOCK TO BE FREED
MOVAB	062054	010001				MOV	A,B	;TRY NEXT FREE BLOCK
BRDYLIB1	062056	000771				BR	DYLIB1
DYLIB2MOVFD	062060	010503			DYLIB2:	MOV	F,D	;CHECK UPPER BOUND
ADDCD	062062	060203				ADD	C,D	;DO WE COLLAPSE NEW BLOCK WITH NEXT ONE?
CMPDA	062064	020300				CMP	D,A
BNEDYLIB3	062066	001012				BNE	DYLIB3	;NO
ADDAF	062070	061005				ADD	(A),F	;YES--NEW LENGTH
MOVAC	062072	016062	000002	000002		MOV	2(A),2(C)	;NEW POINTER
CMPADYR	062100	020067	121620			CMP	A,DYR	;DID WE JUST SCREW ROVING POINTER?
BNEDYLIB4	062104	001005				BNE	DYLIB4
MOVDYBDYR	062106	016767	121610	121610		MOV	DYB,DYR	;YES--RESET IT
DYLIB3MOVAC	062114	010062	000002		DYLIB3:	MOV	A,2(C)	;POINTER TO NEXT FREE BLOCK--NO COLLAPSE ON TOP
DYLIB4MOVBD	062120	011103			DYLIB4:	MOV	(B),D	;CHECK LOWER BOUND
ADDBD	062122	060103				ADD	B,D
CMPDC	062124	020302				CMP	D,C	;DO WE COLLAPSE WITH BLOCK ON BOTTOM?
BNEDYLIB5	062126	001005				BNE	DYLIB5	;NO
ADDFB	062130	060511				ADD	F,(B)	;NEW LENGTH OF PREVIOUS BLOCK
MOVCB	062132	016261	000002	000002		MOV	2(C),2(B)	;NEW POINTER
BRDYLIB6	062140	000403				BR	DYLIB6
DYLIB5MOVCB	062142	010261	000002		DYLIB5:	MOV	C,2(B)	;POINTER IN PREVIOUS BLOCK--NO COLLAPSE
MOVFC	062146	010512				MOV	F,(C)	;LENGTH OF BLOCK JUST FREED
DYLIB6MOVCA	062150	010200			DYLIB6:	MOV	C,A	;DID WE JUST FREE BOTTOM BLOCK IN DY?
SUBA	062152	162700	000004			SUB	#4,A
CMPADYB	062156	020067	121540			CMP	A,DYB	;NOTE THAT IF CURRENT BLOCK = DYB+4
								;THEN PREVIOUS BLOCK (ADDR IN B) MUST BE DYB
BNEDYLIB7	062162	001011				BNE	DYLIB7	;NO
ADDCB	062164	061201				ADD	(C),B	;YES--COLLAPSE DY AREA
CLRB	062166	005011				CLR	(B)
MOVCB	062170	016261	000002	000002		MOV	2(C),2(B)	;NEW BOTTOM BLOCK
MOVBDYB	062176	010167	121520			MOV	B,DYB
MOVBDYR	062202	010167	121516			MOV	B,DYR	;FIX POINTERS
DYLIB7RTSPC	062206	000207			DYLIB7:	RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 249
	TURTLE 60	PAGE 30 	DISPLAY UTILITY ROUTINES

					
					
					;DSGCF
					;	CALLED BY LOGO GARBAGE COLLECTOR WHEN ITS ALL DONE
					;	SEE IF EACH SNAP ON THE SNAP LIST WAS MARKED.
					;	AND DYFREE THE SNAP IF NOT MARKED AND IT'S REFERENCE COUNTER IS 0
					
DSGCFCLRF	062210	005005			DSGCF:	CLR	F
BRDSGC1	062212	000405				BR	DSGC1
					
DSGC4TSTF	062214	005705			DSGC4:	TST	F	;0 IF FIRST TIME THROUGH
BEQ	062216	001401				BEQ	.+4
DSGC9RTSPC	062220	000207			DSGC9:	RTS	PC
MOVDSGC6DSGCF1F	062222	012705	000026			MOV	#<DSGC6-DSGCF1>,F	;NOW CLEAR MARKED BITS
DSGC1MOVSNLISTC	062226	016702	121500		DSGC1:	MOV	SNLIST,C	;POINTER TO SNAP LIST
BEQDSGC9	062232	001772				BEQ	DSGC9	;OBVIOUSLY DOESN'T HAVE SNAPS
					
JSRPC.LOADC	062234	004767	171324			JSR	PC,.LOADC	;FIRST NODE OF LIST IS DUMMY
DSGC2MOVCE	062240	010204			DSGC2:	MOV	C,E	;SAVE POINTER TO NODE
DSGC3BITA	062242	032700	007777		DSGC3:	BIT	#7777,A	;LEAVE ADDRESS ONLY
BEQDSGC4	062246	001762				BEQ	DSGC4	;END OF LIST
MOVAC	062250	010002				MOV	A,C	;POINTER TO NEXT NODE
JSRPC.LOADC	062252	004767	171306			JSR	PC,.LOADC
ADDFPC	062256	060507				ADD	F,PC	;CHOOSE BETWEEN FREEING AND CLEARING
					
					;TRY TO FREE THE SNAP
DSGCF1TSTB	062260	005741			DSGCF1:	TST	-(B)	;WAS SNAP MARKED?  (B POINTS TO REF COUNT)
BNEDSGC2	062262	001366				BNE	DSGC2	;EITHER DISPLAYED OR MARKED
					
					;NOT MARKED, AND NOT DISPLAYED ANYWHERE!!
					;FREE THIS SNAP
JSRPC.FREE	062264	004767	173144			JSR	PC,.FREE	;CLEAN UP SNLIST
MOVEC	062270	010402				MOV	E,C	;POINTER TO PREVIOUS NODE OF SNLIST
JSRPC.STP1	062272	004767	171344			JSR	PC,.STP1	;STORE A AS TOP WORD OF PREVIOUS NODE
MOVBD	062276	010103				MOV	B,D	;POINTER TO SNAP DCODE
JSRPCDYFREE	062300	004767	177406			JSR	PC,DYFREE
BRDSGC3	062304	000756				BR	DSGC3
					
DSGC6BICB	062306	042741	100000		DSGC6:	BIC	#100000,-(B)	;CLEAR MARKED BIT
BRDSGC3	062312	000753				BR	DSGC3
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 250
	TURTLE 60	PAGE 31 	DISPLAY UTILITY ROUTINES

					
					
					;MKDC
					;	CALLED BY LOGO GARBAGE COLLECTOR DURING MARKING PHASE
					;	CALLED WITH B POINTING TO SNAP NODE
MKDCTSTSNLIST	062314	005767	121412		MKDC:	TST	SNLIST	;CALLED TO KILL THE DISPLAY?
BEQMKDC.K	062320	001422				BEQ	MKDC.K	;YES
BITB	062322	032701	007777			BIT	#7777,B
BEQDSGC9	062326	001734				BEQ	DSGC9	;EMPTY SNAP
					;MARK THE SNAP
PUSH						PUSH	A
MOVAPJSRPCPPUSHTSPUSH						SPUSH	B
MOVBPJSRPC.LOAD	062340	004767	171222			JSR	PC,.LOAD
MOVSNUMA	062344	012700	120000			MOV	#SNUM,A
JSRPCCONVER	062350	004767	163274			JSR	PC,CONVERT	;GET SNAP ADDRESS INTO B
BRMKDC.R	062354	000402				BR	MKDC.R	;IF DOESN'T SKIP, THEN BAD NODE!!!!!!!!!!!!!!!BISB	062356	052741	100000			BIS	#100000,-(B)	;MARK THE REF COUNTER
MKDC.RJMPRETB	062362	000167	163132		MKDC.R:	JMP	RETB	;RESTORE A AND B
					
					;CALLED BY KILLDISPLAY
					;TURN SNAP INTO EMPTY SNAP
MKDC.KMOVSNPB	062366	012701	100000		MKDC.K:	MOV	#SNP,B	;EMPTY SNAP
JSRPC.STP2	062372	004767	171240			JSR	PC,.STP2
RTSPC	062376	000207				RTS	PC
					
					
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 251
	TURTLE 60	PAGE 32 	DISPLAY UTILITY ROUTINES

					
					;HERE START THE LINE AND TURTLE DRAWING PROGRAMS
					
					;DR.LIN
					;	DRAW A LINE. D=DX, E=DY, OR VICE VERSA.
					;	THE DIRECTION CODE FOR THE LINE IS IN DIREC
DR.LINBICBTEMFDFLAGS	062400	142767	000020	121307	DR.LIN:	BICB	#TEMF,DFLAGS	;GOING TO USE TEMF SO CLEAR IT
MOVBYCNTC	062406	016702	121332			MOV	BYCNT,C
MOVBOLDIRSP	062412	116746	121276			MOVB	OLDIR,-(SP)	;IN CASE OF ERROR BOMB OUT
					
CMPBDIRECSP	062416	126716	121320			CMPB	DIREC,(SP)	;OLDIR IS THE DIREC LAST TIME DR.LIN CALLED
BEQDR.LAN	062422	001404				BEQ	DR.LAN	;THEY ARE THE SAME
MOVC	062424	012702	000001			MOV	#1,C	;NOT SAME.
MOVBDIRECSP	062430	116716	121306			MOVB	DIREC,(SP)	;SET OLDIR
					
DR.LANBITBHOOKFDFLAGS	062434	132767	000002	121253	DR.LAN:	BITB	#HOOKF,DFLAGS	;CAN NEW D.LIST BE HOOKED TO PREVIOUS ONE?
BNEDR.LBN	062442	001002				BNE	DR.LBN	;YES.
MOVC	062444	012702	000001			MOV	#1,C	;NO.
DR.LBNJSRPCDR.SC	062450	004767	000302		DR.LBN:	JSR	PC,DR.SC	;SET A=CON, B=AC.
JSRPCDR.NEP	062454	004767	000370			JSR	PC,DR.NEP	;CALCULATE NEW END POINT OF DLIST
MOVCSP	062460	010246				MOV	C,-(SP)	;SAVE THE NEW BYCNT
ADDSTTD	062462	066703	121232			ADD	STT,D	;D = HOW MANY MORE WORDS IN DLIST
CMPDDYB	062466	020367	121230			CMP	D,DYB	;COMPARE TO DY BOTTOM
BLTDR.L1	062472	002401				BLT	DR.L1	;THERE'S ROOM
ERRORERRORTML	062474	104440				ERROR+TML	;TOO MANY LINES
					
					;OKAY, THERE WAS ROOM FOR THE LINE
DR.L1MOVDSTT	062476	010367	121216		DR.L1:	MOV	D,STT	;SET STT TO NEW STATIC TOP
MOVPUSHJTD	062502	016713	121240			MOV	PUSHJT,(D)	;PUT PUSHJ TURTLE AT TOP
JSRPCDR.ASC	062506	004767	000464			JSR	PC,DR.ASC	;ASSEMBLE THE DISPLAY CODE
MOVSPBYCNT	062512	012667	121226			MOV	(SP)+,BYCNT	;THE NEW BYCNT
MOVBSPOLDIR	062516	112667	121172			MOVB	(SP)+,OLDIR	;NEW OLDIR
BISBHOOKFDFLAGS	062522	152767	000002	121165		BISB	#HOOKF,DFLAGS	;FOR NEXT TIME
RTSPC	062530	000207				RTS	PC	;RETURN
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 252
	TURTLE 60	PAGE 33 	DISPLAY UTILITY ROUTINES

					
					
					;DRAW THE TURTLE
DR.TURMOVDIRECSP	062532	016746	121204		DR.TUR:	MOV	DIREC,-(SP)	;USED LOCALLY BY DR.TUR
MOVTURSIZA	062536	012700	000004			MOV	#TURSIZ,A	;TURTLE SIZE
JSRPCMULSIN	062542	004767	176170			JSR	PC,MULSIN	;B,,C = SIZE * SINA
JSRPCFIX	062546	004767	176112			JSR	PC,FIX
MOVBE	062552	010104				MOV	B,E	;NOW E HAS INTEGER OF SIZE * SINA
JSRPCMULCOS	062554	004767	176150			JSR	PC,MULCOS	;B,,C = SIZE * COSA
JSRPCFIX	062560	004767	176100			JSR	PC,FIX
MOVBD	062564	010103				MOV	B,D	;NOW D HAS INTEGER OF SIZE * COSA
					
MOVBSP	062566	010146				MOV	B,-(SP)
SUBESP	062570	160416				SUB	E,(SP)	;NOW SIZE * (COSA - SINA) IS ON STACK
ADDEB	062572	060401				ADD	E,B
MOVBSP	062574	010146				MOV	B,-(SP)	;SIZE * (COSA + SINA) IS NOW ON STACK
					
MOVTUBTUT	062576	016767	121126	117640		MOV	TUB,TUT	;TUT WILL BE POINTER TO TOP OF TURTLE DLIST SO FAR
					
					;SIDE 1
ADDDIREC	062604	062767	000020	121130		ADD	#20,DIREC	;SIDE 1 IS 2*45 DEGREES LEFT OF CURRENT DIRECTION
JSRPCDR.TSD	062612	004767	000102			JSR	PC,DR.TSD	;DRAW THE SIDE
					
					;SIDE 2
SUBDIREC	062616	162767	000030	121116		SUB	#30,DIREC	;SIDE 2 IS 3*45 DEGREES RIGHT OF SIDE 1
MOVSPD	062624	012603				MOV	(SP)+,D	;DX IS SIZE * (COSA + SINA)
MOVSPE	062626	012604				MOV	(SP)+,E	;DY IS SIZE * (COSA - SINA)
JSRPCDR.TSD	062630	004767	000064			JSR	PC,DR.TSD	;DRAW THE SIDE
					
					;SIDE 3 HAS THE SAME INCREMENTS AS SIDE 2.
					;JUST THE DIRECTION IS DIFFERENT
MOVDIRECB	062634	016701	121102			MOV	DIREC,B
SUBB	062640	162701	000020			SUB	#20,B	;SIDE 3 IS 2*45 DEGREES RIGHT
BICB	062644	042701	177707			BIC	#177707,B	;LEAVE ONLY THE 3 BITS
SWABB	062650	000301				SWAB	B	;PUT THE DIREC BITS IN TOP BYTE
MOVTUTC	062652	016702	117566			MOV	TUT,C	;POINTS TO WORD ABOVE LAST ONE OF TURTLE DLIST
MOVCA	062656	010200				MOV	C,A
SUBDC	062660	160302				SUB	D,C	;SINCE D POINTS TO BOTTOM WORD OF SIDE 2
								;C-D IS NUMBER OF BYTES IN SIDE 2'S DLIST
ASRC	062662	006202				ASR	C	;C/2 = NUMBER OF WORDS
DR.TS3MOVDE	062664	012304			DR.TS3:	MOV	(D)+,E	;NEXT WORD OF SIDE 2'S DLIST
BICE	062666	042704	034000			BIC	#34000,E	;CLEAR THE DIRECTION BITS THEREIN
BISBE	062672	050104				BIS	B,E	;AND SET THEM FROM THE NEW DIREC IN B
MOVEA	062674	010420				MOV	E,(A)+	;STORE IN DLIST
DECC	062676	005302				DEC	C	;NUMBER OF WORDS IN SIDE 2'S DLIST
BGTDR.TS3	062700	003371				BGT	DR.TS3	;THERE ARE MORE WORDS
					
					;SIDE 4 IS IDENTICAL TO SIDE 1
					;FURTHERMORE, SIDE 1 IS MADE UP OF ONLY ONE WORD
MOVTUBA	062702	017720	121022			MOV	@TUB,(A)+	;PUT THE FIRST WORD OF TURTLE INTO TOP WORD
MOVDPOPDSTOPA	062706	012710	140600			MOV	#DPOP!DSTOP,(A)	;DISPLAY POP AND STOP.
					
					;RESTORE DIREC, THEN RETURN
MOVSPDIREC	062712	012667	121024			MOV	(SP)+,DIREC
RTSPC	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 253
	TURTLE 60	PAGE 33.1 	DISPLAY UTILITY ROUTINES

	062716	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 254
	TURTLE 60	PAGE 34 	DISPLAY UTILITY ROUTINES

					
					
					;DRAW TURTLE SIDE
					;	DRAW ONE SIDE OF THE TURTLE
					;	DIREC CONTAINS THE DIRECTION
					;	TUT POINTS TO TOP OF TURTLE DISPLAY LIST SO FAR
					;	C,D = + OR - DX OR DY
DR.TSDBICDIREC	062720	042767	177707	121014	DR.TSD:	BIC	#177707,DIREC	;BITS MAY HAVE BEEN SET BY THE SUBTRACTING
JSRPCDR.SC	062726	004767	000024			JSR	PC,DR.SC
MOVC	062732	012702	000001			MOV	#1,C	;BYCNT
JSRPCDR.NE1	062736	004767	000114			JSR	PC,DR.NE1
ADDTUTD	062742	066703	117476			ADD	TUT,D	;D = NEW TOP OF TURTLE
MOVDTUT	062746	010367	117472			MOV	D,TUT
JMPDR.ASC	062752	000167	000220			JMP	DR.ASC	;ACTUALLY CREAT THE DISPLAY LIST
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 255
	TURTLE 60	PAGE 35 	DISPLAY UTILITY ROUTINES

					
					
					;SET UP CON AND AC
					;	CALL WITH D,E = + OR - DX OR DY
					;	RETURNS A=CON, B = AC
DR.SCTSTD	062756	005703			DR.SC:	TST	D
BGEDR.TE	062760	002001				BGE	DR.TE	;TEST E
NEGD	062762	005403				NEG	D	;MAKE D POSITIVE
					;MAKE SURE E IS POSITIVE
DR.TETSTE	062764	005704			DR.TE:	TST	E
BGEDR.BIG	062766	002001				BGE	DR.BIG	;NEXT WE'LL SEE WHICH IS BIGGER
NEGE	062770	005404				NEG	E	;MAKE D POSITIVE
					
					;WHICH IS BIGGER
DR.BIGMOVMQA	062772	012700	177304		DR.BIG:	MOV	#MQ,A
CLRA	062776	005010				CLR	(A)	;START TO SET UP DIVISION
CMPDE	063000	020304				CMP	D,E
BGTDR.DBG	063002	003011				BGT	DR.DBG	;D IS BIGGER
BEQDR.EQ	063004	001404				BEQ	DR.EQ	;THEY ARE THE SAME SIZE
					
					;OTHERWISE, E IS BIGGER
MOVDA	063006	010340				MOV	D,-(A)	;HIGH ORDER DIVIDEND
MOVEA	063010	010440				MOV	E,-(A)	;AND E IS THE DIVISOR
MOVEF	063012	010405				MOV	E,F	;WHICHEVER IS BIGGER IS THE NUMBER OF INCS
BRDR.SC4	063014	000407				BR	DR.SC4
					
					;THEY ARE THE SAME SIZE
DR.EQMOVA	063016	012700	177777		DR.EQ:	MOV	#-1,A	;SET CON = .777...
MOVEF	063022	010405				MOV	E,F	;NUMBER OF INCS
BRDR.SC5	063024	000406				BR	DR.SC5
					
					;D IS BIGGER
DR.DBGMOVEA	063026	010440			DR.DBG:	MOV	E,-(A)	;HIGH ORDER DIVIDEND
MOVDA	063030	010340				MOV	D,-(A)	;AND D IS THE DIVISOR
MOVDF	063032	010305				MOV	D,F	;NUMBER OF INCS
					
					;NOW PICK UP THE QUOTIENT
DR.SC4ADDA	063034	062700	000004		DR.SC4:	ADD	#4,A	;POINT A TO QUOTIENT
MOVAA	063040	011000				MOV	(A),A	;SET CON TO THE QUOTIENT
					
					;NOW SET AC = .1000 = 1/2 IN THIS REPRESENTATION
DR.SC5MOVB	063042	012701	100000		DR.SC5:	MOV	#100000,B
RTSPC	063046	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 256
	TURTLE 60	PAGE 36 	DISPLAY UTILITY ROUTINES

					
					
					;CALCULATE THE NEW END POINT OF THE DLIST
					;	CALL WITH F = THE NUMBER OF INCS
					;	RETURNS D = NUMBER OF MORE WORDS IN DLIST
					;	C = PLACE WHERE FIRST INCREMENT CAN GO IN LAST DWORD
DR.NEPCMPC	063050	020227	000001		DR.NEP:	CMP	C,#1
BNEDR.NE2	063054	001003				BNE	DR.NE2
					
DR.NE1BISBTEMFDFLAGS	063056	152767	000020	120631	DR.NE1:	BISB	#TEMF,DFLAGS	;TEMF IS SET WHEN YOU CAN'T HOOK
DR.NE2MOVASP	063064	010046			DR.NE2:	MOV	A,-(SP)	;SAVE A REGISTER
MOVMQD	063066	012703	177304			MOV	#MQ,D
MOVFD	063072	010513				MOV	F,(D)	;DIVIDEND=NUMBER OF INCS
CLRD	063074	005043				CLR	-(D)
MOVD	063076	012743	000010			MOV	#8.,-(D)	;DIVISOR.
TSTD	063102	005723				TST	(D)+
MOVDA	063104	012300				MOV	(D)+,A	;PUT REMAINDER IN A
MOVDD	063106	011303				MOV	(D),D	;PUT QUOTIENT INTO D
DR.N1DECA	063110	005300			DR.N1:	DEC	A	;THE REMAINDER
BLTDR.N25	063112	002413				BLT	DR.N25	;FINISHED SHIFTING, BUT BYCNT DIDNT FALL OFF
ASRC	063114	006202				ASR	C	;SHIFT BYCNT RIGHT
BCCDR.N1	063116	103374				BCC	DR.N1
					
					;SINCE CARRY SET, BYCNT FELL OFF RIGHT END OF REGISTER
RORBC	063120	106002				RORB	C	;STICK A ONE IN THE HIGH BIT OF C
INCD	063122	005203				INC	D	;INCREMENT THE QUOTIENT
MOVE	063124	012704	000100			MOV	#100,E	;INCREMENT MODE MARKER
DR.N2INCE	063130	005204			DR.N2:	INC	E	;COUNTER IN LAST DWORD
DECA	063132	005300				DEC	A	;THE REMAINDER
BLTDR.N3	063134	002411				BLT	DR.N3
ASRC	063136	006202				ASR	C	;SHIFT BYCNT RIGHT
BRDR.N2	063140	000773				BR	DR.N2
					
					;C IS SET CORRECTLY, BUT HAVE TO GET COUNT IN E
DR.N25MOVCSP	063142	010246			DR.N25:	MOV	C,-(SP)	;SAVE FOR A WHILE
MOVE	063144	012704	000111			MOV	#111,E	;INCREMENT-MODE MARKER + 9
DR.N26DECE	063150	005304			DR.N26:	DEC	E	;DEC THE COUNT
ASRC	063152	006202				ASR	C	;SHIFT  BYCNT
BCCDR.N26	063154	103375				BCC	DR.N26	;DIDN'T FALL OFF.  DEC COUNT AGAIN
MOVSPC	063156	012602				MOV	(SP)+,C	;E IS SET NOW.  RESTORE C.
					
DR.N3BICE	063160	042704	000010		DR.N3:	BIC	#10,E	;STRAY BIT THAT MIGHT BE ON
BISDIRECE	063164	056704	120552			BIS	DIREC,E	;OR IN THE DIRECTION
ASLD	063170	006303				ASL	D	;NUMBER OF WORDS IS 2*QUOTIENT
MOVSPA	063172	012600				MOV	(SP)+,A	;RESTORE A
RTSPC	063174	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 257
	TURTLE 60	PAGE 37 	DISPLAY UTILITY ROUTINES

					
					
					;ACTUALLY ASSEMBLE THE NEW DISPLAY LIST
					;	CALL WITH A=CON, B=AC, C=BYCNT, D=POINTER  TO FIRST WORD OF DLIST
					;	E=TOP HALF OF THE INC MODE INSTRUCTION, F=NUMBER OF INCS
DR.ASCSWABE	063176	000304			DR.ASC:	SWAB	E	;STUFF IN E WAS IN WRONG HALF
DR.AS0ADDAB	063200	060001			DR.AS0:	ADD	A,B	;CON+AC
BCCDR.AS1	063202	103001				BCC	DR.AS1
ADDCE	063204	060204				ADD	C,E	;CARRY, SO PUT A 1 INTO DCODE
DR.AS1DECF	063206	005305			DR.AS1:	DEC	F	;NUMBER OF INCS
BLEDR.ALW	063210	003407				BLE	DR.ALW	;THIS WAS THE LAST WORD
ASLBC	063212	106302				ASLB	C	;SHIFT BYCNT
BCCDR.AS0	063214	103371				BCC	DR.AS0	;CONTINUE WITH THIS WORD
					
					;THIS WORD DONE
MOVED	063216	010443				MOV	E,-(D)	;STORE IN DLIST
BICE	063220	042704	003777			BIC	#3777,E	;0 THE COUNT AND BOTTOM BYTE
INCC	063224	005202				INC	C	;SET C TO 1
BRDR.AS0	063226	000764				BR	DR.AS0
					
					;ALL THAT'S LEFT TO DO IS STORE THE BOTTOM WORD OF NEW DLIST
DR.ALWBITBTEMFDFLAGS	063230	132767	000020	120457	DR.ALW:	BITB	#TEMF,DFLAGS	;IS BOTTOM WORD OF NEW SAME AS TOP WORD OF OLD?
BNEDR.AS9	063236	001002				BNE	DR.AS9	;NO.
BISBDE	063240	156304	177776			BISB	-2(D),E	;SET THE BITS IN BOTTOM WORD THAT WERE ALREADY SET IN DLIST
DR.AS9MOVED	063244	010443			DR.AS9:	MOV	E,-(D)	;STORE BOTTOM WORD
					
RTSPC	063246	000207				RTS	PC
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 258
	TURTLE 60	PAGE 38 	DISPLAY UTILITY ROUTINES

					
.STITL					.STITL DISPLAY BUFFERS
					
.IF2					.IF2
PAD						PAD ^\START OF BUFFERS\,\.
.PRINT					.ENDC
					
DISREL		063250				DISREL=.	;DISPLAY RELOCATION
					
					;FIRST WORD OF EACH DISPLAY IS HERE
REPT1						REPT1 3,<DLIST+<.RPCNT*DLEN>-DISREL>/2!DPUSHJ
.XLIST.REPTDLIST.RPCNTDLENDISRELDPUSHJDLIST.RPCNTDLENDISRELDPUSHJDLIST.RPCNTDLENDISRELDPUSHJ.LISTREPT1						REPT1 5,DSTOP
.XLIST.REPTDSTOPDSTOPDSTOPDSTOPDSTOPDSTOPDSTOPDSTOPDSTOPDSTOP.LIST					
					;THE DISPLAY PDL POINTERS FOLLOW
DPDLP		063270				DPDLP=.
REPT1						REPT1 10,-1
.XLIST.REPT.LIST					
					;THE DISPLAY PDL'S GO HERE
DPDL		063310				DPDL=.
SDPDLL		063530				.=.+SDPDLL	;SAVE A BLOCK OF CORE FOR PDL'S
					
					;THE BODY OF THE DISPLAY LISTS GO HERE
DLIST		063530				DLIST=.
SDLEN		065130				.=.+SDLEN	;SAVE A BLOCK OF CORE FOR DISPLAY LISTS
					
					;THE TURTLE DISPLAY LISTS GO HERE
TLIST		065130				TLIST=.
STLEN		065210				.=.+STLEN	;SAVE A BLOCK OF CORE FOR THE TURTLES
					
					;AND THAT IS THE END OF THE DISPLAY LIST BUFFERS
DLTOP		065207				DLTOP=.-1
.STITL	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 259
	ZEND 67	PAGE 1 	DISC BLOCKS, NODE SPACE AND TEST LINES

						.STITL	DISC BLOCKS, NODE SPACE AND TEST LINES
VERN%FNAM2VERN		001754				VERN==VERN+%FNAM2
					
.MACRNODE						.MACR NODE A,B
						.XLIST
					$.==$$+1
						A
						B
					$$==$$+1
						.LIST
					.ENDM
					
VERNVERNF		001754			VERNF==VERN
SALTLLTLLTL	065210	065212			SALTL:	LTL
LTLL1L1	065212	000145			LTL:	L1
L2L2	065214	000151				L2
L3L3	065216	000156				L3
L4L4	065220	000202				L4
L5L5	065222	000220				L5
L6L6	065224	000225				L6
	065226	000000				0	;L7
	065230	000000				0	;L8
	065232	000000				0	;L9
	065234	000000				0	;L10
	065236	000000				0	;L11
	065240	000000				0	;L12
	065242	000000				0	;L13
	065244	000000				0	;L14
	065246	000000				0
					
.EVEN		065250			.EVEN
SLOT1					SLOT1:
LUVBLKPPDLLSPDLLDBUFLDDIRLMSLTLN		044404			MSLTLN==LUVBLK+PPDLL+SPDLL+DBUFL+DDIRL+<4*4096.>	;ALL YOU COULD POSSIBLY WANT
UVSAVLUVBLK		065654			UVSAV:	.=.+LUVBLK
PPDLL		066454				.=.+PPDLL
IP		066454				IP=.
PDLINK		066460			PDLINK:	.=.+4	;LINK TO PREVIOUS DISK BLOCK
SPDLL		067260				.=.+SPDLL
IS		067260				IS=.
SDLINK		067264			SDLINK:	.=.+4
HCC		000103			HCC==67.	;HASH CODE CONSTANT - A PRIME
UHCTUHCT		067324			UHCT:	.=UHCT+<2*16.>
$OB3$OB3	067324	000266				$OB3
$OB4$OB4	067326	000267				$OB4
$OB5$OB5	067330	000270				$OB5
UHCT		067342				.=UHCT+<2*23.>
$OB2$OB2	067342	000227				$OB2
UHCT		067454				.=UHCT+<2*60.>
$OB1$OB1	067454	000171				$OB1
UHCTHCC		067472				.=UHCT+<2*HCC>
DBUFDBUFL		070072			DBUF:	.=.+DBUFL
DDIRDDIRL		072072			DDIR:	.=.+DDIRL
	072072	000000				0
	072074	000000				0
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 260
	ZEND 67	PAGE 1.1 	DISC BLOCKS, NODE SPACE AND TEST LINES

					
.IF2					.IF2
PAD						PAD ^\ START OF NODESP\,\.
.PRINT					.ENDC
					
NODESP	072076	000000			NODESP:	0	;NODE 0
	072100	000000				0
NODESP		072216				.=NODESP+80.
TRUE		140024				TRUE=140000+20.
SSTRSSTR	072216	070025				SSTR+21.	;20
	072220	051124				"TR
SSTRSSTR	072222	070000				SSTR+0	;21
	072224	042525				"UE
FALSE		140026				FALSE=140000+22.
SSTRSSTR	072226	070027				SSTR+23.	;22
	072230	040506				"FA
SSTRSSTR	072232	070030				SSTR+24.	;23
	072234	051514				"LS
SSTRSSTR	072236	070000				SSTR+0		;24
	072240	000105				'E
NODESP		072722				.=NODESP+404.
L1		000145				L1=101.			;PRINT "ABCD"
SFUNSFUN	072722	000146				SFUN+102.	;NODE 101
$PRINT$PRINT	072724	005262				$PRINT
LSTRLSTR	072726	140000				LSTR+0		;102
LSTRLSTR	072730	140147				LSTR+103.
SSTRSSTR	072732	070150				SSTR+104.	;103
	072734	041101				"AB
SSTRSSTR	072736	070000				SSTR	;104
	072740	042103				"CD
L2		000151				L2=105.			;"123"
LSTRLSTR	072742	140000				LSTR+0	;105
LSTRLSTR	072744	140152				LSTR+106.
SSTRSSTR	072746	070153				SSTR+107.	;106
	072750	031061				"12
SSTRSSTR	072752	070000				SSTR	;107
	072754	000063				'3
SFUNSFUN	072756	000000				SFUN	;108
	072760	000000				0
SFUNSFUN	072762	000000				SFUN		;109
	072764	000000				0
L3		000156				L3=110.			;(PRINT "AXBYJ" "1Q" "FOOBAR")
SFUNSFUN	072766	000157				SFUN+111.	;110
$LPAR$LPAR	072770	006026				$LPAR
SFUNSFUN	072772	000160				SFUN+112.	;111
$PRINT$PRINT	072774	005262				$PRINT
LSTRLSTR	072776	140165				LSTR+117.	;112
LSTRLSTR	073000	140162				LSTR+114.
SSTRSSTR	073002	070000				SSTR+0		;113
	073004	050461				"1Q
SSTRSSTR	073006	070163				SSTR+115.	;114
	073010	054101				"AX
SSTRSSTR	073012	070164				SSTR+116.	;115
	073014	054502				"BY
SSTRSSTR	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 261
	ZEND 67	PAGE 1.2 	DISC BLOCKS, NODE SPACE AND TEST LINES

	073016	070000				SSTR+0		;116
	073020	000112				'J
LSTRLSTR	073022	140166				LSTR+118.	;117
LSTRLSTR	073024	140161				LSTR+113.
ATOMATOM	073026	110167				ATOM+119.	;118
ATOMATOM	073030	110172				ATOM+122.
SFUNSFUN	073032	000000				SFUN+0	;119
$RPAR$RPAR	073034	006034				$RPAR
SFUNSFUN	073036	000000				SFUN+0		;120
	073040	000000				0
$OB1		000171			$OB1=121.
	073042	000000				0		;121 = START OF UOB BUCKET 60.
$FOO$FOO	073044	000172				$FOO
$FOO		000172				$FOO=122.
ATOMATOM	073046	110175				ATOM+125.		;122 - HEADER OF FIRST UOE
LSTRLSTR	073050	140173				LSTR+123.
SSTRSSTR	073052	070174				SSTR+124.	;123
	073054	047506				"FO
SSTRSSTR	073056	070000				SSTR+0		;124
	073060	000117				'O
VBINDVBIND$FOOF	073062	030241				VBIND+$FOOF		;125 - VARIABLE BINDING OF 1ST UOE
LSTRLSTR	073064	140176				LSTR+126.
SSTRSSTR	073066	070177				SSTR+127.	;126
	073070	047506				"FO
SSTRSSTR	073072	070200				SSTR+128.	;127
	073074	041117				"OB
SSTRSSTR	073076	070000				SSTR+0		;128
	073100	051101				"AR
	073102	000000				0		;129
	073104	000000				0
L4		000202				L4=130.		;IF "TRUE" THEN PRINT "TRUE" ELSE PRINT "FALSE"
SFUNSFUN	073106	000203				SFUN+131.	;130
$IF$IF	073110	004750				$IF
LSTRLSTR	073112	140206				LSTR+134.	;131
LSTRLSTR	073114	140204				LSTR+132.
SSTRSSTR	073116	070205				SSTR+133.	;132
	073120	051124				"TR
SSTRSSTR	073122	070000				SSTR+0		;133
	073124	042525				"UE
SFUNSFUN	073126	000207				SFUN+135.	;134
$THEN$THEN	073130	005616				$THEN
SFUNSFUN	073132	000210				SFUN+136.	;135
$PRINT$PRINT	073134	005262				$PRINT
LSTRLSTR	073136	140211				LSTR+137.	;136
LSTRLSTR	073140	140204				LSTR+132.
SFUNSFUN	073142	000212				SFUN+138.	;137
$ELSE$ELSE	073144	004500				$ELSE
SFUNSFUN	073146	000213				SFUN+139.	;138
$PRINT$PRINT	073150	005262				$PRINT
LSTRLSTR	073152	140000				LSTR+0	;139
LSTRLSTR	073154	140214				LSTR+140.
SSTRSSTR	073156	070215				SSTR+141.	;140
	073160	040506				"FA
SSTRSSTR	073162	070216				SSTR+142.	;141
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 262
	ZEND 67	PAGE 1.3 	DISC BLOCKS, NODE SPACE AND TEST LINES

	073164	051514				"LS
SSTRSSTR	073166	070000				SSTR+0		;142
	073170	000105				'E
SFUNSFUN	073172	000000				SFUN+0		;143
	073174	000000				0
$$		000220				$$=144.
$$L5		000220			L5=$$	;MAKE "BAR" "AB1C"
NODE						NODE SFUN+$.,$MAKE
.XLIST$$$.SFUNSFUN$.$MAKE$MAKE$$$$.LISTNODE						NODE ATOM+$.,ATOM+$BAR
.XLIST$$$.ATOMATOM$.ATOMATOM$BAR$$$$.LISTNODE						NODE LSTR,LSTR+$.
.XLIST$$$.LSTRLSTRLSTRLSTR$.$$$$.LISTNODE						NODE SSTR+$.,"AB
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR,"1C
.XLIST$$$.SSTRSSTR$$$$.LIST$$L6		000225			L6=$$	;PRINT :BAR
NODE						NODE SFUN+$.,$PRINT
.XLIST$$$.SFUNSFUN$.$PRINT$PRINT$$$$.LISTNODE						NODE UVAR,UVAR+$BAR
.XLIST$$$.UVARUVARUVARUVAR$BAR$$$$.LIST$$$OB2		000227			$OB2=$$
NODE						NODE 0,$BAR	;START OF UOB BUCKET 23.
.XLIST$$$.$BAR$BAR$$$$.LIST$$$BAR		000230			$BAR=$$
NODE						NODE ATOM,LSTR+$.
.XLIST$$$.ATOMATOMLSTRLSTR$.$$$$.LISTNODE						NODE SSTR+$.,"BA
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR,'R
.XLIST$$$.SSTRSSTR$$$$.LIST$$L7		000233			L7==$$	;FOO :BAR "GRINCH"
NODE						NODE UFUN+$.,$FOO
.XLIST$$$.UFUNUFUN$.$FOO$FOO$$$$.LISTNODE						NODE UVAR+$.,UVAR+$BAR
.XLIST$$$.UVARUVAR$.UVARUVAR$BAR$$$$.LISTNODE						NODE LSTR,LSTR+$.
.XLIST$$$.LSTRLSTRLSTRLSTR$.$$$$.LISTNODE						NODE SSTR+$.,"GR
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR+$.,"IN
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR,"CH
.XLIST$$$.SSTRSSTR$$$$.LIST$$$FOOF		000241			$FOOF=$$
NODE						NODE FBIND+$.,LIST+$FLLP
.XLIST$$$.FBINDFBIND$.LISTLIST$FLLP$$$$.LISTNODE						NODE SFBIND,LIST+$FSFB
.XLIST$$$.SFBINDSFBINDLISTLIST$FSFB$$$$.LIST$$$FLLP		000243			$FLLP=$$
NODE						NODE LIST+$.,LIST+$FL0
.XLIST$$$.LISTLIST$.LISTLIST$FL0$$$$.LISTNODE						NODE LIST+$.,LIST+$FL1
.XLIST$$$.LISTLIST$.LISTLIST$FL1$$$$.LISTNODE						NODE LIST,LIST+$FL2
.XLIST$$$.LISTLISTLISTLIST$FL2$$$$.LIST$$$FL0		000246			$FL0=$$
NODE						NODE SNUM+$.,2
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE						NODE SNUM+$.,$A
.XLIST$$$.SNUMSNUM$.$A$A$$$$.LISTNODE						NODE SNUM,$B
.XLIST$$$.SNUMSNUM$B$B$$$$.LIST$$$FL1		000251			$FL1=$$
NODE						NODE SNUM+$.,10.
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE						NODE SFUN+$.,$PRINT
.XLIST$$$.SFUNSFUN$.$PRINT$PRINT$$$$.LISTNODE						NODE UVAR,UVAR+$A
.XLIST$$$.UVARUVARUVARUVAR$A$$$$.LIST$$$FL2		000254			$FL2=$$
NODE						NODE SNUM+$.,20.
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE						NODE SFUN+$.,$PRINT
.XLIST$$$.SFUNSFUN$.$PRINT$PRINT$$$$.LISTNODE						NODE UVAR,UVAR+$B
.XLIST$$$.UVARUVARUVARUVAR$B$$$$.LIST$$$FSFB		000257			$FSFB=$$
NODE						NODE SNUM+$.,2	;NO. ARGS
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE						NODE SNUM+$.,0	;PROCD SWAP NO.
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE						NODE SNUM+$.,0	;NO. NODES
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE						NODE SNUM+$.,0	;NO. FLUSHABLE NODES
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE						NODE SNUM+$.,0	;DISC ADDR 1
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE						NODE SNUM+$.,0	; "     "     2
.XLIST$$$.SNUMSNUM$.$$$$.LISTNODE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 263
	ZEND 67	PAGE 1.4 	DISC BLOCKS, NODE SPACE AND TEST LINES

						NODE SNUM+$.,0	;# WORDS ON DISC
.XLIST$$$.SNUMSNUM$.$$$$.LIST$$$OB3		000266			$OB3=$$
NODE						NODE 0,$A	;START OF UOB BUCKET 16.
.XLIST$$$.$A$A$$$$.LIST$$$OB4		000267			$OB4=$$
NODE						NODE 0,$B	;START OF UOB BUCKET 17.
.XLIST$$$.$B$B$$$$.LIST$$$OB5		000270			$OB5=$$
NODE						NODE 0,$C	;START OF UOB BUCKET 18.
.XLIST$$$.$C$C$$$$.LIST$$$A		000271			$A=$$
NODE						NODE ATOM,LSTR+$.
.XLIST$$$.ATOMATOMLSTRLSTR$.$$$$.LISTNODE						NODE SSTR,'A
.XLIST$$$.SSTRSSTR$$$$.LIST$$$B		000273			$B=$$
NODE						NODE ATOM+$BVB,LSTR+$.
.XLIST$$$.ATOMATOM$BVBLSTRLSTR$.$$$$.LISTNODE						NODE SSTR,'B
.XLIST$$$.SSTRSSTR$$$$.LIST$$$BVB		000275			$BVB=$$
NODE						NODE VBIND,LSTR+$.
.XLIST$$$.VBINDVBINDLSTRLSTR$.$$$$.LISTNODE						NODE SSTR+$.,"B.
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR+$.,"HA
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR+$.,"S.
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR+$.,"LO
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR,"TS
.XLIST$$$.SSTRSSTR$$$$.LIST$$$C		000303			$C==$$
NODE						NODE ATOM+$CVB,LSTR+$.
.XLIST$$$.ATOMATOM$CVBLSTRLSTR$.$$$$.LISTNODE						NODE SSTR,'C
.XLIST$$$.SSTRSSTR$$$$.LIST$$$CVB		000305			$CVB==$$
NODE						NODE VBIND,LNUM+$.
.XLIST$$$.VBINDVBINDLNUMLNUM$.$$$$.LISTNODE						NODE SNUM,100.
.XLIST$$$.SNUMSNUM$$$$.LIST$$L8		000307			L8=$$	;MAKE "BLIP" 13
NODE						NODE SFUN+$.,$MAKE
.XLIST$$$.SFUNSFUN$.$MAKE$MAKE$$$$.LISTNODE						NODE LSTR+$.,LSTR+$BLIP
.XLIST$$$.LSTRLSTR$.LSTRLSTR$BLIP$$$$.LISTNODE						NODE LNUM,LNUM+$.
.XLIST$$$.LNUMLNUMLNUMLNUM$.$$$$.LISTNODE						NODE SNUM,13
.XLIST$$$.SNUMSNUM$$$$.LIST$$L9		000313			L9=$$	;PRINT : "BLIP"
NODE						NODE SFUN+$.,$PRINT
.XLIST$$$.SFUNSFUN$.$PRINT$PRINT$$$$.LISTNODE						NODE SFUN+$.,$DOTS
.XLIST$$$.SFUNSFUN$.$DOTS$DOTS$$$$.LISTNODE						NODE LSTR,LSTR+$BLIP
.XLIST$$$.LSTRLSTRLSTRLSTR$BLIP$$$$.LIST$$L10		000316			L10=$$	;MAKE "BLIP" "XX"
NODE						NODE SFUN+$.,$MAKE
.XLIST$$$.SFUNSFUN$.$MAKE$MAKE$$$$.LISTNODE						NODE LSTR+$.,LSTR+$BLIP
.XLIST$$$.LSTRLSTR$.LSTRLSTR$BLIP$$$$.LISTNODE						NODE LSTR,LSTR+$.
.XLIST$$$.LSTRLSTRLSTRLSTR$.$$$$.LISTNODE						NODE SSTR,"XX
.XLIST$$$.SSTRSSTR$$$$.LIST$$L11		000322			L11=$$	;PRINT :"BLIP"
NODE						NODE SFUN+$.,$PRINT
.XLIST$$$.SFUNSFUN$.$PRINT$PRINT$$$$.LISTNODE						NODE SFUN+$.,$DOTS
.XLIST$$$.SFUNSFUN$.$DOTS$DOTS$$$$.LISTNODE						NODE LSTR,LSTR+$BLIP
.XLIST$$$.LSTRLSTRLSTRLSTR$BLIP$$$$.LIST$$L12		000325			L12=$$	;MAKE "BLAP" "YY"
NODE						NODE SFUN+$.,$MAKE
.XLIST$$$.SFUNSFUN$.$MAKE$MAKE$$$$.LISTNODE						NODE LSTR+$.,LSTR+$BLAP
.XLIST$$$.LSTRLSTR$.LSTRLSTR$BLAP$$$$.LISTNODE						NODE LSTR,LSTR+$.
.XLIST$$$.LSTRLSTRLSTRLSTR$.$$$$.LISTNODE						NODE SSTR,"YY
.XLIST$$$.SSTRSSTR$$$$.LIST$$L13		000331			L13==$$	;PRINT :"BLAP"
NODE						NODE SFUN+$.,$PRINT
.XLIST$$$.SFUNSFUN$.$PRINT$PRINT$$$$.LISTNODE						NODE SFUN+$.,$DOTS
.XLIST$$$.SFUNSFUN$.$DOTS$DOTS$$$$.LISTNODE						NODE LSTR,LSTR+$BLAP
.XLIST$$$.LSTRLSTRLSTRLSTR$BLAP$$$$.LIST$$L14		000334			L14==$$	;STARTDISPLAY
NODE	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 264
	ZEND 67	PAGE 1.5 	DISC BLOCKS, NODE SPACE AND TEST LINES

						NODE SFUN,$START
.XLIST$$$.SFUNSFUN$START$START$$$$.LIST$$L15		000335			L15==$$	;FORWARD :C
NODE						NODE SFUN+$.,$FORWA
.XLIST$$$.SFUNSFUN$.$FORWA$FORWA$$$$.LISTNODE						NODE UVAR,UVAR+$C
.XLIST$$$.UVARUVARUVARUVAR$C$$$$.LIST$$$BLAP		000337			$BLAP==$$	;"BLAP"
NODE						NODE SSTR+$.,"BL
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR,"AP
.XLIST$$$.SSTRSSTR$$$$.LIST$$$BLIP		000341			$BLIP==$$	;"BLIP"
NODE						NODE SSTR+$.,"BL
.XLIST$$$.SSTRSSTR$.$$$$.LISTNODE						NODE SSTR,"IP
.XLIST$$$.SSTRSSTR$$$$.LIST$$NNN		000343				NNN=$$	;NEXT NODE NO.
NNNSOFN		000343			SOFN=NNN	;START OF FREE NODES
ASOFN		073712			ASOFN=.
LOGEND		073712			LOGEND=.
					
					
					;IN THE EVENT THAT THE SYSTEM OBLIST
					;HAS BEEN INCORRECTLY SET UP, AND THE MACRO TRIED TO WRITE OVER
					;PARTS OF IT, THIS LITTLE .IFLE WILL PRINT OUT A MESSAGE
.IFLEOBX0		000006				.IFLE OBX0
						********
						YOU ARE OVERWRITING THE SYSTEM OBLIST
						********
						.XLIST
						.ENDC
.END		000000				.END
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 265
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	A	000000R		BL.SR	042700		CLE	053062		CSN2LN	000005H	
	AC	177302		BL.W1	042636		CLE1	053076		CSN2LS	000015H	
	ACKRC1	014552		BL.W2	042634		CLE2	053116		CSPDLP	003546	
	ACKREC	014546		BL.W3	042642		CLGN	003532		CT	003566	
	ACR.D	061134		BLKFR1	007564		CLKBDM	011550		CT.ORT	042736	
	ACRELF	003474		BLKFR2	007602		CLKBR1	011536		CT.SEN	042746	
	ACRES	012020		BLKFRE	007546		CLKBR2	011542		CT.W1	042726	
	ACRII	061124		BLKGR2	007416		CLKBRK	011472		CTIP	000004H	
	ACRIII	061116		BLKGR3	007412		CLN	003526		CTIP.E	041422	
	ACSAV	012004		BLKGR4	007444		CLN2LS	000121H		CTIQ	024662	
	ACTREC	014534		BLKGR5	007450		CLN2SN	000112H		CTIS	024630	
	ACTSTO	043134		BLKGR6	007454		CLP	003530		CTIT	000005H	
	ADDX	150000H		BLKGRB	007410		CLRSTF	036414		CTIT.E	041470	
	ADDXY	154000H		BLST	033416		CLS2LN	000210H		CTIUQ	024664	
	ADDY	144000H		BLST2	033466		CLS2SN	000126H		CTN	003534	
	ADLN	053130		BLST3	033476		CMPST1	044464		CTOS	024670	
	ADLN1	053176		BLSTF	033510		CMPST2	044520		CTP	003536	
	ADLN2	053236		BLSTF1	033550		CMPSTE	044550		CURA	003706	
	ADLN3	053254		BLSTI	033376		CNINT	031242		CURX	003676	
	ADLN4	053320		BLSTI1	033410		CNSND	031256		CURY	003702	
	ADLN5	053250		BLSTRT	033462		CNSQ	025764		D	000003R	
	AEVEN	061210		BMT	020510		CNVNOP	000001H		D.RET	060372	
	ALTL	003616		BPTBRV	000014		CNVTBL	046406		DALOC2	015714	
	ANGCRP	061016		BRAKE	002514		CNVTOP	045754H		DALOC3	015732	
	ANSLT	000027H		BRAKR	025612		CO	003552		DALOC4	015770	
	ANYT	000000H		BREAK	025560		COF	003560		DALOC5	015760	
	ARS	177316		BREAK1	025604		CONV.F	045736		DALOC6	016004	
	ASOFN	073712		BRKCHR	002400		CONVER	045650		DALOC7	016016	
	ASSSW	000000		BSAN	033554		COP	000002H		DALOC8	016034	
	ATOM	110000H		BSAN1	033604		COP.E	040032		DATA	014600	
	ATOMT	000001H		BSANR	033606		COPYL	042756		DATA1	014634	
	B	000001R		BSS	000000H		COPYL1	042762		DATEC	011572	
	BACK	055612		BSS.E	037216		COPYLR	043006		DBITBE	003674	
	BASEUS	003464		BUSSER	006716		CORCHK	015470		DBITTB	003636	
	BEBRV	000004		BUTFIR	042432		CORTOP	002244		DBK	056730	
	BF.SEN	042504		BUTLAS	042600		COSA	003740		DBUF	067472	
	BF.W	042440		BYCNT	003744		COUNT	042710		DBUFL	000400H	
	BF.W1	042470		C	000002R		CPDLP	003550		DCLRUS	002314	
	BIF1	054170		CA2LS	000002H		CPP	003522		DCONS	002404	
	BINDF1	054002		CFL	000001H		CPS	000003H		DCRACF	013756	
	BINDF2	054064		CFL.E	040644		CPS.E	040104		DCRB	174002	
	BINDF3	054060		CH	020366		CPSN	003524		DCRBF1	014132	
	BINDF4	054076		CHARNO	023406		CPYSTR	043020		DCRBF2	014232	
	BINDF5	054052		CHI	003622		CRF	000004H		DCRBFS	002320	
	BINDF6	054124		CHKBND	060632		CRLF	012246		DCRBIP	013754	
	BITCNT	015222		CKDOTF	033214		CRMES	002374		DCRBRK	014402	
	BITCT1	015230		CKPRCD	047134		CSEQ	045344		DCRBRV	000300	
	BITCT2	015232		CKTYP	050212		CSEQ1	045404		DCRCKS	013760	
	BIV1	054246		CKUI	050234		CSEQ2	045444		DCRDRB	014032	
	BKSL$	000017H		CKUI0	050262		CSEQ3	045536		DCRLST	013772	
	BL.ORT	042646		CKUI1	050302		CSFAL1	044536		DCRMID	013762	
	BL.SEN	042652		CKUI2	050320		CSFALS	044534		DCRPRB	013766	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 266
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	DCRRTS	015110		DMINT4	031122		DR.BIG	062772		DSKSG1	007050	
	DCRS	174000		DMINT5	031072		DR.DBG	063026		DSKSG2	007140	
	DCRWBL	013770		DMK	020656		DR.EQ	063016		DSKSGO	007036	
	DCRWCT	013764		DMON	011662		DR.L1	062476		DSKSR1	007002	
	DCTB	174006		DMRBRK	001436		DR.LAN	062434		DSKSRT	006764	
	DCTBFS	002324		DMRBRV	000310		DR.LBN	062450		DSKWA1	007246	
	DCTBRK	015244		DMSND	031130		DR.LIN	062400		DSKWA2	007234	
	DCTBRV	000304		DMSND1	031202		DR.N1	063110		DSKWAI	007240	
	DCTBST	014072		DMSND2	031210		DR.N2	063130		DSKWC	177462	
	DCTS	174004		DMSND3	031236		DR.N25	063142		DSTOP	140400H	
	DCTSMS	014052		DMSND4	031154		DR.N26	063150		DSVB	055256	
	DDIR	070072		DMSND5	031234		DR.N3	063160		DTBL	006142	
	DDIRBL	000400H		DMSQ	025636		DR.NE1	063056		DTBL2	006342	
	DDIRL	002000H		DMSQ1	025664		DR.NE2	063064		DTIBFL	002000H	
	DEBUG	000001H		DMSQ2	025714		DR.NEP	063050		DTOTB	034532	
	DEDBFL	002000H		DMSQ3	025730		DR.SC	062756		DTYIBF	002522	
	DEDTBF	002526		DMSQ4	025752		DR.SC4	063034		DUSECT	002306	
	DFD	056732		DMTBR	175006		DR.SC5	063042		DWRTCC	000107H	
	DFD.0	056756		DMTBRK	001440		DR.TE	062764		DWRTEC	000103H	
	DFD.1	057000		DMTBRV	000314		DR.TS3	062664		DYAL	061430	
	DFD.2	057042		DMTRAN	031224		DR.TSD	062720		DYAL1	061444	
	DFLAGS	003715		DMTT	001200		DR.TUR	062532		DYAL2	061464	
	DHDDIR	002532		DMWC	001036		DREADC	000105H		DYAL3	061472	
	DIFF	044032		DNDONE	007260		DREC	061410		DYAL4	061476	
	DING	025630		DO	043510		DRSTXY	143000H		DYAL5	061506	
	DIREC	003742		DO1	043540		DRT	057534		DYAL6	061530	
	DISASS	000001H		DO2	043604		DRT.HD	057540		DYAL7	061540	
	DISBIT	003750		DO3	043622		DRTRET	057570		DYAL8	061562	
	DISBRK	001434		DO4	043632		DSAMFL	001000H		DYAL9	061602	
	DISBRV	000270		DONE	017246		DSGC1	062226		DYB	003722	
	DISPLA	060250		DONEMP	044042		DSGC2	062240		DYF1	061756	
	DISREL	063250		DORBEG	003676H		DSGC3	062242		DYF11	061762	
	DISRM	060322		DOREND	003716H		DSGC4	062214		DYF2	062022	
	DIV$	000012H		DOTF	000400H		DSGC6	062306		DYFREE	061712	
	DIV.1	044124		DOTS	043402		DSGC9	062220		DYLIB	062036	
	DIV.8	044152		DOTS$	000013H		DSGCF	062210		DYLIB1	062042	
	DIVDE	044120		DOTS2	043410		DSGCF1	062260		DYLIB2	062060	
	DIVIDE	177300		DPD	060020		DSKA	177466		DYLIB3	062114	
	DKRTYS	002242		DPDL	063310		DSKAE	177470		DYLIB4	062120	
	DLEN	000400H		DPDLL	000060H		DSKBRK	007616		DYLIB5	062142	
	DLIST	063530		DPDLP	063270		DSKBRV	000204		DYLIB6	062150	
	DLT	057532		DPOP	140200H		DSKCA	177464		DYLIB7	062206	
	DLTOP	065207		DPOPJ	140100H		DSKCRB	002210		DYR	003724	
	DMBAR	175002		DPQF	000010		DSKDBR	177472		DYRET	061706	
	DMBCR	175004		DPROVK	007102		DSKDST	002310		DYT	003726	
	DMBIT	024572		DPU	060006		DSKLOS	007664		DYXFR	061420	
	DMCA	000776		DPUSHJ	100000H		DSKMT	177474		DYXFR1	061606	
	DMCSR	175000		DR.ALW	063230		DSKRET	007656		DYXFR2	061626	
	DMINT	031002		DR.AS0	063200		DSKRND	002330		DYXFR3	061672	
	DMINT1	031010		DR.AS1	063206		DSKRTY	007652		E	000004R	
	DMINT2	031052		DR.AS9	063244		DSKS	177460		EAESR	177311H	
	DMINT3	031066		DR.ASC	063176		DSKSG	177476		EDBFSZ	000040H	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 267
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	EDIT	052236		EVCON	047040		FOO	000226H		GLWAR1	046550	
	EDITA	025424		EVDNO	047524		FORWAR	055562		GLWARG	046544	
	EDITF	000010H		EVF1	047314		FPRINT	043642		GNASN	053516	
	EDITZ	025450		EVF11	047306		FPUT	042056		GNC	033610	
	EDQF	027506		EVF2	047356		FPUT1	042114		GNC1	033700	
	ELAPSE	001504		EVFUN	047246		FQF	000020H		GNC2	033670	
	ELSE	045056		EVI	047076		FRDSKW	000003H		GNC3	033644	
	EMPTY	034136		EVI1	047114		FREE	003506		GNC4	033620	
	EMPTY1	034544		EVI2	047160		FRELST	055462		GNCN	003626	
	EMPTYP	044710		EVL	047576		FRL1	055510		GNL1	053432	
	EMTBK	033710		EVL1	047622		FRL2	055526		GNL2	053476	
	EMTBRK	006714		EVLI1	017654		FRNEWU	000007H		GNL3	053506	
	EMTBRV	000030		EVLI2	020016		FRRAND	000006H		GNL4	053472	
	END	053010		EVLI3	017674		FRSCED	000001H		GNLINE	053360	
	END1	052566		EVLI4	017720		FRTRCF	000001H		GNSND	031266	
	END2	053056		EVLI5	020002		FRTYIH	000010H		GNSND1	031336	
	EQ.A2	044420		EVLI6	017650		FRTYIW	000004H		GNT	020022	
	EQ.F	044206		EVLI7	020020		FRTYOW	000005H		GNT1	020070	
	EQ.FAL	044446H		EVLINE	017642		FSF	000200H		GNT2	020160	
	EQ.FF	044332		EVS	047526		FUNLEV	003540		GNT3	020116	
	EQ.LST	044246		EVVAR	047054		G1NAR1	046524		GNT4	020146	
	EQ.RET	044212		EVW	047652		G1NARG	046514		GNT5	020206	
	EQ.SB1	044340		EVW1	047636		G1RET	046542		GNT6	020066	
	EQ.STR	044404		EVW2	050012		G1SNAP	046656		GO	052644	
	EQ.SUB	044342		EVX	047752		G1WTA	046536		GRB1	055364	
	EQ.W1	044356		EVXM	047432		G2NARG	046506		GRB2	055334	
	EQFALS	044326		EVXP	047402		GBITCH	015200		GRB3	055406	
	EQL$	000015H		EXCH1	002450		GCBITS	003462		GRBAD	055310	
	EQTRUE	044330		F	000005R		GCBTL	001002H		GRBAD1	055312	
	EQUAL	044156		F.SENT	042420		GCDBUG	000001H		GRBAD2	055304	
	EQUAL1	044224		F.STOR	042402		GCDIE	020660		GREATR	044566	
	ERMNO	000053H		F.WTA	042374		GCLOCK	002372		GREQ	044640	
	ERP	000006H		FALSE	140026		GCMARK	020662		GRTR	000000	
	ERP.E	037400		FBIND	020000H		GCMKL	002452		GSTR0	017072	
	ERRBK	033716		FCQF	000200H		GCP1	003514		GSTR1	017240	
	ERRBUF	003752		FIRST	042360		GCP2	003516		GSTR6	016756	
	ERRF	000040H		FIX	060664		GCPREV	003520		GSTR8	016672	
	ERRINA	003500		FLAGS	003544		GCRT2	021630		GSTR9	016602	
	ERROOB	060650		FLAGS2	003614		GCRT3	021646		GSTRT	017216	
	ERROR	104400		FLEV	036426		GCRT4	021652		GSW1	046564	
	ERRRT	033766		FLISTB	033332		GCRT5	021676		GSW2	046572	
	ERTAB	036446		FLSADR	002470		GCTRCF	000010H		GTIME	013660	
	ERTAP	034156		FLSB1	033356		GEDC	027364		GTLINE	053350	
	ERTAS	033776		FLSRES	002466		GEDC1	027404		GTR$	000016H	
	ERTEND	036574		FLUSH	010632		GEDC2	027444		GUOE1	043504	
	ERTL0	035424		FLUSH1	011062		GEDC3	027462		GUOE2	043472	
	ERTL1	035524		FLUSH2	011132		GEDC4	027464		GUOEB	043436	
	ERTLN	035424		FLUSH3	011052		GEDCA	027470		GWORD	015052	
	ETRACE	036312		FLUSH4	010642		GENSQ	025774		GWORDB	015174	
	EVAL	046762		FLUSH5	011112		GETINT	060660		HAS$	000002H	
	EVATM	047040		FNLLP	003612		GETSTR	016620		HCC	000103H	
	EVBUG	000000		FOF	000100H		GLWANE	046574		HEADIN	057714	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 268
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	HERE	057610		KILLD1	056700		LMPOF1	056026		MKRNDM	021300	
	HERE.1	057626		KILLD2	056706		LMPON1	056004		MKSFB	021266	
	HERE.2	057632		KILLDI	056674		LMT	020520		MKSNP	020720	
	HIDETF	000004H		KILLDR	056726		LNTB	000017H		MKSNPL	020670	
	HIDETU	057724		L	000060H		LNTB.E	037770		MKSP1	021322	
	HNM	000007H		L.SEN1	042560		LNUM	130000H		MKSP2	021340	
	HNM.E	040704		L.SENT	042562		LO	003562		MKSP3	021354	
	HNV	000010H		L.SRET	042574		LOCKUS	002370		MKSP4	021564	
	HNV.E	037340		L.W1	042544		LOGDNE	015350		MKSP5	021430	
	HOME	057642		L1	000145		LOGEND	073712		MKSP6	021514	
	HOOKF	000002H		L10	000316		LOGMES	013724		MKSP7	021500	
	HSSL	055014		L11	000322		LOGSEN	015322		MKSP8	021414	
	HSSL1	055106		L12	000325		LOSER	006740		MKSPDL	021316	
	HSSL2	055172		L13	000331H		LOSSCT	006544		MKSVB	021264	
	HSSL3	055160		L14	000334H		LP$	000003H		MKTPS	021274	
	HSSL4	055216		L15	000335H		LPAR	043742		MKUOBI	021124	
	HSSL5	055166		L2	000151		LPAR1	043760		MKUOBL	021116	
	HSSL6	055212		L3	000156		LPOFF	000000		MKUOE	021164	
	IF	045000		L4	000202		LPON	000000		MKVB	021250	
	IFF	000040H		L5	000220		LPUT	042062		MLOOP	016520	
	IFLEV	003542		L6	000225		LPUT1	042144		MLOOP1	016542	
	IFR	045036		L7	000233H		LSEQ	044652		MMAKE	043216	
	IGNT	020210		L8	000307		LSS$	000014H		MMF	000020H	
	IGNT1	020266		L9	000313		LSTR	140000H		MNSLTS	000005H	
	IGNT2	020240		LAMPOF	056014		LTL	065212		MNUSRS	000012H	
	ILN	000011H		LAMPON	055772		LUBLK	000060H		MOD	044114	
	ILN.E	041144		LAST	042526		LUVBLK	000404H		MOD360	060672	
	INF1	000012H		LCE	000015H		LVERNF	000770		MOVETO	057366	
	INF1.E	037052		LCE.E	040744		M360A	060714		MQ	177304	
	INFIX	010000H		LD3NUM	046676		M360R	060726		MQZ	000010H	
	INIT1	016260		LDE	000016H		MAKE	043206		MRD1	017550	
	INIT2	016300		LDE.E	037716		MAKE1	043314		MRD2	017564	
	INSTR	043144		LDN.E	046742		MAKE2	043334		MREAD	017530	
	INSTR1	043146		LDN.L	046720		MAKE3	043344		MSLTLN	044404H	
	INSTR2	043172		LEFT	055672		MAKE4	043256		MSWPOR	001560	
	INT0	054506		LESS	044614		MAKE5	043342		MTO.	057452	
	INT1	054376		LGS	177314		MAKSTR	043024		MTO.1	057376	
	INT2	054402		LINEL	023426		MARKL	020560		MTO.P1	057410	
	INT3	054426		LINENO	003620		MARKN	020444		MTO.P2	057414	
	INT5	054416		LIST	170000H		MAXELN	000060H		MTO.PD	057406	
	INVN	000013H		LIST.1	042006		MEVAL	050340		MTO.PU	057442	
	INVN.E	041530		LIST.2	042024		MEVALN	050330		MTO.R	057440	
	IOTBRK	006542		LIST.9	042044		MFUN	047406		MTO.RM	057466	
	IOTBRV	000020		LIST.P	041776		MIN$	000010H		MTO.XY	057420	
	IP	066454		LIST1	042004		MINUS	000000		MULCOS	060730	
	IS	067260		LISTB	033262		MKDC	062314		MULCS2	060742	
	ITB	000014H		LISTB1	033312		MKDC.K	062366		MULCS3	060760	
	ITB.E	041354		LISTBD	003574		MKDC.R	062362		MULCS9	061012	
	ITINIT	016444		LISTBR	033314		MKFB	021256		MULSIN	060736	
	JDCSW	002402		LISTP	044730		MKL0	020574		MULTIP	177306	
	JTYI	027512		LISTT	000020H		MKL1	020612		NAKREC	014536	
	JTYO	031342		LLPAR	050024		MKL3	020732		NBKTS	003632	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 269
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	NCHR	003606		NSL	000022H		ORTNP	050072		PQF	000004H	
	NDCTY	000000H		NSL.E	037610		ORTP	050126H		PRAS	034166	
	NDMTY	000007H		NSLOTS	002252		ORTSP	050126		PRAS1	034170	
	NDPTY	000000H		NSWPU	001532		OSTR1	043042		PRASR	034202	
	NDU	000020H		NTB	000023H		OSTR2	043050		PRATM	034732	
	NDU.E	040170		NTB.E	040142		OSTRE1	043076		PRBAO	003456	
	NEWSN1	060206		NTF	000024H		OSTRE2	043072		PRCO	034054	
	NEWSN2	060232		NTF.E	037646		OSTRR	043132		PRCO1	034076	
	NEWSNA	060202		NTL	000025H		OUTPUT	051260		PRCO2	034124	
	NEWX	002434		NTL.E	040246		OUTSTR	043036		PRCT	034650	
	NEWY	002440		NTTY	000010H		P	000006R		PRD$	000005H	
	NEXT10	010626		NTY	000001H		P1NARG	046620		PRDATA	034770	
	NEXT11	010404		NULTIM	001514		PAE	000033H		PRDN	034354	
	NEXT12	010474		NUMBP	044664		PAE.E	041056		PRDN1	034420	
	NEXT13	010504		NUMOBS	000133H		PAT	000506		PRDN2	034454	
	NEXT14	010026		NUMT	000002H		PATCH	000506		PRDN3	034470	
	NEXT15	010060		NUNODE	002246		PATEND	000706		PRDNL	034344	
	NEXTU1	007750		NUSER2	002254		PC	000007R		PRINT	043636	
	NEXTU2	007754		NUSERS	002250		PCBRV	000104		PRL1	035254	
	NEXTU3	010114		NY	000026H		PCCNT	172544		PRL2	035322	
	NEXTU4	010132		NY.E	037242		PCHR	003634		PRL3	035276	
	NEXTU5	010344		OBADD1	004320		PCS	172540		PRL4	035246	
	NEXTU6	010210		OBADD2	006142		PCSTBF	172542		PRL5	035340	
	NEXTU7	010556		OBSTRT	004324		PDLINK	066454		PRL6	035272	
	NEXTU8	010570		OBX0	000006		PENDOW	055746		PRLN	036100	
	NEXTU9	010622		OBX1	000002		PENUF	000001H		PRLN1	036130	
	NEXTUS	010036		OBX2	000140		PENUP	055722		PRLN2	036134	
	NFDCTY	000002H		OIP	000027H		PEV1	050626		PRLO	034030	
	NFDMTY	000002H		OIP.E	041562		PEV2	050744		PRLST	035216	
	NFDPTY	000002H		OLDIR	003714		PEV3	051074		PRLSTR	035052	
	NFKLTY	000002H		OLDX	003710		PEV4	050676		PRMTCH	003624	
	NFTY	000000H		OLDY	003712		PEV5	050660		PRNODE	035344	
	NGCSR	164040		OOB	000030H		PEV6	050556		PRNUM	035154	
	NGP2	000400		OOB.E	040302		PEVAL	050354		PRNUM1	035172	
	NGREL	164042		OOP	000031H		PFBRV	000024		PRNUM2	035206	
	NINU	001534		OOP.E	037504		PLU$	000006H		PROAB	034112	
	NKLTY	000000H		OOT	000032H		PLUS	000000		PROC	047546	
	NNGC	003476		OOT.E	037162		PN1	051150		PROD	044046	
	NNN	000343		OPERF	000010H		PNH	000034H		PROD.1	044070	
	NNODES	010000H		ORT	050136		PNH.E	041012		PROD.2	044110	
	NNUMF	000040H		ORTA	050100		PNODAB	034616		PRON	034206	
	NODATA	015046		ORTB	050104		PPBASE	003454		PRON1	034224	
	NODC11	015446		ORTC	050110		PPDLL	000600H		PRON2	034262	
	NODESP	072076		ORTD	050114		PPNAIF	002000H		PRON3	034244	
	NOR	003556		ORTE	050120		PPNAME	034752		PRON4	034276	
	NORMAL	177312		ORTF	050124		PPOPL	003446		PRON5	034316	
	NORT	047436		ORTNA	050044		PPOPT	012136		PRONL	034216	
	NORT1	047442		ORTNB	050050		PPSWP1	012356		PRQQ	035124	
	NORT2	047522		ORTNC	050054		PPSWPI	012724		PRS1	034550	
	NOU	000021H		ORTND	050060		PPSWPO	012256		PRS11	034642	
	NOU.E	037122		ORTNE	050064		PPUSHL	003450		PRSRET	035122	
	NRABLU	001530		ORTNF	050070		PPUSHT	012112		PRSSTR	035056	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 270
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	PRSTR2	035062		RDLA	033110		REVS	045546		SENS.2	041740	
	PRSTR3	035072		RDLB	033172		REVS1	045644		SENT	170000H	
	PRSTR4	035104		RDLST	033100		REVS2	045632		SENT.1	041644	
	PRTAB	034704		RDLX	033144		RFLUSH	014424		SENT.2	041704	
	PRUV	034742		RDLY	033164		RIGHT	055642		SENT.3	041712	
	PRUV1	034760		RDSA	032732		RJLSW	013716		SENT.4	041716	
	PS	177776		RDSB	032736		RLINE	017566		SENT.A	041674	
	PSHINT	046630		RDSC	033012		RLINE1	017640		SENT.R	041764	
	PSHNUM	046634		RDSD	033020		RLOGIN	014442		SENT.S	041726	
	PSN1	051116		RDSE	033000		RMONTH	011656		SENTEN	041632	
	PSTOP	051310		RDSR	033036		RNUM	150000H		SENTT	000004H	
	PSTOP1	051516		RDST	032720		RP$	000004H		SEPF	000004H	
	PSTOP2	051562		RDSTR	017302		RPAR	043764		SET.A	057312	
	PSTOP3	051572		RDSTR1	017276		RPDLP	014354		SET.A1	057316	
	PSTOP4	051664		RDSTR2	017334		RQUEST	017472		SETHEA	057602	
	PSTOP5	052146		RDSTR3	017376		RSTART	016504		SETMOV	057224	
	PSTOP6	052206		RDSTR4	017430		RTB	000035H		SETSTF	036402	
	PSTOP7	052204		RDSTR5	017422		RTB.E	041304		SETTUR	057254	
	PSTOP8	052170		RDSTR6	017410		RTBE	044106		SETUVS	016324	
	PSTOP9	052160		RDSTR7	017456		RTF	000002H		SETX	057134	
	PSTOPR	003576		RDSTR9	017324		RTFALS	044576		SETXY	057210	
	PSTP10	051330		RDSX	033022		RTNCMP	044610		SETY	057162	
	PSTP11	051476		RDWA	032566		RTTRUE	044624		SEX	035414	
	PSTP13	051412		RDWB	032616		RUG	100000		SEX1	035406	
	PSTP14	051426		RDWC	032654		RUNME	007700		SFBIND	120000H	
	PSTP21	051536		RDWD	032702		RUNME1	007710		SFLAGS	002366	
	PSTP30	051224		RDWE	032714		RUNME2	007706		SFUN	000000H	
	PSTP31	051232		RDWRD	032556		RUNRUG	016570		SHOW	035710	
	PSTP32	051636		READ	032250		RUNUS1	011176		SHOW1	035774	
	PSTP33	051660		READA	032312		RUNUS2	011212		SHOW2	036020	
	PSTP34	051654		READB	032346		RUNUS4	011344		SHOW3	036034	
	PSTP35	051226		READC	032332		RUNUS5	011262		SHOW4	036060	
	PSTP41	052102		READD	032546		RUNUS6	011242		SHOW5	035724	
	PSTP42	051722		READL	032520		RUNUSR	011146		SHOWT9	057774	
	PSWPAD	003452		READR	032452		RWWSW	002376		SHOWTU	057752	
	PSWPI1	013020		READS	032476		RYEAR	011660		SIMTST	024756	
	PSWPI2	013146		RECLOP	014466		S	003430		SIN	061216	
	PSWPIN	055246		RECTAB	014514		S.ORT	041766		SINA	003736	
	PSWPOT	055250		REDY10	013720		SALTL	065210		SINGET	061166	
	PTLPF	000001H		RELA	000001H		SCHEDP	011432		SIPRBT	000002H	
	PUSHJT	003746		RELB	000002H		SDBITB	002344		SKPRET	104000H	
	PUSHN	051136		RELC	000004H		SDBITE	002364		SLISTB	033316	
	PUSHSN	051110		RELD	000010H		SDISBT	002414		SLOT1	065250	
	PUSPSL	001536		RELE	000020H		SDLEN	001400H		SLOTST	002212	
	PUSRSP	001540		RELTIM	013644		SDLINK	067260		SLSH	000000	
	PWFBRV	000024		RET	045534		SDLOOP	056506		SLTAL1	015574	
	QUANT	001524		RETA	045526		SDPDLL	000220H		SLTCAD	002256	
	R1INT	046610		RETB	045520		SDPDLP	002420		SNABOT	003734	
	R1NARG	046614		RETC	045512		SDRBG1	007164		SNAP	060032	
	RBPOIN	013752		RETD	045504		SDRBG2	007214		SNAP.1	060046	
	RDAY	011654		RETE	045476		SDSKAD	002340		SNAP.2	060072	
	RDFLAG	003572		RETF	045470		SENS.1	041754		SNAP.3	060172	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 271
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	SNAPT	000010H		STD.E	040370		TGTC1	026226		TIDP	024314	
	SNLIST	003732		STLEN	000060H		TGTC2	026246		TIDR	020000H	
	SNP	100000H		STLIST	002426		TGTC3	026252		TIDTRA	174000H	
	SNPSEN	041640		STNE	045114		TGTC4	026262		TIDTS1	027054	
	SNPTEM	002446		STNE1	045142		TGTC5	026200		TIDTS2	027064	
	SNUM	120000H		STNE2	045170		THEN	045042		TIDTS3	027074	
	SNXTDB	002334		STNE3	045152		TI2Q	026024		TIDTSC	027046	
	SOBLST	004036		STOP	051310		TI2Q1	026034		TIDW	040000H	
	SOBLSU	004262		STPREC	014534		TI2Q2	026150		TIEBP	024006	
	SOBP2	004034		STRACE	036164		TI2Q3	026130		TIEBT	023762	
	SOFN	000343		STRTD1	056446		TIBF	022006		TIED	001000H	
	SOOMX	004032		STT	003720		TIBFSZ	000100H		TIEDP	024434	
	SP	000006R		STYI	020374		TIBL	023702		TIEDR	010000H	
	SPBASE	003442		STYO	020310		TIBP	023602		TIEDW	004000H	
	SPDLL	000600H		SUBXY	060620		TIBR	002000H		TIEFDP	024454	
	SPDLP	000504		SUBXY9	060630		TIBT	023554		TIEHD	024414	
	SPNAIF	004000H		SUHCT	003460		TICBR	027160		TIELD	024374	
	SPOPL	003434		SUM	044004		TICC	026264		TIHD	024274	
	SPOPT	012176		SUM.1	044012		TICC1	026300		TIINB	027316	
	SPRBAO	003444		SUM.2	044026		TICD	026306		TIINB1	027354	
	SPSWP1	012572		SVBIND	130000H		TICD1	026322		TIINB2	027360	
	SPSWPI	013160		SWB	177570		TICM	026334		TILD	024254	
	SPSWPO	012504		SWPISP	011730		TICM1	026342		TIME	001520	
	SPTRCF	000004H		SWPIST	011722		TICM2	026410		TIMUSD	002504	
	SPUSHL	003436		SWPLEP	001542		TICM3	026432		TIND1	051216	
	SPUSHT	012152		SWPLST	001544		TICM4	026446		TIND2	051206	
	SR	177310		SWPOSP	011704		TICN	026460		TINDNT	051170	
	SRET	050212		SWPOST	011676		TICN1	026504		TINIT	024710	
	SRETA	050204		SWTRCF	000002H		TICN2	026474		TINIT1	024764	
	SRETB	050176		SXY.S	057334		TICPY	027076		TINIT2	024754	
	SRETC	050170		SYDRBG	007146		TICPY1	027142		TIOBR	027152	
	SRETD	050162		SYPDLL	000100H		TICPY2	027146		TIP	000037H	
	SRETE	050154		SYSMES	013722		TICQ	026532		TIP.E	037440	
	SRETF	050146		SYSWPR	001774		TICR	026542		TIPC	023722	
	SSAVEA	003502		T1FLSH	015266		TICR1	026556		TIQM	027174	
	SSOL	054632		TBPOIN	014050		TICS	026574		TISQ	025466	
	SSOL1	054672		TEDK1	030456		TICS1	026614		TISQ1	025472	
	SSOL2	055010		TEDKI	030410		TICW	026656		TISQ2	025524	
	SSOL3	054770		TEDKO	030566		TICW1	026646		TISQ3	025556	
	SSOL4	054726		TEMF	000020H		TICY	026704		TISVD	023742	
	SSOL5	055002		TEMP	003602		TICZ	026774		TITN	023642	
	SSOL6	054732		TEST1	016520		TICZ1	027036		TITQ	021726	
	SSTR	070000H		TESTF	000001H		TIDCM	027706		TITQL	023514	
	SSWPAD	003440		TF1	000100H		TIDCM1	027750		TITQN	023534	
	SSWPI1	013256		TF2	000200H		TIDEL	027204		TITQP	023474	
	SSWPI2	013412		TF3	000400H		TIDEL1	027214		TITQSZ	000006H	
	STAR	000000		TF4	010000H		TIDEL3	027252		TITQT	023446	
	START	015370		TF5	020000H		TIDEL5	027264		TKB	177562	
	STARTD	056434		TF6	000001H		TIDEL6	027312		TKBRK	001400	
	STARTF	016376		TFLAGS	003604		TIDKI	030234		TKBRK1	001430	
	STB	003716		TFLUSH	015262		TIDKI1	030274		TKBRV	000060	
	STD	000036H		TGTC	026164		TIDKO	030074		TKS	177560	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 272
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	TLEN	000020H		TOSND	024234		TYP1	040000H		UTYO10	031476	
	TLIST	065130		TOSVC	024154		TYPE	043670		UTYO11	031416	
	TLOGIN	015304		TOSVD	024174		TYPE1	043712		UTYO1A	031604	
	TM.3	056234		TOTN	024114		U	000005R		UTYO1B	031620	
	TM.5	056264		TPB	177566		UAB	003426		UTYO2	031644	
	TM.8	056274		TPBRK	001432		UAC	003466		UTYO3	031710	
	TML	000040H		TPBRV	000064		UACA	002472		UTYO4	031714	
	TML.E	040334		TPDLP	014400		UACB	002474		UTYO5	031720	
	TMPDL	001444		TPS	177564		UACC	002476		UTYO6	032004	
	TMPDLL	000020H		TPTF	000400H		UACD	002500		UTYO7	032002	
	TMPDLP	001442		TRA1	036330		UACE	002502		UTYO8	031440	
	TMS	000041H		TRA2	036372		UACRES	012064		UTYO9	031456	
	TMS.E	040422		TRA5	036342		UACSAV	012036		UTYOR	020360	
	TO	052246		TRACE	036322		UBLK	002466		UVAR	030000H	
	TO.1	056312		TRACEF	000002H		UBLKFR	007360		UVBLK	003426	
	TO1	052330		TRPBRV	000034		UBLKG1	007354		UVINIT	016072	
	TO2	052630		TRUE	140024		UBLKGR	007274		UVREND	003466	
	TO3	052372		TSTAB	027754		UDSKAD	002542		UVSAV	065250	
	TO4	052422		TSTAB1	030036		UEL	000042H		VARIAB	000004H	
	TO5	052616		TSTAB2	030046		UEL.E	037544		VBIND	030000H	
	TO6	052632		TSTAB3	030040		UFUN	020000H		VERN	001754H	
	TO7	052364		TSTAB4	030004		UGO	016450		VERNF	001754H	
	TO8	052264		TSTST	045216		UHCT	067264		VERSN	036436	
	TOBF	023006		TSTST1	045274		UINCON	054604		VNAF	002000H	
	TOBFF	024054		TTP	025736		UINOB	054522		VSWPIN	055252	
	TOBFSZ	000040H		TTYBR	024474		UINTRN	054520		VSWPOT	055254	
	TOBP	024074		TTYEBR	024514		ULAST	001512		WC.DUN	060554	
	TOBT	024026		TTYRS1	025174		UMINS	043772		WC.LP	060524	
	TOCB	032154		TTYRS2	025206		UMQ	003470		WDW	000043H	
	TOCH	032176		TTYRS3	025330		UNGRAB	003600		WDW.E	037270	
	TOCI	032214		TTYRS4	025252		UNXTDB	002536		WEQUAL	044364	
	TOCI1	032220		TTYRST	025160		UOBCON	054620		WIC	000044H	
	TOCM	031730		TTYST	024534		UOBSCH	054512		WIC.E	040456	
	TODING	024214		TTYU	024554		UOBSKP	054612		WIPE	060410	
	TOENT	031522		TUB	003730		UPC	002510		WIPE.L	060464	
	TOF	000020H		TURCON	056406		UPDLP	003432		WIPECL	060504	
	TOINB	032006		TURMOV	056114		UPLUS	043766		WIPOBS	055244	
	TOINB1	032024		TUROFF	056364		UQUANT	001526		WIT	000045H	
	TOINB2	032136		TURON	056342		URELTM	013630		WIT.E	041216	
	TOINB3	032152		TUROUT	056316		USER	001510		WORD	042220	
	TOINB4	032100		TURSIZ	000004H		USLENT	002304		WORD.1	042224	
	TOLN	052664		TURTF	000010H		USR	003472		WORD.2	042246	
	TOLN1	052736		TUT	002444		USWCNT	002302		WORD.3	042314	
	TOLN2	052722		TYI	020370		USWPAD	002516		WORD.4	042320	
	TOOT	056036		TYIBP	023622		UTTY	002512		WORD.5	042274	
	TOOT.0	056050		TYIDKI	030670		UTYI	020416		WORD.6	042300	
	TOOT.1	056062		TYIDP	024334		UTYI1	027566		WORD.N	042330	
	TOOT.9	056104		TYIDR	100000H		UTYI2	027606		WORDP	044754	
	TOPC	024134		TYIFDP	024354		UTYI3	027664		WORDR	042346	
	TOPRNM	003610		TYITN	023662		UTYI4	027702		WORDT	000001H	
	TOPS	003510		TYO	020304		UTYO	020324		WSF	000002H	
	TOPS1	003512		TYOT	020362		UTYO1	031556		WSTART	016562	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 273
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	WTA	000046H		$FPUT	004632		$SHOWT	005510		.CSNLN	045766	
	WTA.E	036766		$FSFB	000257		$SLSH	006104		.CSNLS	046006	
	WTAA	000047H		$GO	004644		$SNAP	005530		.CSRET	177601H	
	WTAA.E	036576		$GREAT	004654		$STAR	006042		.FREE	055434	
	WTAB	000050H		$GRTR	006134		$START	005542		.GCOL1	021030	
	WTAB.E	036672		$HEADI	004670		$STF	005564		.GCOL2	020770	
	XCOR	057676		$HERE	004704		$STOP	005574		.GCOL3	021004	
	XYDIR	061352		$HIDET	004716		$SUM	005606		.GCOLL	020750	
	XYDIR1	061364		$HOME	004736		$THEN	005616		.GRAB	055260	
	XYDIR2	061374		$IF	004750		$TO	005630		.INTRN	054326	
	YCOR	057704		$KILLD	004760		$TOOT	005640		.IOT	056324	
	YINFIX	000020H		$LAST	005030		$TRACE	005652		.LDP1	053674	
	YND	000051H		$LEFT	005042		$TYPE	005664		.LDP2	053670	
	YND.E	040530		$LESS	006120		$UMINS	006074		.LDP2I	053720	
	YNT	000052H		$LEVEL	005066		$UPLUS	006056		.LOAD	053566	
	YNT.E	040576		$LIST	005100		$VERSI	005676		.LOADC	053564	
	$	177777H		$LISTP	005112		$WIPE	005712		.OBSCH	054316	
	$$	000343H		$LLPAR	006012		$WIPEC	005724		.RDEF	043120	
	$.	000343H		$LPAR	006026		$WORD	005742		.SPACE	012222	
	$A	000271		$LPOFF	005000		$WORDP	005754		.SRDEF	046142	
	$AND	004324		$LPON	005014		$XCOR	005766		.STORE	053610	
	$B	000273		$LPUT	005124		$YCOR	006000		.STP1	053642	
	$BACK	004334		$MAKE	005136		.BIND	053770		.STP2	053636	
	$BAR	000230		$MINUS	006066		.BINDF	054152		.TIME	013424	
	$BLAP	000337H		$MOD	005150		.BINDL	053744		.UTIME	013520	
	$BLIP	000341H		$NEWSN	005160		.BNDFS	054300		.ZZZ	040000H	
	$BUTFI	004346		$NUMBE	005174		.BNDVN	054222	
	$BUTLA	004364		$OB1	000171		.BNDVS	054212	
	$BVB	000275		$OB2	000227		.CATLS	045760	
	$C	000303H		$OB3	000266		.CERR	045754	
	$COUNT	004400		$OB4	000267		.CLNLS	046216	
	$CTF	004412		$OB5	000270		.CLNR	046212	
	$CVB	000305H		$OF	005210		.CLNS1	046214	
	$DIFFE	004422		$OUTPU	005220		.CLNSN	046200	
	$DISPL	004442		$PENDO	005234		.CLSLN	046374	
	$DO	004456		$PENUP	005250		.CLSS0	046272	
	$DOTS	006112		$PLUS	006050		.CLSS1	046274	
	$EDIT	004466		$PRINT	005262		.CLSS9	046364	
	$ELSE	004500		$PROC	006020		.CLSSN	046230	
	$EMPTY	004512		$PRODU	005274		.CNOP	045756	
	$END	004526		$QUOTI	005310		.CNXN1	046320	
	$EQUAL	006126		$REQUE	005326		.CNXN2	046326	
	$ERASE	004550		$RIGHT	005342		.CNXN9	046356	
	$FIRST	004570		$RPAR	006034		.CNXTD	046156	
	$FL0	000246		$RUG	005354		.CRLF	012232	
	$FL1	000251		$SENTE	005364		.CSNL0	046046	
	$FL2	000254		$SETHE	005402		.CSNL1	046052	
	$FLLP	000243		$SETTU	005422		.CSNL2	046076	
	$FOO	000172		$SETX	005440		.CSNL3	046112	
	$FOOF	000241		$SETXY	005452		.CSNL4	046116	
	$FORWA	004602		$SETY	005464		.CSNL5	046106	
	$FPRIN	004616		$SHOW	005476		.CSNLL	046042	
	PDP11 LOGO	PALX142 	04/20/72  17:08:38	PAGE 274
	ZEND 67	PAGE 1 	***SYMBOL TABLE***      

	.CSNLN	045766	
	.CSNLS	046006	
	.CSRET	177601H	
	.FREE	055434	
	.GCOL1	021030	
	.GCOL2	020770	
	.GCOL3	021004	
	.GCOLL	020750	
	.GRAB	055260	
	.INTRN	054326	
	.IOT	056324	
	.LDP1	053674	
	.LDP2	053670	
	.LDP2I	053720	
	.LOAD	053566	
	.LOADC	053564	
	.OBSCH	054316	
	.RDEF	043120	
	.SPACE	012222	
	.SRDEF	046142	
	.STORE	053610	
	.STP1	053642	
	.STP2	053636	
	.TIME	013424	
	.UTIME	013520	
	.ZZZ	040000H	

142 SECONDS RUN-TIME
