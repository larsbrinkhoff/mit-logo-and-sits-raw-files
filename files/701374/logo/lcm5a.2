.dv press
.fo 0 TimesRoman12
.fo 1 TimesRoman12b
.fo 2 TimesRoman12
.tr @
.so r;r macros
.begin_table_of_contents
.fi b
--DRAFT--

LOGO Curriculum Materials

6/20/80
.sp 5
1BOOKLET Va

Talking to the Turtle0

.ls 2
The turtle is an object that can draw pictures on a special
drawing pad.  Like sprites, the turtle can move forward and back and
turn right or left.  It can't change shape or color, but it can draw
complicated shapes with surprising colors on its pad.

.chapter "bold(Basic Turtle Commands)"
.nf L
To talk to the turtle type the command:

PAD				s(m)This makes the computer draw a white pad
			t(m)on the screen and place the turtle at its center.

Here are some commands that the Turtle understands:

.nf L
FORWARD and BACK 		t(m)moves the turtle forward or back the number of
or FD and BK			t(m)spaces you specify.  If the turtle's pen is
				t(m)down, it will draw a line as it moves.  

RIGHT and LEFT 			t(m)turns the turtle right or left the number of	
or RT and LT				t(m)degrees you specify.

CLEARSCREEN 			t(m)clears both the text screen and the turtle's
or CS 				t(m)pad, and puts the turtle back in the center of
				t(m)the pad, facing up, with heading 0.
.bp
Examples:
.keep

FD    20 t(m)moves the turtle forward  20  steps
RT    45 t(m)turns the turtle right  45  degrees 
BK    15 t(m)moves the turtle back  15  steps
LT    45 t(m)turns the turtle left  45  degrees
CS t(m)clears the text screen and the pad, restarting
t(m)the turtle in the center of the pad
.end_keep

Things to try:

.fi b
Experiment with the turtle.  Type FD, BK, RT and LT, with a lot of
different inputs.  Try very large and very small inputs.  Here are
some more suggestions of things to do with the turtle:

.nf L
Make the turtle draw a square.  Or a rectangle.  Or a triangle.
Make an unplanned drawing using a variety of turtle commands.
Find the size of the turtle's screen.
Pick a point on the screen and move the turtle there.
.bp
.chapter "bold(Teaching the Computer a New  Command)"
.fi b
You can teach the computer to remember a particular series of steps
by defining a procedure.  Type   TO   followed by a name that you have
chosen.  Then type each step in order.  When you are finished, type  END.

.nf L
Examples:

	TO    FUN		t(m)TO    BOX
	FD    30  t(m)FD    20
	RT    120 t(m)RT    90
	FD    10 t(m)FD    20
	LT    90 t(m)RT    90
	BK    20 t(m)FD    20
	END t(m)RT    90
		t(m)FD    20
		t(m)RT    90
		t(m)END

.fi b
You can use any name that is not already a LOGO command or the name of a procedure
you have already defined.   The steps of the
procedure can be any other LOGO commands or procedures.  When you type the command, FUN or
BOX, the computer will carry out your sequence of steps.

Things to try:

.nf L
Type the command, FUN, several times.
.fi b
Teach the computer to draw a smaller square, a rectangle, triangle, or any
other shape you know how to draw.
.br
Invent a new shape, by choosing a number of different commands at random.

If you want to change a procedure for any reason, you can refer to Booklet III,
Section 3, Using The LOGO Editor.
.bp
.chapter "bold(How the Turtle Uses Its Pen)"
When you first type  PAD, the Turtle always starts with its pen down.  This
means that it draws lines whenever it is commanded to move forward or back.

.nf L
You can change what the turtle's pen does with these commands if you type

PENUP    or    PU t(m)the turtle will not draw lines when it moves.
PENDOWN    or    PD t(m)the turtle will draw lines whenever it moves.
PENERASE    or    PE t(m)the turtle will erase existing lines
	t(m)as it moves.
PENREVERSE  or  PRV  t(m)the turtle will erase any existing lines, and,
		t(m)draw lines where there are none.
.bp
.chapter "bold(Drawing Circles and Arcs)"
.fi b
Sometimes one procedure can be used for accomplishing many things.

.section "bold(Procedures for drawing circles and arcs)"
You can teach the computer a set of procedures that draw circles and arcs.
The steps for these procedures are given on the next two pages.

.nf L
RCL    20  t(m)draws a circle of radius 20, curving to the right.

LCL    10 t(m)draws a circle of radius 10, curving to the left.

RQC    20 t(m)draws a quarter circle of radius 20, curving 
	  t(m)to the right.

LQC    10 t(m)draws a quarter circle of radius 10, curving
	  t(m)to the left.

.fi b
RCL and LCL draw 12-sided polygons that look 
enough like circles to be useful for most turtle drawings.
If you want to make designs using circles and arcs, carefully copy the procedures on the
following pages without trying to understand exactly how they work.
.bp
The following procedures can be used to draw circles and arcs curving to the right.

.nf L
.keep
TO    RCL    R t(m)RCL stands for "right circle"
REPEAT    12    [RCP    :R] t(m)Twelve repeats of the subprocedure RCP make
END				t(m) a complete "circle" of radius  :R
.end_keep

.keep
TO    RCP    R  t(m)RCP draws one "circle piece" curving to the 
RT    15       t(m)right.  :R stands for the radius of the circle.
FD    :R/2
RT    15
END
.end_keep

.keep
TO    RQC   R t(m)RQC stands for "right quarter circle"
REPEAT    3    [RCP   :R]
END
.end_keep

.fi b
The following procedures can be used to draw circles and arcs curving to the left:

.nf L
.keep
TO    LCL    R t(m)This draws a circle of radius :R, 
REPEAT    12   [ LCP  :R ]		t(m)curving to the left.
END
.end_keep

.keep
TO    LCP   R t(m)LCP draws one "circle piece" curving to the left.
LT    15
FD    :R/2
LT    15
END
.end_keep



.keep
TO    LQC    R t(m)This draws a quarter circle of radius :R,
REPEAT    3    [ LCP    :R ]		t(m)curving to the left.
END
.end_keep

.section "bold(Some Simple Projects With Circles and Arcs)"
.bp
.chapter "bold(Building Complex Shapes Using Subprocedures)"
.section "bold(Using Shapes as Building Blocks.)"   
.fi b

Turtle procedures which draw shapes can be used to build more complex 
shapes.  Here are some examples.

You might start with two procedures.  One draws a box, and the other a triangle:

.nf L
.keep
TO    BOX t(m)TO    TRIANGLE
FD    30 t(m)LT    90
RT    90 t(m)FD    30
FD    30 t(m)RT    120
RT    90 t(m)FD    30
FD    30 t(m)RT    120
RT    90 t(m)FD    30
FD    30 t(m)END
END
.end_keep

.fi b
You could build other designs from them, by repeating them
and combining them in different ways.  You can make interesting designs by exploring
in this way.
.nf L
.keep
For example,
TO    WINDOW
BOX
BOX
BOX
BOX
END
.end_keep

and
.keep
TO    BUTTERFLY
TRIANGLE
TRIANGLE
END
.end_keep

and
.keep
TO    6BUTTERFLY
BUTTERFLY
BUTTERFLY
BUTTERFLY
BUTTERFLY
BUTTERFLY
BUTTERFLY
END
.end_keep

.fi b
Putting a box and a triangle together, you can construct a house:

.nf L
.keep
.sp 8
HOUSE
.end_keep

.keep
and, repeating HOUSE four times,
.sp 8
HOUSE4
.end_keep

.fi b
HOUSE4  and  6BUTTERFLY  can be put together, to make a new design,

.nf L
.keep
TO    HB46
HOUSE4
6BUTTERFLY
END
.end_keep

.fi b
HB46 looks something like a spider. If you add some
circles you could make a SPIDER procedure.

.nf L
.keep
TO    SPIDER
HB46
RCL    16
LCL    16
RCL    8
LCL    8
BK    15
RCL    4
LCL    4
END
.end_keep

.section "bold(Building a Planned Shape Using Subprocedures)"

.fi b
Here is an example of a planned project.  You might want
the turtle to draw a "person" that looked something
like this:
.sp 10
You could draw the person using a long series of turtle commands--
FORWARDs, BACKs, RIGHTs and LEFTs. It would probably be simpler
to solve the problem using subprocedures and a
superprocedure  named PERSON.

.nf L
.keep
TO    PERSON
LEGS
BODY
ARMS
NECK
HEAD
END
.end_keep

.fi b
Teaching the computer five different procedures might seem to be
complicated, but this method offers several advantages.  First, you can
start by planning your whole project in advance, so you know exactly what
you have to do to accomplish your goal.  Second, you can try to solve a series of
small problems, one at a time, rather than one big problem.  Third, when you
want to change one part of your design while leaving the rest of it the same,
it will be easier to decide which commands to change.

One subprocedure,  VEE,  can be used to draw both the arms and the legs of the person.
.nf L
.keep
TO    VEE
RT    45
FD    10    BK    10
LT    90
FD    10    BK    10
RT    45
END
.end_keep

Now  use VEE to make procedures for the arms and the legs.

.keep
TO    ARMS t(m)ARMS uses VEE directly
VEE
END
.end_keep

.keep
TO    LEGS t(m)LEGS reverses the turtle's direction before
RT    180		t(m)using VEE, then reverses the turtle again so that
VEE		t(m)it ends up where it started.
RT    180
END
.end_keep

.keep
.fi b
BODY and NECK are just straight lines.  After experimenting, you might
decide to try  these sizes:

.nf L
TO    BODY t(m)TO    NECK
FD    15 t(m)FD    5
END t(m)END
.end_keep

To draw the head, you can use a circle procedure.

.keep
TO    HEAD
LT    90
RCL    5
RT    90
END
.end_keep

.fi b
Now, when you type the command, PERSON, you should get this result:
.bp
.chapter "bold(Making a Repeating Design)"
It is possible to make complex designs by making the computer repeat a series
of steps over and over again.  There are several ways to carry out a project
of this type.

.section "bold(Making a Repeating Design Using Recursion)"
The procedure FUN makes a simple turtle design:

.nf l
.keep
TO  FUN
FD  30
RT  120
FD  10
LT  90
BK  20
END
.end_keep
.fi b

If you teach the computer to FUN, and repeat FUN several times, another design
begins to appear.  If you make the computer keep repeating these steps
over and over without stopping a surprising design may result.

.nf l
.keep
TO  FUNNY
FD  30		T(M)FUNNY is the same as FUN, except
RT 120		t(m)for the last line where FUNNY
FD  10		t(m)calls the procedure FUNNY again
LT  90
BK  20
FUNNY
END
.end_keep

.fi b
When you type the command FUNNY, the computer will draw a shape, then start
the procedure FUNNY again, draw the same shape, starting from a different place, start
FUNNY again, etc.  It will keep going, eventually retracing the same design
unless you stop the computer by typing SHIFT-G.

This way of making a procedure repeat is called recursion.

Here are some other examples of recursion:

.nf l
.keep
TO SQUARE	
FD  20		
RT  90		
SQUARE		
END		
.end_keep

.keep
TO FLOWER	
BOX		
RT  30		
FLOWER		
END
.end_keep

.keep
TO NEWFUN	
FUN	
NEWFUN
END
.end_keep

.keep
TO STAR
FD  40
RT  150
STAR
END
.end_keep
.fi b

Try making some recursive procedures of your own.

.section "bold(Making Repeating Designs Using the REPEAT Command)"
The LOGO command REPEAT allows you to repeat a command or list
of commands as many times as you want.

.nf l
Examples:

.keep
REPEAT  7	[  FD  10    BK  10    RT  20 ]
REPEAT  3	[  FUN  ]
REPEAT  4	[  RT  90    FD  20  ]
.end_keep
.fi b

REPEAT needs two inputs.  The first input is a number telling how
many times to repeat something; the second input is a list of instructions.
The list must be enclosed within square brackets@[@@@]@(Shift-4 and Shift-5).

REPEAT can also be used in procedures:

Examples:

.nf l
.keep
TO  SQUARE
REPEAT  4    [ RT  90    FD  20 ]
END
.end_keep

.keep
TO FLOWER
REPEAT  12    [ SQUARE  RT  30 ]
END
.end_keep

.fi b
.section "bold(Ideas for Repeating Designs)"
Here are some designs that can be made using recursion or REPEAT.
