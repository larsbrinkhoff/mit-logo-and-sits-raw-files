(declare (special c= c# d d= d# e e= f= f# g g= g# a a= a# b b=))
(setq c= 1.0s0 c# 1.0595s0 d= 1.1225s0 d# 1.1892s0 e= 1.2599s0 f= 1.3348s0
      f# 1.4142s0 g= 1.4983s0 g# 1.5874s0 a= 1.6818s0 a# 1.7818s0 b= 1.8877s0)
(setq d c# e d# f e= e# f= g f# a g# b a# c b= b# c=)

(defun make-note (wavelength dur &optional (spacer 0))
  (let ((rest (* spacer dur)))
    (sys:%beep wavelength  (- dur rest))
    (sys:%beep 0 rest)
    )
  )

(defun play-note (a &optional (pitchmod 1) (durmod 1) (spacer 0)
		    (wave 1350) (dur 400000))
  (let ((p (car a))
	(o (cadr a))
	(d (caddr a)))
    (sys:%beep
      (fix (if (= p 0)
	       0
	       (* wave (* (// (* (// p e=) (cond
					 (( o 0) (^ 2 o))
					 (t (// (^ 2.0s0 (- o))))
					 ))) pitchmod))))
      (fix (* dur d durmod))
      )
    )
  )

(defun melodize (note-list &optional (pitchmod 1) (durmod 1)(spacer 0))
  (let ((score (spacerize note-list spacer)))
    (mapc 'play-note score
	  (circular-list pitchmod)
	  (circular-list durmod)
	  )
    )
  )

(defun already-spaced-melodize (score &optional (pitchmod 1) (durmod 1))
      (mapc 'play-note score
	  (circular-list pitchmod)
	  (circular-list durmod)
	  )
    )

(defun spacerize (note-list space-factor)		       ;puts some space between notes
  (let ((spaced-out-note-list ())
	(score (standardize note-list)))    
    (dolist (note score)
      (let ((pitch (car note))
	    (octave (cadr note))
	    (dur (caddr note)))
	(let ((time-space (* dur space-factor)))
	  (let ((tone (list pitch octave (- dur time-space)))
		(space (list 0 0 time-space)))
	    (setq spaced-out-note-list (append spaced-out-note-list
					       (list tone space)))))))
    spaced-out-note-list ))


(defun standardize (note-list)				       ;normal form {pitch oct dur}  
  (mapcar 'standardize-note note-list))

(defun standardize-note (a &aux (p 0) (d 1) (o 0))
  (cond
    ((atom a) (setq p (eval a)))
    (t (selectq (length a)
	 (1 (setq p (eval(caar a)) d (cadar a)))
	 (2 (setq p (eval (car a)) o (cadr a)))
	 (3 (setq p (eval (car a)) o (cadr a) d (caddr a)))
	 ) ) ) 
  (list p o d)
  )

(setq marsintro '( (g= -1) (g= -1 3) (g= -1 1)
	     (c= 0 4) ((c= 4)) ((d= 4)) ((d= 4))
	     ((g= 7)) ((e= 1)) ((c= 3))))

(melodize marsintro .7 .2 )

(setq marscore (spacerize marsintro .1))

(melodize marscore 1 .4)


(setq marsuntro '( (g= -1) (g= -1 3) (g= -1 1)
	     (c= 0 4) ((.0003 4)) ((d= 4)) ((d= 4))
	     ((g= 7)) ((e= 1)) ((c= 3))))

(melodize marsuntro)