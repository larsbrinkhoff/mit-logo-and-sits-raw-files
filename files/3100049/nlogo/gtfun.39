 
.IIF NDF LSI,DC LSI,0		;FOR INSERT INTO OLOGO
	.SBTTL 2500 DISPLAY STUFF
	VERSIO
.IFNZ GTL

NOGTL:	CLR GTLDF
.IIF NZ LSI,CLR LSTVEE
	SEZ
	RTS PC

.IIF NDF HOME, HOME:
GTHME:	MOV #GTHOME,B
	JSR PC,GT1WRD		;SEND OUT THE HOME TO THE 2500
GCLXYA:	CLR GTDIZY		;TURTLE ISN'T DIZZY
	MOV #DCURX,A		;WE WILL CLEAR OUT X, Y AND ANGLE
	MOV #6,C
1$:	CLR (A)+
	SOB C,1$
	BR GTSRTS

GT1WRD:	JSR PC,GTTEST
	CMP GTLEN,GTDLTP	;ABOUT TO HIT SNAPS?
	BLT GT2NWD
	ERROR+TML		;YUP, TOO MANY LINES!
GT2NWD:	INC GTLEN
GTWRD:	JSR PC,GTOUT
GTSRTS:	SEZ
	RTS PC

.IIF NDF SHOWTU, SHOWTU:
GTSHOW:	MOV #GTSTUR,B
	BR GT1WRD

.IIF NDF HIDETU, HIDETU:
GTHIDE:	MOV #GTHTUR,B
	BR GT1WRD

.IIF NDF PENUP, PENUP:
GTPU:	BIS #PENUF,DFLAGS	;SET PEN UP
GTPU1:	MOV #GTPENU,B
	BR GT1WRD

.IIF NDF PENDOW, PENDOW:
GTPD:	MOV #GTPEND,B
	BIC #PENUF,DFLAGS	;SET PEN DOWN
	BR GT1WRD

BLINK:	MOV #GTBLNK,B
	BR GT1WRD

GTLDIS:.IIF NZ LSI,MOV PC,LSTVEE
GTLDI1:	MOV PC,GTLDF		;SAY WE ARE A GTL DISPLAY
	CLR DFLAGS		;FLUSH OLD WRAP AND PEN FLAGS
	JSR PC,GTWIPE
;GTLDIS FALLS INTO CLEAR SCREEN
.IIF NDF CLEARS, CLEARS:
GTCLEA:	MOV #GTCS,B
	JSR PC,GTOUT		;REALLY OUTPUT THE CLEAR
	BIC #PENUF,DFLAGS	;SET PEN DOWN
	CLR GTLEN		;THE DISPLAY LIST IS ZERO LENGTH
	BR GCLXYA		;CLEAR X Y AND ANGLE

.IIF NDF WIPECL, WIPECL:
GTWIPE:	MOV #GTSLEN,GTSNBT	;FLUSH ALL SNAPS
	MOV #GTSLEN-10.,GTDLTP	;SET TOP OF DISPLAY LIST
	BR GTSRTS		;AND RETURN

SPIN:	MOV #GTSPIN,F
GT11BD:	MOV PC,GTDIZY		;TURTLE IS DIZZY
GT11BT:	JSR PC,G1NARG
GT11B1:	JSR PC,GTTEST
	SAVE B
	MOV B,C
	BIC #1777,C		;CLEAR GOOD BITS
	ASH #-10.,C		;EXTEND SIGN
	BEQ 1$			;ZERO
	INC C
	BEQ 1$			;1
	ERROR+WTA
1$:	BIC #174000,B		;CLEAR UNUSED BITS
	BIS F,B
	JSR PC,GT1WRD
	REST B
	SEZ
	RTS PC

MOVE:	MOV #GTMOVE,F
	BR GT11BD

.IIF NDF SETHEA, SETHEA:
GTSETH:	JSR PC,G1NARG
GTSET1:	MOV #GTSHED,F
	JSR PC,GT11B1
	MOV B,DCURA
	BR GTSRTS

.IIF NDF RIGHT, RIGHT:
GTRIGH:	JSR PC,G1NARG
GTRTLT:	MOV #GTRT,F
	JSR PC,GT11B1
	MOV DCURA,A
	ADD A,B
	JSR PC,MOD360
	MOV B,DCURA
	BR GTSRTS

.IIF NDF LEFT, LEFT:
GTLEFT:	JSR PC,G1NARG
	NEG B
	BR GTRTLT

.IIF NDF FORWAR, FORWAR:
GTFORW:	JSR PC,G1ARG
GTFDBK:	SETI
	SETF
	LDF FA,FC		;TEMP INTO FC
	TST GTDIZY		;TURTLE ALREADY DIZZY?
	BNE 1$
	STF FA,-(P)
	LDCIF DCURA,FA
	SUBF #41664,FA
	NEGF FA			;GET 90-HEADING
	STF FA,-(P)		;SAVE "REAL" ANGLE
	JSR PC,SINDEG		;GET SIN OF ANGLE
	STF FA,FB		;SAVE SINE IN FB
	LDF (P)+,FA
	STF FB,-(P)
	JSR PC,COSDEG
	LDF (P)+,FB
	LDF (P)+,FC		;GET BACK LENGTH
	MULF FC,FA		;GET X OFFSET
	MULF FC,FB		;AND Y OFFSET
	ADDF DCURX,FA
	ADDF DCURY,FB
	SETI
	BIT #WRAPF,DFLAGS
	BNE 1$
	STF FA,FF
	LDCIF #200.,FD
	JSR PC,GTCHKB
	STF FB,FF
	JSR PC,GTCHKB
1$:	STCFI FC,B		;BACK TO INTEGER
	MOV #GTFD,F
	JSR PC,GT11B1
	STF FA,DCURX
	STF FB,DCURY
	SEZ
	RTS PC

GTCHKB:	ABSF FF
	CMPF FF,FD		;IS IT < 400.0?
	CFCC
	BLE 1$
	ERROR+OOB
1$:	RTS PC

.IIF NDF BACK, BACK:
GTBACK:	JSR PC,G1ARG
	NEGF FA
	BR GTFDBK

GT10CH:	SAVE A
	MOV GTDLTP,A
	SUB GTLEN,A
	CMP #10.,A
	BLT 1$
	ERROR+TML
1$:	REST A
	RTS PC

.IIF NDF SETXY, SETXY:
GTSXY:	MOV #GTSTXY,F
GTSXY1:	JSR PC,G2NARG
	JSR PC,GT10CH		;CHECK THAT THERE IS LOTS OF ROOM
GTSXY2:	SETI
	SETF
	LDCIF B,FA
	STF FA,DCURX
	JSR PC,GT11B1
	MOV A,B
	LDCIF B,FA
	STF FA,DCURY
	JMP GT1WRD

DELTAX:	MOV #GTDLXY,F
	BR GTSXY1


.IIF NDF SNAP, SNAP:
GTSNP:	MOV GTSNBT,E		;BOTTOM OF SNAPS
	SUB GTLEN,E		;NEW BOTTOM OF SNAPS
	SUB #2,E		;ROOM FOR POPJ
	CMP E,GTLEN		;DOES IT COLLIDE WITH XISTING LIST?
	BGT 1$			;NO
2$:	ERROR+TML
1$:	CMP E,#GTMNDS		;WILL IT BE BELOW THE MINIMUM ALLOWED?
	BLE 2$
	MOV E,GTSNBT		;SET NEW BOTTOM
	SUB #10.,E
	MOV E,GTDLTP		;SET NEW TOP FOR DISPLAY LIST
	MOV #GTSNAP,B
	JSR PC,GT1WRD
	MOV GTSNBT,B		;GET ADDRESS FOR SNAP
	ADD #GTSTRT,B		;ADD IN OFFSET
	JSR PC,GT1WRD
	MOV #1,GTLEN		;NEW LENGTH IS JUST 1 WORD
	MOV GTSNBT,B
	JMP R1NARG		;RETURN NUMBER WHERE SNAP WAS STORED


.IIF NDF DISPLA, DISPLA:
GTDIS:	JSR PC,GT10CH
	MOV #GTDISP,B
	JSR PC,GT1WRD
	JSR PC,G1NARG
	ADD #GTSTRT,B		;OFFSET TO START OF DISPLAY AREA
	JSR PC,GT1WRD
	TST GTDIZY		;DIZZY?
	BNE 1$			;YUP, THIS STUFF WON'T HELP
	JSR PC,GTPU1		;PUT UP PEN
	SETI
	LDF DCURX,FB
	LDF DCURY,FA
	STCFI FB,B
	STCFI FA,A
	MOV #GTSTXY,F
	JSR PC,GTSXY2		;SET X AND Y TO WHAT THEY ARE (!?!)
	MOV DCURA,B		;LIKEWISE FOR ANGLE
	JSR PC,GTSET1		;SET HEADING
	BIT #PENUF,DFLAGS	;IS THE PEN SUPPOSED TO BE UP?
	BNE 1$			;YUP
	JSR PC,GTPD		;NO, PUT IT BACK DOWN
1$:	SEZ
	RTS PC

RUBDIS:	MOV #GTRUB,F
	JSR PC,G1NARG
	CMP B,GTLEN
	BLE 1$
	ERROR+OOB
1$:	NEG B
	ADD B,GTLEN
	DEC GTLEN		;SO THE RUBDIS ISN'T COUNTED
	MOV PC,GTDIZY
	JMP GT11B1


.IIF NDF DEFM36, .IF NDF MOD360
.IIF  DF DEFM36, .IF NZ 105
DC DEFM36,1
;	OUTPUT B MOD 360 IN B.
;	ALWAYS OUTPUTS A POSITIVE NUMBER
MOD360:	TST B
	SXT A
	DIV #360.,A		;DIVIDE B BY 360
	TST B			;REM >= 0?
	BGE 1$
	ADD	#360.,B		;IF REMAINDER WAS NEGATIVE, ADD 360 TO IT
1$:	RTS	PC
	;TAKES FNUM POINTED TO BY F, AND PUTS IT IN A NODE
	;RETURNS POINTER TO IT IN B
WHOPIE:	SPUSH C
	MOV (F)+,A	;PUT FNUM IN A AND B
	MOV (F)+,B
	JSR PC,GRBAD	;PUT FNUM IN NODE SPACE
	BIS #FNUM,C	;SET APPROPRIATE TYPE
	MOV C,B		;PUT POINTER IN B
	SPOP C
	RTS PC


;PENP
;RETURNS TRUE IF THE PEN IS DOWN
;RETURNS FALSE IF IT IS UP
PENP:	JSR PC,GTTEST	;DOES HE OWN A DISPLAY OR PLOTTER?
	BIT #PENUF,DFLAGS	;IS THE PEN UP?
	BNE PENP1	;YES
	JMP RTTRUE	;NO, RETURN TRUE
PENP1:	JMP RTFALS	;YES, RETURN FALSE

WRAP:	BIS #WRAPF,DFLAGS
	SEZ
	RTS PC

NOWRAP:	BIC #WRAPF,DFLAGS
	SEZ
	RTS PC

GTTEST:	TST GTLDF
	BNE 1$
	JSR F,ACSAV
	JSR PC,GTLDI1	;SET DISPLAY CODES ON, BUT NOT SMART RUBOUT
			;IF IT HAS BEEN TURNED OFF
	JSR F,ACRES
1$:	RTS PC
.IFF
GTTEST:	TST GTLDF
	BNE 1$
	ERROR+OGT
1$:	RTS PC

.ENDC

GTTESD:	JSR PC,GTTEST
	TST GTDIZY	;IS THE TURTLE DIZZY?
	BEQ 1$
	ERROR+TGD
1$:	RTS PC

.IIF NDF HERE,HERE:
GTHERE:	JSR PC,GTTESD	;DOES HE OWN DISPLAY OR PLOTTER?
	MOV #DCURX,F	;GET APPROPRIATE VARIABLES
	JSR PC,WHOPIE	;PUT (F) INTO A NODE, POINTER IN B
	PUSHS B		;STORE POINTER TO FNUMS ON STACK
	JSR PC,WHOPIE	;DO IT AGAIN
	PUSHS B
	MOV (F),B	;PUT ANGLE (SNUM) IN B
	JSR PC,PSHNUM	;PUT SNUM IN B ON S-PDL
	MOV #3,D	;PUSH A FLAG ON	
	JMP SENT.	;CHANGE THE THREE THINGS INTO A SENTENCE

.IIF NDF XCOR,XCOR:
GTXCOR:	MOV #DCURX,F	;GET POINTER TO APPROPRIATE CURX
	BR GTYCR1	;GET NUMBER AND RETURN

.IIF NDF YCOR,YCOR:
GTYCOR:	MOV #DCURY,F	;GET APPROPRIATE POINTER TO CURX
GTYCR1:	JSR PC,GTTESD	;DOES HE OWN A DISPLAY OR PLOTTER?
	JSR PC,WHOPIE	;PUT NUMBER INTO A NODE,POINTER RETURNED IN B
	JMP ORTB	;PUT POINTER IN B ON S-PDL

.IIF NDF HEADIN,HEADIN:
GTHEAD:	JSR PC,GTTEST	;DOES HE OWN A DISPLAY OR PLOTTER?
	MOV #DCURA,F	;GET APPROPRIATE POINTER TO CURX
	MOV (F),B	;MOVE CURA TO B
	JMP R1NARG	;RETURN B


.ENDC
