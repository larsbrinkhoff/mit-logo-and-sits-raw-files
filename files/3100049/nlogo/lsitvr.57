LSRCSR=	177560	;TTY RECIEVER STATUS REG, INIT TO #600 (INTERRUPT ENABLED)
LSRBUF=	177562	;TTY RECIEVER BUFFER
LSXCSR=	177564	;TTY XMITTER STATUS REG, INIT TO #600 (INTERRUPT ENABLED)
LSXBUF=	177566	;TTY XMITTER BUFFER
LSXMRD==200	;TTY XMITTER READY BIT
LSTOEN==100	;TTY INTERRUPT ENABLE BIT
LSBUFL==200		;MAXIMUM # OF CHARS PER VIRTUAL LINE

LSTVEE:	1	;1 => TVTYPE, BACKSPERABLE CONSOLE, 0 => NOT

LSINBE:	LSINBF+LSBUFL	;POINTER TO END OF INPUT BUFFER
LSINA:	LSINBF		;PTR TO NEXT CHAR TO BE READ
LSINZ:	LSINBF		;PTR TO NEXT BYTE TO BE USED
LSINN:	0		;# OF BYTES IN LSINBF

LSOTBF:	.BLKB LSBUFL	;CIRCULAR BUFFER FOR TTY OUTPUT
LSOTA:	LSOTBF		;PTR TO NEXT BYTE TO BE OUTPUT
LSOTZ:	LSOTBF		;PTR TO NEXT BYTE TO BE USED
LSOTN:	0		;# OF BYTES IN LSOTBF

LSLINL==200		;MAXIMUM # OF CHARS PER VIRTUAL LINE, MUST BE EVEN

LSINBF:	.BLKB LSBUFL	;A CIRCULAR BUFFER FOR TTY INPUT
LSCLIN:	.BLKB LSLINL	;CIRCULAR BUFFER FOR CURRENT LINE
LSOLIN:	.BLKB LSLINL	;CIRCULAR BUFFER FOR PREVIOUS LINE (DOUBLES AS "EDIT BUFFER")
			;THESE MUST BE CONTIGUOUS, OF LENGTH LSLINL, IN THIS ORDER
LSTBFL==.-LSINBF	;TOTAL BUFFER LENGTH
LSCLNA:	LSCLIN		;PTR TO NEXT LSCLIN  BYTE TO BE READ
LSCLNZ:	LSCLIN		;PTR TO NEXT LSCLIN BYTE TO BE USED
LSCLNN:	0		;# OF BYTES IN LSCLIN
LSOLNA:	LSOLIN		;PTR TO NEXT LSOLIN BYTE TO BE READ
LSOLNZ:	LSOLIN		;PTR TO NEXT LSOLIN BYTE TO BE USED
LSOLNN:	0		;# OF BYTES IN LSOLIN

LSITTS:	0		;TTY MODE WORD. CONTAINS FLAGS: .TLIPM=LINE INPUT, .TIECM=
			; ECHO MODE, .TICTM=CONVERT UPARROW-PRECEEDED CHARS TO CTRL
			; CHARS, .TICVM=CONVERT LOWER CASE TO UPPER, .TIMGO= IMAGE
			;OUTPUT MODE

LSCHNO:	0		;# OF CHARS BYTO'D SINCE LAST CR
LSCHMX:	72.		;MAX # OF CHARS THAT FIT ON PHYSICAL LINE
LSLNNO:	0		;# OF CR'S SINCE LAST FF
LSLNMX:	30.		;MAX # OF CHARS THAT FIT ON PHYSICAL SCREEN

LSIBRK:	0		;SET TO 1 WHEN BREAK CHAR (^G OR ^Z) IS TYPED,
LSILSC:	0	;COUNT OF CHARACTERS LOST

LSEMTP:	0		;STACK PTR AS OF RIGHT AFTER EMT TRAP

.MACRO LSEMTM FUNC,ADDR
FOO==FUNC&177		;FLUSH THE EMT PART
	.=LSETAB+<FOO*2>
	ADDR
.IIF GT FOO-LSETOP,LSETOP==FOO
.ENDM

LSETAB:
.IF1
LSETOP==0
.IFF
.REPT LSETOP
	LSLOSE
.ENDR
.ENDC

	LSEMTM .INVOK,LSINVK
	LSEMTM .BYTI,LSBYTI
	LSEMTM .BYTO,LSBYTO
	LSEMTM .WRDI,LSWRDI
	LSEMTM .WRDO,LSWRDO
	LSEMTM .BLKI,LSBLKI
	LSEMTM .BLKO,LSBLKO
	LSEMTM .GERRW,EGERRW
	LSEMTM .SSTAT,ESSTAT
	LSEMTM .NOOP,ENOOP
	LSEMTM .SINK,ESINK	;A NO-OP
	LSEMTM .FLOAT,EFLOAT	;LIKEWISE (MAYBE THIS SHOULD ERROR OUT IF NO LSFLEM)
.IIF NZ LSCLK,	LSEMTM .TIME,ETIME
.IIF NZ LSCLK,	LSEMTM .SLEEP,ESLEEP
.=LSETAB+<LSETOP*2>+2
.IFNZ LSTTY
.MACRO LSTIVM FUNC,ADDR
	.=LSITAB+<FUNC*2>
	ADDR
.IIF GT FUNC-LSTTIM,LSTTIM==FUNC
.ENDM

LSITAB:
.IF1
LSTTIM==0
.IFF
.REPT LSTTIM
	LSLOSE
.ENDR
.ENDC
	
	LSTIVM .TTMOV,LSTTMV
	LSTIVM .TTBIS,LSTTBS
	LSTIVM .TTBIC,LSTTBC
	LSTIVM .TTRD,LSTTRD
	LSTIVM .TTCNO,LSTTCN
	LSTIVM .TTPEK,LSTTPK
	LSTIVM .TTSLN,LSTTSL
.=LSITAB+<LSTTIM*2>+2
.ENDC
.IFNZ LSDISK
.MACRO LSFIVM FUNC,ADDR
	.=LSFAIT+<FUNC/400>
	ADDR
.IIF GT <FUNC/400>-LSFAIM,LSFAIM==FUNC/400
.ENDM

LSFAIT:
.IF1
LSFAIM==0
.IFF
.REPT LSFAIM
	LSLOSE
.ENDR
.ENDC
	LSFIVM .FARE,LSFARE	;RETURN EOF WORDS
	LSFIVM .FASP,LSFASP	;SET POINTER
	LSFIVM .FARP,LSFARP	;READ POINTER
	LSFIVM .FADL,LSFADL	;DELETE ENTRY
	LSFIVM .FAAD,LSFAAD	;ADD ENTRY
	LSFIVM .FAMU,LSFAMU	;MUTATE
	LSFIVM .FAMB,LSFAMB	;SET UP DISK BIT TABLE
	LSFIVM .FARI,LSFARI	;READ FILE INFORMATION
	LSFIVM .FADI,LSFADI	;READ DISK INFORMATION
	LSFIVM .FASDL,LSFSDL	;SUPER DELETE
	LSFIVM .FAMD,LSFAMD	;MAKE A DIRECTORY


.=LSFAIT+<LSFAIM*2>+2
.ENDC
LSBYLP:	0		;0=>NO PENDING LINE IN LINBUF
LSRIP:	0		;RUBOUT IN PROGRESS FLAG
LSPC:	0		;PC AFTER EMT
LSPS:	0		;PS FROM EMT
LSERPC:	0		;PC WHERE ERROR WAS DETECTED
LSUERP:	0		;USER PC OF CALL THAT CAUSED ERROR
LSERCD:	0		;ERROR CODE
LSEPDL:	0		;SAVED PDL FOR ERROR RETURNING

LSMAXC==20		;MAX CAPABILITY

;DISPATCH TABLES FOR BYTI, BYTO, BLKI, BLKO, WRDI AND WRDO
FOO==0
.MACRO LSIOC LIST
	.IRP ROT,<LIST>
		.IIF B ROT,LSLOSE
		.IIF NB ROT,ROT
	.ENDM
.ENDM

		.IRP 	X,<LSBITB,	LSBOTB,	LSWITB,	LSWOTB,	LSBLIT,	LSBLOT>
X==.IRPCN*2
.ENDM
	
.IIF NZ LSTTY,LSTTIO:	LSIOC	<LSTBYI,	LSTBYO,	,	,	,	LSTBLO>
.IIF NZ LSDISK,LSFAIO:	LSIOC	<LSFBYI,	LSFBYO,	LSFWDI,	LSFWDO,	LSFBLI,	LSFBLO>
.IIF NZ LSPRNT,LSLPIO:	LSIOC	<	,	LSLBYO,	,	,	,	LSLBLO>





LSCPTB:	.CCCAP		;CREATE
	.SPCAP		;SELF
	.TTCAP		;LATER THIS WILL BE INITED
	.TTCAP		;BY A ROUTINE
	.BLKW LSMAXC-4

.IFNZ LSDISK	;CURRENTLY ONLY DISK CAPS USE THESE
LSCRN1:	.BLKW LSMAXC	;RANDOM WORD 1, -1 IF NO CURRENT BLOCK, ELSE BLOCK #
LSCRN2:	.BLKW LSMAXC	;RANDOM WORD 2, HIGH ORDER BITS OF ACCESS POINTER
LSCRN3:	.BLKW LSMAXC	;RANDOM WORD 3, LOW ORDER BITS OF POINTER)
LSCIPN:	.BLKW LSMAXC	;ITEM POINTER

;DISK MFI'S
MFILEN==0
.MACRO MFIWDF A,L
A==MFILEN
.IIF B L,MFILEN==MFILEN+2
.IIF NB L,MFILEN==MFILEN+L
.ENDM

MFIWDF MFILNK	;LINK WORD (MUST BE ZERO)
MFIWDF MFRFCN	;REFERENCE COUNT
MFIWDF MFBACK	;BACK POINTER TO DIR IF THIS IS A FILE
MFIWDF MFDKNO	;DISK NUMBER
MFIWDF MFFLNO	;FILE NUMBER IN DIR
MFIWDF MFDIRF	;NON-ZERO => IS DIRECTORY
MFIWDF MFMODF	;IF NON-ZERO THIS ENTRY HAS BEEN MODIFIED, SHOULD BE WRITTEN BACK
MFIWDF MFDELF	;IF NON-ZERO FILE OR DIR IS DELETED
MFIWDF MFADDF	;IF NON-ZERO THIS IS A NEW FILE NOT YET IN THE DIR
MFIWDF MFENDP	;THIS POINTS TO THE END OF THIS ENTRY
MFIWDF MFEOFH	;HIGH BITS OF EOF
MFIWDF MFEOFL	;LOW BITS OF EOF
MFIWDF MFBLKN	;IF -1, FILE, ELSE BLOCK # OF DIR
MFIWDF MFRSFR	;RESEVERD BYTES IN DIR IF FILE, ELSE # BYTES FREE
 MFEOFB==100000	;FLAG IN HEADER WORD, HAS EOF, TIME+DATE
 MFACCB==40000	;FLAG IN HEADER, HAS ACCESS CODES
 MFSHRB==10000	;THIS FILE SHARES BLOCKS
 MFLSTB==400	;FLAG FOR LAST BLOCK EXISTING
 MFSLFE==4000	;SELF
 MFDIRE==1000	;DIRECTORY TYPE
 MFPARE==0	;PARENT
 MFFILE==2000	;FILE

MFIWDF MFENTY,64.	;COPY OF THE ENTRY

LSDBUF:	.BLKW 512.	;ALL BLOCKS GO HERE TILL I GET MORE AMBITIOUS

MFOPNF:	0		;LSIT OF OPEN FILES
MFILST:	.+2
.REPT LSMAXC/2+3	;RANDOM NUMBER OF THESE
	.+MFILEN
	.BLKB MFILEN-2
.ENDR
	.BLKB MFILEN

LSBTLN==<<250./8.>!1>+7	;LENGHT IS ENOUGH FOR 250. BLOCKS PLUS SOME
LSBTBS:	.+2
	.+LSBTLN
	.BLKB LSBTLN-2
	0
	.BLKB LSBTLN-2	;TWO BIT TABLES ALLOCATED

;TABLE OF MOUNTED DISKS
LSMXDK==4
LSDMNT:	.BLKW LSMXDK
MFFREE:	.BLKW LSMXDK	;NUMBER OF FREE BLOCKS ON DISK
MFBITP:	.BLKW LSMXDK	;POINTER TO BIT TABLE OF THIS DISK
MFBITB:	.BLKW LSMXDK	;BLOCK NUMBER OF BIT TABLE FOR THIS DISK
MFBITM:	.BLKW LSMXDK	;IF NON-ZERO THE BIT TABLE HAS BEEN MODIFIED
MFDKRF:	.BLKW LSMXDK	;THE REFERENCE COUNT FOR A DISK
.ENDC




.IFNZ LSCLK
LSTIME:	0
	0
SECNT:	1.	;HALF SECOND COUNTER
LSSEC:	0	;CURRENT SECOND
LSMIN:	0	;MINUTE
LSHOUR:	0
LSDAY:	0
LSMON:	0
LSYEAR:	-1
MONS:	.BYTE 31.,28.,31.,30.,31.,30.,31.,31.,30.,31.,30.,31.
SECONL:	60.
MINUTL:	60.
HOURL:	24.
DAYL:	0	;SET FROM MONS
MONTHL:	12.
YEARL:	2000.	;SYSTEM LOSES IN YEAR 2000.
RESETT:	.WORD 0,0,0,1,1	;VALUES TO RESET TO
HSECNT:	0		;60THS OR 50THS TILL TIME TO INC HSECS
HSECS:	0		;TIME IN .5 SECS, FOR SWAP DESICIONS
HSEC:	HSECTK		;NUMBER OF TICKS IN A HALF SECOND
.ENDC
.IFNZ LSDISK
WCHDSK:	0	;DISK NUMBER
DISKIO:	0	;FUNCTION
 DISKRD==1
 DISKWR==2
 DISKWC==3
RETRYS:	0	;NUMBER OF TIMES TRIED
 NRETRY==10.	;MAX TIMES TO TRY
LSDKLT:	0	;COPY OF LIGHTS REGISTER
ENTRYE:	0	;TEMP POINTER TO END OF ENTRY
ENTLST:	0	;TYPE OF LAST VALID BYTE
ENTLSB:	0	;BLOCK NUMBER OF LAST BLOCK OF FILE
ENTLSP:	0	;POINTER TO LAST VALID BYTE
FNBVER:	0	;VERSION NUMBER
FNBFNO:	0	;FILE NUMBER
FNBFN:	.BLKW 16.	;FILE NAME
BLOKNO:	0	;BLOCK NUMBER
BLOKMD:	0	;IF NON-ZERO BLOCK HAS BEEN MODIFIED, SHOULD BE WRITTEN BACK
FLOPTR:	0	;TRACK ADDRESS
FLOPSC:	0	;SECTOR ADDRESS
FLOPSS:	0	;SAVED SECTOR ADDRESS
FLOPCA:	0	;CORE ADDRESS
FLPSCA:	0	;SAVED CORE ADDRESS
FLOPHW:	0	;HALF WAY MARKER (END OF BUFFER)
FLOPWC:	0	;WORD COUNT
TRNSLE:	-1000	;TRANSFER LENGHT IN WORDS
TRNERR:	0	;COUNT OF IRRECOVERABLE ERRORS ON THIS XFER
FERRST:	0	;ERROR TYPE
ERRDAT:	0	;ERROR INFO
LSDKOF:	0	;IF NON-ZERO, DISK IS TURNED ON
LSBMT:	.BYTE 1,2,4,10,20,40,100,200
.ENDC


.IFNZ LSPRNT
LPBUFS==80.
LPUSE:	-1	;>= 0 => LP IN USE
LPERRF:	0	;ERROR FLAG
LPBUF:	.BLKB LPBUFS
LPBUFE::
LPIPNT:	LPBUF
LPOPNT:	LPBUF
LPCNT:	0
LPLEN:	72.
LPPOS:	0
.ENDC

LSINTB:
.IF NZ LSFLEM
	10
	FLEMT
	244
	FLFIS
.ENDC
	30
	LSIEMT
.IFNZ LSCLK
	CLKBRV
	CLKBRK
	CLKBRV+2
	340
.ENDC
.IFNZ LSDISK
	SMSBRV
	SMSBRK
	SMSBRV+2
	340
.ENDC
.IFNZ LSTTY
	60
	LSTINT
	62
	340
	64
	LSTONT
	66
	340
.ENDC
.IFNZ LSPRNT
	LPBRV
	LPINT
	LPBRV+2
	340
.ENDC
	0
