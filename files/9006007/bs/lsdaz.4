	.TITLE DAZZLE DART


	.STITL MACROS

	.MACR SPUSH AA
	.XLIST
	MOV AA,-(P)
	.LIST
	.ENDM

	.MACR SPOP AA
	.XLIST
	MOV (P)+,AA
	.LIST
	.ENDM

	.MACR FPUSH FF
	.XLIST
	STF FF,-(P)
	.LIST
	.ENDM


	.MACR FPOP FF
	.XLIST
	LDD (P)+,FF
	.LIST
	.ENDM


.MACR REPT1 A,B
	.XLIST
	.REPT A
	B
	.ENDR
	.LIST
.ENDM

.MACR REPT2 A,B,C
	.XLIST
	.REPT A
	B
	C
	.ENDR
	.LIST

.ENDM
	.STITL SYSTEM PARAMETERS
	CIRC==1


A=%0
B=%1
C=%2
D=%3
E=%4
F=%5
U=%5
M=%5
P=%6
SP=%6
PC=%7

FA==%0
FB==%1
FC==%2
FD==%3
FE==%4
FF==%5

MNUSRS==2

	.=100
	CLKBRK	;PROGRAMMABLE CLOCK
	300	;IS ON BR6

.=10
	FLEMT
	0
.=244
	FLFIS
	0
	.=400
	.=.+200
SPDLP:	.	;PDL
	.=1000
TIME:	0
TIMER:	0	;COUNTS IN SECONDS

PI:	40511
	7732
	121041
	64303


;VARIABLES AND CONSTANTS FOR DAZZLE DART

DAZSTR==.
MAXMRS==10.
MAXBMS==10.
LARGE==77000	;A LARGE FLOATING POINT NUMBER


RTURNF==1	;BIT CODE FOR MRBOX
LTURNF==2
RSLIDF==4
LSLIDF==10
BKTRF==20
FDTRF==40
PASSF==100
FIREF==200
R360:	.WORD 36066,5542	;1/360.

;VARIABLES -- ONE COPY
WALLB:	.WORD 0,0
WALLT:	.WORD 0,0
TEN:	.WORD 0,0
TURNSP:	.WORD 40440,0
SPEED:	.WORD 40440,0
FFBDR:	.WORD	0,0	;RAD OF FBDN ZONE
FFBDR2:	.WORD	0,0	;SQUARE OF ABOVE
FFBDH:	.WORD	0,0	;HT OF FBDN ZONE IN FLOATING POINT
FFBDW:	.WORD	0,0	;WDTH
FFBDB:	.WORD	0,0 	;BOUNDARY OF FBDN ZONE
REFSIZ:	.WORD 41400,0	;32.
TARD:	.WORD 0,0
SX:	.WORD 0,0
SY:	.WORD 0,0
BMX:	.WORD 0,0
BMY:	.WORD 0,0
CNT:	.WORD 0,0
TARX:	.WORD 0,0
TARY:	.WORD 0,0

NUMMRS:	12.
NUMBMS:	3
GOLTIM:	5.	;WAIT THIS MANY SECONDS AFTER HITTING GOAL
;MIRROR VARIABLES
	VARBEG==.
CX:	REPT2	MAXMRS+8,0,0
CY:	REPT2	MAXMRS+8,0,0
TX:	REPT2	MAXMRS+8,0,0
TY:	REPT2	MAXMRS+8,0,0
BX:	REPT2	MAXMRS+8,0,0
BY:	REPT2	MAXMRS+8,0,0
ANGM:	REPT2	MAXMRS+8,0,0
COSM:	REPT2	MAXMRS+8,0,0
SINM:	REPT2	MAXMRS+8,0,0
DBOT:	REPT2	MAXMRS,0,0
DIRE:	REPT2	MAXMRS,0,0
CONTRO:	REPT2	MAXMRS,0,0
BN:	0
BMLOST:	0
SMN:	0
TARN:	0
MRFIRE:	0
	VAREND==.
BMR:	0	;WHO'S GOT THE BEAM?
WALMAX:	200.	;WALLS AT PLUS OR MINUS THIS NUMBER
GOLSIZ:	25.	;GOALS AT PLUS AND MINUS THIS
GOLHT:	10.	;HEIGHT OF GOALS
FBDR:	90.	;RAD OF FBDN ZONE
FBDH:	30.	;HEIGHT OF FORBIDDEN ZONE
FBDW:	100.	;HALF THE WIDTH OF FBDN ZONE
TMOUT:	30.	;MUST SHOOT WITHIN THIS MANY SECONDS
MXPAS:	10.	;MAX NUM OF ALLOWED PASSES

;INITIAL VALUES FOR MIRRORS AS INTEGERS
ICX:	50.
	-50.
	REPT1	MAXMRS+6,0
ICY:	0
	0
	100.
	-100.
	REPT1	MAXMRS+4,0
IANGM:	180.
	0.
	90.
	270.
	REPT1	MAXMRS+4,0
HIT:	0	;A FLAG USED BY FIRE ROUTINES
CPAS:	0
SC1:	0
SC2:	0
PSC1:	0
PSC2:	0
PCPAS:	0
PTIM:	0	;POINTERS TO DISPLAY LIST
NBDR:	0 	;COUNTER FOR BEAM DRAWER
BMCRP:	0	;POINTER INTO NEXT AREA
BMCRS:	REPT1	4*<MAXBMS+1>,0	;SAVE BEAM CORS HERE


.INSRT NLOGO;LSFLVR
.INSRT NLOGO;LSFLEM
	.STITL	CLOCKBREAK

CLKBRK:	DEC	TIME
	BGT	CLK1
	MOV	#60.,TIME
	DEC	TIMER
	BGE	CLK1	;DONT ALLOW IT TO BECOME NEGATIVE

	CLR	TIMER
CLK1:	RTT
	.STITLE DAZZLE
START:	RESET
	MOV SPDLP,P
	CLR	BMR
RSTRT:	MOV	#60.,TIME
	MOV	TMOUT,TIMER
	MOV	#2000,177200
	CLR	SC1
	CLR	SC2

;DAZZLE DART

DAZZLE:	MOV	#60.,TIME
	MOV	TMOUT,TIMER
	MOV	MXPAS,CPAS
	LDFPS	#0	;INTEGER,FLOATING
	JSR	PC,DZCLR	;CLEAR OUT MIRROR VARIABLES
	JSR	PC,DZINIT	;INITIALIZE VARIABLES
	JSR	PC,WLINIT	;INITIALIZE WALL VARIABLES

;THE MAIN LOOP
DZMAIN:	TST	TIMER	;DID HE FIRE IN TIME?
	BGT	DZM01
	MOV	TMOUT,TIMER
	MOV	#60.,TIME
	MOV	MXPAS,CPAS
	ADD	#4,BMR	;GIVE BEAM AWAY
	BIC	#177763,BMR
	INC	BMLOST
DZM01:	JSR	PC,MOVEAL	;MOVE ALL MIRRORS
	CLR	HIT	;BEAM COMPUTATION
	CLR	NBDR
	TST	MRFIRE
	BEQ	DZM1
	JSR	PC,FBEAM
	BR	DZM1
;DELETE PREVIOUS INSTRUCTION TO ALLOW FIRING TO RESET TIME
	MOV	TMOUT,TIMER
	MOV	#60.,TIME

DZM1:	JSR	PC,DRAWAL	;DRAW ALL NEW THINGS
	TST	HIT
	BEQ	DZM2	;DIDN'T HIT GOAL
	JMP	GOLWAT	;GO TO WAIT AND RESTART

DZM2:	BR	DZMAIN
	
GOLWAT:	JSR	PC,SCCOMP
	MOV	#60.,TIME
	MOV	GOLTIM,TIMER
	JSR	PC,PRSCR	;PRINT THE SCORE
GOLW1:	TST	TIMER
	BGT	GOLW1
GOLWR:	ADD	#4,BMR
	BIC	#177763,BMR
	JMP	DAZZLE


SCCOMP:	MOV	NUMMRS,A
	ADD	#20.,A
	CMP	A,HIT	;WAS TOP GOAL HIT?
	BNE	SCGBOT
SCGTOP:	INC	SC2
	BIT	#4,BMR
	BNE	SCRET
	INC	SC2	;TOP GOAL HIT BY DEFENSE?
	BR	SCRET
SCGBOT:	INC	SC1
	BIT	#4,BMR
	BEQ	SCRET
	INC	SC1	;BOTTOM GOAL HIT BY DEFENSE?
SCRET:	RTS	PC

;PRINT THE SCORE
PRSCR:	RTS	PC

;MOVE ALL MIRRORS

MOVEAL:	MOV	NUMMRS,M
MOVELP:	JSR	PC,MOVE	;MOVE ONE MIRROR
	SUB	#4,M
	BGE	MOVELP
	RTS	PC

;MOVE ONE MIRROR.
;	CALL WITH INDEX IN M
MOVE:	JSR	PC,MRBOX	;A _ CONTROL BOX
;			BITS ARE CODED AS <FIRE, BK, FD, LT, RT>
	SPUSH	A
	MOV	A,CONTRO(M)
	BIT	#<RTURNF!LTURNF>,A
	BEQ	MVNOTU
	BIT	#RTURNF,A
	BEQ	MVLTU	;ITS A LEFT TURN
MVRTU:	CLR	A	;A FLAG FOR MVTURN
MVLTU:	JSR	PC,MVTURN	;TURN THIS MIRROR
MVNOTU:	MOV	(P),A
	BIT	#<FDTRF!BKTRF>,A
	BEQ	MVNOTR
	BIT	#FDTRF,A
	BEQ	MVBKTR	;BACKWARDS TRANSLATION
MVFDTR:	CLR	A
MVBKTR:	JSR	PC,MVTRAN	;TRANSLATE THIS MIRROR
MVNOTR:	MOV	(P),A	;NOW CHECK FOR SLIDING
	BIT	#<RSLIDF!LSLIDF>,A
	BEQ	MVNOTS
	BIT	#LSLIDF,A
	BEQ	MLSLD
	CLR	A
MLSLD:	JSR	PC,MVSLID
MVNOTS:	TST	(P)+
	RTS	PC

;READ THE BOX
MRBOX:	MOV M,A
	RTS	PC


;DRAW ALL THE MIRROS THAT NEED TO BE DRAWN
;
DRAWAL:	MOV	NUMMRS,M
DRAWLP:	JSR	PC,DRAW	;DRAW ONE MIRROR
	SUB	#4,M
	BGE	DRAWLP
				;DRAW THE BEAM
	CLR	BMLOST
	RTS	PC


;DRAW ONE MIRROR.
;	CALL WITH INDEX IN M
DRAW:				;DRAW A MIRROR (MOVE THE PASS COMPUTATION ELSE WHERE)
	RTS	PC

;TURN THIS MIRROR.
;	CALL WITH A = 0 IFF RIGHT TURN
;UPDATE VARIABLES ONLY
MVTURN:	LDF	ANGM(M),FA
	TST	A
	BEQ	MTURT	;RIGHT TURN
	SUBF	TURNSP,FA	;LEFT TURN
	BR	.+6
MTURT:	ADDF	TURNSP,FA

	JSR	PC,MOD360	;MAKE ANGM MOD 360
	STF	FA,ANGM(M)
MRTUR1:	JSR	PC,MRANG	;GET SIN, COS, AND DIREC
	JSR	PC,MRTUUP	;UPDATE REST OF TURNED VARIABLES
	RTS	PC

;DO ANGLE CRAP
MRANG:	STF	FA,FE
	JSR	PC,SINDEG	;FA _ SIN FA
	STF	FA,SINM(M)
	LDF	FE,FA
	JSR	PC,COSDEG
	STF	FA,COSM(M)
	ASH	#2,C	;TRIG LEAVES QUADRANT INFO IN C
	MOV	C,DIRE(M)
	RTS	PC


;INCREMENATL MOD360 ROUTINE. CLOBBERS FC
MOD360:	LDCIF	#360.,FC
	TSTF	FA	;IS ANGLE NEGATIVE?
	CFCC
	BLT	MODNEG	;YES
	CMPF	FA,FC	;IS ANGLE > 360.
	CFCC
	BLT	MODRTS	;NO. ANGLE IS OKAY
	SUBF	FC,FA	;ELSE ANGLE = ANGLE - 360
MODRTS:	RTS	PC
			;ANGLE IS NEGATIVE, SO
MODNEG:	ADDF	FC,FA	;ANGLE = ANGLE + 360
	RTS	PC



;UPDATE VARIABLES THAT HAVE BEEN TURNED
MRTUUP:	LDF	COSM(M),FA
	MULF	REFSIZ,FA
	STF	FA,FF	;DY

	LDF	SINM(M),FA
	MULF	REFSIZ,FA
	STF	FA,FE	;DX

	ADDF	CX(M),FA
	STF	FA,TX(M)

	LDF	FF,FA	;DY
	ADDF	CY(M),FA
	STF	FA,TY(M)

	LDF	CX(M),FA
	SUBF	FE,FA
	STF	FA,BX(M)

	LDF	CY(M),FA
	SUBF	FF,FA
	STF	FA,BY(M)

	RTS	PC


;SLIDE THIS MIRROR
;A=0 IF SLIDE TO RIGHT
MVSLID:	LDCIF	#-1,FA	;FOR TURTLE CONTROLS USE---LDF SINM(M),FA
	CLRF	FB	;FOR TURTLE--LDF COSM(M),FB
	NOP	;SPACE FOR TURTLE PATCH
	BR	MVTRS

;TRANSLATE THIS MIRROR
;	A = 0 IFF THE DIRECTION IS FORWARD
MVTRAN:	LDCIF	#-1,FB	;FOR TURTLE---LDF SINM(M),FB
	NEGF	FB	;= COS (ANGM+90)
	CLRF	FA	;FOR TURTLE---LDF COSM(M),FA
	NOP
MVTRS:	MULF	SPEED,FA	;DX
	MULF	SPEED,FB	;DY
	TST	A	;FD OR BK ?
	BEQ	FDMOVE
	NEGF	FA	;BACKWARD, SO NEGATE DX AND DY
	NEGF	FB
FDMOVE:	STF	FA,FE
	STF	FB,FF
	ADDF	CX(M),FA	;NEW X
	ADDF	CY(M),FB
	LDF	FA,FD
	JSR	PC,CHKBND	;IN BOUNDS?
	BNE	NOTBND	;OUT OF BOUNDS. DO NOTHING
YBND:	LDF	FB,FD
	JSR	PC,CHKBND	;IN BOUNDS?
	BNE	NOTBND	;OUT OF BOUNDS.  DO NOTHING
	JSR	PC,FBDCH	;CHECK TO SEE IF IN FORBIDDEN ZONE
	BNE	NOTBND
MRTR1:	JSR	PC,MRTRUP	;UPDATE VARIABLES
NOTBND:	RTS	PC

;CHECK TO SEE IF ENTERING FORBIDDEN ZONE
	.IFZ	CIRC

FBDCH:	FPUSH FA
	FPUSH FB
	ABSF	FA
	CMPF	FFBDW,FA
	CFCC
	BLT	FBOK
	ABSF	FB
	CMPF	FFBDB,FB
	CFCC
	BGT	FBOK
	FPOP	FB	;INSIDE FORBIDDEN ZONE
	FPOP	FA
	CLZ
	RTS	PC

FBOK:	FPOP	FB
	FPOP	FA
	SEZ
	RTS	PC

	.ENDC

	.IFZ	CIRC-1

FBDCH:	FPUSH	FA
	FPUSH	FB
	FPUSH	FC
	STF	FB,FC
	MULF	FA,FA
	ADDF	WALLT,FC
	MULF	FC,FC
	ADDF	FA,FC
	CMPF	FFBDR2,FC
	CFCC
	BGT	FBNO
	SUBF	WALLT,FB
	MULF	FB,FB
	ADDF	FA,FB
	CMPF	FFBDR2,FB
	CFCC
	BGT	FBNO
	FPOP	FC	;OK
	FPOP	FB
	FPOP	FA
	SEZ
	RTS	PC

FBNO:	FPOP	FC
	FPOP	FB
	FPOP	FA
	CLZ
	RTS	PC

	.ENDC


;UPDATE VARIABLES DUE TO TRANSLATION
MRTRUP:	STF	FA,CX(M)
	STF	FB,CY(M)

	LDF	FE,FC	;DX
	ADDF	TX(M),FC
	STF	FC,TX(M)

	LDF	FF,FC
	ADDF	TY(M),FC
	STF	FC,TY(M)

	LDF	FE,FC
	ADDF	BX(M),FC
	STF	FC,BX(M)

	LDF	FF,FC
	ADDF	BY(M),FC
	STF	FC,BY(M)

	RTS	PC


;INITIALIZE

DZINIT:	MOV	NUMMRS,M
	MOV	M,A
	ASR	A
DZILP:	LDCIF	IANGM(A),FA
	LDCIF	ICX(A),FB
	LDCIF	ICY(A),FC
	STF	FA,ANGM(M)
	STF	FB,CX(M)
	STF	FC,CY(M)
	SPUSH	A
	JSR	PC,MRTUR1	;GETS SINM, COSM, ETC. AND DRAWS MIRROR
	SPOP	A
	SUB	#4,M
	SUB	#2,A
	BGE	DZILP
	RTS	PC

DZCLR:	MOV	#VARBEG,A
DZCLR0:	CLR	(A)+
	CMP	A,#VAREND
	BLO	DZCLR0
	LDCIF	#20.,FA
	STF	FA,TEN
	CLR	BMLOST
	RTS	PC

;INITIAL WALL VARIABLES

WLINIT:	MOV	NUMMRS,M
	LDCIF	WALMAX,FA
	STF	FA,WALLT
	STF	FA,FB	;WALL1--(200,200) TO (-200,200)
	STF	FA,FC
	STF	FA,FD
	NEGF	FC
	STF	FC,WALLB
	FPUSH	FA
	LDCIF	#90.,FA	;ANGLE=90 DEGREES
	STF	FA,FE
	FPOP	FA
	JSR	PC,WLINI1
	NEGF	FB	;WALL2--(200,-200) TO (200,200)
	NEGF	FC
	CLRF	FE	;ANGLE=0
	JSR	PC,WLINI1
	NEGF	FA	;WALL3--(-200,-200) TO (200,-200)
	NEGF	FD
	FPUSH	FA
	LDCIF	#90.,FA	;ANGLE=90 DEGREES
	STF	FA,FE
	FPOP	FA
	JSR	PC,WLINI1
	NEGF	FB	;WALL4--(-200,200) TO (-200,-200)
	NEGF	FC
	CLRF	FE	;ANG=0
	JSR	PC,WLINI1
	LDCIF	GOLSIZ,FA	;GOAL1 (-25,200) TO (25,200)
	STF	FA,FC
	NEGF	FA
	NEGF	FD
	FPUSH	FA
	LDCIF	#90.,FA	;ANGLE=90 DEGREES
	STF	FA,FE
	FPOP	FA
	JSR	PC,WLINI1
	ADD	#4.,M	;SKIP GOALS 2
	NEGF	FB	;GOAL3 (-25,-200) TO (25,-200)
	NEGF	FD
	JSR	PC,WLINI1
	LDCIF	FBDW,FA	;SET UP FBDN ZONE VARIABLES IN FLOATING POINT
	STF	FA,FFBDW
	LDCIF	FBDH,FA
	STF	FA,FFBDH
	LDCIF	FBDR,FA
	STF	FA,FFBDR
	MULF	FA,FA	;RADIUS AND SQUARE OF FBDN ZONE
	STF	FA,FFBDR2
	LDF	WALLT,FB
	SUBF	FA,FB
	STF	FB,FFBDB
	RTS	PC

WLINI1:	FPUSH FA
	FPUSH	FB
	FPUSH	FC
	FPUSH	FD
	ADD	#4,M
	STF	FA,BX(M)
	STF	FB,BY(M)
	STF	FC,TX(M)
	STF	FD,TY(M)
	LDF	FE,FA
	STF	FA,ANGM(M)
	JSR	PC,MRANG
	FPOP	FD
	FPOP	FC
	FPOP	FB
	FPOP	FA
	RTS	PC

;FIRST BEAM

FBEAM:	CLR	BN	;BEAM NUMBER
	MOV	BMR,SMN	;SOURCE OF BEAM
	LDD	#LARGE,FA
	STF	FA,TARD	;TARGET DISTANCE
	MOV	BMR,M	;MIRROR INDEX
	LDD	CX(M),FA	;SET UP SOURCE
	STF	FA,SX
	LDD	CY(M),FB
	STF	FB,SY
	LDD	COSM(M),FC
	STF	FC,BMX	;BEAM VECTOR COORDS
	LDD	SINM(M),FD
	NEGD	FD	;BM PRRP TO MIRROR
	STF	FD,BMY
	MULD	FB,FC	;BMX*SY
	MULD	FA,FD	;BMY*SX
	SUBD	FD,FC
	STF	FC,CNT	;L(X)=BM(PERP).(X-S)=BMY*X-BMX*Y+(BMX*SY-BMY*SX)
	CLR	M

CHKMRS:	CMP	M,SMN	;STARTING MIRROR?
	BEQ	ENDMRS
	LDD	BMY,FA	;BEAM THRU MIRROR?
	MULD	TX(M),FA
	LDD	BMX,FB
	MULD	TY(M),FB
	SUBD	FB,FA	;L(T) IN FA
	ADDD	CNT,FA
	LDD	BMY,FB
	MULD	BX(M),FB
	LDD	BMX,FC
	MULD	BY(M),FC
	SUBD	FC,FB
	ADDD	CNT,FB	;L(B) IN FB
	LDD	FA,FC	;L(T) IN FC
	MULD	FB,FA
	CFCC		;L(T)*L(B)<0?
	BGE	ENDMRS
	LDD	FB,FA	;COMPUTE INTERSECTION, I=B+D*(T-B)
	SUBD	FC,FB	;D=L(B)/(L(B)-L(T)) IN FA
	DIVD	FB,FA
	LDD	TX(M),FC
	SUBD	BX(M),FC
	MULD	FA,FC
	ADDD	BX(M),FC	;TTARX IN FC
	LDD	TY(M),FD
	SUBD	BY(M),FD
	MULD	FA,FD
	ADDD	BY(M),FD	;TTARY IN FD
	LDD	FC,FA	;COMPUTE TARGET DISTANCE
	SUBD	SX,FA	;TTARD=BM.(TTAR-S)
	MULD	BMX,FA
	LDD	FD,FB
	SUBD	SY,FB
	MULD	BMY,FB
	ADDD	FB,FA	;TTARD IN FA
	CFCC		;MIRROR IN DIRECTION OF BEAM?
	BLE	ENDMRS
	CMP	M,NUMMRS	;IS THIS A WALL?
	BLE	CHKMR1
	JMP	WALLS
CHKMR1:	CMPD	TARD,FA	;CLOSEST MIRROR SO FAR?
	CFCC
	BLE	ENDMRS
	MOV	M,TARN	;TTAR BECOMES TAR
	STF	FA,TARD
	STF	FC,TARX
	STF	FD,TARY

ENDMRS:	CMP	M,NUMMRS	;CHECKED ALL MIRRORS?
	BEQ	.ENDMR
	MOV	NUMMRS,A	;CHECKED ALL WALLS?
	ADD	#16.,A
	CMP	M,A
	BLT	.RTRN
BMERR:	RTS	PC
.RTRN:	ADD	#4,M	;CHECK REST
	JMP	CHKMRS
.ENDMR:	LDD	#LARGE,FA	;HIT A MIRROR?
	CMPD	TARD,FA
	CFCC
	BEQ	.RTRN	;NO, DO WALLS
	LDD	SX,FA	;DRAW BEAM
	LDD	SY,FB
	LDD	TARX,FC
	LDD	TARY,FD
	TST	BN	;IS THIS FIRST BEAM?
	BEQ	.FBM
	JSR	PC,CONTBM
	BR	ENDBM
.FBM:	JSR	PC,STRTBM
ENDBM:	INC	BN	;ALL BEAMS?
	CMP	BN,NUMBMS
	BNE	NEWBM
	CLR	HIT
	CMP	TARN,NUMMRS	;HIT A MIRROR ON FINAL BOUNCE?
	BGT	FBM.R
	MOV	TARN,B	;DID BEAM CHANGE TEAMS?
	MOV	BMR,C
	MOV	#177773,D
	BIC	D,B
	BIC	D,C
	CMP	B,C
	BEQ	ENDBM1	;NO--SAME TEAM
	MOV	TMOUT,TIMER	;YES--RESET CLOCK
	MOV	#60.,TIME	;RESET CLOCK
	MOV	MXPAS,CPAS	;RESET NUM PASSES
ENDBM1:	MOV	TARN,BMR	;LAST GUY HIT GETS BEAM
	MOV	#1,BMLOST
FBM.R:	RTS	PC

NEWBM:	MOV	TARN,M	;INDEX TO TARGET
	LDD	TARX,FA	;TAR BECOMES SOURCE
	STF	FA,SX
	LDD	TARY,FA
	STF	FA,SY
	MOV	TARN,SMN
	LDD	#LARGE,FA
	STF	FA,TARD
	LDD	ANGM(M),FA	;REFLECT
	MULD	#40400,FA
	STF	FA,FE	;2*ANGLE IN FE
	JSR	PC,SINDEG
	STF	FA,FD
	LDD	FE,FA
	STF	FD,FE	;SIN 2*ANG IN FE
	JSR	PC,COSDEG	;COS 2*ANG IN FA
	LDD	BMX,FC	;BMX IN FC
	LDD	BMY,FB	;BMY IN FB
	MULD	FE,FB
	MULD	FA,FC
	SUBD	FC,FB	;NEW BMX IN FB, YSIN -XCOS
	LDD	FE,FD
	MULD	BMX,FD
	MULD	BMY,FA	;NEW BMY IN FA,XSIN +YCOS
	ADDD	FD,FA
	STF	FB,BMX
	STF	FA,BMY
	MULD	SY,FB	;COMPUTE NEW CNT
	MULD	SX,FA
	SUBD	FA,FB
	STF	FB,CNT
	CLR	M	;RESET MIRROR NUMBER
	JMP	CHKMRS

WALLS:	MOV	M,TARN	;WALL BECOMES TARGET
	STF	FD,TARY
	STF	FC,TARX
	LDD	SX,FA
	LDD	SY,FB
	TST	BN	;FIRST BEAM?
	BEQ	.FWBM
	JSR	PC,CONTBM	;DRAW BEAM
	BR	.GLCHK	;GO TO CHECK GOALS
.FWBM:	JSR	PC,STRTBM
.GLCHK:	ADD	#16.,M	;CHECK GOAL
	LDD	TX(M),FA
	SUBD	TARX,FA
	LDD	TARX,FB
	SUBD	BX(M),FB
	MULD	FB,FA
	CFCC
	BGT	GOAL	;(T-X)*(X-B)>0 IMPLIES GOAL
	CLR	HIT
	RTS	PC


GOAL:	MOV	M,HIT
	TST	BN
	BNE	GOAL1
	CLR	HIT
GOAL1:	RTS	PC


	;ROUNDS FA AND FB
ROUND:	ADDF #40000,FA	;FA <- FA + 1/2
	STCFI FA,-(P)	;INTEGERIZE FA
	LDCIF (P)+,FA	;FA <- INTEGER (FA)
	CFCC		;IS FA > 0?
	BGE .+6		;YES
	SUBF #40200,FA	;FA <- FA - 1 (TO ROUND AWAY FROM 0)
	ADDF #40000,FB	;REPEAT SAME PROCESS FOR FB
	STCFI FB,-(P)
	LDCIF (P)+,FB
	CFCC
	BGE .+6
	SUBF #40200,FB
	RTS PC
;CHECK THE NUMBER IN FD.
;	SEZ IF IN BOUNDS.  CLZ IF OUT OF BOUNDS
CHKBND:	ABSF	FD
	CMPF	WALLT,FD
	CFCC
	BLT ERROOB	;YES, ERROR
CBRND:	SEZ
	RTS PC
ERROOB:	CLZ
	RTS	PC


;SIN AND COSINE FUNCTIONS
SINDEG:	MOV #-1,A
	BR TRIG
COSDEG:	MOV #1,A
TRIG:	MOV #1,B
	TSTF FA
	CFCC
	BGE TRIG1
	NEGF FA
	MUL A,B
TRIG1:	DIVF #41464,FA	;DIVIDE BY 45
	MODD #40200,FA	;SEPERATE FRACTION AND INTEGER
	MODD #37400,FB
	MULF #41000,FB	;MOD 8
	STCFI FB,C
	ASL C
	ADD C,PC
	BR .TRIG0
	BR .TRIG1
	BR .TRIG2
	BR .TRIG3
	BR .TRIG4
	BR .TRIG5
	BR .TRIG6
	MUL A,B
	BR .TRIG7
.TRIG6:	MUL A,B 
	NEG A
	BR .TRIG0
.TRIG4:	NEG B
	BR .TRIG0
.TRIG3:	NEG B
	MUL A,B
	BR .TRIG7
.TRIG2:	NEG A
	MUL A,B
	BR .TRIG0
.TRIG5:	NEG B
.TRIG1:	NEG A
.TRIG7:	SUBF #40200,FA	;WE WANT 45 - ANGLE
	NEGF FA
.TRIG0:	MULF PI,FA
	MULF #37600,FA	;CONVERT FROM DEGREES TO RADIANS
	LDD FA,FD
	MULF FD,FD
	NEGF FD		;-ANGLE SQUARED INTO FD
	LDCFD #40200,FB	;COUNTING CONSTANT "1"
	STF FB,FF
	TST A
	BLT .TRIG9	;WE WANT SIN
	LDD FB,FA
	CLRF FB
.TRIG9:	LDD FA,FC
	TSTF FD
	CFCC
	BEQ TRIG11
TRIG10:	ADDF FF,FB
	DIVF FB,FC
	ADDF FF,FB
	DIVF FB,FC
	MULF FD,FC
	ADDF FC,FA
	CMPF #41100,FB
	CFCC
	BGE TRIG10
TRIG11:	TST B
	BGE .+4
	NEGF FA
	RTS PC


;SAVE BEAM COORDS FOR DRAW ROUTINE
;	CALL BMSTRT FOR FIRST BEAM.
;	CALL BMCONT FOR SUBSEQUENT ONES

STRTBM:	MOV	#BMCRS,A
	STF	FA,(A)+
	STF	FB,(A)+
	MOV	A,BMCRP

CONTBM:	INC	NBDR
	MOV	BMCRP,A
	STF	FC,(A)+
	STF	FD,(A)+
	MOV	A,BMCRP
	RTS	PC

PATCH:
PAT:
	.END START
