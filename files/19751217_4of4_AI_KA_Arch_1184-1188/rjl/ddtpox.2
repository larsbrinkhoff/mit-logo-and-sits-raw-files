COMMENT    VALID 00002 PAGES
C REC  PAGE   DESCRIPTION
C00001 00001
C00002 00002	\\M0BASL30\M1BASI30\M2BASB30\M3NGR40
C00030 ENDMK
C;
\\M0BASL30;\M1BASI30;\M2BASB30;\M3NGR40;
\F3\CSTANFORD ARTIFICIAL INTELLIGENCE LABORATORY
\_R\r

\F3\CDDT FOR THE PDP-11

\F0\CJeff Rubin


\JDDT is a symbolic debugger written for the PDP-11.  Its command
structure is quite similar to that of PDP-10 DDT except where
machine differences dictated otherwise.  The current version of DDT
runs on a PDP-11/45 with a floating point processor (FPP) but with
no memory management unit.  It is expected that DDT will be revised
when the page map is installed on the 11/45 and also for the 11/40
which will come with the KL-10.  All numbers in this manual are assumed
to be in decimal unless otherwise indicated.  The letter $ will be used
indicate \F1alt-mode\F0 unless the text specifies differently.  The
character ^ will be used directly in front of an uppercase letter to
indicate that that letter should be typed with the \F1control\F0 key
held down.  { and ~ are used as meta parentheses and are not meant to
be typed in or typed out.\.


\F21  Examining and Altering Locations

\F21.1  Expressions

\F0\JDDT parses arithmetic expressions in either integer or floating
point.  Mixed mode is not allowed.  Expressions may be fully parenthesized
and are interpreted using a strict precedence scheme.  The operators are:\.
\F1
Precedence	Operator		Operation\F0

   0		   ,,		high byte,,low byte
   2		+ or space	binary addition
   2		   -		binary subtraction
   3		   *		binary multiplication
   3		   !		binary division
   4		   -		unary minus

\J+ used as a unary operator is ignored.  Operations associate to the left
where the precedence is the same for
both operations.  Operands may be integer, floating point or text constants,
symbol names or special symbols.\.

\F21.1.1  Integers

\F0\JIntegers are assumed to be in octal unless they are immediately followed
by a decimal point.  Integers must fit into a 16 bit field.\.

\F21.1.2  Floating Point Numbers

\F0\JDDT accumulates floating point numbers in double precision.  Floating
point is indicated either by having digits \F1both before and after\F0 a
decimal point or by using the standard E notation.  In E notation, there
must first be an integer optionally followed by a decimal point and another
integer followed immediately by an E and an (optionally signed) integer
power of 10 to scale the number by.  All the integers in a floating point
number are assumed to be decimal.  The following are all valid floating
point numbers:\.

	0.12   105.0   3.14E-6   0.21718E1   105.69E+4

\F21.1.3  Text Constants

\F0\JThere are three types of text constants: single character ascii, double
character ascii and radix 50.  '\F1{char~\F0 has the value of the ascii character
\F1char\F0. "\F1{char1~{char2~\F0 has the ascii value of \F1char1\F0 in the low
byte and the ascii value of \F1char2\F0 in the high byte.  &\F1{char1~{char2~{char3~
\F0 has the value of the radix 50 equivalent of the symbol \F1{char1~{char2~{char3~.
\F0If it is desired to not have all three characters in the value then fewer
characters
may be given as long as they are followed by some non radix 50 character.  In this
case the resulting radix 50 value will be left justified within a word.  The
following table lists the correspondence between ascii and radix 50:\.
\F1
		ASCII		\_.RADIX 50 (in octal)\F0

		A - Z		\.1 - 32
		$ (dollar)	\.33
		.		\.34
		%		\.35
		0 - 9		\.36 - 47

\F21.1.4  Symbols and Register Values

\F0\JSymbols may be constructed with from 1 to 6 radix 50 characters.  The
first character of a symbol may not be an integer and it may not be . if
all the remaining characters are integers.  DDT maintains a symbol table
and the symbol typed by the user is looked up in this table.  If it is found,
then the corresponding value from the table is used in the expression evaluation.
If not then the message ?U? is typed and the current expression evaluation is
aborted.  Symbol values may be either integer or register values.  A register
value, when used in an integer expression, causes a flag to be set so that
the resulting expression value is considered a register value.  Register values
must be between 0 and 7 inclusive.  Register values can only be typed in as
a result of typing a symbol which has a register value.  See section 1.1.5 on 
special symbols for
a description of predefined symbols which have register values.  Symbols may
be defined in two ways.  First, typing \F1FOO:\F0 defines \F1FOO\F0 to have the
value of . (see section 1.1.5 on special symbols).  If . is a register value then
\F1FOO\F0 will be defined as a register symbol.  The second way is to type
\F1val<FOO:\F0 which defines \F1FOO\F0 to have the value \F1val\F0.  Again, if
\F1val\F0 is a register value then \F1FOO\F0 will also be a register value.
DDT uses symbols for typing out values whenever possible (see section 1.2.2 on
typeout modes).  Sometimes it is undesirable for certain symbols to be used
on typeout.  It is possible to \F1half-kill\F0 these symbols, which leaves
their values alone but marks them so that DDT will never use them for typeout
purposes.  \F1FOO$K\F0 half-kills \F1FOO\F0.\.

\F21.1.5  Special Symbols

\F0\JCertain symbols have been predefined in DDT.  They are:\.

	.			\_.\l\jcurrent location counter (see section
1.2 on opening locations)\.
	$Q		\jlast value typed in or out\.
	$0Q		\jlow byte of $Q if it was an integer\.
	$1Q		\jsame as $0Q but the high byte\.
	$M		\jaddress within DDT where the search mask is stored (see
section  on searches)\.
	%0 through %7	\jregister values 0 through 7\.

\F21.1.6  Instruction Typein

\F0\JAn instruction may be typed in instead of an expression.  Instructions are
typed in the same way as in PALX with the exception of the condition code
instructions.  Any address or constant in an instruction may be a normal
expression.  The condition code instructions are input by typing \F1CL\F0
or \F1SE\F0 followed by a space followed by the condition code letters to
be set or cleared (\F1C, Z, N or V\F0).\.

\F21.2  Opening Locations

\F0\JThe commands that open locations are / \\ [ linefeed and tab.  Each
command sets the value of the symbol . to the location being opened, which
may be a register.  The last two, linefeed and tab, have the ability to
alter locations and if a value is typed in front of them that value is stored
in the currently open location, if any.\.

\F21.2.1  /  \\ and [

\F0\JThree commands for examining core locations are \F1addr\f0/
addr\F0[ and \F1addr\F0\\.  These commands all open location \F1addr\F0
and type out the contents of the byte or word at \F1addr\F0 in some mode.
There are two modes in which a location can be open: \F1word mode\F0 and
\F1byte mode\F0.  Any command that opens a location in byte mode will type
the contents of the open byte as an unsigned integer.  Any address
(odd or even) can be opened in byte mode.  The \\ command always opens locations
in byte mode.  The [ command opens the location in word mode and types out
the contents of the word as an unsigned integer.  If the location was at
an odd address then the command acts as if it were \F1addr\F0\\.  The / command
also opens the location in word mode, but it types out the contents of the
word in the current typeout mode (see section 1.2.2 on typeout modes).  It also
acts like \\ if the location is odd.  Once a location is opened it is enabled
for having things stored into it.  The location stays open until a command
is executed which specifically closes the location (see section 1.2.4 on altering
locations).\.

\JThese three commands may also be executed without a preceding
argument, in which case the location that is opened is the value that
was last typed out as the result of opening some location.  If that open location
was typed as an instruction, then the new location to be opened is the last
address referenced by that instruction.\.

\JThere are several other commands which open locations, but these will be
discussed in section 1.2.4 on altering locations.\.

\F21.2.2  Typeout Modes

\F0\JThe form in which an even addressed location is typed by the / command
depends upon the typeout mode.  The typeout modes are:\.
\F1
  Mode				Description
\F0
constants		   \_.\l\jsigned 16 bit number\.
symbolic\j(non half-killed) symbol plus numeric offset (like FOO+12)\.
byte\junsigned 8 bit number\.
halfword\jhigh byte,,low byte  both as unsigned 8 bit numbers\.
floating\jthis and the next location (or the next three) are typed
as a single (or double) precision floating point number\.
text\jascii and radix 50 characters\.
instruction\jthis location and those following that make up the instruction
are typed out as an instruction (floating point instructions optional)\.

\JWithin these modes there are the following submodes:\.

octal/decimal\jthe numeric parts of all integer typeouts (except in
a floating point number) are controlled by this submode\.
absolute/relative\jin absolute mode no symbols are typed out\.
floating double\jin this submode, floating point typeout types four words in
double precision; this submode also controls how many words are stored
in a location when a floating point number is stored (see section 1.2.4 on
altering locations)\.
floating instruction\jin this submode of instruction mode floating point
instructions are typed rather than negative numbers\.

\JFor each of the above modes except for the floating point submodes
there is a temporary mode and a permanent mode.  The floating point submodes
are permanent only.
It is the temporary modes that control typeout.  The permanent modes are
copied into the temporary modes whenever carriage return is typed or
when DDT is entered from a breakpoint or startup.  Corresponding to each
of the modes is a letter.  The command $${\F1letter\F0~ sets the corresponding
temporary \F1and\F0 permanent modes.  The command ${\F1letter\F0~ sets the
temporary mode only.  The single $ commands may be typed anywhere within an
expression, while the double $ commands terminate and ignore any expression
that might be in progress.  The letters are as follows:\.
\F1
	letter		   function
\F0
	  A		\_.\l\jabsolute mode\.
	  C\jconstants mode\.
	  D\jdecimal mode\.
	  F\jfloating mode\.
	  H\jhalfword mode\.
	  I\jinstructions mode\.
	  L\jfloating long (double precision) mode\.
	  O\joctal mode\.
	  R\jrelative mode\.
	  S\jsymbolic mode\.
	 nT\jtext mode, where n=5 for radix 50, n=7 or absent for ascii\.
	  V\jfloating instruction typeout mode\.
	  Y\jbyte mode\.

\F21.2.3  _ and @

\F0\JThere are two further commands which open locations.
_ is intended for opening the source location of the most recently
typed out binary instruction.  For example if the last thing typed
out was \F1MOV FOO,BAR\F0 then _ will open \F1FOO\F0 (whereas / will open
\F1BAR\F0).
@ causes the contents of the PC to be the location opened and it sets
the temporary typeout mode to instruction mode.  It is useful for
seeing what instruction will be executed next.\.

\F21.2.4  Altering Locations: tab, linefeed and carriage return

\F0\JOnce a location is opened it may be altered by depositing a new
value in that location.  There are three commands used to alter locations, tab,
linefeed and carriage return.  Each of these commands may be preceded by a
value which is then deposited in the currently open location if there is one.
How much is stored depends upon the mode in which the location is open and
upon what value was typed.  If the location was open in byte mode then floating
point values and instructions may not be stored.  The value that is stored will
be deposited only in the byte that is open, even if it is a register open in byte
mode.  If the open location is a register in word mode then again, floating
point values and instructions cannot be stored.  If a floating point value is
being stored in word mode then either two words or four are stored depending
upon the state of double precision floating point mode (see section 1.2.2
on typeout modes).  An instruction that is being stored will take up the
appropriate number of words (from one to three).  After a value is stored (if
there was a value typed) the open location is then closed.\.

\JCarriage return resets the temporary typeout modes from the permanent
typeout modes (see section 1.2.2 on typeout modes).\.

\JLinefeed opens a new location by adding an appropriate increment to the
value of the symbol . and opening . again in the same mode as it was opened in
before.  The appropriate value is determined
by what value is typed before the linefeed and what mode the location was open
in.  If the location was open in byte mode, then the linefeed increment is
always one, that is, the next byte will be opened.  If the location was open
in word mode, then the increment depends upon what value was typed preceding
the line-feed.  If there is no value,then the increment is two.  If there
is an instruction, then the increment is such that the location opened is
the one immediately following the stored instruction.  If the value being
stored is a floating point number then the increment is two if double
precision mode is off and four otherwise\.

\JTab opens the location whose address is the value stored in the previously
open location (i.e., the location open just before the tab was typed).\.

\F22 Program Execution and Control

2.1  Setting and Clearing Breakpoints

\F0\JThere are seven breakpoints which may be set in a program,
numbered from 1 to 7.  A breakpoint may be set at a location by typing
an expression for the address followed by an altmode, an optional expression
in parentheses, an optional digit from 1 to 7 and the letter B.  For
example,\.
   \F1addr+4$B    base+2*index$3B    loop+4$(%4)5B\F0
\Jare all legal.
The address expression specifies where the breakpoint is to be placed.  The
digit, if supplied indicates which breakpoint number should be used for
this breakpoint.  The expression in parentheses should be an address whose
contents will be typed out in the current typeout mode when the breakpoint
is hit.  If no digit is given, then DDT will assign a breakpoint number
starting from 1, using the first breakpoint number that is not in use.
A breakpoint is not in use if the address at which the breakpoint is set
is zero.  Therefore, the way to clear breakpoint \f1n is to type \F10$nB\F0
which will set the address of breakpoint \f1n to zero.  The command
\F1$$B\F0 will clear all the breakpoints.  If a breakpoint setting command is
typed when all seven breakpoints are in use, then the message \F1?TMB?\F0
is typed and no action is taken.\.

\F22.2  Starting Programs

\F0\JThe command \F1addr$G\F0 starts the program at \F1addr\F0.  \F1addr\F0
may be any expression whose value is a non-register integer.  If the program
had a starting address (i.e., if there was a label after the \F1end\F0 statement
in the source code) then the command \F1$G\F0 will start the program at its
starting address.  Finally, the command \F1addr$$G\F0 will start the program
at \F1addr\F0 and will also set the starting address of the program to
\F1addr\F0 so that future \F1$G\F0 commands will start the program at this
same address.\.

\F22.3  Proceeding Programs

\F0\JOnce a program has been started it may reenter DDT in two ways.  First
it may hit a breakpoint and second it may transfer to DDT's starting
address, which at this time is 50000 (octal) although this may change
when the map "arrives".  If DDT is entered via a breakpoint, DDT will type
the breakpoint number followed by the instruction at that address
followed by the contents of the location that was in parentheses in the
breakpoint command.  The program may be proceeded with the \F1$P\F0 command,
which will resume execution at the interrupted instruction.  There are
two variations on this command.  First, \F1n$P\F0 will proceed from this
breakpoint \f1n times; however, it will break at any other breakpoint
it may hit before the \f1n times are up.  After breaking the \f1nth time,
control will stay in DDT as if it had hit that breakpoint normally.
The second form is \F1$$P\F0 which will proceed all breakpoints indefinitely.
However, the standard breakpoint information is typed out at each breakpoint
and the process may be stopped by typing any character at DDT (the character
itself is ignored).  If DDT is entered by transferring to its starting
address, then proceeding is illegal.  Proceeding is legal after having
single stepped (see next section).  There is a second proceed command
included for convenience.  Typing \F1^P\F0 has the effect of planting
a breakpoint at . and then proceeding.  The breakpoint will be automatically
removed when it is hit.\.

\F22.4  Single Stepping

\F0\JAfter a program hits a breakpoint, it is sometimes desirable to
examine the action of the code on an instruction by instruction basis.
It would be cumbersome to plant breakpoints at each succeeding instruction,
proceed and then remove the breakpoints.  To ease this problem, a single
step feature is provided.  Typing \F1^X\F0 will execute the next sequential
instruction, after which it types the new value of the PC and the next
instruction to be executed.  The value of . is not changed.
The commands \F1^N\F0 and \F1^S\F0 are exactly
the same as \F1^X\F0.  Single stepping is legal only after having
hit a breakpoint or after having single stepped.  In particular, it
is not legal after entering DDT at its starting address.\.
