SITS SYSTEM CALLS.

THIS FILE DESCRIBES THE SITS SYSTEM CALLS.  WHEN A SYSTEM CALL IS EXECUTED, THE 
ARGUMENTS ARE PUSHED ONTO THE STACK (LAST ARGUMENT FIRST, NEXT TO LAST NEXT . . . ).
THEN THE SYSTEM CALL IS EXECUTED.  THE SYSTEM CALL IS AN EMULATOR TRAP, WITH THE
LOW ORDER BYTE CONTAINING THE NUMBER ON THE LEFT MARGIN.  THE NEXT COLUMN IS THE NAME
OF THE SYSTEM CALL (THE ONE RECOGNIZED BY THE ASSEMBLER).  NEXT IS THE NUMBER OF
ARGUMENTS, AND THEN THE NUMBER OF VALUES RETURNED IF SUCCESSFUL (OR * IF IT IS VARIABLE)
IF A CALL IS SUCCESSFUL, ALL THE ARGUMENTS ARE POPPED OFF, AND THE CONDITION CODES ARE
CLEARED.  IF IT FAILS, THE Z CONDITION CODE IS SET, AND THE ARGUMENTS ARE NOT POPPED
OFF.

0	.NOOP	0-0	NO-OP SYSTEM CALL, DOES NOTHING.

1	.FORK	1-0	CREATES A NEW PROCESS IN THE CURRENT SPHERE, AND STARTS IT.  THE
			ARGUMENT IS THE STARTING ADDRESS.

2	.POOFF	0-0	MAKES THE PROCESS EXECUTING IT DISAPPEAR. (UNLESS THERE STILL IS
			A CAPABILITY TO IT, IN WHICH CASE IT IS JUST STOPPED)

3	.SLEEP	2-0	DOESN'T RETURN FROM THE SYSTEM CALL UNTIL THE TIME SPECIFIED HAS
			ELAPSED.  THE TWO ARGUMENTS FORM A DOUBLE PRECISION INTEGER.
			THE FIRST IS THE LOW ORDER 16 BITS, THE SECOND THE HIGH ORDER.
			IF THE ARGUMENT IS POSITIVE, IT RETURNS THAT MANY 60THS OF A
			SECOND LATER.  IF THE ARGUMENT IS NEGATIVE, IT IS NEGATED
			(MAKING IT POSITIVE), AND THE SYSTEM CALL RETURNS WHEN THE
			SYSTEM TIME IS EQUAL TO THAT NUMBER.  THIS CALL MODIFIES ITS
			ARGUMENTS.

4	.SINK	0-0	DISABLES THE USE OF THE FLOATING POINT PROCESSOR FOR THIS
			PROCESS.  (THIS IS THE DEFAULT STATE)

5	.FLOAT	0-0	ENABLES THE USE OF THE FLOATING POINT PROCESSOR FOR THIS PROCESS.

6	.INVOK	3-*	THIS IS A SERIES OF CALLS THAT ARE FURTHER DECODED BY THEIR
			ARGUMENTS.  THE BOTTOM BYTE OF THE FIRST ARGUMENT IS THE
			CAPABILITY NUMBER THAT THIS .INVOK REFERS TO.  THE TOP BYTE OF
			IT SPECIFIES THE FUNCTION.  IF THE TOP BIT IS SET IN THE
			FUNCTION, IT IS DECLARED A SYSTEM FUNCTION.  IF IT IS A SYSTEM
			FUNCTION, IT IS DECODED AS BELOW (THE SYMBOL IS BYTE*400)

			BYTE	SYMBOL	DESCRIPTION
			200	.DELCP	DELETES THE CAPABILITY INVOKED
			201	.CPYCP	COPIES THE CAPABILITY INVOKED.  THE SECOND
					ARGUMENT SPECIFIES THE CONTROL BITS TO CLEAR.
					(BITS THAT ARE SET IN THE ARGUMENT ARE CLEARED
					IN THE CAPABILITY).  THE DESTINATION OF THE COPY
					IS THE CURRENT SPHERE, AND THE C-LIST ENTRY
					SPECIFIED BY THE THIRD ARGUMENT.  (A C-LIST
					ENTRY NUMBER BETWEEN 0 AND 200, OR -1, WHICH
					SPECIFIES THE FIRST FREE C-LIST ENTRY)

			202	.GIVCP	THE CAPABILITY INVOKED MUST BE A SPHERE CAPABILITY
					WITH C-LIST APPEND ACCESS.  THE SECOND ARGUMENT
					IS THE C-LIST NUMBER OF THE SOURCE ENTRY IN THE
					CURRENT SPHERE.  THE CAPABILITY IS COPIED
					ACCORDING TO THE DESTINATION IN .CPYCP, BUT THE
					DESTINATION SPHERE IS THE ONE REFERRED TO BY THE
					SPHERE CAPABILITY.  THE C-LIST ENTRY IS THEN
					DELETED FROM THE SPHERE OF THE GIVER.

			203	.TAKCP	THE CAPABILITY INVOKED MUST BE A SPHERE CAPABILITY
					WITH C-LIST DELETE ACCESS.  THE CAPABILITY IS
					TAKEN FROM THE SPHERE SPECIFIED BY THE SPHERE
					CAPABILITY, AND THE C-LIST NUMBER OF THE SECOND
					ARGUMENT.  THE DESTINATION IS THE SAME AS .CPYCP.
					THE CAPABILITY IS THEN DELETED FROM THE SOURCE
					LOCATION.


7	.QULK	1-0	THE ARGUMENT SPECIFIES A QUEUE CAPABILITY TO LOCK.  THE SYSTEM
			CALL RETURNS WHEN IT SUCCEEDS IN LOCKING THE QUEUE.

10	.QUNLK	1-0	THE ARGUMENT SPECIFIES A QUEUE CAPABILITY TO UNLOCK.  THE CALL
			UNLOCKS IT IF HAD BEEN LOCKED EARLIER, OTHERWISE IT IS A NO-OP

11	.TTGIV	2-0	THE FIRST ARGUMENT SPECIFIES A MASTER SPHERE CAPABILITY, WHICH
			SPECIFIES TO WHAT SPHERE THE CAPABILITY IS GIVEN.  THE SECOND
			ARGUMENT SPECIFIES A TTY CAPABILITY THAT DESCRIBES THE TTY THAT
			IS GOING TO BE GIVEN AWAY.  IF THE TTY BELONGS TO THE GIVER,
			CONTROL THEN IS PASSED TO THE INFERIOR,  OTHERWISE, IT WAITS
			UNTIL THE TTY IS GIVEN TO IT, AND THEN GIVES IT TO THE INFERIOR.

12	.TTGET	1-0	THE ARGUMENT SPECIFIES A TTY CAPABILITY THAT THE SYSTEM WILL
			REGAIN CONTROL FOR THE SPHERE EXECUTING IT.  IT WILL SUCCEED IF
			THE TTY IS OWNED BY AN INFERIOR TO THE EXECUTING SPHERE.
			OTHERWISE IT WILL HANG UNTIL THE TTY IS GIVEN TO IT.


EXTRANEOUS DATA ABOUT I/O USING FILE CAPABILITIES

			IF YOUR CALL FAILS THEN THE PROCESS ERROR WORD HAS THE ERROR
			TYPE IN IT AND IF THE ERROR WAS END OF FILE THEN THE V BIT IS
			SET ALONG WITH THE Z BIT.  .BLKI AND .BLKO UPDATE THE USER'S
			POINTER AND BYTE COUNT AS WELL AS THE CAPABILITY POINTER TO
			REFLECT HOW FAR THE CALL WAS ABLE TO PROCEED.
			.WRDO SETS THE BIT .FAWD AFTER IT HAS OUTPUT THE FIRST BYTE OF
			THE WORD AND BEFORE OUTPUTTING THE SECOND.  THE CAPABILITY
			POINTER IS INCREMENTED BETWEEN OUTPUTTING OF THE BYTES.
			SETTING .FAAP IN THE FLAG WORD OF THE CALL CAUSES THE DATA TO
			BE APPENDED TO THE END OF THE FILE.

13	.WRDI	1-1	THE BOTTOM BYTE OF THE ARGUMENT SPECIFIES THE C-LIST NUMBER
			OF AN I-O DEVICE CAPABILITY.  THE TOP BYTE IS USED FOR DEVICE
			DEPENDENT FLAGS.  THE SYSTEM CALL THEN RETURNS A WORD INPUT FROM
			THAT DEVICE.

14	.WRDO	2-0	THE BOTTOM BYTE OF THE FIRST ARGUMENT SPECIFIES THE C-LIST 
			NUMBER OF AN I-O CAPABILITY.  THE SECOND ARGUMENT IS THEN OUTPUT
			TO THE DEVICE SPECIFIED BY THE I-O CAPABILITY.

15	.BYTI	1-1	THE BOTTOM BYTE OF THE ARGUMENT SPECIFIES THE C-LIST NUMBER OF
			AN I-O CAPABILITY.  THE TOP BYTE CONTAINS DEVICE DEPENDENT FLAGS.
			THE SYSTEM CALL THEN RETURNS A BYTE INPUT FROM THAT DEVICE.

16	.BTYO	2-0	THE BOTTOM BYTE OF THE FIRST ARGUMENT SPECIFIES THE C-LIST
			NUMBER OF AN I-O CAPABILITY.  THE BOTTOM BYTE OF THE SECOND
			ARGUMENT IS THEN OUTPUT TO THAT DEVICE.

17	.BLKI	3-0	THE BOTTOM BYTE OF THE FIRST ARGUMENT SPECIFIES THE C-LIST
			NUMBER OF AN I-O CAPABILITY.  THE TOP BYTE CONTAINS DEVICE
			DEPENDENT FLAGS.  THE SECOND ARGUMENT IS THE NEGATIVE NUMBER
			OF BYTES TO TRANSFER.  THE SYSTEM CALL THEN TRANSFERS THAT
			NUMBER OF BYTES FROM THE INPUT DEVICE TO THE DESTINATION
			SPECIFIED BY THE THIRD ARGUMENT  THE SYSTEM CALL MAY BE UPDATED,
			AND THE ARGUMENTS CHANGED.

20	.BLKO	3-0	THE THREE ARGUMENTS ARE THE SAME AS .BLKO, EXCEPT THE BYTES ARE
			TRANSFERRED FROM THE USERS CORE TO THE DEVICE.

21	.MAP	4-0	CREATES OR DELETES A PAGE FOR A SPECIFIED SPHERE.  IF A PAGE
			ALREADY EXISTS IN THE SPECIFIED PLACE, IT IS DELETED.  THE BOTTOM
			BYTE OF THE FIRST ARGUMENT IS A SPHERE CAPABILITY TO THE SPHERE
			THAT THE PAGE IS TO BE INSERTED TO.  THE SPHERE CAPABILITY MUST
			HAVE CORE WRITE ACCESS.  THE TOP BYTE IS THE ACCESS TO GIVE THE
			SPHERE TO THAT PAGE (READ ONLY, READ-WRITE, ETC.)  THE BITS ARE
			.CRRD FOR READ ONLY, .CRWRT FOR READ-WRITE ACCESS, .CREX FOR
			EXECUTE ONLY ACCESS, AND .CRPRI FOR PRIVATE PAGE.  THE BOTTOM
			BYTE OF THE SECOND ARGUMENT IS THE SOURCE OF THE PAGE.  (-1 FOR
			FRESH PAGE, -2 FOR ABSOLUTE PAGE, -3 FOR DON'T CREATE A NEW PAGE
			(JUST DELETE THE CURRENT PAGE), -4 FOR EXPAND THE CURRENT PAGE
			(THIS WORKS BY OFFSETING THE USER PAGE IN A VIRTUAL 4K PAGE, AS
			SPECIFIED BY THE START AND LENGTH FIELDS) OR THE C-LIST NO. OF
			THE CAPABILITY TO A SPHERE, FILE, OR DISPLAY). THE TOP BYTE IS
			NUMBER OF THE PAGE TO CREATE, (0-7 I SPACE PAGE, 10-17 D SPACE
			PAGE, 20-27 I=D PAGES).  THE THIRD ARGUMENT IS THE PAGE NO. IN
			THE SOURCE TO GET THE PAGE FROM.  THE BOTTOM BYTE OF THE FOURTH
			ARGUMENT IS THE	OFFSET TO THE START OF THE PAGE, IN 512. WORD
			BLOCKS.  THE TOP BYTE IS THE LENGTH MINUS ONE OF THE PAGE IN
			512. WORD BLOCKS.  (THE SUM OF THE START AND LENGTH CANNOT BE
			GREATER THAN 7).

22	.ALLOC	2-0	THIS SYSTEM CALL CAN ONLY BE EXECUTED ONCE PER RELOADING OF THE
			SYSTEM.  IT CAN ONLY BE EXECUTED BY THE SYSTEM JOB.  IT THEN
			ALLOCATES SWAPPING SPACE ON THE DISKS SPECIFIED.  THE FIRST
			ARGUMENT IS THE NUMBER OF SWAP AREAS ON THE DISKS.  THE SECOND
			IS A POINTER TO THE DATA ABOUT THE SWAP AREAS, WHICH IS IN THE
			FOLLOWING FORMAT.  THE FIRST WORD IS THE LOGICAL DISK NUMBER
			THAT THIS SWAP AREA RESIDES ON.  THE SECOND WORD IS THE STARTING
			BLOCK NUMBER OF THE SWAP AREA.  THE THIRD WORD IS THE LENGTH OF
			THE SWAP AREA.

23	.CRUSR	3-0	THIS SYSTEM CALL CAN ONLY BE EXECUTED IN THE SYSTEM SPHERE.  THE
			PROCESS MAKING THIS CALL, IS ATTACHED TO A NEW USER, AS SPECIFIED
			BY THE OTHER ARGUMENTS.  THE FIRST ARGUMENT IS A FLAG, IF IT IS
			NON-ZERO, THE USER ALREADY EXISTS, AND ONLY THE NAME MUST BE
			PLACED INTO IT.  OTHERWISE, A NEW USER IS CREATED.  THE SECOND
			ARGUMENT IS THE NUMBER OF CHARACTERS IN THE NAME (MORE THAN 10
			ARE IGNORED).  THE THIRD ARGUMENT IS A POINTER TO THE NAME'S
			ASCII TEXT STRING.  THE NAME MUST START ON A WORD BOUNDARY.

24	.RDMAP	2-0	THIS SYSTEM CALL READS MAP INFO OUT OF A GIVEN SPHERE.  THE
			FIRST ARGUMENT IS THE CAPABILITY NUMBER OF A SPHERE OR MASTER
			SPHERE CAPABILITY TO THE SPHERE WHO'S MAP IS BEING READ.  THE
			SECOND ARGUMENT IS A POINTER INTO THE USERS CORE, WHERE THE DATA
			WILL BE PUT.  THE DATA CONSISTS OF 16. WORDS, ONE PER PAGE, WITH
			BITS AS FOLLOWS:  0-2 => LENGTH MINUS ONE OF THE PAGE; 8-10 =>
			ACCESS CODE OF THE PAGE; 13 => SET IF PAGE IS PART OF FILE;
			14 => SET IF ABSOLUTE PAGE; 15 => SET IF D=I PAGE.  BITS ARE:

				.PLENM	MASK FOR THE LENGTH FIELD
				.PACCM	MASK FOR THE ACCESS FIELD
				.PFIL	PART OF FILE BIT
				.PABS	ABSOLUTE PAGE
				.PDEI	DATA = INSTRUCTION PAGE



25	.FONT	2-0	READ OR WRITE FONTS. THE FIRST ARG LOW BYTE IS THE
			NUMBER OF THE FONT, THE HIGH BYTE IS FUNCTION:
			.PRWRT FOR WRITE INTO A FONT ITEM, AND ZERO FOR
			READ INTO USER'S CORE. THE SECOND IS A POINTER INTO
			USER'S CORE WHICH IS WHERE TO READ OR WRITE THE FONT.
			WHEN CREATING A NEW FONT THE DATA SHOULD BE IN THE FOLLOWING
			FORMAT.
			BYTE OFFSET		FUNCTION
			4	WIDTH OF A CHAR FRAME (CHAR PLUS SEPARATOR) IN BITS.
			6	MAXIMUM HEIGHT OF CHAR IN TV LINES.
			10	LENGTH OF THE FONT DATA FROM POINTER IN BYTES.
			12	HEIGHT OF A CHAR LINE IN TV LINES.
			14	RIGHT ADJUSTED MASK (1'S) THE ACTUAL WIDTH OF CHAR
			40	START OF A TABLE OF 128 POINTERS, WHERE EACH POINTER
				IS THE BYTE OFFSET FROM THE START OF THE FONT TO
				THE DATA OF THE CHAR CORRESPONDING TO THAT POINTER.
			240	ACTUAL FONT DATA IN BYTES FOR CHARS <= 8 BITS WIDE
				AND WORDS FOR CHARS > THAN 8 BITS.

26	.SSTAT	1-0	THIS CALL READS VARIOUS RANDOM INFO INTO THE USERS CORE
			ABOUT THE SYSTEM. THE ARGUMENT IS A POINTER INTO USER CORE;
			THIS BLOCK OF INFO IS WRITTEN INTO THE USER STARTING AT
			THAT POINT AND CONTINUING AS LONG AS THERE IS INFO.
			THE CURRENT INFO RETURNED IS:
				THE VERSION NUMBER OF THE RUNNING SYSTEM
				THE TIME SINCE THE SYSTEM CAME UP, IN 60THS OF A SECOND
				THE HIGH ORDER PART OF THE TIME
				THE CURRENT CONTENTS OF THE CONSOLE SWITCHES
				IF NON-ZERO, THIS WORD INDICATES THE SYSTEM IS
					CURRENTLY PAYING ATTENTION TO THE CONSOLE SWITCHES
27	.VIDSW  2-0	THIS CALL ALLOWS SWITCHING OF TV MONITORS AND BUFFERS VIA
			THE VIDEO SWITCH. THE FIRST ARGUMENT SPECIFIES THE THE SOURCE
			OR BUFFER, THE SECOND ARGUMENT SPECIFIES THE DESTINATION OR
			MONTIOR CHANNEL.  BOTH SOURCE AND DESTINATION ARGUMENTS SHOULD
			BE IN THE FORMAT OF A MODE NUMBER IN THE HIGH BYTE AND AN
			ARGUMENT NUMBER IN THE LOW BYTE. THERE ARE FOUR MODES WHICH
			CAN BE USED WITH BOTH THE SOURCE AND DESTINATION ARGUMENTS.

			.VIABS	JUST MAP THE NUMBER DIRECTLY INTO THE APPROPRIATE
				BYTE OF THE VIDEO BUFFER.

			.VILOT	THE NUMBER IS A LOGICAL TTY NUMBER. THIS NUMBER IS
				THE SAME NUMBER AS IS USED IN THE CREATE OF THE TTY,
				AND THE TTY MUST BE ONE OF THE TV TTY'S. FOR SOURCE,
				THIS SPECIFIES THE BUFFER ASSOCIATED WITH THIS TV.
				FOR DESTINATION THE APPROPRIATE CHANNEL IS SELECTED
				USING THE LOGICAL TTY NUMBER TO INDEX A TABLE.

			.VILOD	SIMILAR TO VILOT EXCEPT THAT THE NUMBER IS A DISPLAY
				NUMBER AND MUST BE A TV DISPLAY.

			.VICAM	IN THIS CASE, FOR BOTH SOURCE AND DESTINATION, THE
				NUMBER SPECIFIES A CAPABILITY IN THE CALLER'S SPHERE.
				THE CAPABLITY MAY BE EITHER A TTY OR DISPLAY WHICH
				IS USED TO GET EITHER THE LOGICAL TTY NUMBER OR DISPLAY
				NUMBER AND PROCEDE AS IN .VILOT AND .VILOD.

.INVOK CALLS:
THE LEFT COLUMN IS THE CAPABILITY INVOKED.

.CRCAP		CREATE THE CAPABILITY TYPE IN THE TOP BYTE OF THE FIRST ARGUMENT.
		THE SECOND ARGUMENTS USAGE IS DESCRIBED BELOW.  THE THIRD ARGUMENT
		IS WHERE TO PUT THE CREATED CAPABILITY. (CAPABILITY NUMBER OR -1)

		.CRCAP	THE SECOND ARGUMENT IS DISCARDED, AND A NEW CREATE CAPABILITY
			IS CREATED.

		.MSCAP	A SPHERE IS CREATED, AND MADE INFERIOR TO THE CREATING SPHERE,
			THE SECOND ARGUMENT IS THE ENTER ADDRESS FOR THE INFERIOR SPHERE
			INTO THE CREATING SPHERE.

		.SPCAP	ILLEGAL TO CREATE, CAN ONLY APPEAR AS A CONSEQUENCE OF COPYING
			A .MSCAP OR .SPCAP.

		.PRCAP	A PROCESS IS CREATED, AND ITS STARTING ADDRESS IS LOADED FROM
			THE SECOND ARGUMENT.  THE PROCESS IS NOT PLACED IN ANY SPHERE,
			AND IS INITIALIZED IN A STOPPED STATE.

		.TTCAP	THE SECOND ARGUMENT IS THE TELETYPE NUMBER TO CREATE A TELETYPE
			CAPABILITY FOR.  IF NO CAPABILITY TO THAT TELETYPE EXISTS
			ALREADY, ONE IS CREATED, OTHERWISE AN ERROR IS RETURNED

		.FACAP	THE SECOND ARGUMENT IS A POINTER TO A BLOCK OF DATA.  THE FIRST
			WORD IS FLAGS FOR THE FILE OR DIRECTORY, WHICH IS THEN FOLLOWED
			BY THE NAME OF THE FILE ENDING WITH A ZERO BYTE.  IF A ROOT
			DIRECTORY CAPABILITY IS BEING CREATED THEN THREE BYTES AFTER THE
			ZERO INDICATE THE LOGICAL DISK NUMBER AND THE BLOCK NUMBER WHERE
			THE ROOT DIRECTORY CAN BE FOUND.  ONLY THE SYSTEM SPHERE CAN
			CREATE A ROOT DIRECTORY CAPABILITY AND ONLY ONE PER LOGICAL DISK
			IS ALLOWED.
				IF A TEMPORARY FILE CAPABILITY IS BEING CREATED THE USER
			GETS TOTAL ACCESS TO A FILE OF ZERO LEGNTH WITH THE NAME HE
			SPECIFIED.  THE DEFAULT VERSION NUMBER IS NO VERSION NUMBER.
			OTHER CAPABILITIES TO THE FILE CAN BE CREATED ONLY BY COPYING
			AND THE FILE IS DELETED WHEN ALL CAPABILITIES TO IT ARE DELETED.
			BITS IN THE FLAG WORD MEAN (IF SET):

			.FARUT -> MAKE A ROOT DIRECTORY CAPABILITY
			.FAWSB -> MAKE THE FILE WRITE TO SOURCE (ONLY SYSPHR GETS THIS)
			.FALOK -> ONLY ALLOW CAPABILITES IN THIS SPHERE TO BE INVOKED

		.QUCAP	CREATE A QUEUE CAPABILITY.  THE SECOND ARGUMENT IS THE NUMBER OF
			PEOPLE WHO CAN LOCK THE QUEUE, WITHOUT HANGING FOR SOMEONE TO
			UNLOCK IT.

		.CLCAP	CREATE A CORE LINK.  THE SECOND ARGUMENT SPECIFIES THE BUFFER
			CAPABILITY OF THE CORE LINK.  IF THE LENGTH OF THE CORE LINK
			IS LONGER THAN 64. WORDS (WITH SYSTEM OVERHEAD, THAT ALLOWS
			A BUFFER LENGTH OF 60. WORDS), THE SYSTEM WILL ALLOCATE A PAGE
			THAT WILL BE SWAPPED FOR THE BUFFER, OTHERWISE, IT WILL ALLOCATE
			AN ITEM, WHICH WILL NEVER BE SWAPPED. THUS SHORT CORE LINKS ARE
			FASTER, BUT THE CHANCE OF IT FILLING UP IS GREATER.

		.DSCAP	CREATE A DISPLAY CAPABILITY. THE HIGH BYTE OF THE SECOND ARG
			IS FLAGS. THE 100000 BIT MEANS THAT THE LOW BYTE IS A CAPABILITY
			IF IT IS OFF THE LOW BYTE IS A DISPLAY NUMBER. THE 40000
			BIT IF 0 MEANS WE ARE LOOKING FOR A TK DISPLAY CAPABILITY;
			IF 1 WE WNAT A TV DISPLAY. FOR TK DISPLAYS, THE 400
			BIT BEING 1 MEANS WE WANT A LARGE BUFFER; 0 MEANS
			WE DON'T CARE. RETURNED VALUES ARE
			THE WORD OFFSET OF THE BUFFER, ITS LENGTH IN WORDS,
			AND THE CAPABILITY NUMBER. (CAPABLITY NUMBER IS ON TOP
			OF STACK, LENGTH IS SECOND)
			FOR TV DISPLAYS, IF THE LOW BYTE IS 377 THE FIRST FREE
			DISPLAY BUFFER IS GRABBED.

.MSCAP	THE TOP BYTE OF THE FIRST ARGUMENT IS USED TO SPECIFY A FUNCTION TO BE 
	PERFORMED.  THE FUNCTIONS ARE:

		0	PUT PROCESS INTO SPHERE.  THE SECOND ARGUMENT IS THE CAPABILITY
			NUMBER OF THE PROCESS TO PUT INTO THE INVOKED SPHERE.  THE
			PROCESS CAPABILITY MUST HAVE WRITE ACCESS TO THE PROCESS, AND
			THE SPHERE CAPABILITY MUST HAVE C-LIST ADD ACCESS TO THE SPHERE.

		1	RETURN THE TYPE OF CAPABILITY AT THE C-LIST ENTRY SPECIFIED BY
			THE SECOND ARGUMENT.  IF THERE IS NO CAPABILITY THERE, A ZERO
			IS RETURNED, OTHERWISE THE NUMBER OF THE CAPABILITY TYPE. (E.G.
			.SPCAP,.MSCAP ...)

.SPCAP	SAME AS .MSCAP

.PRCAP	THE TOP BYTE OF THE FIRST ARGUMENT IS USED TO SPECIFY A FUNCTION TO BE
	PERFORMED.  IF THE .PRWRT BIT IS SET IN THE FUNCTION, SET THE PROCESSES DATA
	FROM USERS CORE, ELSE RETURN THE PROCESSES DATA TO USER.  THE THIRD ARGUMENT IS
	NEVER USED.  THE FUNCTIONS LOW BITS ARE DECODED AS FOLLOWS:

		.PRREG	READ OR WRITE THE PROCESSES USER MODE GENERAL REGISTER SPECIFIED
			BY THE NUMBER ADDED TO THIS SYMBOL.  I.E. .PRREG+3 SPECIFIES
			R3.  IF WRITE, THE SECOND ARGUMENT IS WHAT TO DEPOSITE THERE.

		.PRPSW	READ OR WRITE THE PROCESSOR STATUS WORD FOR THE PROCESS.  ALL
			BITS ARE READ, ONLY THE CONDITION CODES AND T-BIT ARE PERMITTED
			TO BE WRITTEN.

		.PRFREG	READ OR WRITE THE PROCESSES FLOATING POINT REGISTERS.  THE
			SECOND ARGUMENT IS A POINTER TO A FOUR WORD BLOCK OF DATA THAT
			IS EITHER READ FROM, OR WRITTEN TO.

		.PRFPST	READ OR WRITE THE FLOATING POINT STATUS.  THE ARGUMENTS ARE
			HANDLED THE SAME AS THE USER MODE GENERAL REGISTERS.

		.PRFPEN	READ OR WRITE THE FLOATING POINT AVAILABILITY BIT.  A ONE MEANS
			FLOATING POINT IS ENABLED, A ZERO MEANS IT IS NOT.  IF WRITTEN,
			THE PROCESS EITHER LOSES OR GAINS AVAILABILITY OF FLOATING POINT
			PROCESSOR
			
		.PRSTOP	READ OR WRITE THE STOP STATE OF THE PROCESS.  IF READ RETURNS
			STOP WORD, IF WRITE, AND THE SECOND ARGUMENT IS NON ZERO, IT
			STOPS THE PROCESS, IF ZERO, STARTS IT IF STOPPED.

		.PRERR	READ OR WRITE THE ERROR WORD OF THE PROCESS.

		.PRFAUL	READ OR WRITE THE FAULT WORD OF THE PROCESS.  IF WRITE, AND
			THE OLD FAULT WORD WAS CLEAR, IT CAUSES THE PROCESS TO FAULT.

.TTCAP	THE TOP BYTE OF THE FIRST ARGUMENT IS A FUNCTION.  IF THE .TTWRT BIT IS SET,
	THE DATA IS WRITTEN INTO THE TTY ITEM, OTHERWISE THE DATA IS RETURNED TO THE
	USER.  THE FUCTIONS FOR WRITING ARE:

		.TTMOV	MOVE THE SECOND ARGUMENT INTO THE TTY STATUS WORD

		.TTBIS	SET THE BITS SPECIFIED IN THE SECOND ARGUMENT INTO THE
			TTY STATUS WORD
	
		.TTBIC	CLEAR THE BITS SPECIFIED IN THE SECOND ARGUMENT INTO THE
			TTY STATUS WORD

		.TTRD	READ THE TTY STATUS WORD.  

		.TTCNO	READ OR SET THE CHARNO VARIABLE OF THE TTY

		.TTBRK	A PROCESS EXECUTING THIS INVOK WILL HANG UNTIL CERTAIN
			CONDITIONS ARE SATISFIED. IF ANY CONDITION IS SATISFIED
			THE CALL COMPLETES.  THE SECOND ARGUMENT SPECIFIES TWO
			BYTES SUCH THAT IS EITHER OF THESE BYTES COMES IN THE
			THE INPUT, THEN THE CALL COMPLETES.  THE THIRD ARGUMENT
			SPECIFIES A NUMBER IN THE LOW SUCH THAT IF ANY BYTE LESS
			THAN THAT NUMBER IS TYPED, THEN THE CALL COMPLETES. IN THE
			HIGH BYTE ARE FLAGS FOR OTHER BREAK FUNCTIONS, SUCH AS IF
			.TTMBK IS SET, THE PROCESS WILL BREAK WHEN MORE IS TRIGGERED.
			THE INVOK RETURNS ONE VALUE ON STACK WHICH HAS THE BYTE
			CAUSING THE BREAK IN LOW AND A FLAG FOR THE TYPE OF BREAK HIGH.
			FLAGS FOR CALL FUNCTION AND RETURN VALUE:
			.TTIBK	I/O BREAK CAUSED BY ONE OF THE CHARS DESCRIBED IN
				ARGS BEING TYPED.
			.TTMBK	MORE BREAK.

		.TTSPD	SET THE TTY SPEED.  APPLIES ONLY TO THE DH11 TTYS CURRENTLY.
			THE SECOND ARGUMENT IS MOVED INTO THE LINE PARAMETER REGISTER
			TO SET THE SPEED.

		.TTTYP	RETURNS THE TTY TYPE.  THE FLAGS FOR THIS ARE THE FLAGS IN
			THE TTYTBL ENTRY FOR THE TTY

		.TTMV2	READ OR WRITE TTY STATUS 2, SIMILAR TO .TTMOV

		.TTBS2	BIT SET INTO TTY STATUS 2, SIMILAR TO .TTBIS

		.TTBC2	BIT CLEAR IN TTY STATUS 2, SIMILAR TO .TTBIC

		THE FOLLOWING INVOKES ONLY APPLY TO TV TTYS:

		.TVATC	ATTACH A DISPLAY TO A TV. THE SECOND ARGUMENT SHOULD
			BE A DISPLAY CAPABILITY.

		.TVCL	CLEAR THE SCREEN, SET CURSOR TO HOME UP.

		.TVREV	REVERSE BLACK AND WHITE ON SCREEN.

		.TVFNT	SET THE FONT FOR THIS TV. SECOND ARG IS THE NUMBER OF THE
			FONT DESIRED.

		.TVRFN	RETURNS INFORMATION ABOUT THE CURRENT FONT.  WHEN IT RETURNS
			THE FIRST WORD ON STACK CONTAINS THE NUMBER OF TVLINES IN
			A CHAR LINE (FNTLCL IN FONT), AND SECOND WORD IS THE WIDTH
			OF A CHAR IN BITS (FNWIDE). ARGUMENTS ARE IGNORED

		.TVSET	READ OR WRITE TVLINE AND TVCUR. USE .PRWRT WITH FUNCTION
			TO SPECIFY WRITE. TVLINE WILL BE SECOND ARG, AND FIRST
			VALUE RETURNED, TVCUR NEXT.

		.TVOFF	READ OR WRITE THE TVOFFL VARIABLE, USE .PRWRT FOR WRITE.
			THIS VARIABLE ONLY HAS EFFECT IN WRAP MODE AND SAYS WHAT
			CHAR LINE IS THE TOP OF THE SCREEN.  WRITING INTO THIS
			VARIABLE WILL CLEAR THE ENTIRE SCREEN AND THEN SET THE
			CURSOR TO THE NEW VALUE OF TVOFFL, AT CHAR POSITION 0.

	THE STATUS BITS IN TTY STATUS WORD 1:

		.TIRST	=> RESET THE TTY ON NEXT INPUT BREAK
		.TIQF	=> SUPER QUOTE THE NEXT CHARACTER
		.TOTRN	=> CURRENTLY TRANSMITTING
		.TIMGI	=> INPUT IMAGE MODE
		.TIMGO	=> OUTPUT IMAGE MODE
		.TIRBM	=> IN RUBOUT MODE
		.TIEDM	=> IN EDIT MODE
		.TIECM	=> IN ECHO MODE
		.TICTM  => CONTROLIFY MODE-CONTROL UNDERSCORE CONTROLIFY'S NEXT CHAR
		.TICTF  => CONTROLIFY NEXT CHAR (CLEAR 100 BIT)
		.TICVM	=> CONVERT FROM LOWER TO UPPER CASE MODE
		.TLIPM	=> LINE INPUT MODE
		.TORST	=> RESET THE TTY ON NEXT OUTPUT BREAK
		.TERST	=> RESET THE TTY EDIT BUFFER ON THE NEXT OUTPUT COMMMAND

	THE STATUS BITS IN TTY STATUS WORD 2:

		.TSCRL	=> 1 MEANS SCROLL MODE, 0 MEANS WRAP MODE FOR TV'S

.FACAP	THE TOP BYTE OF THE FIRST ARGUMENT IS A FUNCTION DECODED AS FOLLOWS:

		.FACF	CLEARS THE FLAGS SPECIFIED BY THE SECOND ARGUMENT, AND IGNORES
			THE THIRD ARGUMENT.  FLAGS ARE:

			.FAAC -> ALLOW USER TO CHANGE ACCESS CODES (NOT IMPLEMENTED)
			.FARD -> ALLOW READ ACCESS TO FILE/DIRECTORY
			.FAWT -> ALLOW WRITE AND EXPAND ACCESS TO FILES OR
			         ALLOW DELETE ACCESS TO A DIRECTORY
			.FAAP -> ALLOW APPEND ACCESS TO A FILE OR
			         ADD ACCESS TO A DIRECTORY

		.FASP	SETS THE FILE PAGE NUMBER AND THE BYTE POINTER FROM THE 
			ARGUMENTS.  IN ALL THESE CALLS (UNLESS EXPLICITLY STATED)
			THE USER GIVES OR RECIEVES A 32 BIT BYTE COUNT WHICH IS
			CONVERTED INTO OR FROM A PAGE NUMBER AND BYTE OFFSET.

		.FARP	IGNORES THE SECOND AND THIRD ARGUMENTS, RETURNS THE 32 BIT
			BYTE POINTER INTO THE USERS FILE.
 
		.FARE	RETURNS THE 32 BIT BYTE COUNT OF THE FILE'S LEGNTH.

		.FADL	THE CAPABILITY INVOKED MUST BE A DIRECTORY CAPABILITY.  IF IT
			IS, THE ENTRY WITH THE NAME POINTED TO BY THE SECOND ARGUMENT
			WILL BE DELETED FROM THAT DIRECTORY.  IF THE ENTRY IS A
			DIRECTORY IT WILL BE DELETED ONLY IF THERE ARE NO FILES IN THAT
			DIRECTORY. IF IT IS A FILE, IT WILL BE DELETED ALWAYS.  THE
			THIRD ARGUMENT IS IGNORED.  THE DEFAULT VERSION NUMBER IS <.

		.FAAD	ADDS AN ENTRY WITH NAME POINTED TO BY THE SECOND ARGUMENT TO
			A DIRECTORY.  THE THIRD ARGUMENT SPECIFIES THE TYPE OF ENTRY.
			ONLY FILES AND DIRECTORIES ALLOWED. (.FADIR SET CREATES A NEW
			DIRECTORY;  LINKS AREN'T IMPLEMENTED)  DEFAULT VERSION NUMBER IS
			> UNLESS THERE ARE NO OTHER VERSIONS IN WHICH CASE NO VERSION
			NUMBER IS WRITTEN.  ADDING A FILE WITH VERSION NUMBER < IS
			ILLEGAL.  VERSIONS FOR DIRECTORIES AND LINKS ARE IGNORED.
 
		.FAMU	MUTATE THE CAPABILITY INVOKED.  THE SECOND ARGUMENT POINTS TO
			THE NAME OF A PATH TO TAKE.  THE CAPABILITY IS THEN MUTATED
			DOWN THAT PATH.  IF ANY OF THE PATH NAMES IS THE NAME OF A FILE
			IT WILL GIVE AN ERROR IF THERE IS ANY MORE PATH SPECFIED.  (ONLY
			DIRECTORIES CAN BE MUTATED).  THE THIRD ARGUMENT IS THE FLAGS
			TO SPECIFY ON THE OPEN OF EACH STEP ALONG THE PATH.

			.FAWSB -> WRITE TO SOURCE (ONLY SYSPHR GETS THIS)
			.FALOK -> LOCK THE FILE SO ONLY THIS SPHERE CAN INVOKE CAPS.

			THE USER'S POINTER IS UPDATED AFTER EACH SUCESSFUL STEP ALONG
			THE PATH AND THE CAPABILITY REMAINS WHATEVER IT WAS AFTER THE
			LAST SUCESSFUL STEP.

		.FAMB	CAN ONLY BE EXECUTED BY THE SYSTEM SPHERE.  IT MAKES THE INVOKED
			CAPABILITY THE "BITS" FILE FOR THE ROOT DIRECTORY IT IS INFERIOR
			TO.  THE SECOND AND THIRD ARGUMENTS ARE IGNORED

		.FAMD	SAME AS .FAMB, BUT MAKES THE FILE THE "DIRID" FILE FOR THE ROOT
			DIRECTORY IT IS INFERIOR TO.

		.FARI	RETURNS INFORMATION ABOUT THE FILE WHOSE CAPABILITY IS INVOKED.
			THE THIRD ARGUMENT IS A POINTER TO WHERE TO PLACE THE INFORMA-
			TION IN THE USER'S CORE.  DATA RETURNED IS AS FOLLOWS:
				WORD OF THE CAPABILITIES FLAGS
				WORD OF THE MFI'S FLAGS; BITS ARE:
					.FADIR -> SET IF IT'S A DIRECTORY CAP.
					.FAWSB -> SET IF IT'S WRITE TO SOURCE
					.FALOK -> SET IF MFI IS LOCKED BY SOME SPHERE
					.FARUT -> SET IF IT'S A ROOT DIRECTORY CAP.
				LEGNTH OF FILE IN BLOCKS (ROUNDED UP)
				DATE OF CREATION
				TIME OF CREATION
				NAME (IN BYTES OF ASCII)
				(OPTIONAL VERSION NUMBER PRECEDED BY "#")
				ENDS WITH A ZERO BYTE
			THE SECOND ARGUMENT IS THE MAXIMUM NUMBER OF BYTES TO RETURN
			TO THE USER (ROUNDED TO EVEN COUNT).  IF IT IS EXCEEDED V IS
			SET.  GREATEST NUMBER OF BYTES RETURNED = 410 (OCTAL).  IF THE
			COUNT IS 0 OR 1 THEN AS MANY WORDS AS NECESSARY ARE RETURNED.

		.FADI	RETURNS INFORMATION ABOUT THE DISK THE FILE WHOSE CAPABILITY
			WAS INVOKED IS ON.  AFTER RETURNING THE NUMBER OF FREE BLOCKS
			IS ON TOP OF THE USER'S STACK WITH THE LOGICAL DISK NUMBER UNDER
			IT.

.QUCAP	NO INVOKES ALLOWED

.CLCAP	THE FIRST ARGUMENT IS NEGATIVE, IT TRIES TO BECOME THE CONSUMER FOR THIS CORE
	LINK.  (THERE CAN BE MANY CAPABILITIES TO WRITE DATA INTO A CORE LINK, BUT ONLY
	ONE TO REMOVE IT.)  IF NO ONE ELSE IS A CONSUMER ON THIS CORE LINK, IT MAKES
	THE INVOKED CAPABILITY THE CONSUMER.  IF THE FIRST ARGUMENT IS POSITIVE, IT
	RELEASES THE CONSUMER ENABLE FOR THIS CAPABILITY, IF IT WAS THE CONSUMER,
	OTHERWISE THERE IS NO ACTION.  SECOND AND THIRD ARGUMENTS ARE IGNORED.

.DSCAP	HIGH BYTE OF FIRST ARG IS A FUNCTION.  IF THE 100 BIT IS SET, THE FUNCTION
	REFERS TO TV TYPE DISPLAYS, OTHERWISE IT REFERS TO TK TYPE DISPLAYS.

	TK DISPLAY FUNCTIONS:
		0	START DISPLAY. SECOND ARG IS THE WORD OFFSET TO START AT

		1	STOP DISPLAY. ARGS IGNORED

	TV DISPLAY INFORMATION
	    THE TV FUNCTIONS ARE USED FOR GRAPHICS ON TV DISPLAYS.  THE GENERAL
	IDEA IS THAT THERE EXISTS A PEN OR "TURTLE" FOR EACH DISPLAY.  THIS PEN
	HAS A POSITION ON THE SCREEN WHICH CAN BE READ OR SET.  THE FUNCTIONS
	WHICH DRAW LINES ON THE SCREEN EXPECT ARGUMENTS WHICH ARE A DELTA Y AND
	DELTA X RELATIVE TO THE CURRENT PEN POSITION. A FULL TV DISPLAY HAS 455
	HORIZONTAL LINES OF 576 POINTS PER LINE.  THE LINE DRAWING FUNCTIONS
	CHANGE THE POSITION OF THE PEN TO A NEW RELATIVE POSITION, BUT ANY INVOK
	WHICH WOULD CAUSE THE PEN TO BE LEFT OUTSIDE THE SCREEN, IE VERTICAL
	LESS THAN 0 OR GREATER THAN 454, HORIZONTAL LESS THAN ZERO OR GREATER
	THAN 575, WILL FAIL AND WILL BE COMPLETELY IGNORED.

	TV DISPLAY FUNCTIONS:
		.TVDSR	READ PEN POSITION. RETURNS PEN Y POSITION ON TOP OF STACK
			AND PEN X POSITION NEXT ON STACK.
		.TVDSS	SET PEN POSITION. EXPECTS Y POSITION AS ARG 2, X AS ARG 3.
		.TVDSN	NULL LINE. EXPECTS DELTA Y AS ARG 2 AND DELTA X AS ARG 3.
			JUST SETS THE PEN TO THE NEW RELATIVE POSITION.
		.TVDSI	IOR LINE.  INCLUSIVE OR'S A SERIES OF POINTS STARTING AT
			THE CURRENT PEN POSITION AND ENDING AT NEW POSITION.
		.TVDSX	XOR LINE. JUST LIKE IOR, BUT XOR'S THE SCREEN POINTS.
		.TVDSC	CLEAR BLOCK. FOR THIS FUNCTION, THE PEN OPERATES IN A
			SLIGHTLY DIFFERENT MODE. DELTA Y AND DELTA X ARE EXPECTED
			AS BEFORE, BUT IN THIS CASE, THEY SERVE TO DELIMIT A
			RECTANGULAR AREA IN THE SCREEN WHICH IS CLEARED. THE PEN
			IS LEFT AT THE DIAGONAL CORNER.

SITS FILENAME PROTOCAL

	A FILE NAME IS COMMUNICATED TO THE SYSTEM BY A POINTER TO THE ASCII
STRING OF THE FILE'S NAME (OR A PATHNAME IF A MUTATE CALL).  THE STRING IS
TERMINATD BY AN ASCII NULL OR ZERO BYTE.

	A PATHNAME CONSITS OF SEVERAL FILENAMES CONCATENATED WITH SPACE BETWEEN.

	A FILENAME CONSISTS OF A STRING OF ASCII CHARACTERS TERMINATED BY ONE
OF THE SPECIAL CHARACTERS <, >, #, OR SPACE.  ANY NUMBER OF SPACES MAY PRECEED,
FOLLOW OR COME BETWEEN THE FILE NAME AND VERSION NUMBER.

	AN OPTIONAL VERSION NUMBER IS SIGNALED BY THE CHARACTERS <, >, OR #.
NON SPECIAL CHARACTERS AFTER SPACES INDICATE THE START OF A NEW NAME.

	FOO < IS THE FILE WITH THE LEAST VERSION NUMBER.
	FOO > IS THE FILE WITHE THE GREATEST VERSION NUMBER.
	FOO #123 (# SIGNALS ASCII STRING WHICH IS A NON-NEGATIVE DECIMAL NUMBER < 16385


	ANY CHARACTER AFTER DOUBLE QUOTE " IS QUOTED AND HAS NO SPECIAL PROPERTIES.

	VERSION NUMBERS AFTER DIRECTORY OR LINK NAMES ARE IGNORED.
	DEFAULTING VERSION NUMBER VARIES WITH THE SYSTEM CALL.
	THE SYSTEM DOES NOT CHECK FOR THE TERMINATING ZERO BYTE.

	DIRECTORIES AND LINKS HAVE NO VERSION NUMBERS.
	ONE FILE OF EACH NAME CAN EXIST WITHOUT A VERSION NUMBER.
	IT IS THE LEAST VERSION OF THAT FILE.
