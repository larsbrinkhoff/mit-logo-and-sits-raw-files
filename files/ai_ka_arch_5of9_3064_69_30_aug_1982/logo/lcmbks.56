.dv press
.fo 0 TimesRoman12
.fo 1 TimesRoman12b
.fo 2 TimesRoman12
.tr @
.so r;r macros
.begin_table_of_contents
.fi b



LOGO Curriculum Materials

Specially Adapted for the Brookline Public Schools

June 1981
.sp 4
Introductory Turtle Geometry

Student Activities Booklet

by Daniel H. Watt
.sp 10
The development of these materials was supported in part by the National Science Foundation under grant number SED - 7919033 and conducted at the Artificial Intelligence Laboratory, Massachusetts Institute of Technology, Cambridge, Massachusetts. Activities were used extensively with students in grades  4 - 8 at Lincoln School, in Brookline, Massachusetts.  The material contained in this document represents the views of its author and should not be interpreted as necessarily representing the official policies, either expressed or implied, of the National Science Foundation or the United States Government.  

.chapter "bold(Getting Started with the Logo System)"
.section "bold(Using the Keyboard)"
The computer keyboard is like an electric typewriter which allows you to communicate
with the computer.  Like a typewriter it prints each character you type 
but it prints on the TV screen.  
The blinking cursor on the TV screen shows you where the next character will appear.



Here is a Diagram of the Apple II Keyboard
.bp
.section "bold(Logo Typing Hints)"

Logo is a computer language, that is, a special code that translates words, symbols and numbers that people understand into electronic signals that the computer understands.  Every computer language has its own special rules which can be
confusing when you are learning to use it.  When you type something
the computer does not understand it will complain by sending you an
error message. If you follow a few simple rules you can avoid most
typing difficulties.

1. The   ?   symbol at the left of the screen is a prompt.

?
.fi b

This tells you the computer is waiting for you to type a LOGO command.

2.  Pressing the  <RETURN>  key means   do-it!  Press  <RETURN> to send a command to the computer.  Pressing   <RETURN>  at the end of a command line is like putting a "period" at the end of a sentence in English.   To send the computer a command like:

	FORWARD  100,		you have to type

	FORWARD  100   <RETURN>

Try this:

Type		DRAW

Notice that the cursor is next to the "W", and that the computer hasn't done anything yet.

Now press the   <RETURN>   key.

When you press   <RETURN>  the computer carries out your command. It is now ready to draw with the turtle.  You should see a cleared screen with a triangle - "the turtle" - in the center of it.

Now type	FD   50  <RETURN>

The turtle should move forward  50 steps.

When you see a word like  <RETURN>  or   <ESC>, contained inside   <  >, press the key with that label.  Do not type the word  "return" or "esc".
.bp
3.  Always leave a space after a LOGO command or input (except at the
end of a line).  (The computer needs a space after every word to avoid confusion,
just as we leave a space after a word in English.)

Examples

	Type	FD	100	not	FD100

	Type	PRINT   "HI	not	 PRINT"HI



4.  When using  "   as in PRINT   "HI,  think of the  "   as the first "letter"
of the name. (Never leave a space after    "  unless you want to print a blank line.)

	Type	PRINT	"HI	not	PRINT"   HI
				or	 PRINT   "   HI

(The same is true of    :    in  LOGO. Never leave a space after   :   .)
.keep

5.  Explore what happens when you make a typing mistake by
trying to type some buggy commands. Each of these commands will result in an error message:

.nf l
Examples:

	FD100   <RETURN>

	FORWARD   <RETURN>

	100   <RETURN>

	PRINT"HI   <RETURN>

	PRINT   "   HI   <RETURN>
.end_keep
.bp
.section "bold(Special Keys on the Keyboard)"
.fi b
Some keys, or combinations of keys  have special purposes.  (When using combination keys like  <CTRL>   or   <SHIFT>, hold it down while typing the other
key.

.nf l
KEY			s(n)USE		s(m)EXPLANATION

<RETURN>		t(n)do-it	t(m)sends a command to the computer and moves
					t(m)the cursor down to the next line.

<ESC>			t(n)back-space	t(m)erases one character behind the cursor,
			t(n)rub-out		t(m)and moves the cursor back one space.
	
<     >			t(n)move-right		t(m)moves the cursor one space to the right.

<     >			t(n)move-left		t(m)moves the cursor one space to the left.

<SHIFT> - N		t(n)[		t(m)prints the   [   symbol on the screen.

<SHIFT> - M		t(n)]		t(m)prints the   ]   symbol on the screen.

<REPT>			t(n)repeat		t(m)repeats the effect of the key you
					t(m)typed just before typing   <REPT>.
					t(m)To repeat the effect of a key continuously,
					t(m)first type the key you want to repeat.
					t(m)Then hold down both that key and the   <REPT>
					t(m)key for as long as you want.

<CTRL> - G		t(n)STOP! t(m)stops whatever the computer is doing, and
					t(m)returns to Logo, ready for a new command.

.fi b
Try typing each of the special keys. Some of them, like  <    >,  <    >  or   <ESC>, won't do anything until you've typed something else.

.nf l
.keep
bold(WARNING!!  DO NOT TYPE the    <RESET>    key!)
.fi b

This will restart the computer, erasing all your procedures, forcing you to restart LOGO all over again.
.end_keep
.bp
.section "bold(Reading Your File from Your Disk)"

You should have been assigned a disk on which you can save all the new things you teach the computer. You are probably sharing your disk with several other students.  It is very important to learn to use your disk properly.  It is  difficult to damage the computer in any way,  but if you are not careful, it is possible to damage a disk.  

Carefully follow these instructions about using your disk. Soon they will become habits that you can use without having to think about them.


1. When you start using the computer type   GOODBYE   to clear the computer's working memory.  (If a "welcome to Logo" message is already printed, you don't have to do this.)

2. Find the LOGO file disk with your name on it.

Next, open the cover of the disk drive, and carefully insert the disk, making sure that the label is on top, and goes into the slot last. See the diagram below.
.keep









.end_keep


When the disk is inserted all the way, close the cover.

Once your disk is in place, you should probably leave it there until you are finished using the computer.


.keep
3. Read your file by typing

	READ  "JOHN   (if your name is John - otherwise type your own name.)

This will return all your old procedures to the computer's working memory.  (In order to type the  "  symbol you will have to press   <SHIFT> - 2  -that is, hold down the  <SHIFT>  key  while pressing the  <2>  key.)
.end_keep

4. After  you write a new procedure and test it to make sure it works, you can save it by typing
	SAVE  "JOHN  (using your own name, of course)

In this way you will save all your procedures as you go along.


bold(WARNING!!!   Be sure to  READ  your file when you start work. If you  SAVE  new procedures before READing your old ones, you will lose all your old procedures!!!)


5. When you are all finished working, type GOODBYE. This will leave the computer's working memory clear for the next user.


6. Open the cover of the disk drive and remove your disk.  Carefully put it in its envelope and put it away.
.chapter "bold(Introducing the Turtle)"
The turtle is an object that can draw pictures on the TV screen. You can think of the turtle as a "robot" that can move forward and back and
turn right or left. With its pen down, it can draw geometric shapes in color, as it
moves around the screen.
.section "bold(Basic Turtle Commands)"
.fi b
To see how to use the turtle, try out each  of the turtle commands on the next page. Remember to leave a space between a command and its input number, and to press the  <RETURN>  key after every command.

.nf L
bold(To talk to the turtle type the command:)

DRAW				s(m)This clears the TV screen and
				t(m)places the turtle at its center.

bold(Here are some commands that the Turtle understands:)

.nf L
FORWARD   20	 		t(m)Moves the turtle forward or back the number 
BACK   15				t(m)of spaces you specify.  If the turtle's pen is
FD   20				t(m)down, it will draw a line as it moves.  
BK   15

RIGHT   45 			t(m)Turns the turtle right or left the number
LEFT   30				t(m)of degrees you specify.
RT   45
LT   30

CLEARSCREEN 			t(m)Clears the TV screen, 
CS 				t(m)leaving the turtle in position.

HIDETURTLE   or  HT 		t(m)Hides the turtle so it can't be seen.
SHOWTURTLE   or   ST		t(m)Shows the turtle again.

bold(To stop using the turtle, and use the entire TV  screen for text, type:)

ND   or   NODRAW		t(m)Clears the whole screen for text.
				t(m)To use the turtle again type  DRAW.
.bp
.section "bold(Exploring the Turtle Screen)"
.fi b
Here are some activities that will help you start exploring the turtle's "world."

1. Experiment with the turtle.  Type  FORWARD,  BACK,  RIGHT  and  LEFT  (or FD, BK, RT and LT), with a lot of
different input numbers.  Try very large and very small inputs. 

Try to make the turtle go off the screen.  What happens?

What happens if you tell the turtle to go  FORWARD 1?
Clear the screen and go  FORWARD  0!  You will have to "hide" the turtle to see the effect of such a small movement. Type  HIDETURTLE  or  HT  to hide the turtle, and  SHOWTURTLE  or  ST  to see it again.

2.  Try large and small inputs to RIGHT and LEFT. 

What is the largest input you can use?  What is the largest turn the turtle can make?  What is the smallest turn?

3.  Find the size of the turtle's screen  in several different directions.  How can you tell when the turtle is at the edge of its screen?

4. Pick several different points on the screen and move the turtle to each one.  Make this a game for two players:

The first player picks a point on the screen and puts a finger there.  The second player moves the turtle to the first player's finger.
.sp 9
The object of the game is to reach the point using the smallest number of turtle commands. A "perfect" player could do it with two commands - one turn and one forward command. Very few people, even "turtle experts," can do this perfectly, however.
.bp
.section "bold(How the Turtle Uses its Pen)"


When you first type  DRAW,  the Turtle always starts with its pen down.  It will draw white lines on a black background whenever it moves forward or back.

.nf L
You can change what the turtle's pen does:

PENUP    or    PU t(m)The turtle will not draw lines when it moves.

PENDOWN    or    PD t(m)The turtle will draw lines whenever it moves.

.keep
.nf l

Using  PENCOLOR   or   PC  the turtle can draw in seven colors.

	PENCOLOR   0        		t(m)Black
	PENCOLOR   1			t(m)White
	PENCOLOR   2			t(m)Green
	PENCOLOR   3			t(m)Violet
	PENCOLOR   4			t(m)Orange
	PENCOLOR   5			t(m)Blue


.fi b
PENCOLOR  6  or  PC  6  has a special effect which you can think of as a  "color reversing" effect. When it draws over a blank space, it leaves a line. When it draws over a line drawn by pencolor 6, it erases it.  When the turtle draws over a line of another color, strange effects occur. When it retraces the line, the original colors will be restored.
.end_keep

Experiment with drawings in several different colors.  To erase any line on the screen, just draw over it with the pen set to the background color.  If the background color is black, type  PENCOLOR  0  or  PC  0  to erase lines.  This is not the same as  PENUP.  Can you understand why?
.bp
.section "bold(Changing Background Colors)"

You can use the   BACKGROUND  command to make the turtle can draw on seven different backgrounds.

.nf l
	BACKGROUND   0		t(m)Black
	BACKGROUND   1		t(m)White
	BACKGROUND   2		t(m)Green
	BACKGROUND   3		t(m)Violet
	BACKGROUND   4		t(m)Orange
	BACKGROUND   5		t(m)Blue

.fi b
If you use  BACKGROUND   6, you will get the sharpest possible lines, but the color will not be consistent.

Each  PENCOLOR  command will have the same effect on all backgrounds,  except that only black, white, green or violet can be drawn on a green or violet background, and only black, white, orange and blue can be drawn on an orange or blue background.

Make the turtle draw with different pen colors on different backgrounds. Then change the background colors without erasing the drawing.  When you change the background color after drawing lines with the turtle, the colors of the lines will also be changed in unexpected ways.

Here is something that may surprise you. Copy this line exactly as typed:

REPEAT   10   [ BACKGROUND   RANDOM   6 ]

This makes the background change rapidly 10 times in a row.  Try it again with a number larger than  10.  
.bp
.section "bold(Ways of Using the Screen)"

So far you have used the screen in two ways:

When you start using the computer, the screen is in  Nodraw  mode.  You can type words on the entire screen.

When you type   DRAW,  the computer switches to  Splitscreen mode.  This allows you to see the turtle and four lines of text at the same time.

If you want to see the full turtle screen, type

	<CTRL> - F

This is called  fullscreen mode.  You can also get the fullscreen mode by typing  the command   FULLSCREEN.

To return to splitscreen mode,  type 

	<CTRL> - S

or type the command,  SPLITSCREEN.

Sometimes it is useful to see the entire text screen while you are drawing.  (For example, if you want to remember a command you used a few miniutes ago, but it no longer appears on the split screen.)  To see the full text screen, type  

	<CTRL> - T

You can return to splitscreen or fullscreen by typing  <CTRL> - S  or  <CTRL> - F. Your turtle drawing will not disappear as it would have if you had typed  NODRAW.

Try this:

Make a turtle drawing.  Experiment with <CTRL> - F, <CTRL> - S and <CTRL> - T, until you understand what they do.  Then type NODRAW.  Now try <CTRL> - S, <CTRL> - F and <CTRL> - T.  (These
commands will not work unless you type   DRAW  first.)
.chapter "bold(Drawing Shapes with the Turtle)"
One of the best ways to use the turtle is to make it draw shapes. Later you will learn to teach the computer to draw shapes so that it can remember them. You can make the turtle draw complex and interesting shapes by combining different shapes that the computer has already learned.

.section "bold(Making the Turtle Draw a Square or Rectangle.)"

A square is one of the easiest shapes for the turtle to draw. This is because all the sides are the same length,  all the turns are the same, and there are only four of each.  If you don't already know how much to turn the turtle for a "square corner", you may have to experiment, or figure it out.  (HINT:  RIGHT  360  or  LEFT  360 will turn the turtle all the way around.  When the turtle draws a square it has to turn all the way around in four equal turns. )  When you find the angle to use for a square corner, remember it.  You will find it  useful for many other shapes.
.sp 10
Make the turtle draw several squares, large and small.

A rectangle is like a square, but only the sides opposite to each other are equal.  The angle for each turn is the same, because each corner of a rectangle is a square corner. You can make the turtle draw a lot of different rectangles. Draw each one in a different color.
.sp 12
.bp
.section "bold(Making the Turtle Draw Your Initials)"

Another good turtle drawing project is to make it draw initials. Here are some that have been drawn by other students. See if you can make it draw yours.
.bp
.section "bold(Harder Shapes - Drawing `Stars' or Triangles)"

Stars can be drawn in the same way the turtle draws a square.  It keeps going forward the same amount and turning the same angle.  But the angle it turns has to be bigger than a square corner turn.  Here is one way to start a star.  Try to finish it:

.nf l
FORWARD  50
RIGHT   135
FORWARD  50
RIGHT   135
FORWARD  50
RIGHT   135

.fi b
How many points does this star have?   Many different stars can be drawn by choosing different angles for the "star corner".  Try to draw some of these, or invent some stars of your own.
.sp 12

If you choose one particular angle for the turn, you will get a triangle instead of a star, because the third line will return exactly to the turtle's starting place.  (HINT:  The turtle has to turn right ot left  360 degrees to turn all the way around. When it draws a triangle, it turns all the way around in three equal turns.)
.sp 12
.bp
.section "bold(Drawing  `any old shape')"

Sometimes it can be fun to make the turtle draw an unplanned shape, just by mixing up turtle commands. Sometimes the shapes  "look like" something and sometimes they don't. Sometimes interesting shapes can be made using FORWARD and BACK  commands, combined with different turns. Here are some examples:
.nf l
			
FORWARD   30				s(l)RIGHT   40
RIGHT   120		t(l)FORWARD  100
FORWARD  10		t(l)BACK  50
LEFT   90		t(l)RIGHT  75
BACK  20		t(l)FORWARD  40
			t(l)BACK   80

.sp 6
FORWARD  25				t(l)FORWARD  10
LEFT   150				t(l)RIGHT  90
FORWARD  10				t(l)FORWARD  10
LEFT   120				t(l)LEFT   100
FORWARD   15				t(l)FORWARD  20
					t(l)RIGHT  90
					t(l)FORWARD  20
					t(l)LEFT   110

Some of these "shapes" make interesting designs when they are repeated.
.chapter "bold(Teaching the Computer a New Command)"
.section "bold(What is a procedure?)"
.fi b
A procedure  is a series of Logo commands that has been given a name so that the computer can remember all the steps as one command.  When you teach the computer to remember a particular series of steps you are defining a procedure.  Suppose you want the turtle to draw a square, and type the command,   SQUARE.  The computer will print an "error message" saying  "THERE IS NO PROCEDURE NAMED SQUARE!"  Defining a procedure with the name  "SQUARE" is telling the computer  "how to square."  You start defining a procedure by typing   TO   followed by a name that you have
chosen. When you do this, the computer changes to edit mode. While you are editing, the computer does not carry out your commands, but just stores them until you finish editing. Here's what you do:
.nf l

Type   TO   followed by a name.
Then type each step in order.  
When your procedure is complete, type  END.
To stop using the editor, type   <CTRL> - C.
(Hold down the key marked   <CTRL> and type  C  at the same time.)

You can printout all the steps in a procedure with the command   PRINTOUT  or  PO.

	PRINTOUT   BOX   or   PO   BOX

To see a list of all your procedure names, type  

	POTS		(POTS is short for PRINTOUT TITLES)

To printout all the steps of all procedures type
	
	PRINTOUT   ALL   or   PO   ALL

To save your new procedures on your disk, type

	SAVE   "JOHN		(Use your own name instead of  "JOHN)
.bp
.section "bold(Examples of Simple Procedures - a `Funny Shape' and a `Square')"
.fi b

Pick one of these examples to try first. Then try the other one. For each one, follow the steps listed above. Be sure to type  <CTRL> - C when you are finished teaching the computer your new command.

.nf l
TO    FUN		t(m)TO    BOX
FORWARD    30  t(m)FORWARD    20
RIGHT    120 t(m)RIGHT    90
FORWARD    10 t(m)FORWARD    20
LEFT    90 t(m)RIGHT    90
BACK    20 t(m)FORWARD    20
END t(m)RIGHT    90
		t(m)FORWARD    20
		t(m)RIGHT    90
		t(m)END


.fi b
You can use any name that is not already a LOGO command or the name of a procedure
you have already defined.   The steps of the
procedure can be any other LOGO commands or procedures.  You can teach the computer a procedure for any shape you know how to make the turtle draw. You can invent a new shape, by choosing a number of different commands at random.

To use the new command, just type its name,  FUN or
BOX, (followed by  <RETURN> of course), and the computer will carry out your sequence of steps.

Try typing each command,  FUN,  or  BOX,  several times to see what happens.
.bp
.section "bold(Using the Logo Screen Editor)"

Special keys let you make changes or additions to a procedure very easily while you are editing or defining it.  To finish using the editor, type   <CTRL> - C.

bold(Commands to Move the Cursor)
 
.nf L
	<CTRL> - P			s(m)moves cursor up one line

	<CTRL> - N			t(m)moves cursor down one line

	<     > 			t(m)moves cursor left one space

	<     > 			t(m)moves the cursor right one space

	<CTRL> - A			t(m)moves cursor to beginning of line

	<CTRL> - E			t(m)moves cursor to end of line

	<REPT>				t(m)repeats the effect of the key you
					t(m)typed just before typing   <REPT>.
					t(m)To repeat the effect of a key continuously,
					t(m)first type the key you want to repeat.
					t(m)Then hold down both that key and the 
					t(m)<REPT>  key for as long as you want.


.keep
bold(Editing Commands)

	<CTRL> - D			t(m)erases the character at the cursor.

	<ESC>				t(m)erases the character behind the cursor,	
				t(m)just as it does when you are typing
				t(m)normal LOGO commands.

	<CTRL> - K			t(m)"kills" or erases an entire line
					t(m)to the right of the cursor.
	
	<RETURN>                     t(m)creates a new line and moves the cursor 
                                        t(m)down to the beginning of the new line.
				t(m)If there is any text to the right
				t(m)of the cursor it will be moved too.

	<CTRL> - O			t(m)creates a new line at the cursor
			     t(m)and moves all the other lines down.

.fi b
For more detailed information about using the editor read Booklet II - bold(Using The Logo Operating System).
.end_keep
.bp
.section "bold(Making your own procedures.)"

You are now ready to teach the computer to remember any procedures you want.

Make a procedure to draw a large square, a tall skinny rectangle, a triangle, a star, or any other shape you know how to draw.

Once you have taught the computer a new procedure, that procedure can be a subprocedure in another new procedure. For example,
.nf l

	TO   TOWER
	BOX
	FORWARD   20
	BOX
	FORWARD   20
	BOX
	FORWARD   20
	BOX
	END
.sp 5
.fi b
The computer can easily draw the TOWER, since it already knows the procedure, BOX.
.section "bold(Editing procedures.)"

If you want to change a procedure for any reason, type  EDIT  or   ED  followed by the procedure name. This will return the computer to edit mode, with your procedure displayed on the screen ready for you to edit. When you are finished editing your procedure type:

	   <CTRL> - C

You can use all the special editing keys to make changes in your procedure.
.bp
.section "bold(Ideas for Simple Projects.)"
.chapter "bold(Projects with Circles and Arcs  )"
.section "bold(Drawing Circles and Arcs with the Turtle.)"
Many interesting designs can be drawn using circles and arcs. The turtle can draw a circle by going forward a little and turning a little, and repeating the same steps over and over until it has returned to its starting place.  If you like, you can try to invent your own circle procedures.

Circles can be drawn with special procedures, RCIRCLE  and  LCIRCLE, that draw 36-sided polygons.  They look enough like circles to be useful for most turtle drawings.  RARC and  LARC  are used to draw  quarter circles.  "Arc"  is a word meaning "part of a circle."

.keep

RCIRCLE and LCIRCLE, RARC and LARC are used with an input giving the radius of the circle or arc you are drawing.


.nf L
RCIRCLE    20  t(m)Draws a circle of radius 20, curving to the right.
.sp 4
LCIRCLE    10 t(m)Draws a circle of radius 10, curving to the left.
.sp 4
RARC    20 t(m)Draws a quarter circle of radius 20, curving 
	  t(m)to the right.
.sp 4
LARC    10 t(m)Draws a quarter circle of radius 10, curving
	  t(m)to the left.
.end_keep
.bp
.section "bold(Project Ideas Using Circles.)"
.bp
.section "bold(Project Ideas Using Arcs.)"
.chapter "bold(Using Subprocedures)"
.section "bold(What is a Subprocedure?)"

.fi b
When you use a procedure that you have defined as part of something else, it is called a "subprocedure".  The procedure  BOX, used as part of TOWER, is an example:

.nf l
	TO   TOWER
	BOX
	FORWARD   20
	BOX
	FORWARD   20
	BOX
	FORWARD   20
	BOX
	END
.sp 5
.fi b
When  BOX  is used as part of TOWER, or anything else, it is a subprocedure.  When you use BOX by itself,  it is not considered a subprocedure.  Using subprocedures makes it possible to draw a very complicated shape  more easily than by using one long complicated procedure to draw the shape.  Subprocedures can be used as "building blocks" for new shapes,  and they can be used in planning complicated designs.
.bp
.section "bold(Using Subprocedures as Building Blocks.)"
.fi b

Turtle procedures which draw shapes can be used to build more complex 
shapes.  Here are some examples.

You can start with two procedures.  One draws a box, and the other a triangle:

.nf L
.keep
TO    BOX t(m)TO    TRIANGLE
FORWARD    30 t(m)LEFT    90
RIGHT    90 t(m)FORWARD    30
FORWARD    30 t(m)RIGHT    120
RIGHT    90 t(m)FORWARD    30
FORWARD    30 t(m)RIGHT    120
RIGHT    90 t(m)FORWARD    30
FORWARD    30 t(m)END
END
.end_keep

.fi b
You can build other designs from them, by repeating them
and combining them in different ways. 

.nf L
.keep
For example,

TO    WINDOW
BOX
BOX
BOX
BOX
END
.sp 6
.end_keep
.keep
and

TO    BUTTERFLY
TRIANGLE
TRIANGLE
END
.sp 8
.end_keep

and
.keep

TO    6BUTTERFLY
BUTTERFLY
BUTTERFLY
BUTTERFLY
BUTTERFLY
BUTTERFLY
BUTTERFLY
END
.sp 4
.end_keep

.keep
Putting a box and a triangle together, you can construct a house:



TO   HOUSE
TRIANGLE
RIGHT   30
BOX
END
.sp 4
.end_keep

.keep
and, repeating HOUSE four times,
.sp 4
TO   HOUSE4
HOUSE
HOUSE
HOUSE
HOUSE
END
.sp 4
.end_keep

.keep
.fi b
HOUSE4  and  6BUTTERFLY  can be put together, to make a new design,

.nf L
TO    HB46
HOUSE4
6BUTTERFLY
END
.sp 10
.end_keep

.keep
.fi b
HB46 looks something like a spider. If you add some
circles you could make a SPIDER procedure.

.nf L
TO    SPIDER
HB46
RCIRCLE    16
LCIRCLE    16
RCIRCLE    8
LCIRCLE    8
BACK    15
RCIRCLE    4
LCIRCLE    4
END
.sp 4
.end_keep
.bp
.section "bold(Project Ideas Using Subprocedures as Building Blocks.)"
.bp
.section "bold(Using Subprocedures for Planning a Project.)"

.keep
.fi b
Here is an example of a planned project.  You might want
the turtle to draw a "person" that looked something
like this:
.sp 10
.end_keep
You could probably draw the person using a long series of turtle commands--
FORWARDs, BACKs, RIGHTs and LEFTs, but you could easily make a mistake.  For this type of project  it is usually easier to make the drawing  using subprocedures and a
superprocedure  named PERSON.

.nf L
.keep
TO    PERSON
LEGS
BODY
ARMS
NECK
HEAD
END
.end_keep

.fi b
Teaching the computer five different procedures might seem to be
complicated, but this method offers several advantages.  First, you can
start by planning your whole project in advance, so you know exactly what
you have to do to accomplish your goal.  Second, you can try to solve a series of
small problems, one at a time, rather than one big problem.  Third, when you
want to change one part of your design while leaving the rest of it the same,
it will be easier to decide which commands to change.
.keep

One subprocedure,  VEE,  can be used to draw both the arms and the legs of the person.
.nf L

TO    VEE
RIGHT    45
FORWARD    10    BACK    10
LEFT    90
FORWARD    10    BACK    10
RIGHT    45
END
.end_keep
.keep

Now  use VEE to make procedures for the arms and the legs.

TO    ARMS t(m)ARMS uses VEE directly
VEE
END
.end_keep

.keep
TO    LEGS t(m)LEGS reverses the turtle's direction before
RIGHT    180		t(m)using VEE, then reverses the turtle again so that
VEE		t(m)it ends up where it started.
RIGHT    180
END
.end_keep

.keep
.fi b
BODY and NECK are just straight lines.  After experimenting, you might
decide to try  these sizes:

.nf L
TO    BODY t(m)TO    NECK
FORWARD    15 t(m)FORWARD    5
END t(m)END
.end_keep
.keep

To draw the head, you can use a circle procedure.

TO    HEAD
LEFT    90
RCIRCLE    5
RIGHT    90
END
.end_keep

.fi b
Now, when you type the command, PERSON, you should get this result:
.bp
.section "bold(Project Ideas for Using Subprocedures in Planning.)"
.chapter "bold(Making Repeating Designs)"

It is possible to make complex designs by making the computer repeat a series
of steps over and over again.  There are several ways to carry out a project
of this type.

.section "bold(Recursion - Repeating Something Many Times.)"

Recursion  is a good way to make something repeat many times - especially when you don't know exactly how many times to repeat it.  Suppose you want  to invent your own procedure to  make the turtle draw a circle, without using  RCIRCLE or  LCIRCLE.  First think about how the turtle could draw a circle.  It might be helpful to play turtle yourself, to help figure this out:

Stand up. Pretend you are the turtle and can only move forward and back, or turn right or left, the way the turtle does.

Walk in a circle. Keep careful track of what you do.  Give yourself a set of instructions.

Your instructions are probably something like this:

.nf l
take one small step, turn left a little,
take another small step, turn left a little,
take another small step, turn left a little... and so on...and so on...

There is a way to tell the computer to keep repeating something "forever".

	TO   CIRCLE
	FORWARD   1
	LEFT   1
	CIRCLE
	END

.fi b
When the turtle carries out the command  CIRCLE, it goes forward one step,  turns left one degree, and starts doing  CIRCLE  again. Then it goes forward one step, turns left one degree and starts doing  CIRCLE again.  And so on... and so on... and so on.

Teach the computer to CIRCLE and see what happens.

.nf l
Of course there is a "bug."  The turtle never stops!  To make it stop you have to press
<CTRL> - G.
.bp
.section "bold(Making a Repeating Design Using Recursion)"
The procedure FUN makes a simple turtle design:

.nf l
.keep
TO  FUN
FORWARD  30
RIGHT  120
FORWARD  10
LEFT  90
BACK  20
END
.end_keep
.fi b

If you teach the computer to FUN, and repeat FUN several times, another design
begins to appear.  If you make the computer keep repeating these steps
over and over without stopping an
interesting design may result.

.nf l
.keep
TO  FUNNY
FORWARD  30		
RIGHT 120		
FORWARD  10		
LEFT  90
BACK  20
FUNNY
END
.end_keep

.fi b
FUNNY  is the same as  FUN  except for the last line.  When you type the command FUNNY, the computer will draw a shape, then start
the procedure FUNNY again, draw the same shape, starting from a different place, start
FUNNY again, etc.  It will keep going, eventually retracing the same design
unless you stop the computer by typing   <CTRL> - G.

This way of making a procedure repeat is called recursion.
.keep

Here are some other examples of recursion:

.nf l
TO SQUARE	
FORWARD  20		
RIGHT  90		
SQUARE		
END		
.sp 4
.end_keep
.keep
TO FLOWER	
RCIRCLE   30
RIGHT  60		
FLOWER		
END
.sp 5
.end_keep
.keep
TO NEWFUN	
FUN	
NEWFUN
END
.sp 4
.end_keep
.keep
TO STAR
FORWARD  40
RIGHT  150
STAR
END
.sp 4
.end_keep
.fi b
Try making some recursive procedures of your own. Change the size of the forward step in  SQUARE or the angle in  FLOWER  or  STAR.
.bp
.section "bold(Making Repeating Designs Using the REPEAT Command)"

The LOGO command REPEAT allows you to repeat a command or list
of commands as many times as you want.

.nf l
Examples:

.keep
REPEAT   7   [  FORWARD  10    BACK  10    RIGHT  20 ]
REPEAT   3   [  FUN  ]
REPEAT   4   [  RIGHT  90    FORWARD  20  ]
REPEAT   15   [  BACKGROUND   RANDOM   6  ]
.end_keep
.fi b

REPEAT needs two inputs.  The first input is a number telling how
many times to repeat something; the second input is a list of instructions.
The list must be enclosed within square brackets  [   ]  ( <SHIFT> - M  and  <SHIFT> - N ). 

REPEAT can also be used in procedures:

Examples:

.nf l
.keep
TO  SQUARE
REPEAT  4    [ RIGHT  90    FORWARD  20 ]
END
.sp 5
.end_keep

.keep
TO FLOWER
REPEAT  6    [ RCIRCLE   30  RIGHT  60 ]
END
.sp 5
.end_keep
.bp
.section "bold(Project Ideas  Using Recursion and REPEAT)"
.bp				
.bp
.chapter "bold(More Project Ideas)"
.bp
.bp
.bp
.bp
