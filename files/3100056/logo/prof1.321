.xgp
.font 0 31vg
.font 1 31vgb
.FONT 2 25VG
.TABFNT 2
.dummy @
.chap 1
.he1
Albert
.he2
@@@@@
.adjust
.ss
.ce
11.  Albert
.br

Albert is considered to be an average student by his teachers.  (His most
recent scores on the standardized tests given to all sixth graders
place him in the 51st percentile nationally.)  He is a quiet, well
mannered student, serious in his work, and well liked by his
classmates.  When asked questions about himself or asked to explain his
thinking, he tends to respond with brief statements, or to be non-committal.

Albert thoroughly enjoyed working with the computer, and became deeply
involved with computer activities at the very first class.  
He rarely seemed to be at a loss or to need help in choosing an activity.
He quickly
became adept at moving the TURTLE around the screen, and using it to
draw simple pictures.  He usually worked on his own, rarely asking for
help, and often worked on a number of different small tasks during the
course of a single class period.  Although he did tackle a couple of
longer animation projects, he seemed most comfortable with shorter
tasks that he could carry out without assistance.  Albert seemed to be
largely unaware of the work of other students, concentrating deeply on
his own activities.  

Although Albert was successful in driving the TURTLE and in carrying out
many small projects, he had difficulty in using subprocedures and
variables, and in planning his work more than one step at a time.
Within these limitations, he himself was extremely satisfied with his
work, and expressed a strong interest in continuing to work with
computers next year.



.block 5
11.1  Albert's work in Turtle Geometry0

Albert began his LOGO experience by "driving the TURTLE" with great
proficiency.  In his first session of LOGO, Albert was able to use PENUP
and PENDOWN to try out steps experimentally.  He readily used FORWARD/BACK, and 
RIGHT/LEFT as inverses, estimated distances and
directions, and aggregated two forward steps into one (combining FORWARD 35
and FORWARD 23 into one step by typing FORWARD 58).  He made use of 90 degree
rotations turns quite expertly to move the TURTLE into parallel positions, and at
one point used a 45 degree turn to create a diagonal line.

.he2
Turtle Geometry
In the third
class he made the computer draw a complex "face" by direct commands,
and spent the next two classes were spent writing and debugging lengthy
procedure which drew the face.
Although the teacher suggested the use of subprocedures, Albert rejected the 
suggestion, preferring to work with a long sequential procedure.

.block 18
.NOFILL
TO KEITH
1 RCIRCLE 89	15 RIGHT 90	28 PENDOWN
2 PENUP		16 FORWARD 6	29 BACK 65
3 RIGHT 90	17 PENDOWN	30 BACK 23
4 FORWARD 45	18 LCIRCLE 12	31 PENUP
5 LEFT 90	19 PENUP	32 RIGHT 90
6 FORWARD 23	20 FORWARD 15	33 FORWARD 100
7 PENDOWN	21 PENDOWN	34 FORWARD 23
8 RCIRCLE 12	22 RCIRCLE 13	35 LEFT 90
9 PENUP		23 PENUP	36 FORWARD 45
10 RIGHT 90	25 FORWARD 45	37 RIGHT 90
11 FORWARD 55	26 RIGHT 90	38 FORWARD 6
12 FORWARD 11	27 FORWARD 50	END
13 BACK 9
14 BACK 5

.block 20
.sp 18
.ce
Figure 1.1

.adjust
In drawing his face, Albert used 90 degree turns to
"drive the TURTLE" to different locations on the screen.  This
enabled him to keep the different features of the face parallel to each
other.  On the other hand, the repeated use of 90 degree turns and small TURTLE steps,
made it difficult for Albert to consolidate his steps, or to easily
understand the purpose of each step or of a series of steps in his
procedure.  He drew his design by trial and error, and
then incorporated all the steps into a procedure by copying them
into his notebook.  He did not copy exploratory steps
which were carried out with PENUP.  Since
some PENUP steps were needed as part of his drawing, and others were
exploratory, and not needed in the final design, Albert experienced some
confusion in figuring out which steps to include and which to
eliminate.  This led to bugs in his procedure, which were difficult for
him to understand.

Albert also had difficulty deciding whether to use a circle that curved to
the right or to the left for the interior features of his face.  He
could get the TURTLE to the point where he wanted the eye drawn, but
seemed unable to predict consistently whether the LCIRCLE or RCIRCLE
command was needed to place the circle where he wanted it.  He explored
by trying the circle first with PENUP, then repeating it with PENDOWN if it was
right, or choosing the reverse circle if it came out in the wrong
place.  This created more possibilities for copying errors and further
complicated the process of debugging the final procedure.

In the sessions that followed, Albert continued to move the TURTLE around
the screen by creating a kind of "grid" composed of 90 degree turns.
Albert made use of angles other than 90 degrees only when
they were specifically needed for particular shapes.

In the sixth class, Albert decided to make a five pointed star.  After several
unsuccessful tries his teacher suggested that he use the REPEAT
command, repeating a forward step and a turn five times, and then varying
the angle to find the correct rotation.  
Starting at 60 degrees and using a method of successive approximations, it 
took him seven tries to find the correct angle:
he tried 60, 110,
150, 140, 145, 143 and finally was successful with 144.  For
the last three steps, the teacher suggested that he hide the TURTLE
each time, to see if the star was "exactly right".

When Albert wrote his procedure TO STAR, he listed 10 separate
steps, rather than using the REPEAT command he had used in his explorations.
This was another indication of his preference for linear, sequential procedures,
rather than subprocedures.

.block 12
.nofill
TO STAR
1 FORWARD 100
2 RIGHT 144
3 FORWARD 100
4 RIGHT 144
5 FORWARD 100
6 RIGHT 144
7 FORWARD 100
8 RIGHT 144
9 FORWARD 100
10 RIGHT 144
END
.RI
Figure 1.2

.adjust
In a later class Albert decided to have the computer draw his initials.  His
problems with this project
illustrate his difficulty in
understanding the state of the TURTLE and the use of subprocedures.  He
was encouraged to make an A and a J as separate figures and then write
a subprocedure putting the two initials together.

In making his A, Albert estimated by eye, getting a close approximation to a
symmetrical A.  He first turned the TURTLE 20 degrees to the right, and
made the first leg of the A.  He then used 144 degrees (borrowed from his star)
for the vertex angle.  (A rotation of 140 degrees would have
made an exactly symmetrical A.   
The rest of the design remained skewed at 4 degrees from the
vertical and horizontal axes.)

Although making the subprocedure J posed no great problem for Albert,
putting the A and the J together proved to be more difficult.
Albert usually worked on a Turtle Geometry project by trying out all the
steps first, and then copying them over to make a procedure.  He used this
approach for making both of the letters for his initials.  When he
came to making a procedure to put them together, however, he did not
seem to realize that he could work in the same step-by-step manner,
using the subprocedures, A and J as though they were direct commands.
Instead he wrote the procedure first, then tested and debugged it.

.he2
Procedures
In addition to not realizing that he could use the A and J as though
they were direct commands, Albert had difficulty realizing how the state of
the TURTLE effected the position of the J.  Although he had an
excellent grasp of the state of the TURTLE as it related to forward,
back right and left commands, he seemed to lose track of it as it
related to a procedure -- a combined sequence of commands.  This was
similar to the problem he had in predicting where the RCIRCLE and
LCIRCLE commands would draw certain features of his face in an earlier
project.

An analysis of Albert's separate procedures to draw an A and a J is shown
below.  The TURTLE starts drawing the A at point 1.  It finishes the A
at point 2.  It starts and finishes the J at points 3 and 4
respectively (see figure 1.3).  In his work however, Albert seemed unable
to take these TURTLE states into account.

.block 12
.sp 10
.ce
Figure 1.3

.epage 1
It took Albert seven tries to achieve his procedure MAME (a substitute for
the desired title "NAME", an existing LOGO command).  Although each try got
closer to the desired result, the whole approach seemed devoid of
planning.  Figure 1.4, on the next page, shows 
the sequence of Albert's trials.  The dotted line on
the left shows where the turtle moved before making the J.  

.block 5
11.2  Albert's Use of Procedures and Subprocedures

0Albert quickly understood basic TURTLE commands, and the idea of combining
a string of TURTLE commands to write a procedure.  As we have seen, he
developed a
strategy of trying out a sequence of direct commands, and, if he liked
the design, copying the entire list of commands to make a procedure.
He easily learned to edit procedures to correct spelling or syntax
errors and became proficient with filing.  On the other hand, Albert had
difficulty debugging procedures where he had errors of substance rather
than syntax.  His programming work, 
often suffered from a series of related confusions which will be
described in detail below.

.indent 6
1--0he failed to use step-by-step analysis of his
procedures as a debugging tool; 

1--0he had difficulty understanding the
role of subprocedures as separate entities; 

1--0he
used both recursion and variables in a "mechanical" fashion, without
really understanding how they worked.  

.indent 0
In the third class, Albert used the TURTLE to draw a rather involved
"face".  He copied down more than 35 steps in writing a
procedure called KEITH.  (See figure 1.1).  When copying errors -- the
omission of two or three necessary steps -- led to bugs, Albert was unable
to resolve the problem without help.  He was shown how to use the STEP
command, and was able to successfully edit his procedure using it.
However, in later work, he rarely applied this approach on his own --
preferring to start over completely, rather than go through a step by
step debugging of a previously defined procedure.

While Albert learned how to use previously defined procedures as building
blocks, he had great difficulty using the idea of subprocedures in his
planning.  He seemed to have a fixed idea of a procedure as a
sequential list of commands.  When a procedure was used as a
subprocedure, he seemed to lose track of how it fit into his overall
purpose.  An example of this, his "initials" project, was discussed above.

In another project -- making a "spacewar" animation in which a "UFO"
orbited around a "planet", while shooting at it, Albert used subprocedures at
the teacher's suggestion.  When bugs occured, he had difficulty
realizing which subprocedure as at fault.  He put subprocedures in the
wrong places, often using them more than once.  He needed a good deal of
help to debug his procedures successfully.

It was not until the last few classes that he began to incorporate
subprocedures into his work independently.

A similar situation occured in Albert's work with recursion.  He easily
learned to use recursion in a "cliche" form, but had difficulty
debugging improper uses of recursion.  During one class, for example,
Albert created a number of recursive designs.  One of them, FLAIT, was
intended to produce an effect something like an asterisk.  First he
defined one "ray" of the asterisk:

.he2
Recursion
.nofill
.indent 6
.block 7
TO FLAIT
1 FORWARD 56
2 RIGHT 90
3 FORWARD 2
4 RIGHT 90
5 FORWARD 56
END
.ri
Figure 1.5

.indent 0
.adjust
What he needed to do next was to rotate the TURTLE, and use recursion to
repeat the whole process.  What he did was to add the recursion
line without including the necessary rotation:

.indent 6
.nofill
.block 7
TO FLAIT
1 FORWARD 56
2 RIGHT 90
3 FORWARD 2
4 RIGHT 90
5 FORWARD 56 FLAIT
END
.ri
Figure 1.6

.indent 0
.adjust
When this version of FLAIT did not produce the desired effect, Albert tried
to use it as a subprocedure of 9FLAIT:

.indent 6
.nofill
.block 11
TO 9FLAIT
1 FLAIT
2 FLAIT
3 FLAIT
4 FLAIT
5 FLAIT
6 FLAIT
7 FLAIT
8 FLAIT
9 FLAIT
END

.he2
Variables
.indent 0
.adjust
He was surprised that 9FLAIT produced exactly the same effect as FLAIT, and gave up
on his project.  Several weeks later, however, when asked why 9FLAIT
and FLAIT had the same effects, Albert responded quite easily:  "Because FLAIT
never stops," and indicated that only line 1 of 9FLAIT
was ever executed.  He never seemed to understand his original bug --
forgetting to put a rotation before the recursion line in FLAIT.

Albert also learned to use variables to change the angle or size of a given
predetermined shape.  Again, he was able to debug problems that arose due to
syntax errors, but had difficulty with those that had to do with a
misconception of the purpose of the variable or the way in which it was
assigned.

For example, Albert taught the computer to draw a 5-pointed star
(Figure 1.2).

.indent 6
.nofill
.block 12
TO STAR
1 FORWARD 100
2 RIGHT 144
3 FORWARD 100
4 RIGHT 144
5 FORWARD 100
6 RIGHT 144
7 FORWARD 100
8 RIGHT 144
9 FORWARD 100
10 RIGHT 144
END

.indent 0
.adjust
Later, during class 10, he was shown how to make a star of variable
size by substituting :SIZE for the value 100 in all the forward steps,
and using :SIZE in the procedure title.  His new procedure was:

.indent 6
.nofill
.block 6
TO AS :SIZE
1 FORWARD :SIZE
2 RIGHT 144
3 FORWARD :SIZE
4 RIGHT 144
etc.

.indent 0
.adjust
Later, however, Albert had difficulty applying this idea to the task of
designing a racetrack.  He was drawing a shape consisting of two
boxes, one inside the other, and wanted to write
a procedure that could draw boxes of different sizes.  He had
begun his work by moving the TURTLE from the origin to the lower left
hand corner of the screen, and drawing a large box, using these commands:

.nofill
.block 4
PENUP LEFT 90
FORWARD 200		These steps move the TURTLE over
RIGHT 90		to the lower left handcorner of
BACK 200		the screen.


.block 7
PENDOWN FORWARD 375
RIGHT 90
FORWARD 375
RIGHT 90		These steps draw a box with
FORWARD 375		sides of 375.
RIGHT 90 FORWARD 375
RIGHT 90

.adjust
When it was suggested to Albert that he make a variable box procedure, he
followed the same process he did with his STAR:  he copied the steps,
substituting :SIZE for the originally fixed length in all the FORWARD
steps without changing the RIGHT or BACK step.  He had not differentiated
the steps needed to move the TURTLE over, from those
needed to draw the box:

.INDENT 6
.NOFILL
.block 13
TO BX :SIZE
5 PENUP LEFT 90
10 FORWARD :SIZE
15 RIGHT 90
20 BACK 200
25 PENDOWN FORWARD :SIZE
30 RIGHT 90
35 FORWARD :SIZE
40 RIGHT 90
45 FORWARD :SIZE
50 RIGHT 90 FORWARD :SIZE
55 RIGHT 90
END

.adjust
.indent 0
When this produced an
off-center box, Albert was mystified.  He debugged this procedure in step by
step fashion, first 
removing LEFT 90 from line 5 and then erasing line 20.  Although his
BX procedure now "worked",
he never understood his
original error.
We can see that
he was still confused both about the use of variables to replace fixed steps
in variablizing a procedure, and about separating his problem into
subparts that had different functions.

.he2
Animation
Albert's problems were compounded by the fact that he asked for
help only when totally frustrated.  By that
point he had usually tried so many alternatives that he was no longer
aware of what his original difficulty had been.  In a class in which
the other three students (Dennis, Harriet and Tina) were extremely
demanding, Albert, working quietly on his own, tended to
get lost.  The problems he encountered remained confusions, and were
rarely used as vehicles to help him improve his understanding, planning
and organization.

.block 5
11.3  Albert's Work on Animation Projects.0

Work involving animation of different kinds was a major theme of Albert's
LOGO experience.  He began incorporating SPINs in his designs in the
second and third class.  In the seventh and eighth classes he developed
a "Starwars" project that involved using positive and negative SPINs to
draw a UFO orbiting around a planet.  This project also made use of
display commands, SNAP, DISPLAY and RUBDIS to create a shooting effect,
and to make the planet disappear.  In a later class he drew a car, and
animated it using SPIN and MOVET.  He then got very absorbed
in the process of designing tracks for the car to race on.  
Stil later, Albert animated a gocart using MOVET.  He had a major problem orienting
the TURTLE so that the car was drawn horizontally and moving 
horizontally from left to right.

In class nineteen Albert was given procedures to animate the TURTLE, and shown
how to write a procedure that would allow him to change the TURTLE's
motion by typing letters on the keyboard.  He was given the procedure
DT, and the idea for the procedure CHANGE.  (KEY was given to him as a
"primitive" which " sends a message to tell which key on the keyboard you typed.")  The
procedures were:

.nofill
.block 7
TO DT		TO CHANGE
10 MAKE "D 10	10 MAKE "LETTER KEY
20 PENUP	20 IF :LETTER = "R RIGHT 20
30 FORWARD :D	30 IF :LETTER = "L LEFT 20
40 CHANGE	40 IF :LETTER = "F MAKE "D :D+10
50 GO 30	50 IF :LETTER = "B MAKE "D :D-10
END		60 IF :LETTER = "C RCIRCLE 20
		END

.adjust
Albert himself chose the letters to use in CHANGE and decided what changes
would occur when those letters were typed.

Now Albert settled into an area that he could understand -- designing
racetracks for the moving TURTLE.  He designed several:  one was box
shaped, another oval, a third an oval with a figure eight in it.
Throughout Albert's work with animation it was clear that he was not
especially concerned with how the animation occurred, but rather with using the
animated object in a context of his own design.  Therefore the last
activity, where Albert was given procedures with which he could carry out
a variety of projects, was the most successful.  Although he could
explain how the procedures DT and CHANGE worked, he could not derive
similar ones himself.  He did change the effect, by editing
CHANGE several times to alter the angle turned, or the
amount the distance increased and decreased and to add a new procedure
which made the TURTLE jump instantaneously across the screen.
