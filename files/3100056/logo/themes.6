.xgp
.font 0 31vg
.font 1 31vgb
.font 2 31vgi
.ds
.ss
.he1
In Logo;Themes >
.he2
In place of 1.4

We present our findings in terms of a number of themes.

The first theme is a set of concerns about whether children can 
program computers. Clearly this cannot be formulated as a yes/no question.
If programming is trivialised sufficiently the answer is tautologously 
affirmative while if the criterion for what it is to program is made
sufficiently rigorous the answer would be almsot as clearly negative. A
better formulation would be to ask: what kinds of programming can be
done by various categories of children?  But to give an exhaustive answer to
such a question would be a momentous, and perhaps even definitionally 
impossible task. At best it isa question that can be answered only
through a lengthy social process of multiple experiments witrh different
contexts for programming. This study is a step in that direction. We
are possibly the first to have set up a well considered definition of
programming that was not dictated by the accident of a particulat programming
language simply being there and to have published (which we are hereby doing)
a detailed account of how
a widely representative group of children actually fared with it. This is
not the place to delve deeply into the philosophy of design of the
definition of programming  embodied in the learning goals listed above. For
such a discussion the reader musyt consult our theoretical writings
(LOGO memos published by the A.I.Laboratory at M.I.T.,and  a forthcoming
book Brainwaves:Children Computers and Powerful Ideas by S.Papert,
expected date February 1980) At most we can eneumerate a few design criteria:

.indent 6
.block 3
(1) As computer science has developed a certain number of powerful
ideas have come to be recognised in the field of programming. Amongst these are
the cluster of ideas related to the modularity of pure procedures,the
concept of top-down, "structured" programming etc. One of our criteria
has been to capture for children as many as possible of these powerful
ideas including, in particular, the example cited of procedural modularity.
Clearly we have not been able to capture all the powerful ideas of computer science! But we have made an attempt to capture some of them.

.block 3
(2) There has grown up in the "computer culture" a rich tradition of using
computational ideas as tools to think about other matters. For example 
cognitive science uses ideas from Artificial Intelligence to think about 
psychology. Another of our criteria has been to include in our defintion of
a kind of programming that would be good for children at least some
of those ideas that can be used as tools to think about other matters of
concern to chikldren and/or those charged with their eduactuion.n

.block 3
(3) Thirdly we refer to the "holding power" of programming. For many
people this activity has an exceptionally powerfuul quality of engagement
of attention. Although we do not do this without recognition that there is some
danger involved we believe that the search for the proper subset of programming knowledge to give children must take account of such affective criteria: what
kinds of programming will be most engaging for what categories of children.

.indent 0
With these remarks we come back to define our first theme more clearly. For
the purposes of this study we fixed on one particular  vision of programming.
Our concerns haveto do on the one hand with whether it does engage children,
with whether they learn to do it and on the other hand with whether what they
are learning is non-trivial, with whether it captures some of the intellectual
and aesthetic content of programming, with whether it leads on to greater things.

The last renmark brings us to the second theme. The relation between
learning to program and learning other areas of knowledge. In this study we have
picked one such area of knowledge: geomeetry. It is our contention that
computational concepts allow so,me essential parts of geometry to be captured
more concretely, more deeply and more intuitively than the traditional
conceptual frameworks. For example where Eucild uses the static concept of
a point we use the dynamic one of a turtle. This allows a moire direct and
intuitive access to formal gemetry.  Another, perghaps more immediate,
example is the differnce between the idea of angle in Euclidean geometry and
in turtle geometr. In the latter an angle is an action, an amount of turning,
something that you (the would-be geometer) can do with your own body or
with your mental body image.  Similarly the realtion
between mathemtaoics and physics becomes more immediate in this conceptual 
framework, for the Newtonian
particle turns out to be represeantable as a species of computaional turtle
sufficiently closely rekated to the geometry turtle for each to serve as
a means for thinking about the other.

The gerneral concept of thsi second thematic is that of synergistic domains
of knowledge.  It is our contention that LOGO and turtle geoemtry are synergistic
in the sense that it is easier to learn both together than to learn either
separately. And perahps the triplet geometry/physics/LOGO is even more
powerfully synergistic. How do we translate this concept into a resaerchable
question?

The third theme concerns just that question.Here we are concerned with the
development of a methodology of evaluation.
