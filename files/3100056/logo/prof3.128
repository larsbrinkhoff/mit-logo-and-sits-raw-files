.xgp
.font 0 31vg
.font 1 31vgb
.font 2 25vg
.tabfnt 2
.dummy @
.ss
.chap 3
.adjust
.ce
13. Darlene

0Darlene is a bright, quietly attractive student, who is considered
to have "above average" ability by her teachers.  Her most recent
achievement test scores place her in the 49th percentile as compared to
national norms.  Despite the potential perceived by her teachers, she 
does not seem to challenge
herself in school, or to respond to challenges from teachers.  As one
of her teachers put it: "Darlene always seems to exert herself to the
extent necessary to get a B, and no more. She does not push herself,
and is not concerned with doing the best she can."  Darlene's school
work is conscientiously neat and punctual, but not inspired.

Darlene exhibited much the same pattern in LOGO classes.  Her work was
characterized by a large number of short projects, usually involving
attractive geometric designs.  She very quickly learned a few key ideas
in LOGO programming and turtle geometry, and applied these ideas over
and over again in similar projects.  She tended to reject suggestions
that led to longer, more involved projects, or to more complex learnings.

Darlene had a lot of curiosity about the LOGO language, its commands
and error messages.  She often carried out "experiments" to test the
limits of the language, or the computer system.  She enjoyed examining
the work of other children, which she was able to understand by
printing out their procedures and stepping through them.  She also
became adept at the use of the LOGO filing system, and had several
files of her own, which she learned to manipulate expertly.

Darlene learned to use all of the system peripherals:  the floor turtle
(during the few days it was available), the printer, and especially the
plotter.  She devoted a fair amount of effort to making plotter
pictures of her designs, and using the plotter and printer output to
make neat, well organzed displays of her work.

Darlene had a desire to be self-sufficient in her work.  She usually
preferred to scrap a project with which she was having trouble, than to
debug it carefully or ask for help.  While she liked to learn new ideas
that would have immediate effects (such as the use of REPEAT or SPIN
comands) she rejected new ideas when they required a lot of
concentration, time to implement, or a difficult new syntax (such as
the use of variables).

.he2
Explorations with LOGO
.block 5
13.1 Darlene's Explorations with the LOGO Language and the Computer System

0Darlene exhibited a great deal of
curiosity about the workings of the LOGO language and the computer
system.  This sometimes took the form of trying to get the computer to
generate error messages, or to "printout" LOGO primitives.  She was
curious about the error messages generated by using alphanumeric and
non-alphanumeric characters.  When she received an error message she
often responded by carring out a series of experiments.  For example,
the following sequence; taken from Darlene's dribble file:

.NOFILL
.block 12
?65
YOU DON'T SAY WHAT TO DO WITH 65
?H65
YOU HAVEN'T TOLD ME HOW TO H65
?6 + 2
YOU DON'T SAY WHAT TO DO WITH 8
?6 + 2=
=NEEDS MORE INPUTS
?6 + 2 = 8
YOU DON'T SAY WHAT TO DO WITH "TRUE
?PR 6 + 2 = 8
8
=NEEDS MORE INPUTS

.adjust
In the same session, she generated the longest single "word" that the
computer would accept, typing random characters for twenty-one lines,
until the computer printed a "NO MORE STORAGE" error message.

In another session Darlene explored a rather confusing series of
errors.  Although she did not ask for help, and the teacher was not
directly aware of what she was trying to do at the time, we have
been able to reconstruct her mode of operation by a detailed analysis
of her dribble file:

.nofill
?TO &&**	Darlene is experimenting with non-alphanumeric
		procedure names 
* CAN'T BE AN INPUT
		Without understanding the message, she picks
		a new name, again non-alphanumeric
?TO &)&)
>10 FORWARD 12	Getting no error message, Darlene defines
>20 RIGHT 90	a procedure, using a familiar sequence of
>30 FORWARD 12	commands
>40 RIGHT 90
>50 FORWARD 12
>60 SPIN 100
>END
& DEFINED	Darlene noticed that the computer responded
		"& DEFINED" and used & as her procedure
?&		title, rather than &)&)
& NEEDS MORE INPUTS
		Noticing the error message, she now tries
		her original title, &)&)
?&)&)
UNEXPECTED RIGHT PARENTHESES
?ED &		Darlene realizes that something about her
		procedure needs to change, but she is not
>END		sure what to do, so types END, and tries
& DEFINED	some more experiments
?&
& NEEDS MORE INPUTS
		THis time she tries an "input"
?& '(
YOU HAVEN'T TOLD ME HOW TO '
		Tries a numerical input, but forgets to 
		leave a space
YOU HAVEN'T TOLD ME HOW TO &78
?& 56
& NEEDS MORE INPUTS
?POTS		Here Darlene gets another "clue" about
TO & ) & )	how the computer "thinks" &)&) should
		be typed
?TO & ) & )	She copies the computers version, including
		TO
YOU HAVE ALREADY TOLD ME HOW TO &
?ER & ) & )	Using the computer's version again
UNEXPECTED RIGHT PARENTHESES
?POTS
TO POLY :SIDE :ANGLE
		Darlene notices that despite the error
		message, & ) & ) has been erased.
?ER ALL		She clears the workspace and starts again
? READ "DEANNE >
?POTS
?TO POLY :SIDE :ANGLE
?TO &)&)	She tries again!
>10 FORWARD 12
>20 RIGHT 90
>30 FORWARD 12
>40 RIGHT 90
>50 FORWARD 12
>60 SPIN 100
>END
& DEFINED
TO & ) & )	Darlene doesn't even try & this time.
TO POLY :SIDE :ANGLE		
		When she sees that the computer has
		printed it out the same way, she knows it
		won't work, and just erases it.  This time
		she erases it using her version of the
		title, and checks, using POTS, to
		see if the procedure was erased.
?ER &)&)
UNEXPECTED RIGHT PARENTHESES
?POTS
TO POLY :SIDE :ANGLE
?TO TOO

.adjust
During this entire sequence, Darlene never asked for help, or mentioned
her difficulty.  Findly abandoning the struggle, she chose a more
conventional name for her procedure, TOO, and went back to her original
plan.  Her difficulties stemmed from two problems.  Not understanding
the special role of parentheses in LOGO, and being relatively
unfamiliar with variables.  One experiment she did not try was to
continue adding inputs, typing 8 58 58 58 for example,  
until the error message, "& NEEDS MORE INPUTS"
no longer occurred.  Perhaps a greater familiarity with multi-variable
procedures might have led her to that experiment.  At a minimum, she
probably learned that non-alphanumeric characters can cause
difficulties in procedure titles.  Her persistence, in exploring the
system on her own, without help, was characteristic of her work.

.he2
Use of Procedures
.block 5
12. Darlene's Use of Procedures

0Darlene had an excellent sense of a procedure as an entity.  She
began defining and repeating procedures in the first class.  When a
procedure that was supposed to make a "D", (see figure 3.1a): 
had a bug in it (see figure 3.1b), she immediately repeated the procedure four times,
until the shape "closed" (figure 3.1c).

.block 10
.sp 8
.ce
Figure 3.1

Making patterned procedures remained a major theme of Darlene's work.
Darlene was also able to establish a clear hierarchy in the use of
subprocedures.  In the fourth class, she made an experimental design
which she called STAIRS.  Having finished the design, she began
repeating it.  After a few repeats, she saw that it was going to
require a large number of repeats before it "closed".  She now began to
use the REPEAT command, finally determining that her figure closed
after 18 repeats of STAIRS.  She made this a procedure, and also
defined a procedure which would cause the whole shape to spin:

.page
.indent 6
.block 8
.NOFILL
TO STAR 		TO STARSPIN
10 REPEAT [STAIRS]18	10 SPIN 100
END			20 STAR
			END
.ce
Figure 3.2

.page
.adjust
.indent 0
This approach was a common one in Darlene's work:  make some kind of
original design, then repeat it until it makes a closed or complete
figure.  When Darlene made a design which included a SPIN command, she
quickly transformed it into a repeated spin with her second procedure.

.NOFILL
.BLOCK 10
TO POINT
10 FORWARD 70
20 RIGHT 67
30 FORWARD 2
40 RIGHT 67
50 FORWARD 56
60 SPIN 100
END
.ce
Figure 3.3

.block 8
TO ZIPPER
10 REPEAT [POINT]10
END
.sp 3
.ce
Figure 3.4

.adjust
The name, ZIPPER, came from the visual effect cause by the shape of the
module and the multiple spins.

In addition to having a clear sense of the hierarchical structure of
LOGO procedures, Darlene also understood how to break a long project
into shorter subprocedures, in order to simplify the construction
process.  Her procedure CAT, was made up of six subprocedures, each of
which had a clearly defined function:

.nofill
.block 11 
TO CAT
10 RIBIT 	;draws two circles
20 WEE		;moves the turtle to draw the first ear
30 EAR1		;draws the first ear
40 EAR2		;moves the turtle and draws the second ear
50 TURN		;moves the turtle to draw the tail
60 TAIL		;draws the tail
70 HIDETURTLE
END
.ce
Figure 3.5

.bl.adjust
At some point after finishing the CAT project, Darlene decided to carry
out a complex sequential Turtle Geometry project without using
subprocedures.  Her resulting procedure, CASTLE, included 63 steps
(numbered by fives) and was accomplished with a minimum of debugging.
.block 7
.sp 5
.ce
Figure 3.6

Darlene also enjoyed examining the work of other children.  She would
LOGIN with other children's names, read their files, and try out their
procedures.  She would expertly trace her way through a procedure
hierarchy to find out what each subprocedure did and how it worked.
Once she copied a set of procedures from her classmate, Betsy, expertly
changing each subprocedure name, so that Darlene's procedures produced
the same effect as Betsy's with different names:

.nofill
.BLOCK 24
TO BOX		TO PIG
10 RARC 49	10 RARC 49
20 LARC 49	20 LARC 49
30 RARC 49	30 RARC 49
40 LARC 49	40 LARC 49
END		END

TO RAY		TO GLASS
10 BOX		10 PIG
20 LEFT 180	20 LEFT 180
30 RIGHT 20	30 RIGHT 20
END		END

TO SUN		TO SMILE
10 LEFT 130	10 LEFT 130
20 PENUP	20 PENUP
30 FORWARD 180	30 FORWARD 180
40 RIGHT 130	40 RIGHT 130
45 PENDOWN	45 PENDOWN
50 REPEAT[RAY]9	50 REPEAT [GLASS]9
END		END
.ce
Figure 3.7

.page
.adjust
Although Darlene was expert at many aspects of LOGO she was confused by
variables, and although she carried out a number of projects involving
variables, she never made a consistent effort to understand either the
syntax or the use of variables.  Efforts to explain the use of
variables, and project suggestions that would have allowed her to
explore some simple uses of variables on her own, were met by Darlene
with a great deal of resistance.  It was not until the class began to
work on dynamics activities during the last two weeks, that Darlene
took a serious interest in variables.  At this point she wanted to
control the response of the DYNATURTLE to a KICK command.  Darlene was
given the procedure, COMMAND:

.nofill
.block 6
TO COMMAND
10 MAKE "LETTER KEY
20 IF :LETTER = "R RIGHT 30
30 IF :LETTER = "L LEFT 30
40 IF :LETTER = "K KICK 30
END

.adjust
Darlene's problem was to make the dynaturtle reach a target.  Many of
her strategies resulted in the TURTLE missing the target and drifting
off the screen (see Part II, Chapter 6, Dynamics, for more about
Darlene's work with dynaturtle).
To compensate for this
Darlene decided that if the kick had a stronger effect the turtle would
reach the target more easily.  After being shown the COMMAND procedure,
and experimenting with various inputs to KICK, she edited COMMAND to
include an additional line:

50 IF :LETTER = "F KICK 2000

Later, she tried to make the TURTLE move more slowly so that it could
land more softly on the target.  This time she added the instruction:
.br
60 IF :LETTER = "S KICK 10
.BR
In this way she began to understand  the use and syntax of
variables.

