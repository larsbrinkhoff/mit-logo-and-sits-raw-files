TITLE LOGO MONITOR 21
;02/02/71 (REEDIT)

;ACS
FF==0

A=1
B=2
C=3
D=4
E=5

TA=7
TB=10
TC=11
TD=12
TE=13

P=15

;FLAGS IN FF RT HALF
INTFLG==1	;SET MEANS PI IN PROG
PRTFLG==2	;SET IF EXECUTING QUIT-PROTECTED CODE

;I/O CHANNELS
TTICHN==1
TTOCHN==2
INFCHN==3	;INFERIOR OPENED FOR IMAGE BLOCK OUTPUT
DKICHN==4
INICHN==5	;INFERIOR OPENED FOR IMAGE UNIT INPUT

ZZ==.
LOC 41
	JSR UUOH
	JSR TSINT
LOC ZZ

PRINT=(1000)
IERROR=(2000)
ICOMM=(3000)

DEFINE INTERR COD
	IERROR +(SIXBIT /COD/)
TERMIN

DEFINE INTCOM COD
	ICOMM +(SIXBIT /COD/)
TERMIN
DEFINE PROTECT
	TRO FF,PRTFLG
TERMIN

DEFINE PROTEND
	TRZN FF,PRTFLG
	JRST KWTRET
TERMIN

PROTN==0
PDLL==100
PDL:	BLOCK PDLL+5
PATCH:	BLOCK 100
RINGI:	0	;POINTER TO STUFF GOING IN TO RING BUFFER
RINGO:	0	;POINTER TO STUFF COMING OUT OF RING BUFFER
RNGN==6
RNGSZ==<<1>_RNGN>
RNGMSK==RNGSZ-1
RING:	BLOCK RNGSZ

CMNDBL==100.	;COMMAND BUFFER LENGTH IN CHARACTERS
CMNDBF:	BLOCK CMNDBL/5+1

BUFLNG==200	;I/O BUFFER LENGTH
UBUF:	BLOCK BUFLNG

SIXWD:	0	;SIXBIT WD. FOR TYPEOUT, FOLLOW BY 0 WD.
BLANK:	0
SYL:	0	;SYLLABLE CONVERTED TO SIXBIT BY GETSYL
LPART:	0	;LETTER PART OF C(SYL)
SYLBP:	0	;HOLDS BYTE POINTER FOR SYLLABLE SCAN
CHARC:	0	;HOLDS CHARACTERCOUNT FOR SYLLABLE SCAN
STARTA:	0	;HOLDS STARTING ADDRESS OF INFERIOR
CNVRTF:	0	;NON-ZERO SUPPRESSES CNVRT ERROR MESSAGES (SET BY LCNVRT)
DEVFL:	0	;-1 MEANS DEVICE NAME, NOT LOGONAME, RECEIVED BY CNVRT
LSTCOM:	0	;LAST COMMAND LOOKED UP
GETCNT:	0	;NO. OF ARGS FETCHED BY GSYL, -1
INCAWS:	0	;CAUSE OF LAST INTERNAL ERROR INTERRUPT
INLOC:	0	;ITS LOCATION
INPDL:	0	; ... AND PDL POINTER

TRNBLK:
UNAM1:	0	;HOLDS MY UNAME
JNAME:	0	;HOLDS JNAME OF INFERIOR
	400003,,(SIXBIT /TTY/)	;ATOMIC, I/O
	SIXBIT /*/
	SIXBIT /*/
DEVICE:	0
	SIXBIT /*/
	SIXBIT /*/
TTIOP:	SIXBIT /   TTYLOGMOINPUT/
TTOOP:	SIXBIT /  !TTYLOGMONOUTPUT/
SBJBOP:	SIXBIT /  'USR/
UNAM2:	0
LNAME:	0
ININOP:	SIXBIT /  $USR/
UNAM3:	0
	0

MAXJOB==20
JOBTBL:	BLOCK MAXJOB+1	;FILED BY LOGO NAME, FROM 1 TO MAXJOB
	;ENTRIES CONTAIN FIELDS 111442333333
	;FIELD 3 (BITS 1.1 TO 2.9) IS DEVICE NAME IN SIXBIT (ALSO FLAG JOB EXISTS)
	;FIELD 4 (BITS 3.4-3.9) CONTAINS COUNT OF NUMBER OF REPEATED DEATHS RECENTLY
	;FIELD 2 (BITS 3.1 TO 3.3) IS INDEX OF INTERRUPT BIT
	;FIELD 1 (BITS 4.1-4.9) CONTAINS STATUS BITS
TIMTBL:	BLOCK MAXJOB+1	;MUST FOLLOW JOBTBL (SEE GO+1)
	;ENTRIES ARE .RDTIME WHEN THIS JOB LAST DIED
	;IF 0, HASN'T EVER DIED SINCE LOADED
NAMTBL:	BLOCK MAXJOB+1	;MUST FOLLOW TIMTBL (SEE GO+1)
	;ENTRIES ARE LOGO LOG-IN NAMES 

IBITBL:	BLOCK 8	;TABLE OF INT BITS, MUST FOLLOW TIMTBL (SEE GO+1)
	;EACH ENTRY CONTAINS INDEX INTO JOBTBL

IBIBP:	220300,,JOBTBL(B)	;INTERRUPT BIT INDEX BYTE POINTER
RPDBP:	250600,,JOBTBL(B)	;REPEATED DEATH FIELD BYTE POINTER

;STATUS BITS:
LODBIT==1000
TRNBIT==2000
RUNBIT==4000
RLDBIT==10000	;IN PROCESS OF RELOADING
ALLBIT==17000	;MASK WITH ALL STATUS BITS SET

NSUB:	0	;CONT. # OF SUB-JOBS NOT DISOWNED
INFOP:	0	;INDEX OF INFERIOR OPEN ON INFCHN
IMSK1:	261441	;ALL CLASS 2 INTERRUPTS + TTY
IMSK2:	0	;2ND INT. MASK WD (FOR INFERIORS)
ILLUUO:	0	;HOLDS PC AT ILLEGAL UUO
UUOH:	0
	PUSH P,A
	HLRZ A,40	;PICK UP UUO
	CAIN A,(PRINT)
	JRST PRIN
	CAIN A,(IERROR)
	JRST IERR
	CAIN A,(ICOMM)
	JRST ICOM
	MOVE A,UUOH
	MOVEM A,ILLUUO
	INTERR UUO:;ILLEGAL UUO

PRIN:	HRRZ A,40
	PUSHJ P,TYPASC
UUODIS:	POP P,A
	JRST @UUOH

;SEE ICOM BEFORE CHANGING IERR
IERR:	MOVEI A,[ASCIZ /
INTERNAL ERROR "/]
	PUSHJ P,TYPASC
	HRLZ A,40
	PUSHJ P,TYPSIX
	MOVEI A,[ASCIZ /", QUIT.
/]
	PUSHJ P,TYPASC
	.DISMIS [REGO1]

ICOM:	HRRZ A,IERR
	PUSHJ P,TYPASC
	HRLZ A,40
	PUSHJ P,TYPSIX
	PUSHJ P,TCR
	JRST UUODIS
GO:	SETZM IMSK2
	MOVSI A,-<MAXJOB*3>-9.	;CLEAR JOBTBL, TIMTBL, IBITBL, AND NAMTBL
	SETZM JOBTBL(A)
	AOBJN A,.-1
	SETZM NSUB
REGO:	SETZM RINGI
	SETZM RINGO
REGO1:	MOVE P,[-PDLL,,PDL-1]	;START HERE TO QUIT WITHOUT FLUSHING BUFFERED OUTPUT
	MOVEI FF,0
	SETZM INFOP
	MOVE A,IMSK1
	MOVE B,IMSK2
	.SETM2 A,
	.OPEN TTICHN,TTIOP
	.VALUE
	.OPEN TTOCHN,TTOOP
	.VALUE
	.SUSET [.RUNAME,,A]
	MOVEM A,UNAM1
	MOVEM A,UNAM2
	.SUSET [.SPICLR,,[-1]]	;TURN ON INTERRUPTS
;CONTROL DROPS OFF PAGE
;CONTROL DROPS IN
GETCOM:	SETOM GETCNT
	PUSHJ P,CHKTYO
	.IOT TTOCHN,["*]	;PROMPT CHARACTER
	MOVE B,INITBP	;GET COMMAND LINE
	MOVEI C,0
CHTYO:	MOVE A,RINGI	;CHECK FOR BUFFERED OUTPUT
	CAME A,RINGO	;(IF THIS CODE BETWEEN CHTYO AND TYI IS INTERRUPTED, RETURN TO CHTYO
	JRST TYO	; ... TO SEE IF OUTPUT HAS BEEN BUFFERED WHILE PI IN PROG)
TYI:	.IOT TTICHN,A
	CAIE A,^M	;IS IT CR OR LF
	CAIN A,^J
	JRST CRLF	;YES
	CAIN A,177	;IS IT RUBOUT?
	JRST RUBOUT	;YES
	CAIL C,CMNDBL	;DON'T STORE IF TOO LONG FOR BUFFER
	JRST CHTYO	;LINE TOO LONG, IGNORE REST (***MAY WANT TO CHANGE THIS***)
	IDPB A,B	;ELSE STORE
	AOJA C,CHTYO

INITBP:	440700,,CMNDBF

RUBOUT:	JUMPLE C,CHTYO	;IGNORE IF NONE TO RUB OUT
	LDB A,B	;ELSE ECHO RUBBED OUT CHAR
	.IOT TTOCHN,A
	ADD B,[070000,,0]	;AND BACK UP POINTER
	TLNE B,400000
	ADD B,[347777,,-1]
	SOJA C,CHTYO

CRLF:	JUMPE C,CHTYO	;IGNORE NULL COMMAND
	MOVE B,INITBP	;ELSE START COMMAND SCAN
	MOVEM B,SYLBP
	MOVEM C,CHARC
	PUSHJ P,GETSYL
	JRST GETCOM	;NULL COMMAND STRING, IGNORE
	MOVEI D,NCM-3	;LOOK UP COMMAND IN TABLE
	MOVEM A,LSTCOM	;HOLD LAST COMMAND
CMLL:	CAME A,CMNDS(D)	;IS IT LONG FORM?
	CAMN A,CMNDS+1(D)	; ... OR SHORT FORM?
	JRST @CMNDS+2(D)	;YES, DISPATCH
	SUBI D,3	;ELSE GO ON TO NEXT
	JUMPGE D,CMLL	; ... UNLESS ALL DONE
	PUSHJ P,TYPSIX	;NOT FOUND, TYPE ERROR COMMENT
	PRINT [ASCIZ / IS NOT A COMMAND.
/]
	JRST GETCOM
;GET SYLLABLE FROM COMMAND BUFFER
;RETURN SYLLABLE IN SIXBIT IN A
;RETURN "LETTER PART" IN TA
;RETURN OCTAL NUMBER IN TB AND DECIMAL IN TC
;USES CHARC AS COMMAND BUFFER CHARACTER COUNT
; ... AND SYLBP AS COMMAND BUFFER BYTE POINTER
;SKIPS UNLESS BUFFER EMPTY
GETSYL:	MOVE TA,[440600,,SYL]
	MOVE TD,[440600,,LPART]
	SETZB TB,SYL
	SETZB TC,LPART
GSYL1:	SOSGE TE,CHARC	;IF NO MORE INPUT,
	JRST SYLSP	; ... DONE
	ILDB A,SYLBP	;ELSE GET CHARS
	CAIN A," 	;SPACE
	JRST SYLSP
	SUBI A,40	;ELSE CONVERT TO SIXBIT
	JUMPL A,GSYL1	;IGNORE CONTROL CHARACTERS
	CAIL A,100	;CONVERT LOWER TO UPPER CASE
	SUBI A,40
	TLNE TA,770000	;STORE AS SIXBIT
	IDPB A,TA
	CAIL A,'0	;IS IT A NUMBER?
	CAILE A,'9
	JRST LET	;NO, LETTER
	ASH TB,3	;YES, BUILD OCTAL ...
	ADDI TB,-'0(A)
	IMULI TC,10.	; ... AND DECIMAL NUMBERS
	ADDI TC,-'0(A)
	MOVEI A,0	;STORE BLANK IN DIGIT FIELD
LET:	TLNE TD,770000
	IDPB A,TD
	JRST GSYL1

SYLSP:	SKIPE A,SYL	;PICK UP SYLLABLE
	JRST RETSYL	;NOT EMPTY, RETURN WITH SKIP
	JUMPGE TE,GSYL1	;EMPTY, IF THERE IS MORE GO GET IT
	POPJ P,	;NO MORE, RETURN W/O SKIP

RETSYL:	MOVE TA,LPART
POPJ1:	AOS (P)
	POPJ P,
;CALL WITH JSR, MUST BE USED AT TOP (GETCOM) LEVEL ONLY
;CALLS GETSYL AND RETURNS VALUE IF GETSYL SUCCEEDS
;AOS'ES GETCNT; IF GETSYL FAILS, THEN:
;  IF GETCNT WAS -1, PRINT "NEEDS ARGUMENT" MESSAGE
;  ELSE GO TO GETCOM
GSYL:	0
	AOS GETCNT
	PUSHJ P,GETSYL
	SKIPA
	JRST @GSYL	;SUCCESS, RETURN VALUE
	SKIPLE GETCNT	;WAS IT FIRST TIME?
	JRST GETCOM	; ...  IF NO, SILENTLY EXIT
	MOVE A,LSTCOM	;YES, GET LAST COMMAND FOR ERROR COMMENT
	PUSHJ P,TYPSIX
	PRINT [ASCIZ / NEEDS AN ARGUMENT
/]
	JRST GETCOM
;TO BE CALLED RIGHT AFTER GETSYL SUCCEEDS (ARGS IN A, TA - TC)
;CONVERT SIXBIT LOGO OR TTY NAME IN A TO:
;1.  LOGO INDEX IN B
;2.  DEVICE NAME IN A
;SKIPS IF NAME LEGAL AND JOB EXISTS
;IF NO SKIP, THE FOLLOWING ERROR CODES ARE IN B
;(CNVRT PRINTS THE COMMENT, LCNVRT DOES NOT)
;INDEX OF FREE JOB, >0:  NAME USED BY NO JOB
;0:  NAME DOES NOT EXIST
;-1:  NAME USED BY NO JOB (ALSO NO FREE JOB)
;-2:  NAME NOT A LEGAL LOGO NAME
;-3  NAME NOT A LEGAL DEVICE NAME
;-4;  NAME NOT A LEGAL LOGO OR DEVICE NAME
LCNVRT:	AOSA CNVRTF	;SUPPRESS ERROR COMMENT
CNVRT:	SETZM CNVRTF
	PUSH P,C
	PUSH P,C
	CAMN TA,[SIXBIT /T/]
	JRST TNM
	CAMN TA,[SIXBIT /L/]
	JRST LNM
	CAMN TA,[SIXBIT /LOGO/]
	JRST LNM
	CAMN A,[SIXBIT /TTY/]
	JRST ODEV
	CAMN A,[SIXBIT /NUL/]
	JRST ODEV
	JRST CERR-4	;ERROR -4, BAD NAME

LNM:	SETZM DEVFL	;NOTE LOGONAME, NOT DEVICE NAME, TYPED
	CAILE TC,0	;IS INDEX OK?
	CAILE TC,MAXJOB
	JRST CERR-2	;ERROR -2, BAD LOGO INDEX
	HRLZ TA,JOBTBL(TC)	;GET CORRESP. DEVICE
	JUMPE TA,CERR-0	;ERROR 0, NO SUB JOB
	MOVE B,TC
	MOVE A,TA
	JRST CNVSKP

TNM:	TLNE A,77	;CHECK T NAME LONG ENOUGH
	TRNE A,-1	;BUT NOT TOO LONG
	JRST CERR-3	;ERROR -3, NOT LEGAL DEVICE NAME
ODEV:	SETOM DEVFL	;NOTE DEVICE NAME, NOT LOGONAME, TYPED
	MOVS A,A	;GET DEVICE NAME IN RT. HALF
	MOVNI B,1	;SET DEFAULT C(B)
	MOVEI D,MAXJOB	;SCAN FOR DEVICE IN USE
DEVSCN:	SKIPN C,JOBTBL(D)	;GET ENTRY AND CHECK IF 0
	MOVE B,D	;0, UNUSED, SAVE INDEX
	CAIN A,(C) 	;CHECK IF DEVICE MATCH
	JRST DEVDB	;DEVICE ALREADY IN USE
	SOJG D,DEVSCN	;LOOP TILL ALL CHECKED
	SKIPE CNVRTF	;NOT FOUND, FAIL
	JRST POPDCJ
	MOVS A,A
	PUSHJ P,TYPSIX
	MOVE A,NOJOB
	JRST CEND
	REPEAT 4,JSP B,CERR+1
CERR:	JSP B,CERR+1
	HRREI B,-.(B)
	SKIPE CNVRTF
	JRST POPDCJ
	PUSHJ P,TYPSIX
	MOVEI A,@CERRT(B)
CEND:	PUSHJ P,TYPASC
	JRST POPDCJ

DEVDB:	MOVE B,D
CNVSKP:	AOS -2(P)
POPDCJ:	POP P,D
	POP P,C
	POPJ P,

	[ASCIZ / NOT A LEGAL LOGO OR DEVICE NAME
/]
NOLOG:	[ASCIZ / NOT A LEGAL DEVICE NAME
/]
	[ASCIZ / NOT A LEGAL LOGO NAME
/]
NOJOB:	[ASCIZ / USED BY NO JOB
/]
CERRT:	[ASCIZ / DOES NOT EXIST
/]
;OPEN INFERIOR INDEX B IF IT IS NOT ALREADY OPEN
;CAN BE USED ONLY IF SUB JOB ALREADY EXISTS
OPENI:	CAMN B,INFOP	;IS INFERIOR ALREADY OPEN?
	POPJ P,	;YES, NEED NO ACTION
	SKIPN JOBTBL(B)	;CHECK JOB EXISTS
	INTERR NSJ:;NO SUB JOB
	PUSH P,D	;NO, OPEN IT
	PUSHJ P,SETLNM
	MOVEM D,LNAME
	.OPEN INFCHN,SBJBOP
	INTERR COI:;CAN'T OPEN INFERIOR
	MOVEM B,INFOP
POPDO:	POP P,D
	POPJ P,

;OPEN INF. FOR UNIT INPUT (ASSUME OPENI PREV. CALLED)
OPENIN:	MOVE A,[UNAM2,,UNAM3]
	BLT A,UNAM3+1
	.OPEN INICHN,ININOP
	INTERR NII:;NO INPUT FROM INFERIOR POSSIBLE
	POPJ P,

;PRINT 2 NAMES OF LOGO OF INDEX B
P2NMS:	PUSH P,A
	PUSH P,D
	PUSHJ P,SETLNM
	MOVE A,D
	PUSHJ P,TYPSIX
	MOVEI A,[ASCIZ / (/]
	PUSHJ P,TYPASC
	HRLZ A,JOBTBL(B)
	PUSHJ P,TYPSIX
	MOVEI A,[ASCIZ /)/]
	PUSHJ P,TYPASC
	POP P,D
	JRST POPAJ
DEFINE CM LF,SF,ADR
	SIXBIT /LF/
	SIXBIT /SF/
	ADR
TERMIN

CMNDS:	;LIST OF ALL COMMANDS
	CM LOAD,L,LOGOL
	CM STOP,S,STOPL
	CM KILL,K,KILL
	CM DDT,Q,DDTGO
	CM PROCEE,P,PROC
	CM STATUS,ST,STATUS
	CM LISTC,?,LISTCM
;ADD COMMANDS HERE BY "CM LONGFORM,SHORTFORM,ADDRESS"
;NOTHING ELSE NEED BE CHANGED
NCM==.-CMNDS	;# OF COMMANDS TIMES 3

LOGOL:	JSR GSYL
	PUSHJ P,LCNVRT	;LOOK UP
	SKIPA	;SHOULD FAIL TO FIND JOB
	JRST JEXIST	;ALREADY EXISTS, GO FIGURE OUT WHAT HAPPENED
	JUMPLE B,BADLOD
	MOVE TC,NSUB	;# OF SUB JOBS
	CAIL TC,8
	JRST TOOMAN
	.SUSET [.RTTY,,TC]	;GET COSOLE TTY NUMBER
	CAMN TA,[SIXBIT /T/]	;WAS TTY ASKED FOR BY NUMBER?
	CAIE TB,(TC)	;YES, SAME AS CONSOLE? (OCTAL # STILL IN TB)
	JRST MAKJOB	;NO, HE WINS
	HRLZ A,A	;YES, GET TTY NAME IN LEFT HALF FOR ERROR COM.
	PRINT [ASCIZ /REFER TO YOUR OWN TERMINAL AS "TTY", NOT AS "/]
	PUSHJ P,TYPSIX
	PRINT [ASCIZ /"
(LOGO NOT LOADED)
/]
	JRST GETCOM

JEXIST:	SETCM TA,JOBTBL(B)	;GET JOBTBL ENTRY COMPLEMENTED
	TLNE TA,RUNBIT+TRNBIT+LODBIT	;IS IT FULLY LOADED AND RUNNING?
	JRST RELOG	;NO, RE-LOAD
	PUSHJ P,P2NMS	;ALREADY GOING
PRINT [ASCIZ / ALREADY LOADED AND RUNNING
/]
	JRST LOGOL
	
RELOG:	MOVSI TA,RUNBIT+TRNBIT+LODBIT
	ANDCAM TA,JOBTBL(B)
	JRST LODJOB
;LOAD ARGUMENT IS NOT A GOOD UNUSED DEVICE NAME
BADLOD:	MOVE A,SYL	;RE-GET SYLLABLE IN CASE CLOBBERED BY JOB INDEX
	PUSHJ P,TYPSIX
	MOVEI A,@LERRT(B)
	PUSHJ P,TYPASC
	JRST GETCOM

	@NOLOG
	@NOLOG
	[ASCIZ / IS A (BAD) LOGONAME
USE A DEVICE NAME WITH LOAD
/]
	[ASCIZ / LOGONAMES USED UP
/]
LERRT:	[ASCIZ / IS A LOGONAME
USE A DEVICE NAME WITH LOAD
/]

TOOMAN:	PRINT [ASCIZ /8 LOGOS MAX., CAN'T LOAD
/]
	JRST GETCOM

JOBE1:	PRINT [ASCIZ /CAN'T GET JOB
/]
	JRST GETCOM

;LOGO INDEX IN B, DEVICE NAME IN RH(A)
MAKJOB:	PUSHJ P,SETLNM
	MOVEM D,LNAME
	.OPEN INFCHN,SBJBOP
	JRST JOBE1
	PROTECT
	AOS NSUB	;COUNT JOB
	MOVEM B,INFOP	;NOTE INFERIOR OPENED
	HRRZM A,JOBTBL(B)	;(THIS IS FLAG THAT JOB EXISTS)
	SETZM TIMTBL(B)
	.USET INFCHN,[.RINTB,,C]	;GET BIT USED TO INTERRUPT SUPERIOR
	JFFO C,.+2
	INTERR NIB:;NO INTERRUPT BIT RETURNED BY NEWLY OPENED INFERIOR
	MOVEI D,-10.(D)	;CONVERT TO INDEX (0-7)
	DPB D,IBIBP	;STORE INDEX
	MOVEM B,IBITBL(D)	;STORE POINTER IN IBITBL
	IORM C,IMSK2	;ENABLE INTERRUPTS FROM IT
	.SUSET [.SMSK2,,IMSK2]
	PROTEND
LODJOB:	PUSHJ P,OPENI
	PUSHJ P,LOAD
	JRST GETCOM	;LOAD FAILED
	JRST LODED
LOAD:	PUSH P,A
	PUSH P,B
	PUSH P,C
	PUSH P,D
	PUSH P,E
	.OPEN DKICHN,LOGOP
	JRST LOF

ALDO:	JSP E,GTWD	;READ BEGIN FILE
	JUMPE B,PURE	;PURE PROCEDURE !!
	CAME B,[JRST 1]	;CHECK FOR END OF LOADER
	JRST .-1	;NO, SCAN TO END OF LOADER

ALD1:	JSP E,GTWD	;GET CTL WD
	JUMPGE B,ALDJ	;JRST OR CTL
	MOVE C,B	;-N,,ADR
ALD2:	MOVE D,B
	CAMGE B,[-BUFLNG,,]	;CHECK FIT IN BUFF
	HRLI B,-BUFLNG	;USE OWN SIZE
	HRRI B,UBUF	;INBUFFER
	JSR ALDRD	;GET BLOCK
	MOVEI A,(D)
	.ACCESS INFCHN,A	;BEGIN OUTPUT AT LD ADR
	MOVE A,B
	.IOT INFCHN,A	;MOVE BLOCK THERE
	SUB B,[-1,,]
	SUB B,D		;CHECK IF MORE IN LD BLK
	JUMPL B,ALD2	;GET ANOTHR BUFF
	JSP E,GTWD	;END BLOCK, GET SUM
	CAMN C,B	;CHECK
	JRST ALD1	;LOAD NEXT BLK
	JRST CKSUM

ALDJ:	HRRZM B,STARTA	;START IN FILE
	.ACCESS INFCHN,[100]
	MOVE E,[-1,,[-1]]
	.IOT INFCHN,E
	JRST LODD

ALDRD:	0
	MOVE A,B
	JSP E,GTWD1	;READ BUFF
	MOVE A,B
	ROT C,1		;ACCUM CHECK SUM
	ADD C,(A)
	AOBJN A,.-2	;FOR WHOLE BUFF
	JRST @ALDRD

GTWD:	HRROI A,B	;SINGLE WORD TO B
GTWD1:	.IOT DKICHN,A	;BLOCK IN
	JUMPL A,EOF	;UNABLE TO READ DESIRED CT
	JRST (E)

PURE:	.CALL CBLK	;GET SYSTEM TO LOAD THIS PURE PROCEDURE
	JRST CBK
	JRST ALD1

CBLK:	400000,,0
	SIXBIT /LOAD/
	[INFCHN]
	400000,,[DKICHN]
EOF:	PRINT [ASCIZ /END OF FILE WHILE LOADING
/]
	JRST NOLO

LOF:	PRINT [ASCIZ /
LOAD OPEN FAILED/]
	JRST NOLO

CKSUM:	PRINT [ASCIZ /
CHECKSUM ERROR/]
	JRST NOLO

CBK:	PRINT [ASCIZ /
PURE-PROCEDURE LOAD FAILED/]
NOLO:	PRINT [ASCIZ /
LOGO NOT LOADED
/]
	.CLOSE DKICHN,
	JRST POPEJ

LODD:	AOS -5(P)
POPEJ:	POP P,E
POPDJ:	POP P,D
POPCJ:	POP P,C
POPBJ:	POP P,B
POPAJ:	POP P,A
POPJP:	POPJ P,

;B HAS INDEX, A DEVICE
LODED:	.USET INFCHN,[.SUPC,,STARTA]	;SET HIS START ADDRESS
	HRLZI TA,LODBIT
	IORM TA,JOBTBL(B)
TRNSLT:	PUSHJ P,OPENI
	PUSHJ P,SETLNM	;SET LOGONAME FOR TRANSLATION
	MOVEM D,JNAME
	CAIN A,(SIXBIT /TTY/)
	JRST GIVTTY
	MOVEM A,DEVICE
	.TRANAD TRNBLK
	JRST TRANER
	PROTECT
	MOVSI TA,TRNBIT
	IORM TA,JOBTBL(B)
	PROTEND

STRTI:	PUSHJ P,OPENI
	.USET INFCHN,[.SUSTP,,BLANK]	;START HIM
	.ACCESS INFCHN,[100]
	.IOT INFCHN,[-1,,[-1]]	;SET MONCOM NON-ZERO
	PROTECT
	MOVSI TA,RUNBIT
	IORM TA,JOBTBL(B)
	PROTEND
	PUSHJ P,P2NMS
PRINT [ASCIZ / LOADED
/]
	JRST LOGOL
STOPL:	JSR GSYL
	PUSHJ P,CNVRT
	JRST GETCOM
	PUSHJ P,OPENI
	MOVE A,JOBTBL(B)
	TLNN A,RUNBIT	;IS IT RUNNING?
	JRST RUNNO	;NO, PRINT COMMENT
	.USET INFCHN,[.SUSTP,,[-1]]
	PROTECT
	MOVSI TA,RUNBIT
	ANDCAM TA,JOBTBL(B)
	PROTEND
	PUSHJ P,P2NMS
	PRINT [ASCIZ / STOPPED
/]
	JRST STOPL

RUNNO:	.USET INFCHN,[.SUSTP,,[-1]]	;STOP IT AGAIN JUST IN CASE
	PUSHJ P,P2NMS
	PRINT [ASCIZ / WAS ALREADY STOPPED
/]
	JRST STOPL

KILL:	JSR GSYL
	PUSHJ P,CNVRT
	JRST GETCOM
	PUSHJ P,OPENI
	.UCLOSE INFCHN,
	PROTECT
	LDB A,IBIBP	;GET INDEX TO IBITBL
	MOVE TA,IBITS(A)
	ANDCAM TA,IMSK2	;DISABLE IT
	.SUSET [.SMSK2,,IMSK2]
	SETZM IBITBL(A)
	MOVE A,JOBTBL(B)
	TLNN A,TRNBIT	;WAS IT TRANSLATED?
	JRST FLSH	;NO, JUST FLUSH
	HRRZ A,A	;YES, MUST FLUSH TRANS.
	CAIN A,(SIXBIT /TTY/)	; ... UNLESS DEVICE IS TTY
	JRST TTYBK	;IF SO, GET IT BACK
	PUSHJ P,SETLNM	;MUST FLUSH TRANSLATION TOO
	MOVEM D,JNAME
	MOVEM A,DEVICE
	.TRANDL TRNBLK
	INTCOM UTF:;UNTRANSLATION FAILED
FLSH:	SETZM JOBTBL(B)
	SETZM NAMTBL(B)
	SOSGE NSUB
	INTCOM NJW:;NUMBER OF JOBS WRONG, NSUB WENT -
	PROTEND
	PUSHJ P,P2NMS
	PRINT [ASCIZ / DESTROYED
/]
	JRST KILL

IBITS:	(200)?(100)?(40)?(20)?(10)?(4)?(2)?(1)
TTYBK:	.DTTY INFCHN,
	INTCOM KCD:;KILL CAN'T DTTY
	JRST FLSH
DDTGO:	.VALUE [ASCIZ //]	;VALRET A PROCEED
	JRST GETCOM	;AND DO SO

PROC:	JSR GSYL
	PUSHJ P,CNVRT
	JRST GETCOM
	PUSHJ P,OPENI
	MOVE TA,JOBTBL(B)
	TLNN TA,LODBIT	;IS HE LOADED?
	JRST PROCL
	HRRZ TB,TA
	CAIN TB,(SIXBIT /TTY/)
	JRST PRCTTY
PROCON:	.USET INFCHN,[.SUSTP,,BLANK]	;YES, START HIM IN CASE
	PROTECT
	TLOE TA,RUNBIT	;WAS HE RUNNING?
	SKIPA A,[[ASCIZ / IS ALREADY RUNNING
/]]
	MOVEI A,[ASCIZ / RESTARTED
/]
	HLLM TA,JOBTBL(B)	;SET RUN FLAG
	PROTEND
	PUSHJ P,P2NMS
	PUSHJ P,TYPASC
	JRST PROC

PROCL:	PUSHJ P,P2NMS
	PRINT [ASCIZ / NOT LOADED
/]
	JRST GETCOM

GIVTTY:	PUSH P,UNAM1	;MAKE SURE NO OLD ENTRY
	SETZM UNAM1
	.TRANDL TRNBLK
	INTCOM AIE:;ABSOLUTELY IMPOSSIBLE ERROR, TRANDL MUST SKIP IN THIS CASE
	POP P,UNAM1
	.ATTY INFCHN,
	INTERR CAT:;	CAN'T ASSIGN TTY, INFCHN NOT OPEN
	PROTECT
	MOVSI TA,TRNBIT	;SET BIT ANYWAY - MEANS TTY GIVEN
	IORM TA,JOBTBL(B)
	PROTEND
	.USET INFCHN,[.SUSTP,,BLANK]	;START HIM
	PROTECT
	MOVSI TA,RUNBIT
	IORM TA,JOBTBL(B)
	PROTEND
	JRST LOGOL

PRCTTY:	.ATTY INFCHN,
	INTERR CPT:;CAN'T PROCEDE WITH TTY
	PROTECT
	TLO TA,TRNBIT	;SET BIT ANYWAY - MEANS TTY GIVEN
	PROTEND
	JRST PROCONLISTCM:	PRINT [ASCIZ /LIST OF COMMANDS:
/]
	MOVSI B,-NCM/3
LSTCL:	PUSHJ P,CHKTYO
	MOVE A,CMNDS(B)
	PUSHJ P,TYPSIX
	PRINT [ASCIZ / = /]
	MOVE A,CMNDS+1(B)
	PUSHJ P,TYPSIX
	PUSHJ P,TCR
	ADDI B,2
	AOBJN B,LSTCL
	JRST GETCOM

STATUS:	PUSHJ P,GETSYL	;GET AN ARGUMENT
	JRST JOBS	;NONE, LIST ALL
	JRST STEN

STAT1:	PUSHJ P,GETSYL	;GET NEXT ARGUMENT
	JRST GETCOM	;NO MORE, DONE
STEN:	PUSHJ P,CNVRT
	JRST STAT1	;DON'T QUIT FOR FAILURES
	MOVE TA,JOBTBL(B)
	PUSHJ P,PJOB	;PRINT IT
	JRST STAT1

JOBS:	PRINT [ASCIZ /LIST OF JOBS (R = RUNNING):
/]
	MOVE B,[-MAXJOB,,1]
JOBSL:	PUSHJ P,CHKTYO	;DON'T STOP INTERRUPT TYO TOO LONG
	SKIPE TA,JOBTBL(B)
	PUSHJ P,PJOB
	AOBJN B,JOBSL
	JRST GETCOM

PJOB:	MOVEI A,[ASCIZ /  /]
	TLNE TA,RUNBIT
	MOVEI A,[ASCIZ /R /]
	PUSHJ P,TYPASC
	PUSHJ P,P2NMS
	PRINT [ASCIZ / /]
	MOVE A,NAMTBL(B)	;PRINT LOGIN NAME
	PUSHJ P,TYPSIX
	PUSHJ P,TCR
	POPJ P,
TRANER:	PRINT [ASCIZ /TRANSLATION FAILED.
/]
	JRST GETCOM

;CONVERT LOGO INDEX IN RH(B) INTO FULL LOGONAME IN D
SETLNM:	PUSH P,B
	PUSH P,C
	MOVEI D,0
	HRRZ B,B
LNML:	IDIVI B,10.
	ADDI C,'0
	ROTC C,-6
	JUMPN B,LNML
	MOVE C,[SIXBIT /  LOGO/]
	ROTC C,-6*4
POPCBJ:	POP P,C
	POP P,B
	POPJ P,

;TYPE ASCIZ STRING STORED AT C(A)
TYPASC:	TRNE FF,INTFLG
	JRST STRASC
ASCAD:	PUSH P,A
	HRLI A,440700
ASCLP:	ILDB TA,A
	JUMPE TA,POPAJ
	.IOT TTOCHN,TA
	JRST ASCLP

STRASC:	PUSH P,A
	HRLI A,ASCCD
	PUSHJ P,RNGIN
	JRST POPAJ

TYPSIX:	TRNE FF,INTFLG
	JRST STRSIX
SIXAD:	MOVEM A,SIXWD
	PUSH P,B
	MOVE A,[440600,,SIXWD]
SIXLP:	ILDB B,A
	JUMPE B,ENDSIX
	ADDI B,40	;TO ASCII
	.IOT TTOCHN,B
	JRST SIXLP

ENDSIX:	POP P,B
	MOVE A,SIXWD
	POPJ P,

STRSIX:	TLNE A,770000	;MAKE SURE FIRST CHAR NOT 0
	PUSHJ P,RNGIN
	POPJ P,
TCR:	PUSH P,A
	MOVEI A,[ASCIZ /
/]
	PUSHJ P,TYPASC
	JRST POPAJ

CHKTYO:	MOVE A,RINGI	;BUFFERED OUTPUT WAITING?
	CAMN A,RINGO
	POPJ P,	;NO, NO ACTION
	PUSHJ P,TYO1
	JRST CHKTYO

;COME HERE IF OUTPUT TO BE DONE
TYO:	PUSH P,[CHTYO]	;ENTRY WHICH SETS RET. ADDR FOR POPJ
TYO1:	PUSHJ P,RNGOUT
	TLNE A,770000
	JRST SIXAD
	HLRZ TA,A
	CAIGE TA,OUTMAX
	JRST @DISPTB(TA)
	INTCOM TYO:;TYO ERROR, BAD CODE IN RING BUFFER
	MOVEI A,BLANK
	JRST ASCAD

DEFINE OSUBR NM
NM!CD==.-DISPTB
	NM!AD
TERMIN

DISPTB:	IRP NAM,,[ASC]
	OSUBR NAM
	TERMIN
OUTMAX==.-DISPTB

;PUT C(A) IN RING BUFFER
;EXECUTED ONLY AT INTERRUPT LEVEL, CANNOT BE INTERRUPTED
RNGIN:	PUSH P,B
	PUSH P,C
	AOS B,RINGI	;GET AND INCREMENT POINTER
	MOVE C,B	;HOLD IT
	ANDI B,RNGMSK
	MOVEM A,RING(B)	;STORE GOODIES
	SUB C,RINGO
	CAILE C,RNGSZ	;CHECK IF RING FULL
	AOS RINGO	;YES, DON'T LET POINTERS PASS
	JRST POPCBJ

;GET A WORD OUT OF RING
RNGOUT:	AOS TA,RINGO	;RNGIN DURING NEXT 2 INSTR CAUSES TROUBLE
	ANDI TA,RNGMSK	; ... IF BUFFER FULL
	MOVE A,RING(TA)
	POPJ P,
TSINT:	0	;MASK WORD HERE
	0	;DISMISSAL LOCATION
	PUSH P,40
	PUSH P,UUOH
	PUSH P,A
	PUSH P,D	;USED BY SETLNM
	TRO FF,INTFLG
	SKIPGE A,TSINT	;IS IT AN INFERIOR?
	JRST INFINT	;YES, TAKE CARE OF IT
	TRZN A,1	;MY INTERRUPT, TTY?
	JRST UI1	;UNDEFINTED INTERRUPT, WORD 1
	MOVEI A,TTICHN	;CHARACTER, CHECK FOR QUIT
	.ITYIC A,	;GET IT
	INTERR NCI:;NO CHARACTER AT INTERRUPT LEVEL
	CAIN A,^G
	JRST KWIT

DISMIS:	TRZ FF,INTFLG
	MOVEI D,CHTYO
	HRRZ A,TSINT+1	;WHERE WERE WE TRAPPED FROM?
	CAILE A,CHTYO	;IF NOT BETWEEN CHTYO AND TYI
	CAILE A,TYI
	SKIPA	;NORMAL DISMISSAL
	MOVEM D,TSINT+1	;ELSE DISMIS TO CHTYO
	POP P,D
	POP P,A
	POP P,UUOH
	POP P,40
	.DISMIS TSINT+1

UI1:	MOVEM A,INCAWS
	MOVE TA,TSINT+1
	MOVEM TA,INLOC
	MOVEM P,INPDL
	TRNE A,40
	INTERR IIN:;ILLEGAL INSTRUCTION
	TRNE A,400
	INTERR IOC:;IOC CHANNEL ERROR
	TRNE A,1000
	INTERR MPI:;MEM. PROT. VIOLATION WHEN REFERENCING INFERIOR
	TRNE A,20000
	INTERR MPV:;MEM PROT. VIOL.
	TRNE A,40000
	INTERR MAR:;MAR INTERRUPT (SCREWY, SINCE MAR NEVER SET
	TRNE A,200000
	INTERR PDL:;PDL OVERFLOW
	INTERR RWI:;REALLY WEIRD INTERRUPT
;INFERIOR TROUBLE
INFINT:	TLZ A,400000	;FLUSH FIRST BIT
	PUSH P,B
MORINT:	JFFO A,.+2
	INTERR IBL:;INFERIOR BIT LOST
	MOVEI B,-10.(B)
	CAILE B,7	;CHECK INT. IS REASONABLE (SHOULD BE 0-7)
	INTERR BII:;BAD INFERIOR INTERRUPT
	ANDCM A,IBITS(B)	;TURN OFF THAT BIT
	PUSH P,A	;SAVE TO SEE IF MORE LATER
	SKIPG B,IBITBL(B)
	INTERR UI2:;UNIDENTIFIED INTERRUPT, WORD 2
	PUSHJ P,OPENI	;OPEN INFERIOR
	MOVE A,JOBTBL(B)
	TLZE A,RLDBIT	;TURN OFF RELOAD BIT
	JRST RLDINT
	.USET INFCHN,[.RPIRQC,,A]	;DETERMINE CAUSE OF INTERRUPT
	TRZE A,2	;IS IT CONTROL Z?
	JRST CONZ	;YES
	TRZE A,200	;NO, IS IT .VALUE?
	JRST VALEX	;YES, CHECK IF "GOODBYE" OR NAME CALL
TRBL:	SKIPE TIMTBL(B)	;HAS THIS JOB DIED BEFORE?
	JRST PRVDIE	;YES
FRSTDI:	MOVEI A,RSTTRB	;SET TO TYPE OUT "TROUBLE" COMMENT ON LOGO CONSOLE
	HRRM A,RLDCOM
	MOVEI A,[ASCIZ / HALTED
/]
RELOD:	.USET INFCHN,[.SUSTP,,[-1]]
	.USET INFCHN,[.SPIRQC,,BLANK]
	.USET INFCHN,[.SPICLR,,[-1]]
	.USET INFCHN,[.SIFPIR,,BLANK]
	.USET INFCHN,[.SMASK,,BLANK]
	.USET INFCHN,[.SMSK2,,BLANK]
	PUSHJ P,TCR
	PUSHJ P,P2NMS
	PUSHJ P,TYPASC
	MOVSI A,ALLBIT-TRNBIT	;TURN OFF ALL FLAGS EXCEPT TRANSLATION, WHICH IS STILL THERE
	ANDCAM A,JOBTBL(B)
	MOVSI A,RLDBIT	;AND TURN ON RELOAD BIT
	IORM A,JOBTBL(B)
	SETZM NAMTBL(B)
	.RDTIME A,	;GET TIME OF DEATH
	MOVEM A,TIMTBL(B)	; ... AND HOLD
	LDB A,RPDBP	;INCREMENT REPEATED DEATH COUNTER
	AOJ A,
	DPB A,RPDBP
	.ACCESS INFCHN,[RSTAC]
	MOVE A,RSTBLK
	.IOT INFCHN,A
	.USET INFCHN,[.SUPC,,[RSTST]]
	JRST RLDDIS
.RVALUE==1
VALEX:	.USET INFCHN,[.RSV40,,A]
	CAMN A,[.VALUE 101]	;IS IT A NAME CALL?
	JRST NAMCAL	;YES
	JUMPE A,TRBL	;NO, SOME SORT OF ERROR?
	SETZB A,TIMTBL(B)	;NO, GOODBYE, RELOAD A FRESH ONE
	DPB A,RPDBP	;(CLEAR PREVIOUS DEATH STUFF)
	MOVEI A,RSTBYE	;SET UP TO TYPE "GOODBYE" MESSAGE ON LOGO CONSOLE
	HRRM A,RLDCOM
	MOVEI A,[ASCIZ / TYPED "GOODBYE"
/]
	JRST RELOD

RLDINT:	PUSHJ P,P2NMS
	PUSH P,A
	.USET INFCHN,[.RUPC,,A]
	HRRZ A,A	;FLUSH FLAG BITS
	CAIE A,RSTOK+1
	JRST BRI	;BAD RELOAD INTERRUPT
	POP P,A
	TLO A,LODBIT+RUNBIT	;TURN ON LOD AND RUN
	HLLM A,JOBTBL(B)
	PRINT [ASCIZ / RELOADED
/]
	.USET INFCHN,[.SUPC,,STARTA]
RLDDIS:	.USET INFCHN,[.SUSTP,,BLANK]
NORLD:	.USET INFCHN,[.SPIRQC,,BLANK]
	POP P,A
	JUMPN A,MORINT
	POP P,B
	JRST DISMIS

BRI:	CAIN A,RSTDMP+1
	PRINT [ASCIZ / CAN'T RELOAD
/]
	CAIN A,RSTTY+1
	PRINT [ASCIZ / CAN'T GET OUTPUT DEVICE
/]
	CAIN A,RSTNOP+1
	PRINT [ASCIZ / CAN'T OPEN RELOAD FILE
/]
	PRINT [ASCIZ / (NOT RELOADED)
/]
	POP P,A
	TLZ A,LODBIT+RUNBIT
	HLLM A,JOBTBL(B)
	JRST NORLD
NAMCAL:	PUSHJ P,OPENIN	;OPEN CHANNEL FOR INPUT
	.ACCESS INICHN,[100]
	.IOT INICHN,A	;READ LOC. 100 OF INFERIOR INTO A
	PUSH P,C
	MOVSI C,-MAXJOB	;SCAN TABLE FOR NAME IN USE
	CAMN A,NAMTBL(C)
	JRST INUSE
MORNAM:	AOBJN C,.-2
	POP P,C	;NOT PREV. IN USE, OK TO USE
	MOVEM A,NAMTBL(B)	;IN USE NOW
	JRST RLDDIS

INUSE:	CAIN B,(C)	;IS IT ME? (CAN ONLY BE IF  NAMCAL DONE MORE THAN ONCE)
	JRST MORNAM	;YES, CONINUE SCAN
	.ACCESS INFCHN,[100]	;CLEAR AS SIGNAL TO INF. NAME ALREADY EXISTS
	.IOT INFCHN,[-1,,[0]]
	SETZM NAMTBL(B)	;CLEAR ENTRY IN CASE IT SOMEHOW IS NOT ALREADY
	POP P,C
	JRST RLDDIS
PRVDIE:	.USET INFCHN,[.RUPC,,A]
	SUB A,STARTA
	CAIGE A,20
	JRST SHRTDI
	.RDTIME A,	;TIME OF DEATH
	SUB A,TIMTBL(B)	;HOW LONG SINCE LAST DEATH?
	CAIGE A,5*30.	;LESS THAN 5 SEC.?
	JRST QWKDIE	;YES,FLUSH IT
	CAIL A,60.*30.	;NO, LESS THAN 1 MINUTE?
	JRST SLODIE	;NO, RELOAD AS IF FIRST TIME
	LDB A,RPDBP	;YES, HOW MANY TIMES HAS IT DIED WITHIN A MINUTE?
	CAIGE A,3	;IS THIS THE FOURTH TIME?
	JRST FRSTDI	;NO
	MOVEI A,[ASCIZ / HALTED 4 TIMES, STOPPED
/]
STOPIT:	PUSHJ P,P2NMS
	PUSHJ P,TYPASC
	.USET INFCHN,[.SUSTP,,[-1]]
	HRRZ TA,JOBTBL(B)
	CAIN TA,(SIXBIT /TTY/)
	.DTTY INFCHN,
	JFCL
	MOVSI TA,ALLBIT	;TURN OFF ALL BITS, DON'T EVEN KNOW IF IT'S LOADED
	ANDCAM TA,JOBTBL(B)
	SETZB A,TIMTBL(B)
	DPB A,RPDBP
	POP P,A
	JUMPN A,MORINT
	POP P,B
	JRST DISMIS

QWKDIE:	MOVEI A,[ASCIZ / HALTED < 5 SEC. AFTER RESTARTED, STOPPED
/]
	JRST STOPIT

SLODIE:	MOVEI A,0
	DPB A,RPDBP
	JRST FRSTDI

SHRTDI:	MOVEI A,[ASCIZ / HALTED WITHIN 20 WORDS OF STARTING ADDRESS, STOPPED
/]
	JRST STOPIT
CONZ:	.USET INFCHN,[.SPIRQC,,A]	;TURN OFF CONT. Z INT. COND.
	HRRZ A,JOBTBL(B)	;GET DIVICE NAME
	CAIE A,(SIXBIT /TTY/)	;IT HAD BETTER BE TTY
	INTERR BCZ:;BAD CONTROL Z, TRAPPED FROM IMPOSSIBLE JOB
	MOVSI A,RUNBIT+TRNBIT	;NOTE NOT RUNNING AND TTY BACK
	ANDCAM A,JOBTBL(B)
	.USET INFCHN,[.SUSTP,,[-1]]	;STOP HIM
	.DTTY INFCHN,	;GOBBLE BACK TTY
	INTERR DTF:;.DTTY FAILED
	PUSHJ P,P2NMS
	PRINT [ASCIZ / STOPPED BY CONTROL Z
/]
	JRST RLDDIS

REALST==14	;REAL STARTING ADDRESS OF CODE IN USER CORE
RSTCOD:
OFFSET REALST-RSTCOD
RSTAC:	.CALL RSTLBL
RSTDMP:	.VALUE		;HALT IF PURE PROC. LOAD FAILS
	.CLOSE 1,
RSTOK:	.VALUE		;QUIT, LEGITIMATE HALT AFTER SUCESSFUL LOAD
RSTST:	.OPEN 1,RSTTOO	;START, TYPE MESSAGE
RSTTY:	.VALUE		;HALT IF CAN'T GET TELETYPE
RSTTL:	ILDB A,RSTLDB
	JUMPE A,RSTLOD
	.IOT 1,A
	JRST RSTTL

RSTLOD:	MOVEI A,15.	;WAIT HALF SECOND
	.SLEEP A,
	.STATUS 1,A	;IS MESSAGE ALL TYPED?
	TRNN A,2002	;(SET IF BUFFER EMPTY)
	JRST RSTLOD	;NO, WAIT
	.CLOSE 1,	;MESSAGE OUT, LOAD
	.OPEN 1,RSTLOP
RSTNOP:	.VALUE		;HALT IF CAN'T OPEN FOR RELOAD
	JRST RSTAC

RSTTOO:	SIXBIT /  !TTY/
RSTLDB:	440700,,RSTTRB	;ADDRESS MUNGED TO RSTTRB OR RSTBYE
RSTTRB:	ASCIZ /
TROUBLE, LOGO RESTARTED
/
RSTBYE:	ASCIZ /
OLD LOGO GONE, NEW LOGO STARTED
/
RSTLOP:	SIXBIT /  &SYSTS    CLOGO/
RSTLBL:	400000,,0
	SIXBIT /LOAD/
	RSTCON
	400000,,.+1
	1
RSTCON:	-1

OFFSET 0
LOGOP=RSTCOD+RSTLOP-REALST	;ADDRESS OF .OPEN BLOCK TO READ IN NEW LOGO
RLDCOM=RSTCOD+RSTLDB-REALST	;LOCATION WHOSE RT HALF IS SET TO ADDRESS OF RELOAD COMMENT
RSTBLK:	RSTCOD-.,,RSTCOD
;QUIT KEY HIT
KWIT:	TRZE FF,PRTFLG	;DOES PROTECT FLAG INDICATE PROTECTED CODE?
	JRST KWITF	;YES, EXECUTE IT BEFORE QUITTING
	MOVE A,@TSINT+1	;GET WD ABT. TO BE EXECUTED
	CAMN A,PROTW	;IS IT ABOUT TO SET THE PROTECT FLAG?
	JRST KWITP	;YES, DON'T SET IT, BUT OTHERWISE RETURN TO SEQUENCE
KWTRET:	.SUSET [.SPICLR,,BLANK]	;NOT PROTECTED, TURN OFF PI AND QUIT
	SETZM RINGI	;FLUSH OUPTUT
	SETZM RINGO
	.RESET TTOCHN,
	MOVEI A,[ASCIZ /--QUIT
/]
	PUSHJ P,TYPASC
	.DISMIS [REGO1]

KWITP:	AOS TSINT+1	;SKIP FLAG SETTING INSTR.; FLAG CLEAR TELLS "PROTEND" TO QUIT
KWITF:	POP P,A	;RETURN TO SEQUENCE STILL PI IN PROG
	JRST @TSINT+1

PROTW:	PROTECT

END GO
HOLD
	LDB A,RPDBP	;INCREMENT REPEATED DEATH COUNTER
	AOJ A,
	DPB A,RPDBP
	.ACCESS INFCHN,[RSTAC]
	MOVE A,RSTBLK
	.IOT INFCHN,A
	.USET INFCHN,[.SUPC,,[RSTST]]
	JRST RLDDIS
.RVALUE==1
VALEX:	.USET INFCHN,[.RSV40,,A]
	CAMN A,[.VALUE 101]	;IS IT A NAME CALL?
	JRST NAMCAL	;YES
	JUMPE A,TRBL	;NO, SOME SORT OF ERROR?
	SETZB A,TIMTBL(B)	;NO, GOODBYE, RELOAD A FRESH ONE
	DPB A,RPDBP	;(CLEAR PREVIOUS DEATH STUFF)
	MOVEI A,RSTBYE	;SET UP TO TYPE "GOODBYE" MESSAGE ON LOGO CONSOLE
	HRRM A,RLDCOM
	MOVEI A,[ASCIZ / TYPED "GOODBYE"
/]
	JRST RELOD

RLDINT:	PUSHJ P,P2NMS
	PUSH P,A
	.USET INFCHN,[.RUPC,,A]
	HRRZ A,A	;FLUSH FLAG BITS
	CAIE A,RSTOK+1
	JRST BRI	;BAD RELOAD INTERRUPT
	POP P,A
	TLO A,LODBIT+RUNBIT	;TURN ON LOD AND RUN
	HLLM A,JOBTBL(B)
	PRINT [ASCIZ / RELOADED
/]
	.USET INFCHN,[.SUPC,,STARTA]
RLDDIS:	.USET INFCHN,[.SUSTP,,BLANK]
NORLD:	.USET INFCHN,[.SPIRQC,,BLANK]
	POP P,A
	JUMPN A,MORINT
	POP P,B
	JRST DISMIS

BRI:	CAIN A,RSTDMP+1
	PRINT [ASCIZ / CAN'T RELOAD
/]
	CAIN A,RSTTY+1
	PRINT [ASCIZ / CAN'T GET OUTPUT DEVICE
/]
	CAIN A,RSTNOP+1
	PRINT [ASCIZ / CAN'T OPEN RELOAD FILE
/]
	PRINT [ASCIZ / (NOT RELOADED)
/]
	POP P,A
	TLZ A,LODBIT+RUNBIT
	HLLM A,JOBTBL(B)
	JRST NORLD
NAMCAL:	PUSHJ P,OPENIN	;OPEN CHANNEL FOR INPUT
	.ACCESS INICHN,[100]
	.IOT INICHN,A	;READ LOC. 100 OF INFERIOR INTO A
	PUSH P,C
	MOVSI C,-MAXJOB	;SCAN TABLE FOR NAME IN USE
	CAMN A,NAMTBL(C)
	JRST INUSE
MORNAM:	AOBJN C,.-2
	POP P,C	;NOT PREV. IN USE, OK TO USE
	MOVEM A,NAMTBL(B)	;IN USE NOW
	JRST RLDDIS

INUSE:	CAIN B,(C)	;IS IT ME? (CAN ONLY BE IF  NAMCAL DONE MORE THAN ONCE)
	JRST MORNAM	;YES, CONINUE SCAN
	.ACCESS INFCHN,[100]	;CLEAR AS SIGNAL TO INF. NAME ALREADY EXISTS
	.IOT INFCHN,[-1,,[0]]
	SETZM NAMTBL(B)	;CLEAR ENTRY IN CASE IT SOMEHOW IS NOT ALREADY
	POP P,C
	JRST RLDDIS
PRVDIE:	.USET INFCHN,[.RUPC,,A]
	SUB A,STARTA
	CAIGE A,20
	JRST SHRTDI
	.RDTIME A,	;TIME OF DEATH
	SUB A,TIMTBL(B)	;HOW LONG SINCE LAST DEATH?
	CAIGE A,5*30.	;LESS THAN 5 SEC.?
	JRST QWKDIE	;YES,FLUSH IT
	CAIL A,60.*30.	;NO, LESS THAN 1 MINUTE?
	JRST SLODIE	;NO, RELOAD AS IF FIRST TIME
	LDB A,RPDBP	;YES, HOW MANY TIMES HAS IT DIED WITHIN A MINUTE?
	CAIGE A,3	;IS THIS THE FOURTH TIME?
	JRST FRSTDI	;NO
	MOVEI A,[ASCIZ / HALTED 4 TIMES, STOPPED
/]
STOPIT:	PUSHJ P,P2NMS
	PUSHJ P,TYPASC
	.USET INFCHN,[.SUSTP,,[-1]]
	HRRZ TA,JOBTBL(B)
	CAIN TA,(SIXBIT /TTY/)
	.DTTY INFCHN,
	JFCL
	MOVSI TA,ALLBIT	;TURN OFF ALL BITS, DON'T EVEN KNOW IF IT'S LOADED
	ANDCAM TA,JOBTBL(B)
	SETZB A,TIMTBL(B)
	DPB A,RPDBP
	POP P,A
	JUMPN A,MORINT
	POP P,B
	JRST DISMIS

QWKDIE:	MOVEI A,[ASCIZ / HALTED < 5 SEC. AFTER RESTARTED, STOPPED
/]
	JRST STOPIT

SLODIE:	MOVEI A,0
	DPB A,RPDBP
	JRST FRSTDI

SHRTDI:	MOVEI A,[ASCIZ / HALTED WITHIN 20 WORDS OF STARTING ADDRESS, STOPPED
/]
	JRST STOPIT
CONZ:	.USET INFCHN,[.SPIRQC,,A]	;TURN OFF CONT. Z INT. COND.
	HRRZ A,JOBTBL(B)	;GET DIVICE NAME
	CAIE A,(SIXBIT /TTY/)	;