.IIF NDF LSTTY,LSTTY==1
.IIF NDF LSDISK,LSDISK==1
.IIF NDF LSFLEM,LSFLEM==0
.IIF NDF LSMAP,LSMAP==0
.IIF NDF LSCLK,LSCLK==1
.IIF NDF METERS,METERS==0
.IIF NDF DMPCAS,DMPCAS==0

.IF NZ LSTTY
LSRCS0=	177560			;TTY RECIEVER STATUS REG, INIT TO #100 (INTERRUPT ENABLED)
LSRBF0=	LSRCS0+2		;TTY RECIEVER BUFFER
LSXCS0=	LSRBF0+2		;TTY XMITTER STATUS REG, INIT TO #100 (INTERRUPT ENABLED)
LSXBF0=	LSXCS0+2		;TTY XMITTER BUFFER
LSXMRD==200			;TTY XMITTER READY BIT
LSTOEN==100			;TTY INTERRUPT ENABLE BIT
.ENDC

.IF G LSTTY-1
.MACRO LSDEFT NUMBER
LSRCS'NUMBER=176500+<<NUMBER-1>*10>	;START OF MULTIPLE TTYS
LSRBF'NUMBER=LSRCS'NUMBER+2	;RECIEVE BUFFER
LSXCS'NUMBER=LSRBF'NUMBER+2	;XMIT STATUS
LSXBF'NUMBER=LSXCS'NUMBER+2	;XMIT BUFFER
FOO=.
.=320+<<NUMBER-1>*10>
LSRIN'NUMBER
340
LSTIN'NUMBER
340
.=FOO
.ENDM
	.REPT LSTTY-1
	LSDEFT \.RPCNT+1
	.ENDR
.ENDC

.MACRO CONC A,B
	A'B
.ENDM

LSTRCS:
.REPT LSTTY
	CONC LSRCS,\.RPCNT
.ENDR

LSRBUF:
.REPT LSTTY
	CONC LSRBF,\.RPCNT
.ENDR

LSTTCS:
.REPT LSTTY
	CONC LSXCS,\.RPCNT
.ENDR

LSTBUF:
.REPT LSTTY
	CONC LSXBF,\.RPCNT
.ENDR

LSTIBT:
.REPT LSTTY
	CONC LSTIB,\.RPCNT
.ENDR

LSTOBT:
.REPT LSTTY
	CONC LSTOB,\.RPCNT
.ENDR

;UNIFIED CIRCULAR BUFFER SCHEME
;A BUFFER CONSISTS OF A HEADER FOLLOWED BY BLOCK OF THE APPROPRIATE SIZE
;THE HEADER IS:
LSBFBG==0			;POINTER TO BEG OF DATA
LSBFEN==2			;POINTER TO END OF DATA
LSBFIP==4			;POINTER TO WHERE TO INSERT A BYTE
LSBFOP==6			;POINTER TO WHERE TO REMOVE A BYTE
LSBFCN==10			;COUNT OF VALID BYTES IN THE BUFFER
LSBFSZ==12			;MAXIMUM NUMBER OF BYTES FOR THIS BUFFER
LSBFDT==14			;DATA
;IF THESE DEFINITIONS GET CHANGED THE MACRO WILL HAVE TO CHANGED TOO

.MACRO LSMBUF NAME,SIZE
NAME:	NAME+LSBFDT		;BEG OF DATE
	NAME+LSBFDT+SIZE	;END OF DATA
	NAME+LSBFDT		;INPUT POINTER
	NAME+LSBFDT		;OUTPUT POINTER
	0			;VALID BYTES
	SIZE			;MAX BYTES
	.BLKB SIZE		;DATA
.EVEN
.ENDM

.IF NZ LSTTY
.MACRO LSTBDF NUMBER
	LSMBUF LSTIB'NUMBER,50.	;THE TTY INPUT BUFFER FOR THE REGULAR LINE
	LSMBUF LSTOB'NUMBER,100.	;THE TTY OUTPUT BUFFER FOR THE REGULAR LINE
.ENDM
	.REPT LSTTY
	LSTBDF \.RPCNT
	.ENDR

LSCTTY:	0			;THE CURRENT TTY BEING HACKED BY THE SYSTEM CALL
LSLINL==200		;MAXIMUM # OF CHARS PER VIRTUAL LINE, MUST BE EVEN
;THIS STUFF IS ONLY FOR LINE MODE, ONLY ON TTY 0
LSTVEE:	1	;1 => TVTYPE, BACKSPERABLE CONSOLE, 0 => NOT
LSCLIN:	.BLKB LSLINL	;CIRCULAR BUFFER FOR CURRENT LINE
LSOLIN:	.BLKB LSLINL	;CIRCULAR BUFFER FOR PREVIOUS LINE (DOUBLES AS "EDIT BUFFER")
			;THESE MUST BE CONTIGUOUS, OF LENGTH LSLINL, IN THIS ORDER

LSCLNA:	LSCLIN		;PTR TO NEXT LSCLIN  BYTE TO BE READ
LSCLNZ:	LSCLIN		;PTR TO NEXT LSCLIN BYTE TO BE USED
LSCLNN:	0		;# OF BYTES IN LSCLIN
LSOLNA:	LSOLIN		;PTR TO NEXT LSOLIN BYTE TO BE READ
LSOLNZ:	LSOLIN		;PTR TO NEXT LSOLIN BYTE TO BE USED
LSOLNN:	0		;# OF BYTES IN LSOLIN

LSIBRK:	0		;SET TO 1 WHEN BREAK CHAR (^G OR ^Z) IS TYPED,
LSILSC:	0	;COUNT OF CHARACTERS LOST

LSTRPP:	0		;STACK PTR AS OF RIGHT AFTER TRAP TRAP

LSCHNO:	0		;# OF CHARS BYTO'D SINCE LAST CR
LSCHMX:	72.		;MAX # OF CHARS THAT FIT ON PHYSICAL LINE
LSLNNO:	0		;# OF CR'S SINCE LAST FF
LSLNMX:	30.		;MAX # OF CHARS THAT FIT ON PHYSICAL SCREEN

;ONE OF THESE FOR EVERY TTY
;BUT LINE MODE CAN ONLY BE SET IN TTY 0
LSITTS:	.BLKW LSTTY		;TTY MODE WORD. CONTAINS FLAGS: .TLIPM=LINE INPUT, .TIECM=
			; ECHO MODE, .TICTM=CONVERT UPARROW-PRECEEDED CHARS TO CTRL
			; CHARS, .TICVM=CONVERT LOWER CASE TO UPPER, .TIMGO= IMAGE
			;OUTPUT MODE


.ENDC

.IF G LSTTY-1

.MACRO LSMTTY NUMBER
	LSMBUF LST'NUMBER'IB,30.	;INPUT BUFFER
	LSMBUF LST'NUMBER'OB,100.	;OUTPUT BUFFER
.ENDM

.REPT LSTTY-1
	LSMTTY \.RPCNT
.ENDR

.ENDC

.MACRO LSTRPM FUNC,ADDR
FOO==FUNC&177		;FLUSH THE TRAP PART
	.=LSETAB+<FOO*2>
	ADDR
.IIF GT FOO-LSETOP,LSETOP==FOO
.ENDM

LSETAB:
.IF1
LSETOP==0
.IFF
.REPT LSETOP
	LSLOSE
.ENDR
.ENDC

	LSTRPM .INVOK,LSINVK
	LSTRPM .BYTI,LSBYTI
	LSTRPM .BYTO,LSBYTO
	LSTRPM .WRDI,LSWRDI
	LSTRPM .WRDO,LSWRDO
	LSTRPM .BLKI,LSBLKI
	LSTRPM .BLKO,LSBLKO
	LSTRPM .GERRW,EGERRW
	LSTRPM .SSTAT,ESSTAT
	LSTRPM .NOOP,ENOOP
	LSTRPM .SINK,ESINK	;A NO-OP
	LSTRPM .FLOAT,EFLOAT	;LIKEWISE (MAYBE THIS SHOULD ERROR OUT IF NO LSFLEM)
.IIF NZ LSCLK,	LSTRPM .TIME,ETIME
.IIF NZ LSCLK,	LSTRPM .SLEEP,ESLEEP
.=LSETAB+<LSETOP*2>+2
.IFNZ LSTTY
.MACRO LSTIVM FUNC,ADDR
	.=LSITAB+<FUNC*2>
	ADDR
.IIF GT FUNC-LSTTIM,LSTTIM==FUNC
.ENDM

LSITAB:
.IF1
LSTTIM==0
.IFF
.REPT LSTTIM
	LSLOSE
.ENDR
.ENDC
	
	LSTIVM .TTMOV,LSTTMV
	LSTIVM .TTBIS,LSTTBS
	LSTIVM .TTBIC,LSTTBC
	LSTIVM .TTRD,LSTTRD
	LSTIVM .TTCNO,LSTTCN
	LSTIVM .TTPEK,LSTTPK
	LSTIVM .TTSLN,LSTTSL
.=LSITAB+<LSTTIM*2>+2
.ENDC
.IFNZ LSDISK
.MACRO LSFIVM FUNC,ADDR
	.=LSFAIT+<FUNC/400>
	ADDR
.IIF GT <FUNC/400>-LSFAIM,LSFAIM==FUNC/400
.ENDM

LSFAIT:
.IF1
LSFAIM==0
.IFF
.REPT LSFAIM
	LSLOSE
.ENDR
.ENDC
	LSFIVM .FARE,LSFARE	;RETURN EOF WORDS
	LSFIVM .FASP,LSFASP	;SET POINTER
	LSFIVM .FARP,LSFARP	;READ POINTER
	LSFIVM .FADL,LSFADL	;DELETE ENTRY
	LSFIVM .FAAD,LSFAAD	;ADD ENTRY
	LSFIVM .FAMU,LSFAMU	;MUTATE
	LSFIVM .FAMB,LSFAMB	;SET UP DISK BIT TABLE
	LSFIVM .FARI,LSFARI	;READ FILE INFORMATION
	LSFIVM .FADI,LSFADI	;READ DISK INFORMATION
	LSFIVM .FASDL,LSFSDL	;SUPER DELETE
	LSFIVM .FAMD,LSFAMD	;MAKE A DIRECTORY


.=LSFAIT+<LSFAIM*2>+2
.ENDC
LSBYLP:	0		;0=>NO PENDING LINE IN LINBUF
LSRIP:	0		;RUBOUT IN PROGRESS FLAG
LSPC:	0		;PC AFTER TRP
LSPS:	0		;PS FROM TRP
LSERPC:	0		;PC WHERE ERROR WAS DETECTED
LSUERP:	0		;USER PC OF CALL THAT CAUSED ERROR
LSERCD:	0		;ERROR CODE
LSEPDL:	0		;SAVED PDL FOR ERROR RETURNING

LSMAXC==20		;MAX CAPABILITY

;DISPATCH TABLES FOR BYTI, BYTO, BLKI, BLKO, WRDI AND WRDO
FOO==0
.MACRO LSIOC LIST
	.IRP ROT,<LIST>
		.IIF B ROT,LSLOSE
		.IIF NB ROT,ROT
	.ENDM
.ENDM

		.IRP 	X,<LSBITB,	LSBOTB,	LSWITB,	LSWOTB,	LSBLIT,	LSBLOT>
X==.IRPCN*2
.ENDM
	
.IIF NZ LSTTY,LSTTIO:	LSIOC	<LSTBYI,	LSTBYO,	,	,	,	LSTBLO>
.IIF NZ LSDISK,LSFAIO:	LSIOC	<LSFBYI,	LSFBYO,	LSFWDI,	LSFWDO,	LSFBLI,	LSFBLO>
.IIF NZ LSPRNT,LSLPIO:	LSIOC	<	,	LSLBYO,	,	,	,	LSLBLO>





LSCPTB:	.CCCAP		;CREATE
	.SPCAP		;SELF
	.TTCAP		;LATER THIS WILL BE INITED
	.TTCAP		;BY A ROUTINE
	.BLKW LSMAXC-4

.IFNZ LSDISK	;CURRENTLY ONLY DISK CAPS USE THESE
		;AND TTY CAPS INDICATE TTY NUMBER IN LSCRN1
LSCRN1:	.BLKW LSMAXC	;RANDOM WORD 1, -1 IF NO CURRENT BLOCK, ELSE BLOCK #
LSCRN2:	.BLKW LSMAXC	;RANDOM WORD 2, HIGH ORDER BITS OF ACCESS POINTER
LSCRN3:	.BLKW LSMAXC	;RANDOM WORD 3, LOW ORDER BITS OF POINTER)
LSCIPN:	.BLKW LSMAXC	;ITEM POINTER

;DISK MFI'S
MFILEN==0
.MACRO MFIWDF A,L
A==MFILEN
.IIF B L,MFILEN==MFILEN+2
.IIF NB L,MFILEN==MFILEN+L
.ENDM

MFIWDF MFILNK	;LINK WORD (MUST BE ZERO)
MFIWDF MFRFCN	;REFERENCE COUNT
MFIWDF MFBACK	;BACK POINTER TO DIR IF THIS IS A FILE
MFIWDF MFDKNO	;DISK NUMBER
MFIWDF MFFLNO	;FILE NUMBER IN DIR
MFIWDF MFDIRF	;NON-ZERO => IS DIRECTORY
MFIWDF MFMODF	;IF NON-ZERO THIS ENTRY HAS BEEN MODIFIED, SHOULD BE WRITTEN BACK
MFIWDF MFDELF	;IF NON-ZERO FILE OR DIR IS DELETED
MFIWDF MFADDF	;IF NON-ZERO THIS IS A NEW FILE NOT YET IN THE DIR
MFIWDF MFENDP	;THIS POINTS TO THE END OF THIS ENTRY
MFIWDF MFEOFH	;HIGH BITS OF EOF
MFIWDF MFEOFL	;LOW BITS OF EOF
MFIWDF MFBLKN	;IF -1, FILE, ELSE BLOCK # OF DIR
MFIWDF MFRSFR	;RESEVERD BYTES IN DIR IF FILE, ELSE # BYTES FREE
 MFEOFB==100000	;FLAG IN HEADER WORD, HAS EOF, TIME+DATE
 MFACCB==40000	;FLAG IN HEADER, HAS ACCESS CODES
 MFSHRB==10000	;THIS FILE SHARES BLOCKS
 MFLSTB==400	;FLAG FOR LAST BLOCK EXISTING
 MFSLFE==4000	;SELF
 MFNDLE==3000	;NO DELETE (FOR BITS AND DESCR)
 MFDIRE==1000	;DIRECTORY TYPE
 MFPARE==0	;PARENT
 MFFILE==2000	;FILE

MFIWDF MFENTY,64.	;COPY OF THE ENTRY

.IF NDF LSNDB		;FLAG THAT SAYS NOT TO ALLOCATE DISK BUFFERS
LSDBUF:	.BLKW 512.	;ALL BLOCKS GO HERE TILL I GET MORE AMBITIOUS
.ENDC

MFOPNF:	0		;LSIT OF OPEN FILES
MFILST:	.+2
.REPT LSMAXC/2+3	;RANDOM NUMBER OF THESE
	.+MFILEN
	.BLKB MFILEN-2
.ENDR
	.BLKB MFILEN

LSBTLN==<<250./8.>!1>+7	;LENGHT IS ENOUGH FOR 250. BLOCKS PLUS SOME
LSBTBS:	.+2
	.+LSBTLN
	.BLKB LSBTLN-2
	0
	.BLKB LSBTLN-2	;TWO BIT TABLES ALLOCATED

;TABLE OF MOUNTED DISKS
LSMXDK==4
LSDMNT:	.BLKW LSMXDK
MFFREE:	.BLKW LSMXDK	;NUMBER OF FREE BLOCKS ON DISK
MFBITP:	.BLKW LSMXDK	;POINTER TO BIT TABLE OF THIS DISK
MFBITB:	.BLKW LSMXDK	;BLOCK NUMBER OF BIT TABLE FOR THIS DISK
MFBITM:	.BLKW LSMXDK	;IF NON-ZERO THE BIT TABLE HAS BEEN MODIFIED
MFDKRF:	.BLKW LSMXDK	;THE REFERENCE COUNT FOR A DISK
.ENDC




.IFNZ LSCLK
LSTIME:	0
	0
SECNT:	1.	;HALF SECOND COUNTER
LSSEC:	0	;CURRENT SECOND
LSMIN:	0	;MINUTE
LSHOUR:	0
LSDAY:	0
LSMON:	0
LSYEAR:	-1
MONS:	.BYTE 31.,28.,31.,30.,31.,30.,31.,31.,30.,31.,30.,31.
SECONL:	60.
MINUTL:	60.
HOURL:	24.
DAYL:	0	;SET FROM MONS
MONTHL:	12.
YEARL:	2000.	;SYSTEM LOSES IN YEAR 2000.
RESETT:	.WORD 0,0,0,1,1	;VALUES TO RESET TO
HSECNT:	0		;60THS OR 50THS TILL TIME TO INC HSECS
HSECS:	0		;TIME IN .5 SECS, FOR SWAP DESICIONS
HSEC:	HSECTK		;NUMBER OF TICKS IN A HALF SECOND
.ENDC
.IFNZ LSDISK
WCHDSK:	0	;DISK NUMBER
DISKIO:	0	;FUNCTION
 DISKRD==1
 DISKWR==2
 DISKWC==3
RETRYS:	0	;NUMBER OF TIMES TRIED
 NRETRY==10.	;MAX TIMES TO TRY
LSDKLT:	0	;COPY OF LIGHTS REGISTER
ENTRYE:	0	;TEMP POINTER TO END OF ENTRY
ENTLST:	0	;TYPE OF LAST VALID BYTE
ENTLSB:	0	;BLOCK NUMBER OF LAST BLOCK OF FILE
ENTLSP:	0	;POINTER TO LAST VALID BYTE
FNBVER:	0	;VERSION NUMBER
FNBFNO:	0	;FILE NUMBER
FNBFN:	.BLKW 16.	;FILE NAME
BLOKNO:	0	;BLOCK NUMBER
BLOKMD:	0	;IF NON-ZERO BLOCK HAS BEEN MODIFIED, SHOULD BE WRITTEN BACK
FLOPTR:	0	;TRACK ADDRESS
FLOPRT:	.BLKW LSMXDK	;TRACK THE DISK HEADS SHOULD BE OVER
FLOPSC:	0	;SECTOR ADDRESS
FLOPSS:	0	;SAVED SECTOR ADDRESS
FLOPCA:	0	;CORE ADDRESS
FLPSCA:	0	;SAVED CORE ADDRESS
FLOPHW:	0	;HALF WAY MARKER (END OF BUFFER)
FLOPWC:	0	;WORD COUNT
TRNSLE:	-1000	;TRANSFER LENGHT IN WORDS
TRNERR:	0	;COUNT OF IRRECOVERABLE ERRORS ON THIS XFER
FERRST:	0	;ERROR TYPE
ERRDAT:	0	;ERROR INFO
LSDKOF:	0	;IF NON-ZERO, DISK IS TURNED ON
LSBMT:	.BYTE 1,2,4,10,20,40,100,200
.ENDC


.IFNZ LSPRNT

LPUSE:	-1			;>= 0 => LP IN USE
LPERRF:	0			;ERROR FLAG
	LSMBUF LSLPBF,80.	;A BUFFER ONE LINE LONG
LPLEN:	72.			;LINE LENGTH
LPPOS:	0			;CHARACTER COUNT
LPLCNT:	0			;LINE COUNT
.ENDC

LSINTB:
.IF NZ LSFLEM
	10
	FLEMT
	244
	FLFIS
.ENDC
	34
	LSITRP
.IFNZ LSCLK
	CLKBRV
	CLKBRK
	CLKBRV+2
	340
.ENDC

.IFNZ LSPRNT
	LPBRV
	LPINT
	LPBRV+2
	340
.ENDC
	0
FOO==.
				;SET UP INTERUPT VECTORS
.IF DF FLEMT
.=10
	FLEMT
.=244
	FLFIS
.ENDC
LSITRV=34
.=LSITRV
	LSITRP
.IFNZ LSCLK
.=CLKBRV
	CLKBRK
	340
.ENDC
.IFNZ LSDISK
.=SMSBRV
	SMSBRK
	340
.ENDC
.IFNZ LSTTY
.=60
	LSTIN0
	340
	LSRIN0
	340
.ENDC
.IFNZ LSPRNT
.=LPBRV
	LPINT
	340
.ENDC
.=14
	.+2
	HALT
.=0
	BPT
.=FOO
