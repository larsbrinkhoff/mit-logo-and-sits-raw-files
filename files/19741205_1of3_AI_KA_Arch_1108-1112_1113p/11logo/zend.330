	.STITL	DISC BLOCKS, NODE SPACE AND TEST LINES
	FOO==%FNAM2
	VERN==VERN+%FNAM2

.IFNZ NDISP

	.=<.!77>+1
DISBTB==<._-6>&1777
DISTPB==<._-6>&1777+1000	;TOP DISPLAY BLOCK
DISREL:	REPT1 8.,DSTOP
DISPDL:	.BLKW 8.
.ENDC
	.=<.!77>+1
DISBFS==<._-6>&1777	;BEGINNING OF FIRST DISPLAY SLOT
	.MACRO BEGER X,EN,F
X'.E::
FOO==.
	.ASCII /X/
	.=FOO+4
	BARF==0
	.IRPC Q,X
	BARF==<<''Q-'A+1>&17>+<BARF*20>
	.ENDM
	BARF
	.IFNZ ENG
	EN
	.ENDC
	.IIF NZ ENG&FR,.BYTE 0
	.IFNZ FR
	F
	.ENDC
	.BYTE 0
	.EVEN
.IIF LT FOO+MAXELN-.,MAXELN==.-FOO
	.ENDM

	.MACRO EROT A
	.BYTE A'.N
	.ENDM


	.MACRO ETEXT AA
	.ASCII \AA\
	.ENDM
ERRSRT:
.OFFSE 0-.


BEGER BADD,<
ETEXT ^/BAD DIRECTORY./>,<
ETEXT ^/MAUVAIS UTILISATEUR/>

BEGER BADE,<
ETEXT ^/BAD ENTRY./>,<
ETEXT ^/MAUVAISE ENTREE/>

BEGER BAT,<
ETEXT ^/BAD ARRAY TYPE./>,<
ETEXT ^/MAUVAIS TYPE DE VECTEUR/>

BEGER BDD,<
ETEXT ^/BAD DISK./>,<
ETEXT ^/MAUVAIS DISQUE/>

BEGER BRK,<
EROT BRK>,<
EROT BRK>

BEGER BUG,<
EROT BUG>,<
EROT BUG>

BEGER CDE,<
ETEXT ^/CAN'T DELETE ENTRY./>,<
ETEXT ^/JE NE PEUX DETRUIRE CETTE ENTREE/>

BEGER CDF,<
ETEXT ^/CAN NOT DELETE THAT FILE./>,<
ETEXT ^/NE PEUX DETRUIRE CE FICHIER/>

BEGER COP,<
ETEXT ^/CHAR /
EROT TYO
ETEXT ^/ OUT OF PLACE./>,<
ETEXT ^/CAR /
EROT TYO
ETEXT ^/ HORS POSITION/>

BEGER CRE,<
ETEXT ^/CAN'T READ THAT ENTRY./>,<
ETEXT ^/NE PEUX RAMENER CETTE ENTREE/>

BEGER CTIT,<
ETEXT ^/YOU ARE ALREADY DEFINING /
EROT CTIT>,<
ETEXT ^/VOUS ETES ENTRAIN DE DEFINIR /
EROT CTIT>

BEGER DFU,<
ETEXT ^/DISC FULL./>,<
ETEXT ^/LE DISQUE EST REMPLI/>

BEGER DIU,<
ETEXT ^/DEVICE IN USE./>,<
ETEXT ^/L'APPAREIL N'EST PAS DISPONIBLE/>

BEGER DNA,<
EROT PRS1
ETEXT ^/ IS NOT A DEVICE NAME./>,<
EROT PRS1
ETEXT ^/ N'EST PAS UN APPAREIL./>

BEGER DNR,<
ETEXT ^/DEVICE NOT READY./>,<
ETEXT ^/L'APPAREIL N'EST PAS PRET/>

BEGER DOR,<
ETEXT ^/DURATION OUT OF RANGE/>,<
ETEXT ^/DUREE TROP LONGUE/>

BEGER DRF,<
ETEXT ^/DIRECTORY FULL./>,<
ETEXT ^/PLUS DE PLACE/>

BEGER EAES,<
ETEXT ^/ENTRY ALREADY EXISTS./>,<
ETEXT ^/ENTREE DEJA EXISTANTE/>

BEGER EAW,<
EROT PRCT
ETEXT ^/ - ERASE ALL WHAT??/>,<
ETEXT ^/ EFFACE TOUT QUOI??/>

BEGER ELW,<
EROT PRCT
ETEXT ^/ - EDIT LINE WHAT?/>,<
ETEXT ^/ EDITE QUELLE LIGNE??/>

BEGER ENDR,<
ETEXT ^/ENTRY NOT A DIRECTORY./>,<
ETEXT ^/CETTE ENTREE N'EST PAS CELLE D'UN UTILISATEUR/>

BEGER ERP,<
ETEXT ^/UNEXPECTED RIGHT PAREN/>,<
ETEXT ^/PARENTHESE DROITE SUPERFLUE/>

BEGER ERW,<
EROT PRCT
ETEXT ^/ - ERASE WHAT??/>,<
ETEXT ^/ - EFFACE QUOI?/>

BEGER FAE,<
ETEXT ^/FILE ALREADY EXISTS./>,<
ETEXT ^/FICHIER DEJA EXISTANT/>

BEGER FAO,<
ETEXT ^/FILE ALREADY OPEN./>,<
ETEXT ^/FICHER DEJA OUVERT/>

BEGER FBUG,<
ETEXT ^/FATAL SYSTEM BUG./
EROT GDBY>,<
ETEXT ^/BUG FATAL AU SYSTEME/
EROT GDBY>

BEGER FNF,<
ETEXT ^/FILE NOT FOUND./>,<
ETEXT ^/N'AI PAS TROUVE CE FICHIER/>

BEGER HARD,<
ETEXT ^/HARDWARE ERROR/>,<
ETEXT ^/ERREUR DE MACHINERIE/>

BEGER HNM,<
EROT HNM
ETEXT ^/ HAS NO MEANING./>,<
EROT HNM
ETEXT ^/ N'EXISTE PAS/>

BEGER HNM1,<
EROT PRCT
ETEXT ^/ HAS NO MEANING./>,<
EROT PRCT
ETEXT ^/ N'EXISTE PAS/>

BEGER HNV,<
EROT PNAB
ETEXT ^/ HAS NO VALUE./>,<
EROT PNAB
ETEXT ^/ N'A PAS RECU DE VALEUR/>

BEGER IDN,<
ETEXT ^/INVALID DISPLAY NUMBER (UGH!)/>,<
ETEXT ^/CET ECRAN N'EXISTE PAS/>

BEGER IFN,<
EROT PRCO
ETEXT ^/ IS INVALID FILE NAME./>,<
EROT PRCO
ETEXT ^/ NE PEUT SERVIR COMME NOM DE FICHIER/>

BEGER INF1,<
EROT PRCO
ETEXT ^/ IS IN THE WRONG PLACE./>,<
EROT PRCO
ETEXT ^/ EST A LA MAUVAISE PLACE/>

BEGER INVN,<
ETEXT ^/INVALID NODE./>,<
ETEXT ^/NODE INVALIDE/>

BEGER ITN,<
ETEXT ^/INVALID TURTLE NUMBER/>,<
ETEXT ^/NUMERO DE TORTUE INEXISTANT/>

BEGER IUN,<
ETEXT ^/INVALID USER NAME./>,<
ETEXT ^/ON NE PEUT UTILISER CE NOM/>

BEGER IVV,<
ETEXT ^/INVALID VOICE NUMBER/>,<
ETEXT ^/NUMERO DE PISTE INEXISTANT/>

BEGER LCE,<
ETEXT ^/LINE ... CHANGED BY EDIT./>,<
ETEXT ^/LIGNE ... A ETE CHANGEE PAR EDITE/>

BEGER LDE,<
ETEXT ^/LINE /
EROT LDE1
ETEXT ^/ DOESN'T EXIST./>,<
ETEXT ^/LIGNE /
EROT LDE1
ETEXT ^/ INEXISTANTE/>

BEGER LNTB,<
ETEXT ^/LINE NUMBER TOO BIG./>,<
ETEXT ^/NUMERO DE LIGNE TROP GRAND/>

BEGER LNTS,<
ETEXT ^/LINE NUMBER TOO SMALL./>,<
ETEXT ^/NUMERO DE LIGNE TROP PETIT/>

BEGER MFN,<
ETEXT ^/MISSING FILE NAMES./>,<
ETEXT ^/IL ME MANQUE LES NOMS DE FICHER/>

BEGER NAS,<
ETEXT ^/NOT ENOUGH ARRAY SPACE./>,<
ETEXT ^/PAS ASSEZ D'ESPACE POUR LA MATRICE/>

BEGER NDU,<
ETEXT ^/YOU DON'T HAVE A DISPLAY CONSOLE/>,<
ETEXT ^/CE TERMINAL NE PEUT AVOIR UN ECRAN/>

BEGER NDV,<
ETEXT ^/NO DISPLAY AVAILABLE./>,<
ETEXT ^/PLUS D'ECRANS DISPONIBLES/>

BEGER NEC,<
EROT PRCT
ETEXT ^/ IS NOT AN EDITING COMMAND./>,<
EROT PRCT
ETEXT ^/ N'EST PAS UN COMMANDEMENT D'EDITION/>

BEGER NED,<
ETEXT ^/DIRECTORY NOT FOUND./>,<
ETEXT ^/N'AI PAS TROUVE CET UTILISATEUR/>

BEGER NIP,<
ETEXT ^/NOTHING INSIDE PARENTHSES./>,<
ETEXT ^/LES PARENTHESES SONT VIDES/>

BEGER NOF,<
ETEXT ^/FILE SYSTEM NOT AVAILABLE/>,<
ETEXT ^/LE SYSTEME DE FICHIER N'EST PAS DISPONIBLE/>

BEGER NOG,<
ETEXT ^/NOTE OUT OF RANGE/>,<
ETEXT ^/NOTE HORS LIMITE/>

BEGER NOU,<
EROT PRLO
ETEXT ^/ DIDN'T OUTPUT!/>,<
EROT PRLO
ETEXT ^/ N'A PAS PRODUIT D'OUTPUT/>

BEGER NSL,<
ETEXT ^/NO STORAGE LEFT./>,<
ETEXT ^/PLUS D'ESPACE DISPONIBLE/>

BEGER NTB,<
ETEXT ^/THORTON BOX SLOTS NOT AVAILABLE/>,<
ETEXT ^/IL N'Y A PAS DE TBOX/>

BEGER NTF,<
EROT PRS1
ETEXT ^/ NOT "TRUE OR "FALSE ./>,<
ETEXT ^/NI "VRAI NI "FAUX/>

BEGER NTL,<
ETEXT ^/NUMBER TOO LONG/>,<
ETEXT ^/NOMBRE TROP GRAND/>

BEGER NTP,<
EROT PRCT
ETEXT ^/ IS NOT A PROCEDURE NAME./>,<
EROT PRCT
ETEXT ^/ N'EST PAS UN NOM DE PROCEDURE/>

BEGER NUD,<
EROT PRCO
ETEXT ^/ IS ONLY VALID WHEN USING A DISPLAY/>,<
EROT PRCO
ETEXT ^/ VALIDE SEULEMENT AVEC ECRAN/>

BEGER OIP,<
ETEXT ^/ ONLY WHEN IN A PROCEDURE./>,<
ETEXT ^/ POSSIBLE SEULEMENT A L'INTERIEUR D'UNE PROCEDURE/>

BEGER OIPD,<
EROT PRCO
ETEXT ^/ ONLY IN PROCEDURE DEFINITION./>,<
EROT PRCO
ETEXT ^/ POSSIBLE SEULEMENT PENDANT UNE DEFINITION/>

BEGER OOB,<
ETEXT ^/OUT OF BOUNDS/>,<
ETEXT ^/HORS LIMITE/>

BEGER OOP,<
EROT PRCO
ETEXT ^/ OUT OF PLACE./>,<
EROT PRCO
ETEXT ^/ HORS POSITION/>

BEGER OOT,<
ETEXT ^/OUT OF TOKENS./>,<
ETEXT ^/JE SUIS VIDEE/>

BEGER PAE,<
EROT PAE
ETEXT ^/PROCEDURE /
EROT PRAB
ETEXT ^/ ALREADY EXISTS./>,<
ETEXT ^/PROCEDURE /
EROT PRAB
ETEXT ^/ DEJA EXISTANTE/>

BEGER PBE,<
EROT PRCT
ETEXT ^/ IS BEING EDITED./>,<
EROT PRCT
ETEXT ^/ EST SOUS EDITION/>

BEGER PBES,<
EROT PRS1
ETEXT ^/ IS BEING EDITED./>,<
EROT PRS1
ETEXT ^/ EST SOUS EDITION/>

BEGER PNH,<
ETEXT ^/PROCEDURE /
EROT PRCT
ETEXT ^/ NOT HERE./>,<
ETEXT ^/LA PROCEDURE /
EROT PRCT
ETEXT ^/ N'EST PAS ICI/>

BEGER PNH1,<
EROT PNH1
ETEXT ^/PROCEDURE /
EROT PRAB
ETEXT ^/ NOT HERE./>,<
ETEXT ^/LA PROCEDURE/
EROT PRAB
ETEXT ^/ N'EST PAS ICI/>

BEGER ROB,<
ETEXT ^/INDEX REFERENCE OUT OF BOUNDS./>,<
ETEXT ^/INDEX DE REFERENCE HORS LIMITE/>

BEGER RTB,<
ETEXT ^/ARITHMETIC RESULT TOO BIG./>,<
ETEXT ^/NOMBRE TROP GRAND/>

BEGER SAW,<
EROT PRCT
ETEXT ^/ - PRINTOUT ALL WHAT??/>,<
EROT PRCT
ETEXT ^/ IMPRIME TOUT QUOI?/>

BEGER SHW,<
EROT PRCT
ETEXT ^/ - PRINTOUT WHAT??/>,<
EROT PRCT
ETEXT ^/ IMPRIME QUOI?/>

BEGER STD,<
ETEXT ^/SNAP TOO DEEP/>,<
ETEXT ^/TROP DE PHOTOS/>

BEGER TDE,<
ETEXT ^/TTY /
EROT TDE
ETEXT ^/ DOESN'T EXIST./>,<
ETEXT ^/TERMINAL /
EROT TDE
ETEXT ^/ NON EXISTANT/>

BEGER TGDZ,<
ETEXT ^/INPUT TO RIGHT OR LEFT TOO LARGE/>,<
ETEXT ^/INPUT TROP GRAND/>

BEGER TIP,<
ETEXT ^/TOO MUCH INSIDE PARENS./>,<
ETEXT ^/TROP DE PARENTHTHESES INTERIEURES/>

BEGER TMAC,<
ETEXT ^/"/
EROT PRCO
ETEXT ^/" CAN'T TAKE MORE THAN 32 ARGS./>,<
EROT PRCO
ETEXT ^/ NE PEUT RECEVOIR PLUS DE 32 INPUTS/>

BEGER TMAP,<
ETEXT ^/TOO MANY ARGS!!!/
EROT TMAP>,<
ETEXT ^/TROP D'INPUTS!!!/
EROT TMAP>

BEGER TML,<
ETEXT ^/TOO MANY LINES/>,<
ETEXT ^/TROP DE LIGNES/>

BEGER TNR,<
ETEXT ^/HELP! TURTLE NOT RESPONDING./>,<
ETEXT ^/AU SECOURS! LA TORTUE NE REPOND PAS/>

BEGER UBL,<
EROT PRCT
ETEXT ^/ IS USED BY LOGO./>,<
EROT PRCT
ETEXT ^/ EST UTILISE PAR LOGO/>

BEGER UDA,<
ETEXT ^/UNDEFINED ARRAY./>,<
ETEXT ^/MATRICE NON DEFINIE/>

BEGER UEL,<
ETEXT ^/UNEXPECTED END OF LINE./>,<
ETEXT ^/ENONCE INCOMPLET/>

BEGER UELX,<
EROT PRCO
ETEXT ^/ NEEDS MORE INPUTS./>,<
EROT PRCO
ETEXT ^/ A BESOIN DE PLUS D'INPUT(S)/>

BEGER VTD,<
EROT PRCO
ETEXT ^/ ONLY VALID IF YOU HAVE A TURTLE OR A DISPLAY/>,<
EROT PRCO
ETEXT ^/ AVEZ-VOUS DEMANDE UNE TORTUE OU UN ECRAN/>

BEGER VTU,<
EROT PRCO
ETEXT ^/ ONLY VALID IF YOU HAVE A TURTLE/>,<
EROT PRCO
ETEXT ^/ AVEZ-VOUS DEMANDE UNE TORTUE/>

BEGER WDIM,<
ETEXT ^/BAD DIMENSION(S)./>,<
ETEXT ^/MAUVAISES DIMENSIONS/>

BEGER WDW,<
ETEXT ^/YOU DON'T SAY WHAT TO DO WITH /
EROT PRS1>,<
ETEXT ^/QUE DOIS-JE FAIRE AVEC /
EROT PRS1>

BEGER WIT,<
EROT PRCT
ETEXT ^/ CAN'T BE AN INPUT./>,<
EROT PRCT
ETEXT ^/ NE PEUT SERVIR D'INPUT/>

BEGER WNA,<
ETEXT ^/WRONG NUMBER OF ARGUMENTS TO /
EROT PRCO>,<
ETEXT ^/NOMBRE INCORRECT D'INPUTS POUR /
EROT PRCO>

BEGER WTA,<
EROT PRCO
ETEXT ^/ DOESN'T LIKE /
EROT PRS1
ETEXT ^/ AS INPUT./>,<
EROT PRCO
ETEXT ^/ N'AIME PAS RECEVOIR /
EROT PRS1
ETEXT ^/ COMME INPUT./>

BEGER WTAA,<
EROT PRCO
ETEXT ^/ DOESN'T LIKE /
EROT WTAA
EROT PRS1
ETEXT ^/ AS INPUT./>,<
EROT PRCO
ETEXT ^/ N'AIME PAS RECEVOIR /
EROT WTAA
EROT PRS1
ETEXT ^/ COMME INPUT./>

BEGER WTAB,<
EROT PRCO
ETEXT ^/ DOESN'T LIKE /
EROT WTAB
EROT PRS1
ETEXT ^/ AS INPUT./>,<
EROT PRCO
ETEXT ^/ N'AIME PAS RECEVOIR /
EROT WTAB
EROT PRS1
ETEXT ^/ COMME INPUT./>

BEGER WTIB,<
EROT PRCO
ETEXT ^/ DOESN'T LIKE /
EROT WTIB
ETEXT ^/ AS INPUT./>,<
EROT PRCO
ETEXT ^/ N'AIME PAS RECEVOIR /
EROT WTIB
ETEXT ^/ COMME INPUT./>

ERREND==.
.OFFSE 0
ERLNTH==.-ERRSRT

	.MACR NODE A,B
	.XLIST
$.==$$+1
	A
	B
$$==$$+1
	.LIST
.ENDM

VERNF==VERN

.=<.!77>+1
SLOT1:
	.IF2
	PAD ^\ SLOT1 AT\,\.
	.ENDC
MSLTLN==NODESP-UVBLK+<4*4096.>	;ALL YOU COULD POSSIBLY WANT
.OFFSE PURE-.
	.STITL USER VARIABLES

UVBLK=.
S:	IS
UPDLP:	IP	;USER PDL POINTER(ONLY WHEN USER NOT RUNNING)
SPOPL:	IS
SSWPAD:	IS-PDSWOP
PPOPL:	IP
PSWPAD:	IP-PDSWOP
DBUFPT:	0	;POINTER INTO THE DISK BUFFER
ERDISP:	0
ERRPT:	0
BASEUS:	0	;BASE OF USER SLOT(MUST BE LAST RELOCATED)
PRBAO:	0	; = 0,374,770, ... N*PDSWOP
SPRBAO:	0	;WHERE N = # P OR S PDL BLOCKS SWAPPED OUT
NSYBUG:	20.	;NUMBER OF SYSTEM BUGS BEFORE RELOAD
NNGC:	0	;NUMBER OF NODES GARBAGE COLLECTED
NNIFSL:	0	;NO. NODES IN FREE STORAGE LIST
DSKNCH:	0	;NUMBER OF CHARS LEFT IN DISK BUFFER
DSKNSC:	0	;NUMBER OF SECTORS IN THIS FILE
DSKADR:	0	;CURRENT SECTOR FOR THIS FILE
REDFLG:	0
WRTFLG:	0
FILFLG:	0
DEFDIR:	46
DEFDSK:	0
WRTDIR:	0
LBLKAD:	0
DESMOD:	0
DBGOT:	0
DEOFBL:	-1
ENTBEG:	0
FNBLK:	.BLKW 5
CURDIR:	46
WCHDSK:	0	;WHICH DISK
DESSAV:	.BYTE 'N,'E,'W,'S+200
	.BLKW 30.
NAME==DESSAV+2
DBCNT:	0
DESPNT:	0
DESEPT:	0
SSAVEA:	0	;PLACE S PDL SAVED WHEN MARKING SWAPED OUT PDL
.IIF NZ ENG&FR,LANG:	FRFLG!PFRFLG
FREE:	SOFN	;START OF FREE NODES
GCP1:	0
GCP2:	0
GCPREV:	0
	ERCLR1==.	;ON ERROR, START ZEROING HERE
TOPS:	0	;GC MARK FROM HERE IF NON 0
TOPS1:	0	;   "
TOPS2:	0	; "	(SIGH)
JPLN:	0	;PROCEDURE LINE # BEFORE LAST "GO"
	;THE FOLLOWING ARE PUSHED BY PEVAL
CPP:	0	;CURRENT PROCEDURE UOE POINTER
.IFNZ SWAPF
CPSN:	0	;C.P. SWAP NO.
.ENDC
CPLN:	0	;CURRENT PROCEDURE LINE NO.
CLP:	0	;CURRENT LINE POINTER - GOOD IF CPSN'S AGREE
CLGN:	0	;CURRENT LINE GENERATION NO.
CTN:	0	;CURRENT TOKEN NO.
CTP:	0	;CURRENT TOKEN POINTER
IFLEV:	0	;IF LEVEL
NOPAR:	0	;NUMBER OF PARENS SEEN BY STNE
CPDLP:	0	;CURRENT PDL PTR AFTER LAST PEVAL PUSH
CSPDLP:	0	;CURRENT S PDL PTR AFTER LAST PEVAL PUSH
	;END OF PEVAL PUSHES EXCEPT
	;CO, CO+2, FLAGS + ERPROC ARE ALSO PUSHED
FUNLEV:	0	;FUNCTION LEVEL

	;THE FOLLOWING ARE PUSHED (SOMETIMES) BY EVAL
CO:	0	;CURRENT OPERATOR
	0
NOR:	0	;NO. OF OPERANDS STILL NEEDED BEFORE CO CAN BE EXECUTED
	;END OF EVAL PUSHES
COF:	0	;CURRENT OPERATOR FLAGS
LO:	0	;LAST OPERATOR
	0
CT:	0	;CURRENT TOKEN
	0	; "
RDFLAG:	0	;FOR READ
LISTBD:	0	;LIST BUILD DEPTH
PSTOPR:	0	;RETURN ADDR FOR PSTOP
ERFRET:	PSTP15	;RETURN ADDR WHEN AN ERROR SET FRAME IS ENCOUNTERED
DOFRET:	RET
TEMP:	0
TMPBLK:	.BLKW 7
TFLAGS:	0	;TEMP FLAGS (ALL TFN'S SHOULD EVENTALLY POINT HERE)
NCHR:	0	;FOR BLST
ABASE:	0	;(ABASE)+10. IS WHAT ARITHMETIC BASE WE ARE IN
		;(FOR CONVERT TO & FROM STRING ROUTINES)
	ERCLR2==.	; ON ERROR STOP CLEARING HERE
FLAGS:	0	;FLAG WORD
ERPROC:	0	;UOE PTR TO PROC TO CALL IF THERE IS AN ERROR
ILINEL:	0	;INPUT LINE PTR GC MARK FROM HERE)
NPROCL:	0	;NAME OF PROC BEING EXECUTED WHEN ERROR OCCURED
NLINEL:	0	;# OF PROC LINE BEING EXECUTED " " "
NTOKEL:	0	;# OF TOKEN BEING EXECUTED " " "
ERRORN:	-1	;ERROR NUMBER
BRAKEL:	0	;VALUE OF BRAKE(U)
TOPRNM:	0	;PTR TO UOE OF PROC. BEING "TO"'ED
FNLLP:	0	;FIRST NODE OF LIST OF LINE POINTERS (FOR "TO")
FLAGS2:	0	;EVAL FLAGS - NOT PUSHED BY PEVAL
PRMTCH:	'?	;PROMPT CHAR
GNCN:	0	;"GET NEXT CHAR" NODE AND USED BY GNOLE
	0
NBKTS:	0	;FOR RDSTR
LASTER:	0	;ADDRESS OF LAST ERROR
LASTPR:	0	;LAST PROC DEFINED
GCHR:	TYI	;SOURCE OF CHARS
PCHR:	TYO	;PLACE WHERE OUTPUT CHARS GO (TYO, BLST, ...)
RNSEED:	27.	;FOR RANDOM
ALEVN:	0	;NON-ZERO MEANS ALLOW N LEVEL BREAK STUFF
WVALUE:	0	;USED BY EXAMINE, DEPOSIT, VALUE
DBITTB:	.=.+40
DBITBE=.-2
AFREE:	0	;POINTER TO ARAY SPACE FREE LIST
AROVER:	0	;BOW-WOW
ASPACE:	0	;AMOUNT OF ARAY SPACE STILL FREE
NODTOP:	0


.IFNZ FPPF

SEXP:	0	;USED FOR SIGN OF EXPONENT IN CONVERT
FNPDL:	0	;AUXILIARY STACK IN CONVERT
	0
	0
	0
	0
	0
	0
	0
.ENDC

;MUSIC BOX VARIABLES (ONE SET FOR EACH MUSIC BOX)
	MUSBEG==.	
		;KEEP VARIABLES IN THIS ORDER
MVOC:	.WORD	0,0,0,0	;POINTERS TO VOICE LISTS--ONE FOR EACH VOICE
VLAST:	.WORD	0,0,0,0	;POINTERS TO LAST NODE IN LIST
VOICLN:	.WORD	0,0,0,0	;NUMBER OF NOTES IN EACH VOICE
VOICEN:	0	;INDEX FOR CURRENT ACTIVE VOICE
NVOIC:	0	;NUMBER OF ACTIVE VOICES
	MUSEND==.
MUCWRD:	100	;CONTROL CHAR FOR CURRENT MUSIC BOX MODE

	.IFNZ	NPLOT
PLTCHR:	0	;CHAR COMING BACK FROM PLOTTER
	.ENDC

;TURTLE VARIABLES
TURDN:	0	;USER'S TURTLE DEVICE NUMBER
TURF:	0	;FUDGE FACTOR FOR TURTLE LEFT AMD RIGHT

DFLAGS:	.WORD 0
.IFNZ DDF
DIVOWN:	.WORD 0
DPENP:	.WORD 0
PLPENP:	.WORD 0
.ENDC

.IFNZ NPLOT
;PLOTTER VARIABLES
;THESE MUST BE IN ORDER
PORBEG==.
PCURX:	.WORD 0,0	;CURRENT PLOTTER X POS
PCURY:	.WORD 0,0	;PLOTTER CURRENT Y
PCURA:	.WORD 0,0		;CURRENT ANGLE PLOTTER
PCOSA:	.WORD 0,0
PSINA:	.WORD 0,0
RPCURX:	.WORD 0,0,0,0
POREND==.
	.ENDC

.IFNZ NDISP
;VARIABLES AND CONSTANTS FOR DISPLAY SYSTEM

;THESE MUST BE IN THIS ORDER
DORBEG==.
.IFZ DDF
CURX:	.WORD 0,0	;CURX = CURRENT X POSITION
;			THE FIREST WORD IS THE INTEGER PART
;			THE SECOND WORD IS THE FRACTION PART
CURY:	.WORD 0,0	;CURY = CURRENT Y POSITION
CURA:	0	;CURA = THE CURRENT ANGLE
OLDX:	0	;CONTAINS CURX AT THE TIME OF LAST NEW SNAP
.IIF NZ FPPF, .WORD 0
OLDY:	0	;CONTAINS CURY AT THE TIME OF LAST NEW SNAP
.IFNZ FPPF
	.WORD 0
RCURX:	.WORD 0,0
RCURY:	.WORD 0,0
.ENDC
.ENDC

.IFNZ DDF
DCURX:	.WORD 0,0
DCURY:	.WORD 0,0
DCURA:	.WORD 0,0
DCOSA:	.WORD 0,0
DSINA:	.WORD 0,0
RDCURX:	.WORD 0,0,0,0
OLDX:	.WORD 0,0
OLDY:	.WORD 0,0
.ENDC
 
NADXY:	0	;NUMBER OF EXTRA ADDXY'S WE CAN TRY TO COLLAPSE
ODIREC:	0	;IF NOT EQUAL TO DIREC BREAK INCREMENTS TO NEW OWRD

DOREND==.	;MARKS END OF THESE VARIABLES
;END OF ORDER

STB:	0	;STATIC AREA BOTTOM
STT:	0	;STATIC AREA TOP.POINTS TO TOP OF STATIC DISPLAY AREA
DYB:	0	;DYNAMIC BOTTOM.  POINTS TO BOT OF DY AREA
DYR:	0	;ROVING POINTER USED BY DISPLAY STORAGE ALLOCATIN ROUTINES
DYT:	0	;POINTER TO DYNAMIC AREA TOP
TUB:	0	;POINTER TO TURTLE AREA BOTTOM
SNLIST:	0	;POINTER TO SNAP LIST
SNABOT:	0	;BOTTOM OF CURRENT SNAP
.IFZ DDF
SINA:	0
.IIF NZ FPPF,0	;CONTAINS SIN OF THE CURENT ANGLE
COSA:	0	;CONTAINS COS OF THE CURENT ANGLE
.IIF NZ FPPF,0
.ENDC
DFBCNT:	0	;KEEPS TRACK OF # OF FREE BITS IN DISPLAY LIST
PUSHJT:	0	;DISPLAY PUSHJ TO TURTLE
DRELOC:	0	;RELOCATION.  ADD THIS TO VIRTUAL ADDRESS TO GET DISPLAY ADDRESS
	.ENDC

DIREC:	0
.IFNZ FPPF
PI:	40511
	7732
	121041
	64303
.ENDC


ERRBUF:	.=.+MAXELN
LUVBLK==.-UVBLK
	.=.+20	;EXTRA P PDL SLOP
PDLLIM==.
	.=.+PPDLL
	IP=.
PPUSHL==IP-<PPDLL-PDSLOP>
PDLINK:	.=.+4	;LINK TO PREVIOUS DISK BLOCK
	.=.+SPDLL
	IS=.
SPUSHL==IS-<SPDLL-PDSLOP>
SDLINK:	.=.+4
DBUF:	.=.+DBUFL
HCC==67.	;HASH CODE CONSTANT - A PRIME
UHCT:	.=UHCT+<2*HCC>
	-1
GCBITS:	.BLKW 400

.IF2
	PAD ^\ START OF NODESP\,\.
.ENDC

NODESP:	0	;NODE 0
N==NODESP
	0
	$$==1
.IFNZ ENG
TRUE=LSTR+$$
	NODE SSTR+$.,"TR
	NODE SSTR,"UE
FALSE=LSTR+$$
	NODE SSTR+$.,"FA
	NODE SSTR+$.,"LS
	NODE SSTR,'E
.ENDC
.IFNZ FR
	VRAI=LSTR+$$
	NODE SSTR+$.,"VR
	NODE SSTR,"AI
	FAUX=LSTR+$$
	NODE SSTR+$.,"FA
	NODE SSTR,"UX
.ENDC
.IFNZ ENG
$TOTO=LSTR+$$
	NODE SSTR,"TO
.ENDC
.IFNZ FR
$POURX=LSTR+$$
	NODE SSTR+$.,"PO
	NODE SSTR,"UR
.ENDC

	LUNN=$$-1
	NNN=$$	;NEXT NODE NO.
SOFN=NNN	;START OF FREE NODES
ASOFN=.
CLSLTL=<.-UVBLK>/2
	.OFFSE 0
.STITL	INITIALIZE THE WORLD!
CORCHK:	ADD #2,(P)
	RTI
SORTER:	MOV SPDLP,P	;FOR STIMULATOR HACKING
	JSR PC,SORT	;JUST DO THE SORT
	HALT
START:	RESET
	MOV SPDLP,P	;SET UP SYSTEM PDL
.IFZ DHON
.IFG NDM
	MOV #DMTT,DM0TBR
.ENDC
.ENDC
	JSR PC,SORT	;SORT SYSTEM OBLIST
	MOV #CORCHK,BEBRV
	.IFNZ NDISP
	MOV #DISREL,NGREL	;SET DISPLAY RELOCATION
	BR .+2
	.ENDC
	MOV #PARREG,A
	MOV #PARCSR,B
	MOV B,C
	MOV #20,D
PARRCK:	MOV #1,(B)+
	MOV C,(A)+	;SKIPPED IF REG NOT THERE
	ADD #2,C
	SOB D,PARRCK
	MOV #MOVON,A
	TST RKCS
	MOV A,(A)
	MOV #100,LKS
	BR LINEKR
	CLR PCSTBF	
	MOV #115,PCS
LINEKR:
	JSR PC,SEGSET
	SPL 7
MEMCHK:	INC KDAR+2
	TST 20000
	BR MEMCHK
	DEC KDAR+2
	MOV KDAR+2,MEMHGH
	MOV #200,KDAR+2
	MOV #<<SLOT1_-6>&1777>,PUREAR
	MOV #BEBRK,BEBRV
	MOV #1600,F
	CLR C
	MOV #DISBFS,A
	MOV #1560-DISBFS,B
.IFNZ NDISP
	MOV NDISPS,D
	BEQ SLTAL2
DISAL:	MOV DLENGT(C),E
	CMP E,B
	BGT DISAL1
	MOV A,DISAR(C)
	ADD E,A
	SUB E,B
	BR DISAL2
DISAL1:	MOV F,DISAR(C)
	ADD E,F
DISAL2:	DEC E
	SWAB E
	BIS #6,E
	MOV E,DISDR(C)
	TST (C)+
	SOB D,DISAL
	CMP #DISTPB,F
	BGE .+4
	BPT
.ENDC
SLTAL2:
	.IFNZ TM
	MOV #NLTY,D
	MOV #TTYBBL,E
	MOV #TTYAR,C
TTYAL2:	CMP E,B
	BGT TTYAL1
	MOV A,(C)+
	ADD E,A
	SUB E,B
	SOB D,TTYAL2
	BR SLTAL4
TTYAL1:
	.IF DF NCODEB
	MOV #NCODEB,B
	MOV #CODENB,A
TTYAL3:	CMP E,B
.IIF Z 0,	BGT TTYAL4
.IIF Z 1,	BR TTYAL4
	MOV A,(C)+
	ADD E,A
	SUB E,B
	SOB D,TTYAL3
	BR SLTAL4
TTYAL4:
	.ENDC
TTYAL5:	MOV F,(C)+
	ADD E,F
	SOB D,TTYAL5
SLTAL4:
	.ENDC
	MOV MEMHGH,B
	SUB F,B
	BGT .+4
	BPT
	SPL 0
	CLR A
	DIV NSLOTS,A
	CMP #600,A
	BGT .+6
	MOV #577,A
	MOV A,B
	ASH #6,B	;CHANGE TO BYTES
	ADD #PURE,B	;ADDRESS OF END OF THE WORLDD
	MOV B,ENDWLD	;SAVE END OF WORLD
	SUB #NODESP+<4096.*4>,B	;ANYTHING LEFT FOR ARRAYS?
	BLT SLTAL3	;NOPE, SORRY ABOUT THAT
	MOV B,ASIZE	;WHAT'S LEFT
SLTAL3:	MOV F,B
	CLR C
	MOV NSLOTS,D
SLTAL1:
	MOV B,SLOTAR(C)
	MOV B,F
	CLR E
	ASHC #6,E
	MOV E,SLOTHA(C)
	MOV F,SLOTCA(C)
	ADD A,B
	TST (C)+
	DEC D
	BGT SLTAL1	;DO THIS NSLOTS TIMES
	MOV #SLOTDR,B
	MOV A,C
	MOV #3,D
SLTDRS:	MOV #77406,(B)
	CMP #200,C
	BLE SLTDR1
	TST C
	BGT SLTDR2
	CLR (B)
	BR SLTDR1
SLTDR2:	DEC C
	MOVB C,1(B)
SLTDR1:	SUB #200,C
	TST (B)+
	SOB D,SLTDRS
	ASH #6,A
	MOV A,USLENT
	ASR A
	MOV A,B		;SAVE A POSITIVE WORD COUNT
	NEG B
	MOV B,USWCNT
	ASL A	;DIVIDE BY 200
	SWAB A
	INC A	;ADD 1 TO BE SURE
	MOVB A,USNSEC	;NUMBER OF SECTORS USED BY A SLOT
	TST DEBSW
	BNE NOTIME
GETTIM:	CPRTXT ^\DATE AND TIME YY/MM/DD HH:MM:SS :\
	MOV #RYEAR+1,C
GETNM1:	CLR B
	CLR F
GETNUM:	JSR PC,TYI
	CMP #177,D
	BEQ GETTIM
	CMP #15,D
	BEQ NOTIM1
	SUB #60,D
	BLT GOTNUM
	CMP #10.,D
	BLE GOTNUM
	INC F
	MUL #10.,B
	ADD D,B
	BR GETNUM
GOTNUM:	CMP #RSEC,C
	BEQ NOTIME
	TST F
	BEQ GETNM1
	CMP #RDAY,C
	BHIS .+4
	DEC B	;YMD ARE ALL INCREMENTED BEFORE TYPEOUT
	MOVB B,-(C)
	BR GETNM1
NOTIM1:	TST F
	BEQ .+4
	MOVB B,-(C)
NOTIME:	MOV FHCLUS,D	;FIND CLEAR USER PLACE
	SPUSH F
	SPUSH #DCLRUS
	JSR PC,LSH7
	ADD #<CLSLTL_-7>+1,D
	SPUSH F
	SPUSH #ERBASE
	JSR PC,LSH7
	ADD #<ERLNTH_-8>+1,D
	SPUSH D
	JSR PC,SYDRBG
	CLR (A)+
	MOV #-ERLNTH/2,(A)+
	MOV #ERRSRT,(A)+
	MOV ERBASE,(A)+
	MOV ERBASE+2,(A)+
	TST (A)+
	MOV #DWRTEC,(A)
	JSR PC,DPROVK
	TST (A)
	BNE .-2
	SPUSH F
	SPUSH #DSKRND
	JSR PC,LSH7
	MOV #7777,D
	SUB (P),D
	CLR C
	DIV NUSERS,C
	MOV C,A
	MOV A,B
	SUB #2,A	;KLUDGE, THIS IS SIZE OF TYI+EDIT BUFS+SIZE OF SAVE SPACE
	SUB USNSEC,A	;NUMBER OF SECTORS NEEDED FOR SWAPPING
	MOV A,E	;REMAINING IS FOR DISK BLOCKS
	CMP #400,A	;BUT NOT MORE THAN 1000
	BGT .+6
	MOV #377,A	;MAXIMUM
	MOV A,B
	ASH #-4,B
	MOV #DBITTB,C	;SET UP TO INIT DISK BIT TABLE
DALOC5:	DEC B	;20 BLOCKS (=1 WORD IN TABLE)AT A TIME
	BLT DALOC4	;ALL DONE 
	CLR (C)+
	BR DALOC5
DALOC4:	CLR (C)	;ONLY SOME BITS ON IN THIS WORD
	COM (C)
	MOV #1,D
	BIC #177760,A	;# OF WORDS MOD 20
DALOC6:	DEC A
	BLT DALOC7
	BIC D,(C)
	ASL D
	BR DALOC6
DALOC7:	TST (C)+
	CMP C,#DBITBE
	BGT DALOC8
	MOV #-1,(C)
	BR DALOC7
DALOC8:	BIS #100000,DBITBE	;IMPOSSIBLE TO GO OFF TOP
	CLR U
	MOV NUSERS,C
	SPOP A	;STARTING ADDRESS OF SYS STORAGE
.MACR IADDR AD	;MACRO TO INTIALIZE USER VARIABLES
	MOV A,D
	SPUSH F
	SPUSH AD
	JSR PC, LSH7
	ADD #LUBLK,AD
.ENDM

UVINIT:	MOV ASIZE,UASIZE(U)
	CLR FLSADR(U)
	MOV #-1,SLOTAS(U)
	MOV #-1,DISAS(U)
.IIF Z NINT,	MOV #FRNEWU,FLSRES(U)	;THIS IS A NEW USER
.IIF NZ NINT,	MOV #FRNIU,FLSRES(U)
	IADDR IUSWPD
	ADD USNSEC,A	;FIRST ADDRESS IS SWAPPING AREA
	IADDR IUDBSV	;PLACE TO SAVE DISK BUFFERS WHEN GC'ING
	ADD #4,A	;KLUDGE
	MOV A,@IUDSK
	ADD #LUBLK,IUDSK
	ADD E,A
	ADD #LUBLK,U
	DEC C
	BGT UVINIT
	MOV #MNUSRS,A
	SUB NUSERS,A	;GET NUMBER OF INACTIVE SLOTS
UVINT1:	DEC A	;ANY INACTIVE SLOTS TO FLUSH?
	BLT UVINT2	;NO
	MOV #-1,FLSADR(U)
	ADD #LUBLK,U
	BR UVINT1
UVINT2:	MOV #-1,SLOTAS(U)
	MOV #SYSJOB,FLSADR(U)	;INIT SYS JOB
	CLR UTTY(U)	;PUT IT ON TTY ZERO
	JMP INIT1

CHI:	0		;USED IN STYI
MEMHGH:	0
MOVON:	0

IUSWPD:	USWPAD
IUDBSV:	UDBFSV
IUDSK:	UDSKAD

SORT:	MOV #SOBLST+2,A	;POINTER TO START AT
	MOV #SOBLSU,B	;PLACE TO FINISH
	MOV PC,F	;SET "SOMETHING MOVED" FLAG
SORTUG:	TST F	;DID SOMETHING GET MOVED LAST PASS?
	BEQ SORTDN	;NO, WE ARE DONE
	CLR F	;NOTHING SO FAR THIS PASS
	MOV A,C	;POINTER INTO TABLE
SORTU:	MOV (C)+,D	;START OF SORT UP
	MOV (C),E	;THINGS TO SORT
	ADD #4+SOBLST,D	;GET TO STRING
	ADD #4+SOBLST,E	;FOR BOTH
SORTU3:	CMPB (D),(E)	;COMPARE THE WORDS
	BLT SORTU2	;IN ORDER, GO TO NEXT PAIR
	BEQ SORTU1	;SAME, CHECK NEXT WORD
	INC F	;HAVE TO SWITHC THEM
	MOV -(C),D
	MOV 2(C),(C)+
	MOV D,(C)
SORTU2:	CMP C,B	;ARE WE AT END?
	BNE SORTU	;NO, CONTINUE
	TST -(B)	;YES, NEXT TIME NOT SO FAR
	BR SORTDG	;GO TO DOWNWARD SORT
SORTU1:	TSTB (D)+
	BNE .+6	;NO, OK
	MOV #ZERO,D	;YES, KEEP IT THAT WAY
	TSTB (E)+
	BNE .+6
	MOV #ZERO,E
	CMP D,E	;ARE THEY THE SAME (I.E. ZERO?)
	BNE SORTU3	;OK, CONTINUE
	BPT	;BARF, THEY'RE EQUAL????
	BR SORTU3

SORTDG:	TST F	;DID WE MOVE ANY ON THE UP PASS?
	BEQ SORTDN	;NO,DONE
	CLR F	;CLEAR FLAG
	MOV B,C	;SET POINTER
SORTD:	MOV (C),D
	MOV -(C),E
	ADD #4+SOBLST,D
	ADD #4+SOBLST,E
SORTD3:	CMPB (D),(E)
	BGT SORTD2
	BEQ SORTD1
	INC F
	MOV (C)+,D
	MOV (C),-(C)
	MOV D,2(C)
SORTD2:	CMP C,A
	BNE SORTD
	TST (A)+
	BR SORTUG
SORTD1:	TSTB (D)+
	BNE .+6	;NO, OK
	MOV #ZERO,D	;YES, KEEP IT THAT WAY
	TSTB (E)+
	BNE .+6
	MOV #ZERO,E
	CMP D,E	;ARE THEY THE SAME (I.E. ZERO?)
	BNE SORTD3
	BPT
	BR SORTD3

SORTDN:	RTS PC
ZERO:	0


FHCLUS:	2400
LOGEND=.
.IIF P2,PAD ^\LOGEND=\,\.
	.END START
