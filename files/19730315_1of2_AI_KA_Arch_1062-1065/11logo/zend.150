	.STITL	DISC BLOCKS, NODE SPACE AND TEST LINES
	VERN==VERN+%FNAM2

	.MACR NODE A,B
	.XLIST
$.==$$+1
	A
	B
$$==$$+1
	.LIST
.ENDM

VERNF==VERN
	FOR 0
SALTL:	LTL
LTL:	L1
	L2
	L3
	L4
	L5
	L6
	0	;L7
	0	;L8
	0	;L9
	0	;L10
	0	;L11
	0	;L12
	0	;L13
	0	;L14
	0
	.ENDC
	ENDC 0

.EVEN
SLOT1:
	.IF2
	PAD ^\ SLOT1 AT\,\.
	.ENDC
MSLTLN==LUVBLK+PPDLL+SPDLL+DBUFL+DDBUFL+<4*4096.>	;ALL YOU COULD POSSIBLY WANT
	.STITL USER VARIABLES

UVBLK=.
UAB:	NODESP	;BASE OF CURRENT USER'S NODE SPACE
S:	IS
UPDLP:	IP	;USER PDL POINTER(ONLY WHEN USER NOT RUNNING)
SPOPL:	IS
SSWPAD:	IS-PDSWOP
PPOPL:	IP
PSWPAD:	IP-PDSWOP
DBUFAD:	DBUF
DDIRAD:	DDIR	;THE DISK DIRECTORY
DBUFPT:	0	;POINTER INTO THE DISK BUFFER
DDIRPT:	0
.IFNZ NEWERS
ERRPNT:	0
.ENDC
BASEUS:	0	;BASE OF USER SLOT(MUST BE LAST RELOCATED)
UVREND=.	;END OF VARIABLES TO BE RELOCATED
;BELOW ARE NOT RELATIVE
.IFZ NEWERS
ERRPNT:	0
.ENDC
PRBAO:	0	; = 0,374,770, ... N*PDSWOP
SPRBAO:	0	;WHERE N = # P OR S PDL BLOCKS SWAPPED OUT
NSYBUG:	20.	;NUMBER OF SYSTEM BUGS BEFORE RELOAD
NNGC:	0	;NUMBER OF NODES GARBAGE COLLECTED
NNIFSL:	0	;NO. NODES IN FREE STORAGE LIST
DSKNCH:	0	;NUMBER OF CHARS LEFT IN DISK BUFFER
DSKNSC:	0	;NUMBER OF SECTORS IN THIS FILE
DSKADR:	0	;CURRENT SECTOR FOR THIS FILE
SSAVEA:	0	;PLACE S PDL SAVED WHEN MARKING SWAPED OUT PDL
DDIRLS:	FHEADD
	MOV0D
	MOV1D
	-1
DSKDAD:	0
DIRNAM:	0
	0
FNAME:	0
	0
FREE:	SOFN	;START OF FREE NODES
TOPS:	0	;GC MARK FROM HERE IF NON 0
TOPS1:	0	;   "
GCP1:	0
GCP2:	0
GCPREV:	0
JPLN:	0	;PROCEDURE LINE # BEFORE LAST "GO"
	;THE FOLLOWING ARE PUSHED BY PEVAL
CPP:	0	;CURRENT PROCEDURE POINTER
CPSN:	0	;C.P. SWAP NO.
CPLN:	0	;CURRENT PROCEDURE LINE NO.
CLP:	0	;CURRENT LINE POINTER - GOOD IF CPSN'S AGREE
CLGN:	0	;CURRENT LINE GENERATION NO.
CTN:	0	;CURRENT TOKEN NO.
CTP:	0	;CURRENT TOKEN POINTER
FUNLEV:	0	;FUNCTION LEVEL
IFLEV:	0	;IF LEVEL
FLAGS:	0	;FLAG WORD
CSPDLP:	0	;CURRENT S PDL PTR AFTER LAST PEVAL PUSH
CPDLP:	0	;CURRENT PDL PTR AFTER LAST PEVAL PUSH
	;END OF PEVAL PUSHES EXCEPT REL. S, CO AND CO+2 ARE ALSO PUSHED

	;THE FOLLOWING ARE PUSHED (SOMETIMES) BY EVAL
	ERCLR1==.	;ON ERROR, START ZEROING HERE
CO:	0	;CURRENT OPERATOR
	0
NOR:	0	;NO. OF OPERANDS STILL NEEDED BEFORE CO CAN BE EXECUTED
	;END OF EVAL PUSHES
COF:	0	;CURRENT OPERATOR FLAGS
LO:	0	;LAST OPERATOR
	0
CT:	0	;CURRENT TOKEN
	0	; "
RDFLAG:	0	;FOR READ
LISTBD:	0	;LIST BUILD DEPTH
PSTOPR:	0	;RETURN ADDR FOR PSTOP
;UNGRAB:	0	;FOR .GRAB. PUTTING A NODE ADDR HERE MEANS THAT IT
		;WILL BE THE NEXT GRABBED.  GC WILL MARK FROM "UNGRAB"
		;USE WITH CAUTION!!
TEMP:	0
TMPBLK:	0
	0
	0
	0
	0
	0
ERPRNM:	0	;RESTORE THIS PROC NAME ON SOME ERRORS
TFLAGS:	0	;TEMP FLAGS (ALL TFN'S SHOULD EVENTALLY POINT HERE)
NCHR:	0	;FOR BLST
ABASE:	0	;(ABASE)+10. IS WHAT ARITHMETIC BASE WE ARE IN
		;(FOR CONVERT TO & FROM STRING ROUTINES)
	ERCLR2==.	; ON ERROR STOP CLEARING HERE
TOPRNM:	0	;PTR TO UOE OF PROC. BEING "TO"'ED
FNLLP:	0	;FIRST NODE OF LIST OF LINE POINTERS (FOR "TO")
FLAGS2:	0	;EVAL FLAGS - NOT PUSHED BY PEVAL
;ALTL:	0	;TEST LINE POINTER
;LINENO:	0	;FOR TEST MODE
PRMTCH:	'?	;PROMPT CHAR
GNCN:	0	;"GET NEXT CHAR" NODE AND USED BY GNOLE
	0
NBKTS:	0	;FOR RDSTR
SHWHAT:	PSHOW	;FOR SHOW,EDIT,ERASE!!
LASTER:	0	;ADDRESS OF LAST ERROR
GCHR:	TYI	;SOURCE OF CHARS
PCHR:	TYO	;PLACE WHERE OUTPUT CHARS GO (TYO, BLST, ...)
RNSEED:	27.	;FOR RANDOM
ALEVN:	0	;NON-ZERO MEANS ALLOW N LEVEL BREAK STUFF
DBITTB:	.=.+40
DBITBE=.-2
;TURTLE VARIABLES
TURDN:	0	;USER'S TURTLE DEVICE NUMBER
TURF:	0	;FUDGE FACTOR FOR TURTLE LEFT AMD RIGHT

;MUSIC VARIABLES
MVOC:	.WORD	0,0,0,0	;POINTERS TO VOICE LISTS--ONE FOR EACH VOICE


DFLAGS:	.WORD 0
	FOR NDISP
;VARIABLES AND CONSTANTS FOR DISPLAY SYSTEM

;THESE MUST BE IN THIS ORDER
DORBEG==.	;MARKS BEGINNING OF THESE VARIABLES
CURX:	.WORD 0,0	;CURX = CURRENT X POSITION
;			THE FIREST WORD IS THE INTEGER PART
;			THE SECOND WORD IS THE FRACTION PART
CURY:	.WORD 0,0	;CURY = CURRENT Y POSITION
CURA:	0	;CURA = THE CURRENT ANGLE
OLDX:	0	;CONTAINS CURX AT THE TIME OF LAST NEW SNAP
OLDY:	0	;CONTAINS CURY AT THE TIME OF LAST NEW SNAP
OLDIR:	.BYTE 0	;CONTAINS DIREC WHEN DR.LIN LAST CALLED
	.EVEN
NADXY:	0	;NUMBER OF EXTRA ADDXY'S WE CAN TRY TO COLLAPSE

DOREND==.	;MARKS END OF THESE VARIABLES
;END OF ORDER

STB:	0	;STATIC AREA BOTTOM
STT:	0	;STATIC AREA TOP.POINTS TO TOP OF STATIC DISPLAY AREA
DYB:	0	;DYNAMIC BOTTOM.  POINTS TO BOT OF DY AREA
DYR:	0	;ROVING POINTER USED BY DISPLAY STORAGE ALLOCATIN ROUTINES
DYT:	0	;POINTER TO DYNAMIC AREA TOP
TUB:	0	;POINTER TO TURTLE AREA BOTTOM
SNLIST:	0	;POINTER TO SNAP LIST
SNABOT:	0	;BOTTOM OF CURRENT SNAP
SINA:	0	;CONTAINS SIN OF THE CURENT ANGLE
COSA:	0	;CONTAINS COS OF THE CURENT ANGLE
DIREC:	0	;CONTAINS DIRECTION CODE FRO CURRENT ANGLE
ODIREC:	0	;IF NOT EQUAL TO DIREC BREAK INCREMENTS TO NEW OWRD
DFBCNT:	0	;KEEPS TRACK OF # OF FREE BITS IN DISPLAY LIST
PUSHJT:	0	;DISPLAY PUSHJ TO TURTLE
DISBIT:	0	;HAS A BIT SET CORRESPONDING TO DISPLAY SLOT
DISNUM:	0
	.ENDC
	ENDC NDISP


;THIS MUST BE AT THE END
MAXELN==0
ERRBUF:	.=.+MAXELN
LUVBLK==.-UVBLK
	.=.+PPDLL
	IP=.
PPUSHL==IP-<PPDLL-PDSLOP>
PDLINK:	.=.+4	;LINK TO PREVIOUS DISK BLOCK
	.=.+SPDLL
	IS=.
SPUSHL==IS-<SPDLL-PDSLOP>
SDLINK:	.=.+4
HCC==67.	;HASH CODE CONSTANT - A PRIME
UHCT:	FOR 0
	.=UHCT+<2*16.>
	$OB3
	$OB4
	$OB5
	.=UHCT+<2*23.>
	$OB2
	.=UHCT+<2*60.>
	$OB1
	.ENDC
	ENDC 0
	.=UHCT+<2*HCC>
	-1
GCBITS:DBUF:	.=.+DBUFL
DDIR:	.=.+DDBUFL
	0
	0

.IF2
	PAD ^\ START OF NODESP\,\.
.ENDC

NODESP:	0	;NODE 0
N==NODESP
	0
	$$==1
TRUE=LSTR+$$
	NODE SSTR+$.,"TR
	NODE SSTR,"UE
FALSE=LSTR+$$
	NODE SSTR+$.,"FA
	NODE SSTR+$.,"LS
	NODE SSTR,'E
SECRET=LSTR+$$
	NODE SSTR+$.,"SE
	NODE SSTR+$.,"CR
	NODE SSTR,"ET
	FOR 0
	.=NODESP+404.
	L1=101.			;PRINT "ABCD"
	SFUN+102.	;NODE 101
	$PRINT
	LSTR+0		;102
	LSTR+103.
	SSTR+104.	;103
	"AB
	SSTR	;104
	"CD
	L2=105.			;"123"
	LSTR+0	;105
	LSTR+106.
	SSTR+107.	;106
	"12
	SSTR	;107
	'3
	SFUN	;108
	0
	SFUN		;109
	0
	L3=110.			;(PRINT "AXBYJ" "1Q" "FOOBAR")
	SFUN+111.	;110
	$LPAR
	SFUN+112.	;111
	$PRINT
	LSTR+117.	;112
	LSTR+114.
	SSTR+0		;113
	"1Q
	SSTR+115.	;114
	"AX
	SSTR+116.	;115
	"BY
	SSTR+0		;116
	'J
	LSTR+118.	;117
	LSTR+113.
	ATOM+119.	;118
	ATOM+122.
	SFUN+0	;119
	$RPAR
	SFUN+0		;120
	0
$OB1=121.
	0		;121 = START OF UOB BUCKET 60.
	$FOO
	$FOO=122.
	ATOM+125.		;122 - HEADER OF FIRST UOE
	LSTR+123.
	SSTR+124.	;123
	"FO
	SSTR+0		;124
	'O
	VBIND+$FOOF		;125 - VARIABLE BINDING OF 1ST UOE
	LSTR+126.
	SSTR+127.	;126
	"FO
	SSTR+128.	;127
	"OB
	SSTR+0		;128
	"AR
	0		;129
	0
	L4=130.		;IF "TRUE" THEN PRINT "TRUE" ELSE PRINT "FALSE"
	SFUN+131.	;130
	$IF
	LSTR+134.	;131
	LSTR+132.
	SSTR+133.	;132
	"TR
	SSTR+0		;133
	"UE
	SFUN+135.	;134
	$THEN
	SFUN+136.	;135
	$PRINT
	LSTR+137.	;136
	LSTR+132.
	SFUN+138.	;137
	$ELSE
	SFUN+139.	;138
	$PRINT
	LSTR+0	;139
	LSTR+140.
	SSTR+141.	;140
	"FA
	SSTR+142.	;141
	"LS
	SSTR+0		;142
	'E
	SFUN+0		;143
	0
	$$=144.
L5=$$	;MAKE "BAR" "AB1C"
	NODE SFUN+$.,$MAKE
	NODE ATOM+$.,ATOM+$BAR
	NODE LSTR,LSTR+$.
	NODE SSTR+$.,"AB
	NODE SSTR,"1C
L6=$$	;PRINT :BAR
	NODE SFUN+$.,$PRINT
	NODE UVAR,UVAR+$BAR
$OB2=$$
	NODE 0,$BAR	;START OF UOB BUCKET 23.
$BAR=$$
	NODE ATOM,LSTR+$.
	NODE SSTR+$.,"BA
	NODE SSTR,'R
L7==$$	;FOO :BAR "GRINCH"
	NODE UFUN+$.,$FOO
	NODE UVAR+$.,UVAR+$BAR
	NODE LSTR,LSTR+$.
	NODE SSTR+$.,"GR
	NODE SSTR+$.,"IN
	NODE SSTR,"CH
$FOOF=$$
	NODE FBIND+$.,LIST+$FLLP
	NODE SFBIND,LIST+$FSFB
$FLLP=$$
	NODE LIST+$.,LIST+$FL0
	NODE LIST+$.,LIST+$FL1
	NODE LIST,LIST+$FL2
$FL0=$$
	NODE SNUM+$.,2
	NODE SNUM+$.,$A
	NODE SNUM,$B
$FL1=$$
	NODE SNUM+$.,10.
	NODE SFUN+$.,$PRINT
	NODE UVAR,UVAR+$A
$FL2=$$
	NODE SNUM+$.,20.
	NODE SFUN+$.,$PRINT
	NODE UVAR,UVAR+$B
$FSFB=$$
	NODE SNUM+$.,2	;NO. ARGS
	NODE SNUM+$.,0	;PROCD SWAP NO.
	NODE SNUM+$.,0	;NO. NODES
	NODE SNUM+$.,0	;NO. FLUSHABLE NODES
	NODE SNUM+$.,0	;DISC ADDR 1
	NODE SNUM+$.,0	; "     "     2
	NODE SNUM+$.,0	;# WORDS ON DISC
$OB3=$$
	NODE 0,$A	;START OF UOB BUCKET 16.
$OB4=$$
	NODE 0,$B	;START OF UOB BUCKET 17.
$OB5=$$
	NODE 0,$C	;START OF UOB BUCKET 18.
$A=$$
	NODE ATOM,LSTR+$.
	NODE SSTR,'A
$B=$$
	NODE ATOM+$BVB,LSTR+$.
	NODE SSTR,'B
$BVB=$$
	NODE VBIND,LSTR+$.
	NODE SSTR+$.,"B.
	NODE SSTR+$.,"HA
	NODE SSTR+$.,"S.
	NODE SSTR+$.,"LO
	NODE SSTR,"TS
$C==$$
	NODE ATOM+$CVB,LSTR+$.
	NODE SSTR,'C
$CVB==$$
	NODE VBIND,LNUM+$.
	NODE SNUM,100.
L8=$$	;MAKE "BLIP" 13
	NODE SFUN+$.,$MAKE
	NODE LSTR+$.,LSTR+$BLIP
	NODE LNUM,LNUM+$.
	NODE SNUM,13
L9=$$	;PRINT : "BLIP"
	NODE SFUN+$.,$PRINT
	NODE SFUN+$.,$DOTS
	NODE LSTR,LSTR+$BLIP
L10=$$	;MAKE "BLIP" "XX"
	NODE SFUN+$.,$MAKE
	NODE LSTR+$.,LSTR+$BLIP
	NODE LSTR,LSTR+$.
	NODE SSTR,"XX
L11=$$	;PRINT :"BLIP"
	NODE SFUN+$.,$PRINT
	NODE SFUN+$.,$DOTS
	NODE LSTR,LSTR+$BLIP
L12=$$	;MAKE "BLAP" "YY"
	NODE SFUN+$.,$MAKE
	NODE LSTR+$.,LSTR+$BLAP
	NODE LSTR,LSTR+$.
	NODE SSTR,"YY
L13==$$	;PRINT :"BLAP"
	NODE SFUN+$.,$PRINT
	NODE SFUN+$.,$DOTS
	NODE LSTR,LSTR+$BLAP
L14==$$	;STARTDISPLAY
	NODE SFUN,$START
L15==$$	;FORWARD :C
	NODE SFUN+$.,$FORWA
	NODE UVAR,UVAR+$C
$BLAP==$$	;"BLAP"
	NODE SSTR+$.,"BL
	NODE SSTR,"AP
$BLIP==$$	;"BLIP"
	NODE SSTR+$.,"BL
	NODE SSTR,"IP
	.ENDC
	ENDC 0

	LUNN=$$-1
	NNN=$$	;NEXT NODE NO.
SOFN=NNN	;START OF FREE NODES
ASOFN=.
.STITL	INITIALIZE THE WORLD!
CORCHK:	ADD #2,(P)
	RTI
START:	RESET
	MOV SPDLP,P	;SET UP SYSTEM PDL
.IFG NDM
	MOV #DMTT,DM0TBR
.ENDC
	CLR TIME
	MOV #CORCHK,BEBRV
	.IFNZ NDISP
	MOV #DISREL,NGREL	;SET DISPLAY RELOCATION
	BR .+2
	.ENDC
	MOV #MOVON,A
	TST RKCS
	MOV A,(A)
	MOV #100,LKS
	BR LINEKR
	CLR PCSTBF	
	MOV #115,PCS
LINEKR:	MOV #LOGEND,A	;LAST LOCATION WITH CRAP IN IT
	ADD #200,A
	TST (A)	;IS IT REALLY THERE?
	BR .-6	;LOOP ENDED BY MEM TRAP
	BIC #377,A
	MOV #BEBRV+2,BEBRV
	SUB #1000+SLOT1,A	;FUDGE AREA (NOW RADIA CAN FIT DDT THERE!)
	CLR B
	MOV #MQ,C
	MOV A,(C)	;MOVE A TO MQ
	CLR -(C)	;CLEAR HIGH ORDER(AC)
	MOV NSLOTS,-(C)	;DIVIDE
	MOV MQ,B	;GET RESULT
	CMP B,#MSLTLN
	BLO .+6
	MOV #MSLTLN,B
	BIC #37,B
	MOV #SLOT1,A	;BEGINING OF SLOT-2 (FOR DISK)
	MOV #SLTCAD+2,C	;ADDRESS OF SLOT
	MOV NSLOTS,D
	MOV D,NINU	;NUMBER OF USERS IN CORE NOW.
	CLR E
SLTAL1:	MOV A,(C)+	;ADDRESS OF THIS SLOT
	ADD B,A	;NEXT ONE
	MOV E,SLOTST-SLTCAD-4(C)	;USER OF THIS SLOT
	MOV #1,SLOTST-SLTCAD-2(C)	;JUST SWAPED IN
	ADD #LUBLK,E	;NEXT USER
	TST (C)+
	DEC D
	BGT SLTAL1	;DO THIS NSLOTS TIMES
	MOV B,USLENT
	ASR B
	MOV B,A	;SAVE A POSITIVE WORD COUNT
	NEG B
	MOV B,USWCNT
	ASL A	;DIVIDE BY 200
	SWAB A
	INC A	;ADD 1 TO BE SURE
	MOVB A,USNSEC	;NUMBER OF SECTORS USED BY A SLOT
	TST (PC)+
MOVON:	0
	BNE .+6
	JMP M1AIN
	JSR PC,SYDRBG
	CLR (A)+
	MOV #-200,(A)+
	MOV #FHDDIR,(A)+
	CLR (A)+
	MOV #-1,(A)+
	TST (A)+
	MOV #DREADC,(A)
	BIS #100,DSKS
	TSTB (A)
	BNE .-2
	MOV #MOV0DR,B
	MOV #FHDDIR,A
	CLR D
	JSR F,FSEARC
	BR M0INIT
	BR M0INIT
	BR M0AIN
M0INIT:	PRTXT ^/INIT THE FIXED PLATTER?/
	JSR PC,TYI
	MOV D,E
	PRCR
	CMP #'Y,E
	BNE M0AIN
	JSR PC,SYDRBG
	CLR (A)+
	MOV #-200,(A)+
	MOV #MOV0DR,(A)+
	CLR (A)+
	MOV #-1,(A)+
	TST (A)+
	MOV #DWRTEC,(A)
	BIS #100,DSKS
	TST (A)
	BNE .-2
M0AIN:
	JSR PC,SYDRBG
	CLR (A)+
	MOV #-200,(A)+
	MOV #FHDDIR,(A)+
	MOV #20000,(A)+
	MOV #-1,(A)+
	TST (A)+
	MOV #DREADC,(A)
	BIS #100,DSKS
	TSTB (A)
	BNE .-2
	MOV #MOV1DR,B
	MOV #FHDDIR,A
	CLR D
	JSR F,FSEARC
	BR M1INIT
	BR M1INIT
	BR M1AIN
M1INIT:	PRTXT ^/INIT THE REMOVEABLE PLATTER?/
	JSR PC,TYI
	MOV D,E
	PRCR
	CMP #'Y,E
	BNE M1AIN
	JSR PC,SYDRBG
	CLR (A)+
	MOV #-200,(A)+
	MOV #MOV1DR,(A)+
	MOV #20000,(A)+
	MOV #-1,(A)+
	TST (A)+
	MOV #DWRTEC,(A)
	BIS #100,DSKS
	TST (A)
	BNE .-2
M1AIN:
	JSR PC,SYDRBG
	CLR (A)+
	MOV #-200,(A)+
	MOV #FHDDIR,(A)+
	CLR (A)+
	CLR (A)+
	TST (A)+
	MOV #DREADC,(A)
	BIS #100,DSKS
	TSTB (A)
	BNE .-2
	CLR (A)
	SPUSH A
	MOV #FHIDIR,B	;SEE IF IT IS INITIALIZED
	MOV #FHDDIR,A
	CLR D
	JSR F,FSEARC
	BR DINIT	;NOT INIT
	BR DINIT	;NOT INIT
	CMP #FHDDIR,A
	BEQ DAINIT	;DISK ALREADY INIT
DINIT:	PRTXT ^\OK TO INIT DISK?\
	JSR PC,TYI
	CMP #'Y,D
	BNE DAINIT
	MOV #200,A
	MOV #FHIDIR,B
	MOV #FHDDIR,C
	MOV (B)+,(C)+
	DEC A
	BGT .-4
	MOV #DWRTEC,@(P)	;WRITE OUT THE INITIALIZED DIRECTORY
	INC NDSKRQ
	BIS #100,DSKS
	TST @(P)
	BNE .-4
DAINIT:	JSR PC,.CRLF
	TST (P)+
	MOV #FHCLUS,B	;FIND CLEAR USER PLACE
	JSR F,FHSERC
	HALT	;DISK STILL NOT PROPERLY INIT??????
	JSR F,LSH7
	DCLRUS
.IFNZ NEWERS
	MOV #FHERR,B
	JSR F,FHSERC
	HALT
	JSR F,LSH7
	ERBASE
	JSR PC,SYDRBG
	CLR (A)+
	MOV #-ERLNTH/2,(A)+
	MOV #ERRSRT,(A)+
	MOV ERBASE,(A)+
	MOV ERBASE+2,(A)+
	TST (A)+
	MOV #DWRTEC,(A)
	TST (A)
	BNE .-2
.ENDC
	MOV #FHSYS,B	;FIND THE SYSTEM AREA
	JSR F,FHSERC
	HALT ;????????
	SPUSH D	;SAVE ADDRESS OF START
	JSR F,LSH7
	DSKRND
	MOV 10(A),D	;LENGTH OF SYSTEM AREA
	BIC #170000,D	;GET RID OF TYPE
	MOV D,MQ	;DIVIDE SPACE EQUALLY AMONG USERS
	MOV NUSERS,DIVIDE
	MOV MQ,A
	MOV A,B
	SUB #20+2,A	;KLUDGE, THIS IS SIZE OF TYI+EDIT BUFS+SIZE OF SAVE SPACE
	SUB USNSEC,A	;NUMBER OF SECTORS NEEDED FOR SWAPPING
	MOV A,E	;REMAINING IS FOR DISK BLOCKS
	CMP #400,A	;BUT NOT MORE THAN 1000
	BGT .+6
	MOV #377,A	;MAXIMUM
	MOV A,B
	ASR B
	ASR B
	ASR B
	ASR B	;NUMBER OF BLOCKS/20 NOW IN B
	MOV #DBITTB,C	;SET UP TO INIT DISK BIT TABLE
DALOC5:	DEC B	;20 BLOCKS (=1 WORD IN TABLE)AT A TIME
	BLT DALOC4	;ALL DONE 
	CLR (C)+
	BR DALOC5
DALOC4:	CLR (C)	;ONLY SOME BITS ON IN THIS WORD
	COM (C)
	MOV #1,D
	BIC #177760,A	;# OF WORDS MOD 20
DALOC6:	DEC A
	BLT DALOC7
	BIC D,(C)
	ASL D
	BR DALOC6
DALOC7:	TST (C)+
	CMP C,#DBITBE
	BGT DALOC8
	MOV #-1,(C)
	BR DALOC7
DALOC8:	BIS #100000,DBITBE	;IMPOSSIBLE TO GO OFF TOP
	CLR U
	MOV NUSERS,C
	CMP #1,C
	BNE .+10
	MOV #1,NEXTU7
	SPOP A	;STARTING ADDRESS OF SYS STORAGE

.MACR IADDR AD	;MACRO TO INTIALIZE USER VARIABLES
	MOV A,D
	JSR F,LSH7
	AD
	ADD #LUBLK,.-2	;THIS IS IMPURE CODE!!!
.ENDM

UVINIT:	CLR FLSADR(U)
	MOV #FRNEWU,FLSRES(U)	;THIS IS A NEW USER
	IADDR USWPAD
	ADD USNSEC,A	;FIRST ADDRESS IS SWAPPING AREA
	IADDR UDBFSV	;PALCE TO SAVE DISK BUFFERS WHEN GC'ING
	ADD #2,A	;KLUDGE
	IADDR DTYIBF
	ADD #10,A	;KLUDGE, LENGTH OF TYI BUF
	IADDR DEDTBF
	ADD #10,A	;KLUDGE, LENGTH OF EDIT BUFFER
	MOV A,UDSKAD
	ADD #LUBLK,.-2
	ADD E,A
	ADD #LUBLK,U
	DEC C
	BGT UVINIT
	MOV #MNUSRS,A
	SUB NUSERS,A	;GET NUMBER OF INACTIVE SLOTS
UVINT1:	DEC A	;ANY INACTIVE SLOTS TO FLUSH?
	BLT UVINT2	;NO
	MOV #-1,FLSADR(U)
	ADD #LUBLK,U
	BR UVINT1
UVINT2:	MOV #SYSJOB,FLSADR(U)	;INIT SYS JOB
	CLR UTTY(U)	;PUT IT ON TTY ZERO
	MOV #SLOT1,D
	MOV #SOFN,B
	MOV	#ASOFN,C
	ADD USLENT,D	;LAST AVAILABLE WORD ADDR
	CMP	C,D
	BHIS	.+6
	JMP INIT1
	JMP INIT3
;JSR F,FHSERC FIND FILE ON FIXED HEAD DISK
;SKIP 0 BYTES IF NOT THERE
;SKIP 2 BYTES IF FOUND
FHSERC:	MOV #FHDDIR,A	;ADDRESS OF FIXED HEAD DISK DIRECTORY
	CLR D	;START SECTOR ADDRESS AT ZERO
	TST -(F)	;ADJUST TO SKIP PROPERLY
	JMP FSEARC


	.IFNZ SIMP
FHIDIR:	.WORD "FI,"XD,"DS,"K0,100020	;DISK LABEL
			;(CHANGE THE LABEL WHEN YOU CHANGE
			; THE INITIAL DIRECTORY!!!!!!!)
FHRUG:	.WORD "SY,'S,"RU,'G,101540	;RUG FILE, 1/2 DISK (SIGH!)
FHCLUS:	.WORD "SY,'S,"CL,"US,100100	;CLEAR USER
FHERR:	.WORD "SY,'S,"ER,"RS,100040
FHSYS:	.WORD "SY,'S,"US,"TO,102000	;USER SPACE
	.WORD 0,0,0,0,77	;SPACE LEFT ON DISK
.=FHIDIR+372
	-10	;END MARKER ON DIRECTORY
	.ENDC
	.IFNZ AI
FHIDIR:	.WORD "FI,"XD,"DS,"K0,100020	;DISK LABEL
			;(CHANGE THE LABEL WHEN YOU CHANGE
			; THE INITIAL DIRECTORY!!!!!!!)
FHRUG:	.WORD "SY,'S,"RU,'G,102110	;RUG FILE, 1/2 DISK (SIGH!)
FHCLUS:	.WORD "SY,'S,"CL,"US,100100	;CLEAR USER
FHERR:	.WORD "SY,'S,"ER,"RS,100040
FHSYS:	.WORD "SY,'S,"US,"TO,103000	;USER SPACE
	.WORD 0,0,0,0,2500	;SPACE LEFT ON DISK
.=FHIDIR+372
	-10	;END MARKER ON DIRECTORY
	.ENDC
	.IFNZ GUY
FHIDIR:	.WORD "FI,"XD,"DS,"K0,100020	;DISK LABEL
			;(CHANGE THE LABEL WHEN YOU CHANGE
			; THE INITIAL DIRECTORY!!!!!!!)
FHRUG:	.WORD "SY,'S,"RU,'G,102110	;RUG FILE, 1/2 DISK (SIGH!)
FHCLUS:	.WORD "SY,'S,"CL,"US,100100	;CLEAR USER
FHERR:	.WORD "SY,'S,"ER,"RS,100040
FHSYS:	.WORD "SY,'S,"US,"TO,103000	;USER SPACE
	.WORD 0,0,0,0,12500	;SPACE LEFT ON DISK
.=FHIDIR+372
	-10	;END MARKER ON DIRECTORY
	.ENDC
MOV0DR:	.WORD "MO,"V0,"DI,"SK,100100
	.WORD "RU,'G,"FI,"LE,103100
	.WORD 0,0,0,0,6000
	.=MOV0DR+372
	-40
MOV1DR:	.WORD "MO,"V1,"DI,"SK,100100
	.WORD "RU,'G,"FI,"LE,103100
	.WORD 0,0,0,0,6000
	.=MOV1DR+372
	-40
FHDDIR:	.=.+400
	.IFNZ NEWERS
ERRSRT:	NERRS
ERLNTH==.-ERRSRT
	.ENDC

LOGEND=.
	.END	START
