
	.STITL TELETYPE AND TYI
	.PRINT /BEGIN TYI FILE
/

	VERN==VERN+%FNAM2


.MACR	TIPNTR	TOP,SZ,TMS
	ZEPT	NTTY+TMS,<
		TOP+<SZ*Z>
	>
.ENDM


;VARIOUS FLAGS AND TELETYPE VARIABLES

	;FLAGS TTY STATUS
TYIDR==100000
TIDW==40000	;TYI DISK WRITE IN PROCESS
TIDR==20000	;TYI DISK READ
TIEDR==10000	;EDIT DSK READ
TIEDW==4000
TIDTRA==TYIDR!TIDW!TIDR!TIEDR!TIEDW	;DISK TRANSFER
TIBR==2000	;^G (BREAK) TYPED
TIED==1000	;EDIT MODE
TINECH==400	;NO ECHO
TIMODM==200	;MODEM
TICLKQ==100	;SOMTHING ON CLK Q
TICNVT==40	;CONVERT LWR TO UPR
FCQF==4		;^Q
TURW==2		;WAITING FOR RETURN OF CHAR

;PERIPHERAL REGISTER BITS
%DTRDY==1	;DATA TERMINAL READY
%CRDT==1_2	;CARRIER DETECT
%DATOV==1_12.	;DATA OVERFLOW
%RGIND==1_13.	;RING INDICATOR
%CRTRN==1_14.	;CARRIER TRANSITION
%ER==1_15.	;ERROR

	.STITLE	TELETYPE BUFFERS AND VARIABLES
	;BUFFERS
.EVEN
	TITQSZ==6
	TIBFSZ==100
	EDBFSZ==40
	TOBFSZ==40
TITQ:	.BLKB TITQSZ*NTTY
TIBF:	.BLKB TIBFSZ*NTTY
TOBF:	.BLKB TOBFSZ*NTYDV

CHARNO:	.BLKW NTTY
LINEL:	ZEPT NTTY,60.
	;BUFFER PNTRS
	;TEMP TYPE IN QUEUE
TITQT:	TIPNTR	TITQ,TITQSZ,1
TITQP:	.BLKW NTTY
TITQL:	.BLKW NTTY
TITQN:	.BLKW NTTY
	;TYPE IN BUFFERS
TIBT:	TIPNTR	TIBF,TIBFSZ,1
TIBP:	.BLKW NTTY
TYIBP:	.BLKW NTTY
TITN:	.BLKW NTTY
TYITN:	.BLKW NTTY
TIBL:	.BLKW NTTY
TIPC:	.BLKW NTTY
TISVD:	.BLKW NTTY
	;EDIT BUFFERS
TIEBT:	TIPNTR	TIBF+EDBFSZ,TIBFSZ,0
TIEBP:	.BLKW NTTY
TIETN:	.BLKW NTTY
	;TYPE OUT BUFFERS
TOBT:
	ZEPT NTYDV+1,<
	TOBF+<Z*TOBFSZ>
>
TOBFF:	.BLKW NTYDV
TOBP:	.BLKW NTYDV
TOTFL:	.BLKW NTTY+NTBOX
TOTN:	.BLKW NTYDV
TOPC:	.BLKW NTYDV
TOSVC:	.BLKW NTYDV
TOSVD:	.BLKW NTYDV
TODING:	.BLKW NTTY
TOSND:	.REPT	NTY
	CNSND
.ENDR
ZEPT NDC,<
	CONC6 ^/
	.IFZ <DC/,\Z,^/DT-TYDT>*<MODT-DC/,\Z,^/DT>
		CONS DC,\Z,SND
	.ENDC
/>
ZEPT NKL,<
	CONC6 ^/
	.IFZ <KL/,\Z,^/DT-TYDT>*<MODT-KL/,\Z,^/DT>
		CONS KL,\Z,SND
	.ENDC
/>
.REPT NDMTY
	DMSND
.ENDR
ZEPT NTBOX,<
	CONS TB,\Z,SND
>
ZEPT NTUR,<
	CONS TU,\Z,SND
>
ZEPT NMBX,<
	CONS MB,\Z,SND
>

	;DISK BUFFER POINTERS
TILD:	.BLKW NTTY
TIHD:	.BLKW NTTY
TIDP:	.BLKW NTTY
TYIDP:	.BLKW NTTY
TYIFDP:	.BLKW NTTY
TIELD:	.BLKW NTTY
TIEHD:	.BLKW NTTY
TIEDP:	.BLKW NTTY
TIEFDP:	.BLKW NTTY

TTYBR:	.BLKW NTTY
TTYEBR:	.BLKW NTTY
TTYU:	ZEPT NTTY,-1
DMBIT=.-NFDMTY
	ZEPT <NDM*16.>,<1_Z>
TTYST:	ZEPT NTY,TICNVT
ZEPT NDC,<
	CONS <
	.IFZ DC>,\Z,<DT-TYDT
	TICNVT
	.ENDC
	>
	CONS <
	.IFZ DC>,\Z,<DT-MODT
	TICNVT!TIMODM
	.ENDC
>>
ZEPT NKLTY+NDMTY,TICNVT
ZEPT NDC,<
	CONS <
	.IFZ DC>,\Z,<DT-TBDT
	0
	.ENDC
	>
	CONS <
	.IFZ DC>,\Z,<DT-TBMDT
	TIMODM
	.ENDC
>>
ZEPT NTBOX-NDCTB,0

.MACR TBIX SYMB
	SYMB=.-NFTBOX
.ENDM
.MACR LDIX SYMB
	SYMB=.-NFLDEV
.ENDM

		;TB Q'S
	MNLDIC==2	;MAX # INPUT CHARS PER LDEV
IMXQ:	.BLKB NLDEV*MNLDIC
	.EVEN
.IFG NTBOX
TBIX IMXQT
	IMXQ
.ENDC
	ZEPT	NTBOX-1,<
	CONS NTB,\Z,LD*2+IMXQ
>
TBIX TBCHN
	.BLKW NTBOX

OMXQ:	ZEPT NTBOX,<		;OUTPUT
	CONS TB,\Z,LTB
	CONS <
	.REPT 4-NTB>,\Z,<LD
	NFTBOX+<2*Z>
	.ENDR
>>
TBIX OMXQT
	ZEPT NTBOX+1,<
	OMXQ+<10*Z>
>
TBIX OMXQP
	ZEPT	NTBOX,<
	OMXQ+<10*Z>
>
TBIX TBOTN
	.BLKW NTBOX

	TBRES==21
	TURNUL==40
TBIX TBRSCH
	ZEPT NTBOX,TBRES

TBIX TONULL		;NULL CHARS
	ZEPT NTBOX,0
	ZEPT NTUR,TURNUL
	ZEPT NMBX,0

;LD GUCK (GD LUCK?)
LDIX LDICH
	.BLKW NLDEV
LDIX LDST
	.BLKW NLDEV
LDIX TBNUM
	ZEPT NTUR,<
	CONS TU,\Z,TBN
>
	ZEPT NMBX,<
	CONS MB,\Z,TBN
>
	TOUCHY==1
	TCHCH=='#
LDIX TTSPEC
	ZEPT NTUR,<
	TOUCHY
>
	.BLKW NMBX
TUDN:	ZEPT NTUR,<
	NFTUR+<2*Z>
>
MBXDN:	ZEPT NMBX,<
	NFMBX+<2*Z>
>
TURUSE:	.REPT NTUR
	-1
	.ENDR
MBXUSR:	.REPT NMBX
	-1
	.ENDR

	.STITLE	CHAR DISPATCH TABLES

	;TYI DISPATCH TABLES
CTIS:		;SPECIAL CHARACTERS -- DTBL (CHAR) HAS FSF ON
	TICC	;^C COPIES NEXT CHAR
	TICD	;^D DELETES NEXT CHAR
	TICZ	;^G BREAK
	TICM	;^M CARRIAGE RETURN -- POSSIBLE END OF LINE
	TICN	;^N COPIES NEXT WORD
	TICQ	;^Q QUOTES NEXT CHARACTER
	TICR	;^R COPIES REST OF EDIT BUFFER
	TICS	;^S SKIPS (DELETES) NEXT WORD
	TICW	;^W DELETES PREVIOUS WORD
	TGTC2	;^X CLARIFY INPUT
	TICY	;^Y RECOVER PREVIOUS LINE
	TICZ	;^Z EMPTIES TYPE IN BUFFER
	TIDEL	;RBO RUBOUT

CTIQ:	;QUOTING CHARS
	TIOBR	;[
CTIUQ:	TICBR	;]
	TIOBR

		;TYO DISPATCH TABLE FOR CHARS WITH FOF
CTOS:	TOCB	;^B ECHOES AS SPACE
	TOCH	;^H BACKSPACE
	UTYO4	;^G BELL
	TOCM	;^M CARRIAGE RETURN
	TOCI	;^I TAB
	UTYO4	;^J LINEFEED
	UTYO4	;^K VERT TAB
	UTYO4	;^L FORMFEED
	TOCA	;^A ECHOES AS CR


;TTYRST --
;CALL THIS WITH TTY IN E TO RESET INDVIDUAL TTY
TTYRST:	MOV	TITQT(E),TITQP(E)
	MOV	TITQT(E),TITQL(E)
TTYRS1:	MOV	TITQL(E),TITQP(E)
	CLR	TITQN(E)
TTYRS2:	BIS	#TIBR,TTYST(E)
.IFNZ	NDMTY
	CMP	TOSND(E),#DMSND
	BNE	TTYRS4
	BIC	DMBIT(E),DMTRAN
	BIC	DMBIT(E),DM0BAR
	CLR	DMWC(E)	
	MOV	TOBT(E),DMCA(E)
.ENDC
TTYRS4:	JSR	PC,TBREST
	CLR	CHARNO(E)
	CLR	TODING(E)
	BIT	#TIDTRA,TTYST(E)
	BNE	TTYRS3
	BIC	#TIBR,TTYST(E)
	CLR	TYIDP(E)
TTYRS3:	BIC	#TIED!7,TTYST(E)
	MOV	TIBT+2(E),TIBL(E)
	MOV	TIBT(E),TIBP(E)
	MOV	TIBT(E),TYIBP(E)
	MOV	TIBT+2(E),TIEBP(E)
	CLR	TIDP(E)
	CLR	TIEDP(E)
	CLR	TYIFDP(E)
	CLR	TIEFDP(E)
	CLR	TITN(E)
	CLR	TIETN(E)
	CLR	TTYBR(E)
	CLR	TTYEBR(E)
	RTS	PC

TBREST:	MOV	TOBT(E),TOBP(E)
	MOV	TOBT(E),TOBFF(E)
	CLR	TOPC(E)
	CLR	TOTN(E)
	RTS	PC
.STITL	EDIT & OTHER USER ROUTINES

;EDITA--
;CALL TO START USER EDIT
EDITA:	JSR	C,TYEUSV
	JSR	PC,ETYFUS
	CLR	TIETN(E)
	CLR	TIEDP(E)
	CLR	TIEFDP(E)
	BR	TYURSX

ETYO:	JSR	C,TYEUSV	;PUT CHAR IN "EDIT" BUFFER
	JSR	PC,ETYFUS
	INC	TIETN(E)
	JSR	PC,TIINB
	BR	ETYO1
	JSR	PC,TEDKO
	MOV	TIBT(E),TIBP(E)
ETYO1:	BR	TYURSX

EDITE:	JSR	C,TYEUSV	;CALL TO END USER EDIT
	JSR	PC,ETYFUS
	JSR	PC,TEDKO
	JSR	PC,ETYFUS
	JSR	PC,TICY1
	BR	TYURSX

EDITY:	BIS	#TIED,TTYST(E)
	MOV	TIEBT(E),TIBL(E)
	MOV	TIEBT(E),TIEBP(E)
	RTS	PC

EDITZ:	BIC	#TIED,TTYST(E)
	MOV	TIBT+2(E),TIBL(E)
	RTS	PC

ETYFUS:	JSR	A,TYFUS 
	FREDW
	RTS	PC

TYURSX:	JSR	C,TYEURS
	RTS	PC

TYEUSV:	PUSH	E
	SPUSH	U
	MOV	USER,U
	MOV	UTTY(U),E
	JMP	(C)

TYEURS:	TST	(P)+
	POP	U
	SPOP	E
	RTS	C


TYFUS:	BIT	#TIDTRA,TTYST(E)
	BEQ	TYFUS2
	MOV	(A),FLSRES(U)
TYFUS1:	JSR	PC,FLUSH
	BIT	#TIDTRA,TTYST(E)
	BNE	TYFUS1
	JSR	PC,RUNME
TYFUS2:	TST	(A)+
	RTS	A

NECH:	JSR	C,TYEUSV
	BIS	#TINECH,TTYST(E)
	BR	ECH1

ECH:	JSR	C,TYEUSV
	BIC	#TINECH,TTYST(E)
ECH1:	JMP	TYURSX

TICASE:	MOV	USER,U
	MOV	UTTY(U),E
	MOV	#TICNVT,A
	BIT	A,TTYST(E)
	BEQ	TICAS1
	BIC	A,TTYST(E)
	RTS	PC
TICAS1:	BIS	A,TTYST(E)
	SKPRET

	.STITLE TYPE IN
;TISQ --
;MOVE CHARS FROM TUMBLE TABLE TO TEMPORARY TYPE IN QUEUES
TISQ:	BIC	#177600,D
TISQ1:	MOV	TTYU(E),U
	BMI	TISQ3
	CMP	D,(7)+
TBKCH:	0
	BEQ	BREAK0
	CMP	D,(7)+
TBKCHL:	0
	BEQ	BREAKL
	CMP	FLSRES(U),#FRTYIH
	BNE	TISQ3
	CMP	TITQN(E),#TITQSZ
	BGE	DING
TISQ2:	MOVB	D,@TITQL(E)
	INC	TITQN(E)
	INC	TITQL(E)
	CMP	TITQL(E),TITQT+2(E)
	BLT	TISQ3
	MOV	TITQT(E),TITQL(E)
TISQ3:	RTS	PC

BREAK0:	BIS	#TIBR,TTYST(E)
	JSR	A,BREAK
	1
BREAKL:	JSR	A,BREAK
	-1

BREAK:	MOV	(A)+,BRAKE(U)
	CMP	FLSRES(U),#FRTYIH
	BEQ	BREAK1
	SPOP	A
	RTS	PC
BREAK1:	JSR	PC,TTYRS2
	SPOP	A
	BR	TISQ2


;BRAKR -- TO EXECUTE BREAK WHEN NOT IN TYIH
BRAKR:	MOV	UTTY(U),E
	JMP	TTYRS2

;DING --
DING:	INC	TODING(E)
	RTS	PC

.IFNZ	NTY+NKLTY+NDCTY+NDPTY
GENSQ:	SPUSH	D
	SPUSH	E
	SPUSH	U
	MOV	(A)+,U
	MOV	(A)+,E		;RG ADR
	MOV	(U),D		;TTY
	BIT	#%ER,D		;RG CONTENTS
	BNE	TGENER
	MOV	2(U),D
	JSR	PC,TISQ		;CHAR
GENSQ1:	SPOP	U
	SPOP	E
	SPOP	D
	SPOP	A
	RTI

TGENER:	JSR	PC,GENER
	BR GENSQ1

;A PNTS TO BLK
;D REG CONTENTS
;U BUF ADDR
GENER:	BIT	#TIMODM,TTYST(E)
	BEQ	GENER3		;BR IF NOT MODEM
GENER2:	BIT	#TICLKQ,TTYST(E)
	BEQ	GENER1
	JSR	PC,CLKQDL	;DELETE ANY PRESENT CLKQ ENTRY
	BIC	#TICLKQ,TTYST(E)
GENER1:	BIS	#%DTRDY,(U)
	BIT	#%CRDT,D
	BNE	GENER4
	JSR	PC,TISANS	;TRY TO HANG UP
GENER4:	CMP	(U)+,(U)
	RTS	PC

GENER3:	JSR	A,SPRINT
	JSR	PC,PGENER
	SPREND
	BR	GENER4

PGENER:	BPRTXT	^\DEV ER \
PGEN1:	MOV	U,A
	JSR	PC,PRON		;REGISTER ADDR
	PRTXT	^\/ \
	MOV	D,A
	JSR	PC,PRON		;REG CONTENTS
	PRCR
	RTS	PC

TISANS:	JSR	B,TICLKA	;IF NO CARRIER IN TIANTM TICKS, HANG UP
	TIANTM
	TIANS
TISHNG:	JSR	B,TICLKA	;ASSERT DATA TERM RDY IN TIHGTM TICKS
	TIHGTM
	TIUNHG

TICLKA:	MOV	@(B)+,(A)	;TIME
	MOV	(B),4(A)	;WHERE TO JUMP IN TIME
	JSR	PC,CLKQAD
	BIS	#TICLKQ,TTYST(E)
	SPOP	B
	RTS	PC

TIANS:	JSR	B,TICKS
	BIT	#%CRDT,@-4(A)
	BNE	TIANS1
	BIC	#%DTRDY,@-4(A)
	JSR	PC,TISHNG
TIANS1:	SPOP	E
	SPOP	B
	RTS	PC

TICKS:	SPUSH	E	;TICLKQ START
	MOV	-2(A),E		;TTY
	BIC	#TICLKQ,TTYST(E)
	JMP	(B)

TIUNHG:	JSR	B,TICKS
	BIS	#%DTRDY,@-4(A)	;TURN DATA TERM RDY ON
	BR	TIANS1

TIANTM:	15.*CLKFRQ	;TIME TO WAIT FOR CARRIER BEFORE HANGING UP
TIHGTM:	5.*CLKFRQ	;TIME TO HANG UP FOR
.ENDC

.IFNZ	NTY
TKBRK:
CNSQ:	JSR	A,GENSQ
	TKS
	NFTY
.ENDC
	TTY==0
ZEPT 	NDC,<
	CONC6 ^/
	.IFZ <DC/,\Z,^/DT-TYDT>*<MODT-DC/,\Z,^/DT>
		CONS DC,\Z,RK:
		CONS DC,\Z,SQ:
		JSR	A,GENSQ
		CONS DC,\Z,RS
		NFDCTY+TTY
		TTY==TTY+2
	.ENDC
	/
	CONS <
	.IFZ TBDT-DC>,\Z,<DT
		CONS DC,\Z,RK:
		JSR	A,TBRCV
		CONS DC,\Z,RS
		CONS DC,\Z,TBN
	.ENDC
	>
	CONC6 ^/
	.IFZ <DC/,\Z,^/DT-MODT>*<DC/,\Z,^/DT-TBMDT>
	.BLKW	3
	.ENDC
/>
	TTY==0
ZEPT 	NKL,<
	CONC6 ^/
	.IFZ <KL/,\Z,^/DT-TYDT>*<MODT-KL/,\Z,^/DT>
		CONS KL,\Z,RK:
		CONS KL,\Z,SQ:	
		JSR	A,GENSQ
		CONS KL,\Z,RS
		NFKLTY+TTY
		TTY==TTY+2
	CONS <
	.IFZ KL>,\Z,<DT-MODT
		.BLKW	3	;IF MODEM
	.ENDC
	>
	.ENDC
	/
	CONS <
	.IFZ TBDT-KL>,\Z,<DT
		CONS KL,\Z,RBK:
		JSR	A,TBRCV	
		CONS KL,\Z,RS
		CONS KL,\Z,TBN
	.ENDC
>>

.IFNZ NTBOX
TBRCV:	SPUSH	D
	SPUSH	E
	SPUSH	U
	MOV	(A)+,U
	MOV	(A),E
	MOV	(U),D
	BIT	#%ER,D
	BNE	TBERR
	JSR	PC,GTBRV
	CMP	(U)+,(U)
TBRCV1:	SPOP	U
	SPOP	E
	SPOP	D
	SPOP	A
	RTI

TBERR:	JSR	PC,GENER
	BR	TBRCV1

GTBRV:	TST	TBCHN(E)
	BLE	GTBRV1
	MOV	IMXQT(E),A	;PNTR TO INPUT Q
	MOVB	(A)+,D
	MOVB	(A)+,-2(A)
	MOVB	(A)+,-2(A)
	MOVB	(A),-(A)
	DEC	TBCHN(E)
	MOVB	2(U),LDICH(D)
	BIC	#TURW,LDST(D)
	ADD	#2,(P)
GTBRV1:	RTS	PC
.ENDC


.IFNZ	NDMTY

;DMSQ -- DM11 TYPE IN
DMSQ:	SPUSH	C
	SPUSH	D
	SPUSH	E
	SPUSH	U
	MOV	TTP,C
	BR	DMSQ3

DMSQ1:	BIC	#120200,(C)
	BIT	#40000,(C)
	BNE	DMSQ2	;BR IF NO STOP RCVD
	MOVB	1(C),E
	CMP	E,#<2*NDMTY>
	BGE	DMSQ2
	MOVB	(C),D
	ADD	#NFDMTY,E
	JSR	PC,TISQ1
DMSQ2:	TST	(C)+
	CMP	C,#DMTT+200
	BLO	DMSQ3
	MOV	#DMTT,C
DMSQ3:	TST	(C)
	BLT	DMSQ1

	MOV	C,(PC)+
TTP:	DMTT
	SPOP	U
	SPOP	E
	SPOP	D
	SPOP	C
	RTS	PC
.ENDC

;TI2Q--
;FOR ALL USERS, EMPTY TEMP TYI BUFFER TO TYI BUF
TI2Q:	SPUSH	C
	SPUSH	D
	SPUSH	E
	SPUSH	U
	CLR	E

TI2Q1:	MOV	TIPC(E),C
	BIT	#TIDTRA,TTYST(E)
	BNE	TI2Q3
	TST	TOPC(E)
	BNE	TI2Q3
	MOV	TTYU(E),U
	BMI	TI2Q3
	TST	C
	BNE	TI2Q2
	TST	TITQN(E)
	BLE	TI2Q3
	MOVB	@TITQP(E),D
	JSR	PC,TGTC
	DEC	TITQN(E)
	INC	TITQP(E)
	CMP	TITQP(E),TITQT+2(E)
	BLO	TI2Q1
	MOV	TITQT(E),TITQP(E)
	BR	TI2Q1

TI2Q3:	TST	(E)+
	CMP	E,#<2*NTTY>
	BLT	TI2Q1
	SPOP	U
	SPOP	E
	SPOP 	D
	SPOP	C
	RTS	PC

TI2Q2:	MOV	TISVD(E),D
	CLR	TIPC(E)
	JSR	PC,(C)
	BR	TI2Q1


;TGTC --
;GET CHAR FROM 5 WD BUFFER & PROCESS INTO WD ASSEMBLY BUFFER
TGTC:	BIT	#FCQF,TTYST(E)
	BEQ	TGTC5
	JMP	TICPY
TGTC5:	BIT	#200,D
	BNE	TGTC2
	CMP	D,#'_
	BLE	TGTC6
	CMP	D,#177
	BEQ	TGTC6
	BIT	#TICNVT,TTYST(E)
	BEQ	TGTC6
	SUB	#40,D
TGTC6:	BITB	#FSF,DTBL(D)
	BEQ	TGTC1
	MOVB	DTBL2(D),C
	JMP	@CTIS(C)

TGTC1:	JSR	PC,TQUOT
TGTC2:	JSR	PC,TIINB
TGTC3:	BIT	#TINECH,TTYST(E)
	BNE	TGTC4
	JSR	PC,UTYO1
	JSR	PC,@TOSND(E)
TGTC4:	RTS	PC

TQUOT:	BITB	#FQF,DTBL(D)
	BNE	.+4
	RTS	PC
	MOVB	DTBL2(D),C
	JMP	@CTIQ(C)


;SPECIAL CHAR ROUTINES

;^C -- COPY NEXT CHAR
TICC:	BIT	#TIED,TTYST(E)
	BNE	TICC1
	JMP	TIQM
TICC1:	JSR	PC,GEDC
	BR	TGTC5

;^D -- DELETES NEXT CHAR
TICD:	BIT	#TIED,TTYST(E)
	BNE	TICD1
	JMP	TIQM
TICD1:	JSR	PC,GEDC
	MOV	#4,D
	BR	TGTC3

;^M (C.R.) -- MAYBE END OF LINE
TICM:	TST	TTYBR(E)
	BGT	TGTC2
TICM1:	JSR	PC,TGTC2
	JSR	PC,TIDTSC
	MOV	TITN(E),TYITN(E)
	TST	TIDP(E)
	BLE	TICM4
	CMP	TIBP(E),TIBT(E)
	BLOS	TICM2
	MOV	#TICM2,TIPC(E)
	JMP	TIDKO
TICM2:	MOV	TIDP(E),TYIDP(E)
	JSR	PC,TTYRS3
	JSR	PC,TIDTS1
	JSR	PC,TYIDKI
TICM3:	MOV	TTYU(E),D
	MOV	#FRTYIW,FLSRES(D)
	MOV	D,TTYUGO
	CLR	UQUANT
	RTS	PC
TICM4:	JSR	PC,TTYRS3
	JSR	PC,TEDKO
	BR	TICM3

;^N -- COPY NEXT WORD
TICN:	BIT	#TIED,TTYST(E)
	BNE	TICN1
	JMP	TIQM

TICN2:	JSR	PC,TGTC5
	JSR	PC,TIDTSC
TICN1:	JSR	PC,GEDC
	BIT	#200,D
	BNE	TICN2
	BITB	#WSF,DTBL(D)
	BEQ	TICN2
	JMP	TGTC5

;^Q -- QUOTE NEXT CHAR
TICQ:	BIS	#FCQF,TTYST(E)
	BR	TGTC3

;^R -- COPY REST OF EDIT BUFFER
TICR:	BIT	#TIED,TTYST(E)
	BNE	TICR1
	JMP	TIQM
TICR1:	JSR	PC,GEDC
	JSR	PC,TGTC5
	JSR	PC,TIDTSC
	BR	TICR1

;^S -- SKIP (DELETE) NEXT WORD
TICS:	BIT	#TIED,TTYST(E)
	BNE	.+6
	JMP	TIQM
	JSR	PC,TGTC3
TICS1:	JSR	PC,TIDTSC
	JSR	PC,GEDC
	BIT	#200,D
	BNE	TICS1
	BITB	#WSF,DTBL(D)
	BEQ	TICS1
	JMP	TGTC4

;TICW -- ^W RUBOUT TILL PREVIOUS SPACE
TICW:	JSR	PC,TIDEL1
TICW1:	JSR	PC,TGTC3
	JSR	PC,TIDTSC
	JSR	PC,TIDEL1
	BIT	#200,D
	BNE	TICW1
	BITB	#WSF,DTBL(D)
	BEQ	TICW1
	JSR	PC,TQUOT
	JMP	TIINB

;TICY	-- ^Y RECOVER PREVIOUS LINE
TICY:	BIT	#TIED,TTYST(E)
	BNE	TIQM
	JSR	PC,TICZ1
	JSR	PC,TIDTSC
	MOV	#137,D
	JSR	PC,TGTC3
	TST	TIEDP(E)
	BLE	.+6
TICY1:	JSR	PC,TEDKI
	CLR	TTYBR(E)
	MOV	TIBT(E),TIBP(E)
	CLR	TIDP(E)
	CLR	TITN(E)
	JMP	EDITY

;^Z -- BRK TO CURRENT LEVEL
TICZ:	MOV	TTYU(E),C
	MOV	#FRTYIW,FLSRES(C)
	JSR	PC,TICZ1
	CLR	TTYBR(E)
	MOV	TBKCH,@TIBT(E)
	MOV	#1,TYITN(E)
	JMP	TTYRS3

TICZ1:	MOV	P,CHARNO(E)
	JMP	TGTC3


;TIDTSC -- DID SPEC CHAR CAUSE DSK TRANS OR TYO BUF FULL?
TIDTSC:	TST	TOPC(E)
	BNE	TIDTS2
TIDTS1:	BIT	#TIDTRA,TTYST(E)
	BEQ	TIDTS3
TIDTS2:	MOV	D,TISVD(E)
	MOV	(P)+,TIPC(E)
TIDTS3:	RTS	PC

;TICPY -- QUOTE CHAR IN D
TICPY:	BIC	#FCQF,TTYST(E)
	BITB	#FSF!FQF!WSF,DTBL(D)
	BEQ	TICPY1
	CMP	D,#3
	BEQ	TICPY2
	CMP	D,#32
	BEQ	TICPY2
	CMP	D,#177
	BEQ	TICPY1
	BIS	#200,D
TICPY1:	JMP	TGTC2
TICPY2:	JMP	TGTC3

;TIOBR -- [
TIOBR:	INC	TTYBR(E)
	RTS	PC

;TICBR -- ]
TICBR:	TST	TTYBR(E)
	BLE	TICBR1
	DEC	TTYBR(E)
	RTS	PC
TICBR1:	TST	(P)+

;TIQM -- PRINTS ?
TIQM:	MOV	#'?,D
	JMP	TGTC3


;REGULAR CHAR ROUTINES
;TINB MOVES INTO BUFFER, TIDEL1 MOVES OUT

TIDEL:	JSR	PC,TIDEL1	;THIS ALSO WANTS TO BE SUBR
	JMP	TGTC3	;SUCCEED, ECHO CHAR

TIDEL1:	CMP	TIBP(E),TIBT(E)
	BLOS	TIDEL5
	DEC	TIBP(E)
	MOVB	@TIBP(E),D
	BIT	#200,D
	BNE	TIDEL3
	BITB	#FQF,DTBL(D)
	BNE	.+4
TIDEL3:	RTS 	PC
	MOVB	DTBL2(D),C
	JMP	@CTIUQ(C)

TIDEL5:	TST	TIDP(E)
	BLE	TIDEL6
	MOV	D,TISVD(E)
	SUB	#4,(P)
	MOV	(P)+,TIPC(E)
	JMP	TIDKI
TIDEL6:	TST	(P)+
	RTS	PC

TIINB:	CMP	TIBP(E),TIBL(E)
	BHIS	TIINB2
	MOVB	D,@TIBP(E)
	INC	TITN(E)
	INC	TIBP(E)
	CMP	TIBP(E),TIBL(E)
	BHIS	TIINB1
	RTS	PC

TIINB1:	CMP	FLSRES(U),#FRTYIH
	BNE	.+6
	JMP	TIDKO
	ADD	#2,(P)
	RTS	PC

TIINB2:	HALT		;TIBP ZONKED
	RTS	PC


;GEDC -- GET EDIT CHAR (FROM EDIT BUF)
GEDC:	CMP	TIEBP(E),TIBT+2(E)
	BHIS	TIDEL6
	DEC	TIETN(E)
	BLE	GEDCB
	CMPB	@TIEBP(E),#15
	BEQ	GEDCA
GEDC1:	MOVB	@TIEBP(E),D
	INC	TIEBP(E)
	BIT	#200,D
	BNE	GEDC2
	BITB	#FQF,DTBL(D)
	BEQ	GEDC2
 	MOVB	DTBL2(D),C
	ADD	EDQF(C),TTYEBR(E)
GEDC2:	CMP	TIEBP(E),TIBT+2(E)
	BLO	GEDC3
	TST	TIEDP(E)
	BNE	GEDC4
GEDC3:	RTS	PC

GEDC4:	JMP	TEDKI

		;NEXT CHAR C.R.
GEDCA:	TST	TTYEBR(E)
	BGT	GEDC1
GEDCB:	MOV	TIBT+2(E),TIEBP(E)
	BR	TIDEL6


EDQF:	1	;[
	-1	;]


;UTYI -- USER TYI
;RETURNS CHAR IN D
JTYI:	TST USER
	BGE .+6
	JMP STYI
	JIGGLE
	JSR	C,TYEUSV
	JSR	A,TYFUS
	FRTYIW
	BIT	#TIBR,TTYST(E)
	BNE	UTYI3
	DEC	TYITN(E)
	BLT	UTYI4
	INC	TIETN(E)
	CMP	TIEDP(E),TYIFDP(E)
	BHIS	.+6
	JSR	PC,TEDKO
	MOVB	@TYIBP(E),D
	INC	TYIBP(E)
	CMP	TYIBP(E),TIBL(E)
	BLO	UTYI3
	JSR	PC,TYIDKI
UTYI3:	JMP	TYURSX

UTYI4:	MOV	TBKCH,D
	CLR	TYITN(E)
	BR	UTYI3

.STITLE 	TYI DSK TRANSFER, START, & STOP ROUTINES

;DISK TRANSFER ROUTINES
;LOCS MUST BE FILLED AS FOLLOWS
;(A) START ROUTINE ADDRESS
;2(A) -WORD COUNT (NOT BYTE COUNT)
;4(A) CORE ADDRESS
;6(A) LOW ORDER OF DSK ADDR
;10(A) HIGH ORDER
;12(A) FREE WD STORE TTY HERE
;14(A) READ OR WRITE CODE (IN LOW BYTE)

;TIDCM -- COMMON CODE
;CALLED WITH JSR D,
TIDCM:	MOV	(D)+,.+6	;ZOT NXT INSTR
	MOV	"??(E),4(A)
	MOV	E,12(A)		;USER
	BIS	(D)+,TTYST(E)
	TST	(D)+
	MOV	D,(A)
	MOV	-(D),14(A)
	JSR	PC,DPROVK
	SPOP	D
TIDCM1:	SPOP	A
	RTS	PC

;TSTAB
;TEST FOR ABORT (CALLED WITH JSR D,) AT BEGIN OF START ROUTINE
TSTAB:	SPUSH	E
	MOV	12(A),E
	BIT	#TIBR,TTYST(E)
	BEQ	TSTAB1
	CLR	14(A)	;IF BREAK FLAG, ABORT TRANS
	BIC	-10(D),TTYST(E)
TSTAB4:	BIT	#TIDTRA,TTYST(E)
	BNE	TSTAB1
	MOV	TTYU(E),D
	CMP	#FRTYIH,FLSRES(D)
	BNE	TSTAB3
	BIC	#TIBR,TTYST(E)
TSTAB1:	MOV	D,(A)	;STOP ROUTINE
TSTAB3:	SPOP	E
	SPOP	D
	RTS	PC

;TSTAB2
;CALLED AT START OF STOP ROUTINE
TSTAB2:	SPUSH	E
	MOV	12(A),E	;TTY
	CLRB 15(A)
	BIC	-14(D),TTYST(E)
	BIT	#TIBR,TTYST(E)
	BNE	TSTAB4
	JMP	(D)

;TIDKO -- TTY
;FROM TYI BUFFER 
;TO END OF DSK TYI BUFFER
TIDKO:	SPUSH	A
	JSR	PC,SYDRBG
	MOV	TIBT(E),2(A)
	SUB	TIBP(E),2(A)
	BLT	.+10
	HALT
	JMP	TIDCM1
	ASR	2(A)
	SBC	2(A)		;-WD CNT
	MOV	TILD(E),6(A)
	MOV	TIHD(E),10(A)
	ADD	TIDP(E),6(A)	;LOW ORDER DSK
	ADC	10(A)		;HIGH ORDER
	JSR	D,TIDCM
	TIBT
	TIDW
	DWRTEC
	JSR	D,TSTAB		;START ROUTINE
	JSR	D,TSTAB2	;STOP ROUTINE
	SUB	2(A),TIDP(E)	;UPDATE # OF WDS (NOT BYTES) ON DSK
	SUB	2(A),TYIDP(E)
	MOV	TIBT(E),TIBP(E)
	JMP	TSTAB3

;TIDKI --
;FROM END OF DISK TYI
;TO CORE TYI
TIDKI:	SPUSH	A
	JSR	PC,SYDRBG
	MOV	TIBL(E),2(A)
	SUB	TIBT(E),2(A)
	ASR	2(A)
	CMP	2(A),TIDP(E)
	BLE	TIDKI1
	MOV	TIDP(E),2(A)
TIDKI1:	NEG	2(A)	
	MOV	TILD(E),6(A)
	MOV	TIHD(E),10(A)
	ADD	2(A),6(A)	;DSK ADDR=DSK TOP+# OF WDS ON DSK-
	ADD	TIDP(E),6(A)
	ADC	10(A)
	JSR	D,TIDCM
	TIBT
	TIDR
	DREADC
	JSR	D,TSTAB	
	JSR	D,TSTAB2
	ADD	2(A),TIDP(E)
	BGE	.+6
	HALT		;NEG WD CNT
	BR	.-2
	ASL	2(A)
	SUB	2(A),TIBP(E)
	JMP	TSTAB3


;TIEDKI --
;FROM FRONT OF DSK EDIT BUF
;TO CORE EDIT BUFFER
TEDKI:	SPUSH	A
	JSR	PC,SYDRBG
	MOV	#<EDBFSZ/2>,2(A)
	CMP	#<EDBFSZ/2>,TIEDP(E)
	BLE	TEDK1
	TST	TIEDP(E)
	BGT	.+10
	HALT
	JMP	TIDCM1
	MOV	TIEDP(E),2(A)
TEDK1:	NEG	2(A)	
	MOV	TIELD(E),6(A)
	MOV	TIEHD(E),10(A)
	ADD	TIEFDP(E),6(A)
	ADC	10(A)
	JSR	D,TIDCM
	TIEBT
	TIEDR
	DREADC
	JSR	D,TSTAB	
	JSR	D,TSTAB2
	ADD	2(A),TIEDP(E)
	BGE	.+6
	HALT
	BR	.-2
	SUB	2(A),TIEFDP(E)
	MOV	TIEBT(E),TIEBP(E)
	JMP	TSTAB3


;TIEDKO --
;FROM CORE TYI
;TO END OF DSK EDIT BUFFER
TEDKO:	SPUSH	A
	JSR	PC,SYDRBG
	MOV	#-<TIBFSZ/2>,2(A)
	MOV	TIELD(E),6(A)
	MOV	TIEHD(E),10(A)
	ADD	TIEDP(E),6(A)
	ADC	10(A)
	JSR	D,TIDCM
	TIBT
	TIEDW
	DWRTEC
	JSR	D,TSTAB	
	JSR	D,TSTAB2
	SUB	2(A),TIEDP(E)
	BGE	.+4
	HALT
	JMP	TSTAB3

;TYIDKI
;FROM FRONT OF DSK TYI BUFFER
;TO CORE TYI BUFFER
TYIDKI:	SPUSH	A
	JSR	PC,SYDRBG
	MOV	#-<TIBFSZ/2>,2(A)
	MOV	TILD(E),6(A)
	MOV	TIHD(E),10(A)
	ADD	TYIFDP(E),6(A)
	ADC	10(A)	
	JSR	D,TIDCM
	TIBT
	TYIDR
	DREADC
	JSR	D,TSTAB	
	JSR	D,TSTAB2
	SUB	2(A),TYIFDP(E)
	ADD	2(A),TYIDP(E)
	MOV	TIBT(E),TYIBP(E)
	JMP	TSTAB3

.STITLE	TYPE OUT
	
.IFNZ	NTY+NKLTY+NDCTY+NDPTY
GINT:	SPUSH	E
	MOV	(A)+,E
	TST	TOTFL(E)
	BEQ	GINT1
	JSR	PC,(A)
	TST	TOPC(E)
	BEQ	.+6
	JSR	PC,TOENT
GINT1:	SPOP	E
	SPOP	A
	RTI

GNSND:	MOV	(A),A
	BIT	#200,(A)+
	BEQ	GNSND1
	CLR	TOTFL(E)
	TST	TOTN(E)
	BLE	GNSND1
	DEC	TOTN(E)
	MOV	PC,TOTFL(E)
	MOVB	@TOBFF(E),(A)
	JSR	PC,TOQRS
GNSND1:	SPOP	A
	RTS	PC
.ENDC

.IFG	NTTY+NTBOX
TOQRS:	INC	TOBFF(E)
	CMP	TOBFF(E),TOBT+2(E)
	BLO	TOQRS1
	MOV	TOBT(E),TOBFF(E)
TOQRS1:	RTS	PC
.ENDC

.IFNZ	NTY
TPBRK:
CNINT:	JSR	A,GINT
	NFTY
CNSND:	JSR	A,GNSND
	TPS
.ENDC
	TTY==0
ZEPT NDC,<
	CONS <
	.IFNZ SPDT-DC>,\Z,<DT
		CONS DC,\Z,TK:
		JSR	A,GINT
	.ENDC
	>
	CONC6 ^/
	.IFZ <DC/,\Z,^/DT-TYDT>*<MODT-DC/,\Z,^/DT>
		NFDCTY+TTY	;IF TTY
		TTY==TTY+2
		CONS DC,\Z,SND:
		JSR	A,GNSND
		CONS DC,\Z,TS
	.ENDC
	/
	CONS <
	.IFZ TBDT-DC>,\Z,<DT
		CONS DC,\Z,TBN	;IF THORTON BOX
		CONS DC,\Z,SND:
		JSR	A,TBSND
		CONS DC,\Z,TS
	.ENDC
>>
	TTY==0
ZEPT NKL,<
	CONS <
	.IFNZ SPDT-KL>,\Z,<DT
		CONS KL,\Z,TK:
		JSR	A,GINT
	.ENDC
	>
	CONC6 ^/
	.IFZ <KL/,\Z,^/DT-TYDT>*<MODT-KL/,\Z,^/DT>
		NFKLTY+TTY
		TTY==TTY+2
		CONS KL,\Z,SND:
		JSR A,GNSND
		CONS KL,\Z,TS
	.ENDC
	/
	CONS <
	.IFZ TBDT-KL>,\Z,<DT
		CONS KL,\Z,TBN
		CONS KL,\Z,SND:
		JSR	A,TBSND
		CONS KL,\Z,TS
	.ENDC
>>

.IFG NTBOX
TBSND:	SPUSH	B
	SPUSH	C
	SPUSH	D
	SPUSH	E
	MOV	E,B
	CLR	TOTFL(B)
	MOV	(A),A
	BIT	#200,(A)+
	BEQ	TBSND2
	MOV	OMXQP(B),C
	TST	TBOTN(B)
	BLE	TBSND4	;BR IF NOTHING TO SEND
	MOV	(C)+,E	;NEXT LDEV IN Q
	CMP	C,OMXQT+2(B)
	BLO	TBSND1
	MOV	OMXQT(B),C
TBSND1:	MOV	C,OMXQP(B)	;FIX Q PNTR
	TST	TOTN(E)
	BEQ	TBSND6	;BR IF NO CHS FOR LDEV
	DEC	TOTN(E)
	CLR	TOPC(E)
	DEC	TBOTN(B)
	MOVB	@TOBFF(E),D
	JSR	PC,TOQRS
	MOV	D,(A)	;SEND CH
	BIT	#TOUCHY,TTSPEC(E)
	BEQ	TBSND2
	CMPB	D,#TCHCH	;TOUCHY
	BNE	TBSND2
	MOV	IMXQT(B),C	;OUCH!
	ADD	TBCHN(B),C
	MOVB	E,(C)
	INC	TBCHN(B)
TBSND2:	MOV	PC,TOTFL(B)
	SPOP	E
	SPOP	D
	SPOP	C
	SPOP	B
	SPOP	A
	RTS	PC

TBSND4:	;NO CHARS FOR TBOX
	CMP	OMXQT(B),C
	BEQ	TBSND2
	MOV	OMXQT(B),OMXQP(B)
	MOVB	TBRSCH(B),D
TBSND5:	MOV	D,(A)
	BR	TBSND2

TBSND6:	MOVB	TONULL(E),D	;SEND NULL CH
	BR	TBSND5
.ENDC

.IFNZ	NDMTY
;DMINT --
;DM11 TRANSMIT INTERRUPT
DM0TK:
DMINT:	SPUSH	E
	MOV	#DM0CSR,E
	BIT	#60000,(E)
	BEQ	DMINT0
	JSR	A,SPRINT
	BPRTXT	^/DM11/
	BIT	#40000,(E)
	BEQ	DMERR1
	BIC	#40000,(E)
	PRTXT	^/ NXM/
DMERR1:	BIT	#20000,(E)
	BEQ	DMERR2
	BIC	#20000,(E)
	PRTXT	^/ SYS OVERRUN/
DMERR2:	PRCR
	SPREND
DMINT0:	BIS	DM0BAR,DMTRAN
	MOV	#NFDMTY,E
DMINT1:	BIT	DMBIT(E),DMTRAN
	BEQ	DMINT5	
	TST	DMWC(E)
	BLT	DMINT6
	BIC	DMBIT(E),DMTRAN
	INC	DMCA(E)
DMINT2:	TST	TOPC(E)
	BEQ	.+6
	JSR	PC,TOENT
DMINT3:	JSR	PC,DMSND
DMINT5:	TST	(E)+
	CMP	E,#NFDMTY+<2*NDMTY>
	BLT	DMINT1
	BIC	#100000,DM0CSR
	SPOP	E
	RTI

DMINT6:	JSR	PC,DMSND6
	BR	DMINT5

;DMSND --
;TRANSMIT CHARS FROM TOBE(E) TO TOBP(E) IN CIRC BUF
DMSND:	TST	TOTN(E)
	BLE	DMSND5
	TST	DMWC(E)
	BLT	DMSND5
	BIT	DMBIT(E),DMTRAN
	BNE	DMSND5
	CMP	DMCA(E),TOBT+2(E)
	BLO	DMSND4
	MOV	TOBT(E),DMCA(E)
DMSND4:	MOV	DMCA(E),DMWC(E)
	CMP	DMWC(E),TOBP(E)
	BLO	DMSND1
	SUB	TOBT+2(E),DMWC(E)
	BR	DMSND2
DMSND1:	SUB	TOBP(E),DMWC(E)
DMSND2:	BGE	DMSND3
	ADD	DMWC(E),TOTN(E)
DMSND6:	BIS	DMBIT(E),(PC)+
DMTRAN:	0
	BIS	DMBIT(E),DM0BAR
DMSND5:	RTS	PC
DMSND3:	HALT		;WC>=0
	RTS	PC
.ENDC

TBTYO:	PUSH	U
	SPUSH	E
	MOV	USER,U
	TST	TOPC(E)
	BEQ	TBTY1
	MOV	#FRTYOW,FLSRES(U)
TBTY:	JSR	PC,FLUSH
	TST	BRAKE(U)
	BNE	TBTY3
	TST	TOPC(E)
	BNE	TBTY
	JSR	PC,RUNME
TBTY1:	JSR	PC,TBTYO1
	MOVB	TBNUM(E),E
	JSR	PC,@TOSND(E)	;START TRANSMITTING
TBTY2:	POP	E
	SPOP	U
	RTS	PC
TBTY3:	JSR PC,RUNME
	BR TBTY2

TBTYO1:	JSR	PC,TOINB	;TOINB ACTUALLY TRIES TO PUT
;			THE CHAR INTO THE DEVICE'S OUTPUT BUFFER.
;			IF IT FAILS FOR ONE REASON OR ANOTHER,
;			IT RETURNS TO NEXT LEVEL UP (TBTYO IN THIS CASE)
	RTS	PC

TBTW2:	JSR PC,RUNME
	ERROR+BRK

TBTW:	SPUSH	U
	MOV	TBNUM(E),U
	CMP	TBCHN(U),#MNLDIC
	BGE	TBTW3
	MOV	USER,U
	BIS	#TURW,LDST(E)
	JSR	PC,TBTYO
	MOV	#FRTURW,FLSRES(U)
TBTW1:	JSR	PC,FLUSH
	TST	BRAKE(U)
	BNE	TBTW2
	BIT	#TURW,LDST(E)
	BNE	TBTW1
	JSR	PC,RUNME
	MOV	LDICH(E),D
	SPOP	U
	RTS	PC

TBTW3:	CLR	TBCHN(U)
	ERROR+TNR

;UTYO -- USER TYO
;PUTS CHARS IN CIRC TYO BUFFER
JTYO:	TST USER
	BGE .+6
	JMP STYO
	JIGGLE
	JSR	C,TYEUSV
	TST	BRAKE(U)
	BNE	UTYO10
	BIT	#TIBR,TTYST(E)
	BEQ	.+10
UTYO11:	JSR	PC,TTYRS2
	BR	UTYO10
	TST	TOPC(E)
	BEQ	UTYO9
	MOV	#FRTYOW,FLSRES(U)
UTYO8:	JSR	PC,FLUSH
	TST	TOPC(E)
	BNE	UTYO8
	JSR	PC,RUNME
UTYO9:	BIT	#TIBR,TTYST(E)
	BNE	UTYO11
	JSR	PC,UTYO1
	JSR	PC,@TOSND(E)
UTYO10:	JMP	TYURSX

TOENT:	SPUSH	C
	SPUSH	D
	SPUSH	TOPC(E)
	CLR	TOPC(E)
	MOV	TOSVC(E),C
	MOV	TOSVD(E),D
	JSR	PC,@(P)+
	SPOP	D
	SPOP	C
	RTS	PC


UTYO1:	TST	TOPC(E)
	BEQ	.+6
	HALT	
	BR	.-2
	TST	TODING(E)
	BLE	UTYO1B
	MOV	D,C
	MOV	#7,D
UTYO1A:	JSR	PC,TOINB
	DEC	TODING(E)
	BGT	UTYO1A
	MOV	C,D
UTYO1B:	BIC	#177600,D
	BITB	#FOF,DTBL(D)
	BEQ	UTYO2
	MOVB	DTBL2(D),C
	JMP	@CTOS(C)

UTYO2:	CMP	D,#40
	BGE	UTYO3
	MOV	D,C
	MOV	#'^,D
	JSR	PC,TOINB
	MOV	C,D
	ADD	#100,D
	JSR	PC,TOINB
	MOV	C,D
	ADD	#2,CHARNO(E)
	BR	UTYO5

UTYO3:	INC	CHARNO(E)
UTYO4:	JSR	PC,TOINB
UTYO5:	CMP	CHARNO(E),LINEL(E)
	BLT	UTYO6
TOCM:	MOV	D,C
	MOV	#15,D
	JSR	PC,TOINB
	MOV	#12,D
TOCM1:	JSR	PC,TOINB
	CLR	CHARNO(E)
	TST	SIMTST
	BNE	UTYO7
	CLR	D
	JSR	PC,TOINB
	JSR	PC,TOINB
	JSR	PC,TOINB
UTYO7:	MOV	C,D
UTYO6:	RTS	PC


;TOINB -- PUT CHAR IN TYO BUFFER
TOINB:	CMP	TOBP(E),TOBT+2(E)
	BLO	TOINB1
	MOV	TOBT(E),TOBP(E)
TOINB1:	MOVB	D,@TOBP(E)
	INC	TOTN(E)
	CMP	E,#NFLDEV
	BLT	TOINB6	;NO
	SPUSH	E
	MOVB	TBNUM(E),E
	INC	TBOTN(E)	;NUM OF CHARS IN ENTIRE TBOX
	SPOP	E
TOINB6:	INC	TOBP(E)
.IFNZ NDMTY
	CMP	TOSND(E),#DMSND
	BEQ	TOINB4
.ENDC
	CMP	TOTN(E),#TOBFSZ
	BGE	TOINB2
	CMP	TOBP(E),TOBT+2(E)
	BLO	TOINB3
	MOV	TOBT(E),TOBP(E)
	RTS	PC

.IFNZ	NDMTY
TOINB4:	CMP	TOBP(E),DMCA(E)
	BEQ	TOINB2
	CMP	TOBP(E),TOBT+2(E)
	BLO	TOINB3
	MOV	TOBT(E),TOBP(E)
	CMP	TOBP(E),DMCA(E)
	BNE	TOINB3
.ENDC
TOINB2:	MOV	(P)+,TOPC(E)
	MOV	C,TOSVC(E)
	MOV	D,TOSVD(E)
TOINB3:	RTS	PC

;CHAR ROUTINES

;^A -- ECHOES AS CR
TOCA:	MOV	#15,D
	MOV	#1,C	;TO WIN IF TOINB FAILS
	JMP TOCM1

;^B -- ECHOES AS SPACE
TOCB:	MOV	#40,D
	INC	CHARNO(E)
	JSR	PC,TOINB
	MOV	#2,D
	BR	UTYO5

;^H -- BACKSPACE
TOCH:	TST	CHARNO(E)
	BEQ	UTYO6
	DEC	CHARNO(E)
	JMP	UTYO4

;^I -- TAB
TOCI:	MOV	#40,D
TOCI1:	INC	CHARNO(E)
	JSR	PC,TOINB
	BIT	#7,CHARNO(E)
	BNE	TOCI1
	MOV	#11,D
	JMP	UTYO5

TINITH:	MOV	#TRINTB,A
	MOV	#TREGTB,B
TINTH1:	MOV	(A)+,@(B)+
	TST	(B)
	BNE	TINTH1
	RTS	PC

TRINTB:	ZEPT 2*<NTY+NKLTY+NKLTB>,100
.IFNZ NDC
.DCITB:	DCITB	;DC REGS
.ENDC
ZEPT	NDM,<
	DMCA+NFDMTY
	DMTT
	10001
>
ZEPT NTBOX,<
	TBRES
>
TREGTB:	.IFNZ NTY
	TKS
	TPS
	.ENDC
	ZEPT NKL,<
	CONC6 <
	.IFNZ KL>,\Z,<DT-SPDT
	CONS KL,\Z,RS
	CONS KL,\Z,TS
	.ENDC
>>
	ZEPT NDC,<
	CONC6 <
	.IFNZ DC>,\Z,<DT-SPDT
	CONS DC,\Z,RS
	CONS DC,\Z,TS
	.ENDC
>>
	ZEPT NDM,<
	CONS DM,\Z,TBR
	TTP
	CONS DM,\Z,CSR
>
	ZEPT NTBOX,<
	CONS TB,\Z,TB
>
	0

TINIT:	CLR	U
	MOV	#7,TBKCH
	MOV	#32,TBKCHL
	MOV	#SIMTST,E
	CMP	E,(E)+
	BNE	TINIT2
.IFNZ NDMTY
	MOV	#0,CLKBDM+2	;USING SIMULATOR
.ENDC
	MOV	#30,TBKCH
	MOV	#TICZ,CTIS+22
	MOV	#SIMBPT,BPTBRV	;BPT TRAPS TO SIMBPT ON SIMULATOR
	INC	U
TINIT2:	MOV	U,(PC)+
SIMTST:	SIMTST
	CLR	B
	CLR	C
	CLR	U
	MOV	#UTYTB,A
TINIT1:	MOV	(A)+,E
	CMP	(B)+,(C)+
	CMP	B,NUSER2
	BLE	TINIT3
	MOV	#-1,U
	CMP	C,#<2*MNUSRS>
	BLE	TINIT7
	BR	TINIT6
TINIT3:	MOV	E,UTTY(U)
	MOV	DTYIBF(U),TILD(E)
	MOV	DTYIBF+2(U),TIHD(E)
	MOV	DEDTBF(U),TIELD(E)
	MOV	DEDTBF+2(U),TIEHD(E)
TINIT7:	JSR	PC,TTYRST
	MOV	U,TTYU(E)
	ADD	#LUBLK,U
	BR	TINIT1
TINIT6:
.IFG NTBOX+NLDEV
	MOV	#NFTBOX,E
	MOV	#2*<NTBOX+NLDEV>,D
TINIT4:	JSR	PC,TBREST
	CMP	(E)+,-(D)
	TST	D
	BGT	TINIT4
.ENDC
	MOV	#JTYI,TYI+2
	MOV	#JTYO,TYO+2
	JSR	PC,TINITH
	JMP	NEXTUS

UTYTB:		;USER TTY TABLE
.IFZ DEVSW
	NFTY
	ZEPT MNUSRS-1,<NFDMTY+<2*Z>>	;AI
.ENDC
.IFNZ DEVSW
	ZEPT MNUSRS,<Z*2>
.ENDC
