.dv press
.fo 0 TimesRoman12
.fo 1 TimesRoman12b
.fo 2 TimesRoman12
.tr @
.so r;r macros
.begin_table_of_contents
.ls 2
.fi b
--DRAFT--

LOGO Curriculum Materials

5/19/81
.sp 5
1BOOKLET  VIIIb

HOW DYNATURTLE PROCEDURES WORK0

(Apple Logo Version)

by Daniel H. Watt
c. MIT Logo Group, 1981
.sp 6
This booklet tells you how the dynaturtle games programs work. It offers ideas for changing the games, to make them more individualized and interesting. Programmers who have some previous LOGO experience will be able to change the games or invent new ones.
.chapter "bold(How the Dynaturtle Games Work)"

Each of the dynaturtle games is constructed from a similar set of procedures.  Each game is started by a superprocedure named for the game, TGAME,  DYNATRACK,  or  LUNAR.  Each superprocedure has two subprocedures,  one called  SETUP, which sets up the starting conditions for each game, and one whose name begins with  DT  (short for "dynaturtle"), which is used to control the dynaturtle's motion.  

Here is the superprocedure for the target game:
.nf l
	
	TO   TGAME
	SETUP
	DT.TGAME  0
	END
.keep

The SETUP  procedure sets up the conditions for starting the target game:

	TO   SETUP
	MAKE   "VX   0   MAKE   "VY   0
	MAKE   "FORCE   2
	MAKE   "R   10
	MAKE   "XT   70   MAKE   "YT   70
	MAKE   "XS   (-70)   MAKE   "YS   (-70)
	MAKE   "TRAIL   "FALSE
	DRAWTARGET
	PENUP
	SETXY   :XS   :XY   
	SETHEADING   0
	END
.end_keep
.fi b

"VX   and   "VY   are the horizontal (x)  and vertical  (y)  components of the  velocity of the dynaturtle.  

"FORCE  determines how hard the kick will be.

"R is the radius of the target.  

"XT   and   "YT   are the horizontal and vertical position of the target.  

"XS   and   "YS   are the horizontal and vertical positions at which the dynaturtle starts the game.   

DRAWTARGET  is the procedure that draws the target on the screen.
.keep


The fundamental procedure that makes the dynaturtle work is called   DT.TGAME.  This is an abbreviation for  "dynaturtle for the target game."	

.nf l
	TO    DT.TGAME    :T
	DYNAMOVE
	COMMAND
	CHECK.TGAME
	DT.TGAME   :T + 1
	END
.fi b
The input,  :T  keeps track of the "time" as you play the game. Everytime the procedure  DT.TGAME  is called,  :T  is increased by  1.  

DYNAMOVE  is the procedure that changes the turtle's position  with each cycle of the  DT.TGAME  procedure.  

COMMAND  checks to see whether you have typed a command at the keyboard, and tells the computer what to do if you have.  

CHECK.TGAME   checks the dynaturtle's position to see if it has hit the target, or whether it is "lost in space."  

Another important procedure,  KICK,  increases the dynaturtle's  velocity  in the direction it is heading.
.end_keep

.keep
.fi b
The  DYNAMOVE  procedure changes the turtle's position during each cycle of DT.TGAME:

	TO   DYNAMOVE
	SETXY   (XCOR  +  :VX)   (YCOR  +  :VY)
	END
.fi b

The  distance the dynaturtle moves each time depends on how large the velocity values,  :VX  and   :VY are.  When the game starts they are both set at zero, so that the dynaturtle won't move until you give it a kick.

.end_keep
.keep
.nf l
The  COMMAND  procedure controls the effect of the keys you type:


	TO   COMMAND
	MAKE   "COM   READKEY
	IF   :COM   =   "R   RT   30   STOP
	IF   :COM   =   "L   LT   30   STOP
	IF   :COM   =   "K   KICK   DRAWKICK   STOP
	IF   :COM   =   "T   TRAIL   STOP
	END

.fi b
The first line of  COMMAND  "reads" the key you type and gives the name  "COM   (short for "command") to whatever letter you type. The next four lines check to see if you typed  "R,  "L,   "K  or  "T.  If you did, the rest of each line tells the computer what to do, and tells the  COMMAND  procedure to stop.
.end_keep
.keep
.nf l
The  KICK  procedure changes the dynaturtle's velocity:

	TO   KICK
	MAKE   "VX   :VX  +  :FORCE * (SIN  HEADING)
	MAKE   "VY   :VY  +  :FORCE * (COS  HEADING)
	END

.fi b
Every time you type  <K>,  the procedure  KICK increases the values  :VX  and  :VY.  The amount of increase depends on how large the  force is  (in the SETUP procedure, the value  of "FORCE  was made equal to 2), and the direction in which the dynaturtle is heading.   SIN   and   COS  are  Logo commands  (short for sine and cosine)  which output  ratios to determine how much of the force is in the horizontal (x) direction and how much of it is in the vertical (y) direction.
.end_keep

DRAWKICK   draws an arrow showing the location and direction of your kick if the pen is down, and   TRAIL  puts the pen down so that the dynaturtle will leave a "trail."
CHECK.TGAME  has subprocedures that check whether the dynaturtle has reached the edge of the screen or hit the target. If so, other procedures tell you that the game is over, print some information telling you how you did, and ask you whether you want to play again. If you are interested in examining these subprocedures in detail,  print out  CHECK.TGAME and each of its subprocedures to see how they work.

.chapter "bold(Changing the Target Game)"

There are several relatively simple changes you can make in the target game to make it easier or more interesting to play:

Change the location of the commands on the keyboard, or add new commands to do new things.

Add commands to make the computer print the dynaturtle's speed or direction whenever you want.

Write a set of instructions for the game so that a beginner can play it more easily.

Change the messages that the computer prints when the game is over.

Change the size, shape or location of the target.

Allow a player to have a limited amount of fuel (as in the Lunar Lander game).


You could also make some more complicated changes to make the game more difficult:


Add in a friction force that slows the dynaturtle down, and changes its behavior.

Add a "wind force" or gravitational pull (as in the Lunar Lander game) that always pushes the dynaturtle in some particular direction. This force could be the same for every game, or it could be different each time the game is played. 

Add obstacles that the dynaturtle has to avoid. (This change will slow the game down a little because the computer will have to check more things every time through the cycle.)

bold(Change #1:  Changing the keyboard commands)

The COMMAND procedure determines the effect of typing certain keys on the action of the dynaturtle.  Originally the  COMMAND  procedure was set up as follows:

	TO   COMMAND
	MAKE   "COM   READKEY
	IF   :COM   =   "R   RT   30   STOP
	IF   :COM   =   "L   LT   30   STOP
	IF   :COM   =   "K   KICK   DRAWKICK   STOP
	IF   :COM   =   "T   TRAIL   STOP
	END

The letters of the keys,  <R>,  <L>,   <K>  and   <T>,  were chosen to stand for the functions, "right turn," "left turn," "kick," and "trail." Some players might find it easier to play the game if the keys were located near each other at one end of the keyboard. For example, you could use the  <Q> and  <W>  keys, located next to each other at the left end of the keyboard, to stand for "left" and "right".  The  <A>  key, located directly under  <Q>  and  <W>  might be used for "kick".   <S>,   next to   <A>,  could be used for "showtrail."  To accomplish this change, just edit the command procedure as follows:


.keep
	TO   COMMAND
	MAKE   "COM   READKEY
	IF   :COM   =   "W   RT   30    STOP
	IF   :COM   =   "Q   LT   30   STOP
	IF   :COM   =   "A   KICK   DRAWKICK   STOP
	IF   :COM   =   "S   TRAIL   STOP
	END

(Insert keyboard diagram here.)
.sp 10
.end_keep
.keep
You might want to add commands to make the kick harder or softer. If you use the keys  <H>  and  <S> to stand for "harder" and "softer", the command procedure could be edited to look like this:

.nf l

	TO   COMMAND
	MAKE   "COM   READKEY
	IF   :COM   =   "R   RT   30   STOP
	IF   :COM   =   "L   LT   30   STOP
	IF   :COM   =   "K   KICK   DRAWKICK   STOP
	IF   :COM   =   "T   TRAIL
	IF   :COM   =   "H   MAKE   "FORCE   :FORCE   +   1   STOP
	IF   :COM   =   "S   MAKE   "FORCE   :FORCE   -   1   STOP
	END
.end_keep

.fi b
(One interesting effect with these new commands is that if you type  <S>  for "softer" enough times, you can actually produce a negative or backwards force on the dynaturtle.)

.keep
If you want to keep track of the dynaturtle's state  - that is, its speed and heading - as you play the game, you can add commands to print those whenever you type  <P>, standing for "printinfo".

.nf l

	TO   COMMAND
	MAKE   "COM   READKEY
	IF   :COM   =   "R   RT   30   STOP
	IF   :COM   =   "L   LT   30   STOP
	IF   :COM   =   "K   KICK   DRAWKICK   STOP
	IF   :COM   =   "T   TRAIL   STOP
	IF   :COM   =   "H   MAKE   "FORCE   :FORCE   +   1   STOP
	IF   :COM   =   "S   MAKE   "FORCE   :FORCE   -   1   STOP
	IF   :COM   =   "P   PRINTINFO   STOP
	END

and add a new procedure,

	TO   PRINTINFO
	PRINT   ( SENTENCE [ SPEED  = ]   SPEED   [, HEADING  =  ]   HEADING )
	END
.end_keep
.fi b

bold(Change #2:  Changing the printed messages.)

If you want to have the computer print instructions before the game starts, you could add an  INSTRUCTIONS   procedure to  the  SETUP  procedure which starts the game. For example:

.nf l
.keep
	TO   INSTRUCTIONS
	PRINT  [ DO YOU WANT INSTRUCTIONS? ]
	MAKE   "ANSWER   REQUEST
	TEST   ANYOF   :ANSWER  =  [YES]  :ANSWER  =   [ Y ]
	IFFALSE   STOP
	NODRAW
	CLEAR
	PRINT   [ THIS IS HOW THE GAME IS PLAYED: ]


	(Print any instructions you want here.)


	PRINT   [TYPE   <RETURN>   WHEN YOU ARE READY TO PLAY.]
	MAKE   "ANSWER   REQUEST
	END

.end_keep
.fi b
The first two  lines of  INSTRUCTIONS  find out if the player wants instructions, and stops the procedure if he doesn't.  Then you use  PRINT  commands to actually give the instructions.   The last line of the procedure makes the computer wait for the player to type  <RETURN>  before starting the game.  (The program doesn't actually  use the variable named   "ANSWER  for anything, but this is a useful trick for making the computer wait.

If you want to you can add  INSTRUCTIONS as a subprocedure to both  SETUP   and   REPLAY.  That way a player playing the game a second time will be able to read the instructions again.


If you want to change the messages that the computer prints when the dynaturtle hits the target, or when it reaches the edge of the screen, you will have to change the procedures which  have the job of printing each message:

.nf l
.keep
	TO   HIT
	PRINT  [YOU HIT THE TARGET!]
	PRINT   ( SENTENCE  [SPEED:] SPEED  [TIME]  :T  )
	END

	TO   LOST
	PRINT   [LOST IN SPACE]
	END
.end_keep
.fi b

.keep
To change the message asking about playing a new game, you will have to change the procedure   REPLAY? :
.nf l

TO   REPLAY?
PRINT   [DO YOU WANT TO PLAY AGAIN?]
CLEARINPUT
MAKE   "RESPONSE   REQUEST
TEST  (ANYOF  :RESPONSE = [YES]  :RESPONSE = [Y]  LAST  LAST  :RESPONSE = "Y  )   
IFTRUE   REPLAY
END
.end_keep
.fi b

Notice that   REPLAY?  (with a  "?")  has the job of asking  about playing again, while the procedure   REPLAY   (no  "?" )  has the job of starting the game over.


bold(Change #3:   Changing the size, shape or location of the target.)


To change the size or location of the target, you only have to change one line of the  SETUP  procedure - the line in which   "XT,  "YT,  and  "R  are  specified.  If you change these values the computer will draw and check the target in its new location.


bold(Change #4:   Allowing a player a limited amount of fuel for playing the game.)

First you have to make sure that the player starts with some fuel by adding a line to  SETUP:

	MAKE   "FUEL   25   (or whatever you want)

Then you have to add a line to the KICK procedure that reduces the fuel after each kick:

.keep
.nf l
	TO   KICK
	MAKE   "VX   :VX   +   :FORCE * SIN  HEADING
	mAKE   "VY   :VY   +   :FORCE * COS  HEADING
	MAKE   "FUEL   :FUEL - :FORCE
	END
.end_keep
.fi b
.keep

The  COMMAND   procedure needs to be changed so that  it won't respond if there is no fuel left:

.nf l

	TO   COMMAND
	IF   :FUEL < 1  PRINT  [OUT OF FUEL!]   STOP
	MAKE   "COM   READKEY
	IF   "COM   =   "R   RT   30   STOP
	IF   "COM   =   "L   LT   30   STOP
	IF   "COM   =   "K   KICK   DRAWKICK   STOP
	IF   :COM   =   "T   TRAIL   STOP
	END

.end_keep
.fi b

To complete the change we need to add the same line to REPLAY  that we added to  SETUP  so that when the game starts again  it  starts with enough fuel:

	MAKE   "FUEL  25   (or whatever amount you used in  SETUP)

bold(Change #5:  Add a gravitational force, pulling the dynaturtle downward  -  or in any direction you like.)

This change makes a big difference in the game, and in the strategies you need to hit the target.  If you make the effect of gravity strong enough, you can make the target game more like the lunar lander game.

.keep
To make this change, add a line to the basic dynaturtle procedure,  DT.TGAME:

.nf l
	TO   DT.TGAME   :T
	FALL
	DYNAMOVE
	COMMAND
	CHECK.TGAME
	DT.TGAME  :T  +  1
	END

and add a new procedure,  FALL:

	TO   FALL
	MAKE   "VY   :VY   -   :G
	END
.fi b
.end_keep

Now, add a line to  SETUP, specifying the value of  "G   (the gravitational attraction).  

	MAKE   "G   0.2   

By changing the value of  "G you  can create games which require very different strategies for hitting the target. Try values such as 0.02,  0.05,  0.1, 0.2, 0.5  and 1, to see how they effect the game.


bold(Change #6:  Adding obstacles to the game.)


Adding obstacles to the game makes it more difficult.  It also slows the game down because the computer has to check for more conditions. Suppose we add a large  "asteroid"  near the target.  First specify its position by adding lines to  SETUP:

.keep
.nf l
	MAKE   "XA  (20)   MAKE  "YA   (70)   MAKE  "RA  5
	DRAWASTEROID
.end_keep
.keep

and make a new procedure:


	TO   DRAWASTEROID
	HIDETURTLE
	PENUP
	SETXY   :XA   :YA
	CIRCLE   :RA
	END
.end_keep
.keep

New lines need to be added to the checking procedure,   CHECK.TGAME

	TO   CHECK.TGAME
	IF   NEAREDGE   LOST   ENDGAME
	IF   ATTARGET   :R   HIT   ENDGAME
	IF   ATOBSTACLE   :XA :YA :RA  CRASH   ENDGAME
	END
.end_keep

.keep
Two more new procedures are needed:

	TO ATOBSTACLE  :X  :Y   :R
	TEST   DISTANCE.SQUARED  :X  :Y  <  ( :R  + 2 ) * ( :R + 2 )
	IFTRUE   OUTPUT   "TRUE
	IFFALSE   OUTPUT   "FALSE
	END

and

	TO   CRASH
	PRINT   [ YOU'VE  CRASHED  INTO  AN  ASTEROID ]
	END
.end_keep

.fi b
If you find it easy to play the game and avoid the obstacle,  try adding more obstacles  and trying to maneuver the dynaturtle around them.  (To get around the obstacles, you might want to make the kick very soft, so that you have time to think.

Can you find a path for the dynaturtle through a "maze" like this one?
.sp 12
.chapter "bold(Changing the Dynatrack Game)"
.chapter "bold(Changing the Lunar Lander Game)"
.chapter "bold(inventing  new dynaturtle games)"