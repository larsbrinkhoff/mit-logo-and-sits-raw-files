Heading:qk40(635)
Cedar Document View Boxesy756qk40
Page Numbers: Yes  X: 527  Y: 10.5"qk40
DRAFT - DRAFT - DRAFT - DRAFTz18592l4445y748c\f5b
DRAFT - DRAFT - DRAFT - DRAFTz18592l4445y14c\f5b
Inter-Office Memorandumz18592l4445y762\f5b
To	Cedar User Facilities Group	Date	November 7, 1979z18592l4445d2998e21(0,65535)(1,4445)(5,11684)(6,14146)\f1 2f0t2 1t0 27t6 1f1t0 4f0t7 1t0
From	Bill Paxton, Warren Teitelman	Location	Palo Altoz18592l4445d2998y716e25\f1 4f0t2 1t0 29t6 1f1t0 8f0t7 1t0
Subject	ViewBoxes, Documents, and Windows
in Cedar	Organization	CSLz18592l4445d2998e25\f1 7f0t2 1t0 42t6 1f1t0 12f0t7 1t0
XEROX       z18592l508y644e14(2116)\f2 5f0
Filed on: [ivy]<Teitelman>viewboxes.memo and .presse30
e10
Introduction(635)\f5b12B

This memo is an attempt to capture our current views (no pun intended), terminology, and plans with respect to Cedar documents, windows, desktops, etc., focusing on the display aspects of the above. We hope to begin more detailed design and implementation very soon.j\f5 1f0

We found in our discussion the single biggest barrier to our own communication and understanding was the lack of good terminology, complicated by the fact that many of the more natural terms were extremely tainted by previous useage. Where possible, we have tried to invent new terms, but in all cases, we will try to be very explicit, and hopefully consistent, about our terminology.j

Where a generic term is first introduced, e.g. document, window, display context, it appears in bold face. Terms that are correspond to actual Mesa identifiers, e.g. ScreenViewBox, TargetLocation, etc., will appear in Helvetica. On the occasions that it is necessary, italic face is used for emphasis. Finally, parenthetical, qualifying, or exceptional information, such as normally would appear in footnotes, will appear in a small font. In general, such information can be skipped by the reader who is just trying to get the gist of this memo.j\97b4B118f6 9f0 65i8I127f1 5f0 113f5b

Terminologyj\f5b12f0B

A document is an object that knows how to, and can be asked to, display itself (in a particular display context). (A document has other attributes, e.g. it can be edited, executed, pointed at, etc. but for the purposes of this memo we will primarily be focusing on the display aspects of documents.)  The object that a document displays itself in is called a viewbox. In other words, when a document is asked to display itself, it is asked to do so in a particular viewbox. The relationship between this viewbox and the document displayed in it is that the viewbox views the document. Every viewbox views one and only one document. The document that is viewed by the viewbox is called the target document, or simply target.  Note that it is the target document that decides how to display itself; the viewbox is passive. In fact, the same document may be displayed simultaneously in several different viewboxes, and may elect to do so in different ways. e.g. a text document might want to format itself differently depending on the size of the viewing area.

Each and every viewbox must "belong to" one and only one document. We will also speak of the viewbox as "being contained in", "being a part of" or "residing in" a particular document. This document that the viewbox resides in is called its home document, or simply its home.  The following diagram illustrates these terms and their relationships: j\3b8B104f1 185f0 45i2I13b7B199b5B119b6B1b8B12b6B577b13B16b4B
j

									Document   (Home)   : 		contains viewbox  
		j
											|	&			
										  V  |
j\13f3 1f0 16f3 1f0
									  	    Viewbox		:		views Target, resides in Home
c
											|	&				
										  V  |
j\13f3 1f0 17f3 1f0
									Document   (Target)	  :		is viewed by viewbox    



Figure 1c\3b8B

Relationship between Documents and Viewboxesc



We wish to draw special attention to the following points about home and target documents:

9	Every document can be a target document for some viewbox. Indeed, this is the sine qua non for documents: that they be able to be viewed. However, not all documents will necessarily be home documents for any viewboxes. (If a document is home for viewboxes, it must supply a procedure which will produce a list of these viewboxes.)  For example, a document consisting of just a sequence of characters does not contain any viewboxes.j\95f3 1f0 219f1 112f0 101f3

9	The home document delegates responsibility for displaying the contents of the viewboxes that reside in it to the corresponding target document, i.e. the home document does not need to know anything about what appears inside the viewboxes that it contains.j\f3 2f0

9	The home document decides what parts of a viewbox are visible, i.e. the home document decides overlap issues.j\f3 2f0

9	The target document only paints in the areas specified by the home document, i.e. clipping is enforced.

9	No other document writes in these areas, i.e. there is no merging of images.j\f3 2f0 106f3 1f0
Documentse24\f5b
A document is simply an object which will support various operations, such as "display yourself in this viewbox." In other words, a document is a collection of procedures and some data, called the base of the document, to which these procedures are applied. These procedures can be specified explicitly, i.e. a particular document might have a collection of procedures unique from all other documents. More typically, most or all of these procedures will probably be shared among other documents each of which are attached to a similar base. One can think of this set of procedures as implementing a document class. Creating a new instance of a document of a particular class then consists of specifying the class, perhaps specifying some additional procedures or overriding existing ones, and attaching the resulting ensemble to the base. e24j\197b4B399b14B
Note that this object-oriented approach to documents will enable the user to invent his own documents, and provided that he follow some as yet to be specified conventions and interfaces, these documents will then be able to be manipulated and treated in the same way as other documents. In particular, the documents will be able to be targets for arbitrary view boxes, and hence able to be viewed from arbitrary other documents. Initially, we plan to implement the following classes of documents:e24j
(1) A (simple) text document is a document whose base is a sequence of characters (in the future, someone will implement more general documents which can combine both text, graphics, and view boxes). Initially, we will implement a non-formatting text document based on Rick Cattell piece streams package, i.e. line breaks will occur only at explicit carriage returns. (A piece stream is an object in which characters can be inserted, removed, or retrieved.) This will be sufficient to support typescript documents and simple editing of source files, and therefore enable us to get off the ground. We will follow this up by extending these documents to do filling, i.e. computing line breaks, and include multiple fonts and faces.e24j\15b13B54f1 116f0 170f1 89f0
(2) A string document is a document whose base is a string. It is implemented in addition to a text document for efficiency of representation. (It is relatively expensive to convert a string into a piece stream, and not necessary unless the string is going to be edited.) String documents will be used for captions of windows, keys in menus, etc. If a string document is to be edited, it will be automatically converted into an equivalent text document.e24j\6b15B121f1 129f0
(3) A desktop is a document whose base is a collection of possibly overlapping viewboxes each of which views a window (see below). (A Cedar desktop corresponds to the DLISP notion of desktop as a working surface.)e24j\6b7B118f1 82f0
(4) A window is a document whose base is a collection viewboxes which fit together to form a rectangle. In the typical case, this will consist of an optional viewbox at the top which will view a string document, a viewbox in the middle which will view an arbitrary document, and an optional viewbox at the bottom which will view a text document with certain executable properties. We call these three viewing areas of the window the caption, the body, and the menu.e24j\6b6B421b7B6b4B10b4B
One can think of a window as a special type of desktop with certain geometrical constraints. So why bother to implement it? Because we think it is a useful document class to have, and because we want it. We do not intend to exclude other flavors of windows, or desktops, or documents, but to provide some convenient defaults as well as to establish a framework to which users can incrementally add things. e24j
Note that our definition of window differs from the DLISP notion of window, as well as from the Smalltalk notion. We have separated two notions that were previously combined: the rectangular viewing area in which the window appears, and what appears inside of that area, i.e. does the window have a caption, a menu, etc. We call the former the viewbox, and the latter, what the viewbox views, the window. For most purposes, it will not be necessary to distinguish between these two, the viewbox that views the window, and the window itself. In other words, we will say that there is a window on a desktop, when what we really mean is that there is a viewbox on a desktop which views a window. However, this extra layer permits inclusion of windows into arbitrary documents (i.e. inclusion of viewboxes that view windows), and also allows the user to implement his own windows in non-standard ways, e.g. menu along the sides, caption at bottom, more than one caption or menu, etc., as well as splitting the body of the window into several viewing areas, i.e. viewboxes each of which view documents.e24j\772f1 48f0
It is important to note that the essentially top down hierarchical nature of the desktop-window paradigm described above does not in any way preclude the user from defining documents which do not fall into that paradigm. All that is required is that such documents be prepared to display themselves in a specified viewbox. How they do so is irrelevant.  For example the user could implement documents which format themselves via a bottom-up TEX style by polling each of their components (which might themselves be documents) and asking them how much of the allowable viewing area they would like to have, and allocating space and position accordingly.e24j
Suppose the user wishes to construct complex documents whose image includes images of other documents which are not a part of the former document, in the sense that they may be changed without the higher document knowing about it. We believe that it will be to the user's advantage to include these documents in the parent document through the intermediaries of viewboxes, since this will permit the parent document to employ already supplied facilities for rendering and refreshing its image. In other words, if a document contains a viewbox which views another document, and the latter document changes, the parent document will be correctly refreshed without it having to take any explicit action. However, if the user defines a document which views another document through a different mechanism, then it is his responsibility to make sure that when the latter document changes, the (various views of the) former document are refreshed.e12j\940f5b
Viewboxes

A viewbox has dimensions of height and width. (We restrict viewboxes to be rectangles.) It also has positioning information in terms of its home document's coordinate system, which is interpreted by the home document (remember that the viewbox itself is passive) and indicates where in the home document this viewbox is to be displayed. Similarly, the viewbox has associated with it positioning information in terms of its target document's coordinate system, which is interpreted by the target document, and indicates what portion of the target document is actually being viewed, i.e. what should appear in the corresponding rectangle. These two locations are respectively called the home location, and the target location. For example, the target location for a text document might be the line number for the first line to be displayed and a horizontal scroll distance, while the target location for a desktop might correspond to the desktop coordinates for the point to appear in the lower left corner of the viewbox.  Similarly, the home location for a viewbox that resides on a desktop would be the coordinates of its lower left hand corner. Finally a viewbox has associated with it scaling and rotational information, the target scale and the target rotation, again to be interpreted by the target document.e12j\f5b9f0B16b10B21f1 42f0 598b13B10b15B505b12B9b15B49i
Display Contexts

The basic (display) function of a target document is to fill a viewbox with an image.  To do this, the target may make calls on graphics procedures to draw characters, lines, etc. (Most of these routines have already been implemented by John Warnock. Either these routines will be extended, or we will provide an interface to them to support multiple clipping rectangles, and to allow swapping bitmaps in and out of a backup file.)  These graphics routines will all take a display context as an argument; this display context includes among other things a pointer to a bitmap specifying where any display operation is to be performed, a transformation (incorporating translation, rotation, and scaling) from the target's coordinate system into bitmap coordinates, and clipping rectangles indicating which parts of the bitmap are to be changed, i.e. are "visible".  The display context used by a target document is always provided by the home of the viewbox for which it is a target. The target then modifies this display context where necessary, and then calls any documents viewed by its viewboxes to repaint themselves, etc.   

How It Workse12j\f5b16f0B181f1 252f0 42b15B643f5b
An example of how viewboxes are used will help to clarify the above discussion.  Consider a DLISP style screen showing a desktop with several windows each consting of a heading and a part of a text document.  Using the above terminology, the desktop is a document with a viewbox component for each window.  The window viewboxes are looking at window documents. Each window document has two viewbox components: one viewing a heading document and another viewing a text document.  At the uppermost level, there is a  a single viewbox, called the ScreenViewBox or simply the Screen, which views a single window, called the ScreenWindow, which consists of two viewboxes, one which views a text document, (this viewbox corresponds to the socalled prompt window in DLISP), and the other which views a desktop, called the ScreenDesktop. On the ScreenDesktop reside the user's working windows, e.g. a typescript window, a debugging window, a program composition window, a mail window, perhaps some stand-alone menus, etc. This configuration is illustrated in Figure 2.   

Let us see how all of this fits together by considering a total repaint of the screen. The process begins by constructing a display context specifying as bitmap the actual ScreenBitmap, specifying as transformation the identity transformation, and as a clipping rectangle a rectangle with dimensions of the screen, lower left hand corner (0,0), and then telling the ScreenWindow to display itself in the ScreenViewBox using this display context. Our ScreenWindow consists of two viewboxes, one viewing the PromptDocument, called the PromptViewBox, and one viewing the ScreenDesktop. The ScreenWindow displays itself by first modifying a copy of the display context it was given so as to specify a clipping rectangle corresponding to the dimensions of the PromptViewBox, and a translation transformation which takes the upper left hand corner of the PromptViewBox into the upper left hand corner of the screen (i.e. this takes care of the HomeLocation of the PromptViewBox), and then tells the PromptDocument to display itself in the PromptArea using this display context. Note that at this point the PromptDocument does not know about or care where the viewing area is located on the bit map, or what portions of it are actually visible, or even whether or not it is being scaled or rotated. The PromptDocument will further modify the display context as indicated by the TargetLocation, TargetScale, and TargetRotation, and then begin "printing" the appropriate characters from its base. (Text documents will probably handle the horizontal component of the target location simply by modifying the translation transformation. Vertical component could be handled in the same way, i.e. by adjusting the translation transformation, and then simply print the entire document, relying on the position of the clipping rectangle to cause the right characters to appear in the view box. However, a more efficient and probable implementation would be to leave the vertical component of the translation transformation alone, and instead figure out what is the first visible line in the base and then begin printing from that point. The effect in both cases is the same.) e12j\149f1 1f0 394f6 13f0 63f6 12f0 183f6 13f0 9f6 13f0 387f6 12f0 182f6 12f0 26f6 13f0 33f6 12f0 44f6 14f0 13f6 13f0 22f6 13f0 6f6 12f0 156f6 13f0 81f6 13f0 76f6 12f0 8f6 13f0 22f6 14f0 26f6 10f0 57f6 14f0 182f6 14f0 61f6 14f0 2f6 11f0 6f6 14f0 70f1 671f0
When the PromptDocument finishes displaying itself, it returns control to the ScreenWindow, which then modifies a copy of its display context to specify a clipping rectangle corresponding to the dimensions of the viewbox that views the ScreenDesktop, and a translation transformation which takes the lower left hand corner of this viewbox into the lower left hand corner of the ScreenViewBox. (In this particular configuration of the ScreenWindow, this transformation is the identity transformation, but consider for example if the ScreenWindow also had a menu across its bottom.) The ScreenWindow then calls the ScreenDesktop to display itself in this viewbox using this display context. e12j\9f6 14f0 55f6 12f0 146f6 13f0 34f1 1f0 94f6 13f0 1f1 42f7 12f1 134f0 5f6 12f0 16f6 13f0
The ScreenDesktop first paints the entire viewing area with its background pattern, and then modifies the display context with a translation transformation corresponding to the target location of the viewbox, i.e. where on the ScreenDesktop the viewbox is looking, and a rotation and scaling transformation corresponding to the target rotation and target scaling. The ScreenDesktop then constructs display contexts for each of its viewboxes from the display context given to the ScreenDesktop, with translation transformations and changes to the clipping rectangle(s) corresponding to the position, i.e. home location, of the viewbox on the home desktop. Overlapping viewboxes are also handled by appropriately modifying the clipping rectangle(s) in the display context before calling the target. For each viewbox, having constructed the appropriate display context, the ScreenDesktop then calls  the viewbox's target document, which is a window document, and tells the window to repaint itself in the viewbox with the given display context. e12j\4f6 13f0 210f6 13f0 128f6 13f0 98f6 13f0 379f6 13f0
The window documents first paint their borders, then construct display contexts for their headings and bodies and call them to repaint themselves, and so on.  At the lowest level, a simple text document as target just calls the graphics routines to paint its contents.e12j
Viewbox Dependent Formattinge12j\i
At the time that a home document calls a target document telling it to display itself in a given viewbox, the home has already modified the display context to take into account the position of the viewbox in the home document coordinate system. It is the target documents responsibility to modify the display context according to the target location, scale and rotation. (There are simple primitives Scale, Rotate, and Translate which take a display context, and a scale, rotation, and displacement respectively and modify the display context accordingly.) We want to make it possible for the user to implement document classes in as simple minded and straightforward a fashion as possible. However, for some applications, a target document might want to format itself according to the particulars of the viewbox that views it. The most obvious formatting would be to have the document take into account the area it has to work with, i.e. the dimensions of the viewbox, not the dimensions of the current clipping rectangle. For example, Figure 3 illustrates the same document being displayed in (viewed by) two different viewboxes, A and B. Note that the visible portion of Viewbox A, i.e. the clipping rectangle at the time that the document is called upon to display itself, is the same as that of Viewbox B because the latter is only partially visible in the viewbox that views the home desktop for Viewbox A and B. We believe that what the user expects to see in the two viewboxes is as shown in the figure.e12j\371f1 29f7 5f1 2f7 6f1 6f7 9f1 128f0 414i3I159f6 1f0 5f6 1f0 16i7I20f6 1f0 125f6 1f0 101f6 1f0 5f6 1f0
Similarly, let us consider how a text document formats itself in the presence of scaling. In Figure 4, Window A views a desktop on which are two windows, each of which views a formatting text document. The window Normal (we really are talking about the viewbox that corresponds to the body of this window) has dimensions 30x40, scale 1:1, the window Double has dimensions 60x80, scale 2:1. Let us assume the text document is using a fixed pitch font each character of which is 10 units wide. When displaying itself in Normal, the document asks (the graphics package) how wide is the character "n", discovers that it will fit in the dimensions of the viewbox, displays the "n", asks how wide is the character "o", etc., and decides to break the line after the "w." In the second case, the text document is displaying itself in a viewbox whose dimensions are 60x80, and which specifies a scale factor of 2:1. The text document has already modified the display context to reflect this scale factor. Then, when it asks how wide the character "n" is, it is told 20, not 10. The document displays the "n", the "o", the "w", and at this point having used up 60 units of width, decides to break the line. Thus, the document is formatted the same in both windows, i.e. the second window simply contains a blown up version of the first, which is what was intended.   e12j\110f6 1f0 102f6 6f0 1f1 85f0 45f6 6f0 162f6 6f0
Now let us consider what happens if the viewbox that views the desktop on which window Normal and Double reside specifies a scale factor, as shown in Window B. When the text document is displaying itself in window Normal, the actual dimensions of the viewbox are 60x80, and the scale factor is 2:1, so the display looks the same as for window Double in as it appears in Window A. When the textdocument is displaying itself in window Double, the dimensions of the viewbox are now 120x160, and the scaling is now 4:1. Thus when the document asks the graphics package how wide the character "n" is, it is now told 40 units. Thus the formatting is the same, and the display of window Double as appears in window B is the same as window Normal in window A magnified four times.e12j\87f6 6f0 5f6 6f0 53f6 1f0 56f6 6f0 123f6 6f0 28f6 1f0 55f6 6f0 241f6 6f0 22f6 1f0 23f6 6f0 11f6 1f0 22b
Updating the Displaye12j\b20f1B
Let us consider what must happen to the display when a document is changed, e.g. a window is moved on a desktop or a part of a text document is changed. Note that there are two separable aspects to the refresh operation. First, we have the problem of getting the document to update its image in the viewboxes that immediately view it. Second, we have the problem of finding all of those places in the display (either on the screen or in a cached bitmap) where the document is visible along any chain of documents/viewboxes.  The document itself is responsible for the first aspect of the update. The document can do this simply by repainting itself in its entirety, exactly as it does with a total refresh, even though only a part of the document has changed. Or, the document can use the nature of the change to minimize the amount of work it has to do. For example, if an edit has been made to a particular line of a text document, it may only be necessary to redisplay that line. If the target location of a viewbox has been changed, i.e. the viewbox has been scrolled, only that portion of the new image not previously visible needs to be regenerated.e12j\408f1 45f0
Independent of whether or not the document itself is smart about partial refresh, i.e. whether or not it supports a partial refresh of the viewboxes that view it in response to some small change in the document, we still have the problem of finding all the places that these viewboxes are in turn viewed and getting them updated. In our design considerations, we were primarily concerned with this aspect of updating the display:  with providing facilities that efficiently handle the refresh of multiple views without greatly complicating the documents. e12j
A simplified description of what happens when a document changes is as follows: the document first proceeds by considering each viewbox for which it is a target. (A document will have as one of its attributes a list of all viewboxes for which it is the target.) If this viewbox views any part of the affected area, the document then obtains a list of all of the display contexts with which that viewbox is displayed. Note that while the viewbox itself resides in only one home document, there may be several viewboxes which view that home document, each of which in turn may be viewed in several places, etc. What the document needs is a display context that corresponds to the display context in effect at the end of each chain of documents and viewboxes leading from the ScreenViewBox down to this document, i.e. the display context has to specify the same translation, rotation, and scaling transformations, as well as clipping rectangles as would be in effect when the document was asked to display itself in the given viewbox via a top-down complete refresh of the screen. e12j\161f1 100f0 53f1 1f0
The document obtains this list of display contexts for one of the viewboxes that view it (see definition of GetDisplayContexts below) by considering the home document for that viewbox and then for each viewbox that views that document, obtaining the list of display contexts for that view box, and so on until the ScreenViewBox is reached. (Circularities are prohibited and this prohibition enforced at the time that a viewbox is created.)  (This recursive procedure is implemented in the function GetDisplayContexts, described in ViewboxesInterface.Memo.) After having obtained this list of display contexts, for each such display context, our document then simply paints its new image in the given viewbox with that display context.e12j\89f1 19f7 18f1 7f0 207f1 99f0 2f1 57f7 18f1 41f0

Updating the Display Efficientlye12j\1b
There are two ways of accelerating the updating of the display: caching the list of display contexts for a given viewbox, so that they do not have to be reconstructed for each update (we believe that the issue here is primarily one of avoiding the creation and reclamation of storage, rather than saving cpu cycles, since it would be unusual for a chain of documents and viewboxes to be sufficiently long that the time required to ascend back to the ScreenViewbox be significant), and caching a bitmap for a particular viewbox so that the image of that viewbox does not have to be repainted.

Caching Display Contexts for a Viewbox

The basic idea behind caching display contexts is simple -- when a viewbox is asked to generate a list of display contexts corresponding to the chain of documents and viewboxes which can reach it, it checks to see if it already has the list computed and saved in a cache. If so, it simply returns the old value.  If not, it computes the list in the usual manner and puts the result in the cache before returning it.  This should greatly reduce the average time to produce a list of display contexts and reduces the amount of garbage generated by repeatedly creating and discarding the lists.

The price for this is some extra code to invalidate the cached list of display contexts for a viewbox when something changes.  (Rather than saving information which relates each display context in the cached list to a viewbox/document chain and then invalidating only the particular display context affected by a change, we have taken the simpler approach of saving just the display contexts and invalidating the entire list when a change occurs.) Such invalidation is necessary either (a) when the home location or dimensions of the viewbox changes, or (b) there is a change to the viewboxes that view the home document for this viewbox, e.g. a view box is added, deleted, or is changed with respect to its dimensions, home location, scaling, rotation, or target location, or (c) there is such a change to the viewboxes which view the home document for any of these higher viewboxes, and so on, all the way back to the ScreenViewBox.

Let us consider a desktop to illustrate some common cases in which display context caches must be discarded.  If a viewbox for which this desktop is a target has its target location changed, i.e. the viewbox is scrolled, then the display context caches for all viewboxes on the desktop which are visible in this viewbox, either before or after the scroll, must be invalidated (and all the cached display contexts for all viewboxes visible in them, if any, and so on). If a new viewbox is created on the desktop that obscures some previously existing ones, the cached display contexts for these viewboxes must be invalidated (as well as the cached display contexts for the viewboxes that are visible in any of them).  If an existing viewbox is deleted, thereby uncovering other viewboxes, the cached display contexts for these viewboxes must be invalidated. If the home location for one of the viewboxes on the desktop is changed, the cached display contexts for this viewbox and the viewboxes that are visible in it must be invalidated, as well as the cached contexts for any viewboxes that have become covered or uncovered as a result of the move, and all of the viewboxes visible in them, etc.e24j\183f1 296f0 114i38I722f1 321f0 472f6 13f0 378f1 92f0 156f1 91f0 243f1 1f0
There are a variety of methods for organizing cached display contexts in order to facilitate implementing the invalidation of these caches. These methods trade off the complexity and amount of information to be retained that associates viewbox/document chains with particular cached display context in order to discard the minimal number of display contexts, against much simpler methods which result in potentially discarding cached contexts which may still be valid. We are currently leaning towards adopting one of the simpler methods. We require that each document that contains any viewboxes support an operation which will return the list of all viewboxes visible in a particular viewbox. Alternatively, the document can simply return the list of all viewboxes that it contains, with the result that some viewboxes will be considered when they don't have to be, e.g. have their cached display contexts invalidated unnecessarily. The procedure which invalidates the cached display contexts for a particular viewbox, will then automatically invalidate the cached display contexts for all affected viewboxes in the target document for that viewbox, and all cached display contexts for the viewboxes that they in turn view, etc.e24j\753i3I474i
Caching bitmaps

We wish to allow viewboxes to keep one or more cached bitmaps to accelerate repainting. (The same viewbox may be viewed along several viewbox/document chains resulting in different display contexts, e.g. with different scaling or rotation, hence the need to be able save more than one cached bitmap.)  The decision about whether or not to cache a particular bitmap is made by the target document, i.e. it is the target document that knows how hard it is to regenerate the image, since it is the one that knows how to create the image in the first place. If a particular target document decides to save the results of displaying itself in a given viewbox with a given display context, a copy of the display context is created that points to a cached bit map, rather than the one that came with that context. The target document then follows its usual procedure for repainting, following which the image is simply copied, using BitBlt, from the cached bitmap onto the supplied bit map. Finally, the cached bitmap is stored with the view box. (Actually both the display context and the cached bitmap are saved, since the context is needed in order to determine when the cached bitmap can be used, as described below.) On subsequent calls to paint the target document, the image can be copied from the cached bitmap (provided that the cached bitmap was generated under the same rotation and scaling transformations as the given display context, and clipping rectangles that include, i.e. cover, those of the given display context) without having to invoke the target document's paint procedure at all.e24j\i15I90f1 212f0 626f6 6f0 51f1 1f0 55f1 175f0 98f1 214f0
The only remaining issue is that of keeping cached bitmaps valid. We deal with this by automatically updating the cached bitmap whenever a change occurs that affects it. This is accomplished by having the procedure which obtains a list of all of the display contexts with which a given viewbox is displayed automatically include any stored displayed contexts and cached bitmaps.  Thus, whenever a target document performs a partial update, it automatically updates the cached bitmaps for any higher viewboxes.   e24j
Note that with the above scheme, while cached bitmaps can never become invalid, they can become irrelevant. For example, if the scaling transformation is changed for a higher viewbox that views, through some chain of documents and viewboxes, the viewbox for which a bitmap has been saved, this cached bitmap still contains an accurate image, but one which is not being used in generating the display. (When the target document was asked to paint itself in the given viewbox with the new scale, a copy of the display context that pointed to a cached bitmap would have been created, the painting done in this bitmap, which would have then have been stored with the viewbox along with the cached bitmap for the original scale.) Note that this cached bit map may become useful at some later point, e.g. if another viewbox is created viewing the given viewbox with the original scaling, or the view might be returned to its original scale (at which point the second cached bitmap might become irrelevant). We plan to remove the issue of resource allocation for cached bitmaps from the control of individual documents, and implement some scheme for discarding irrelevant, or infrequently used, cached bitmaps based on frequency of use, size, and amount of storage available.   e24j\96i10I295f1 324f0


Implementation Strategy\f5b

As stated earlier, one of our primary goals has been to make implementation of new classes of documents as simple as possible. To accomplish this, our strategy has been to identify in the various operations that documents must provide, e.g. display, edit, point, select, etc., those parts of the operation which can, in principal, be the same for all classes of documents, and to factor out those parts which need to be specialized for each particular document class. The designer of a new document class then needs to implement only the latter operations which are smaller and simpler. System provided procedures then can take care of the bulk of the work, only calling on the specialized procedures associated with the individual document to parameterize their operation. This approach also has the benefit that it makes practical implementing system wide strategies for resource management issues, such as caching of bit maps, display contexts, etc., which can be made totally invisible to the client documents provided that some portion of the corresponding document operation goes through a system supplied interface. j

For example, rather than require that each document supply a procedure which paints the document in a given viewbox, we have defined a procedure, PaintViewBox, which is used for all documents and viewboxes. PaintViewBox implements those aspects of the display operation which are common to all documents asnd viewboxes, such as obtaining the list of all display contexts for the given viewbox so that its image is updated painted in all places that it appears in the display, handling cached display contexts and cached bitmaps, etc. For example, to obtain the list of display contexts for the given viewbox, PaintViewBox ascends the chain of documents and viewboxes until either a viewbox is encountered which has a cached list of display contexts, or until the ScreenViewBox is reached. When these display contexts are passed back down, at each stage, PaintViewBox must perform the corresponding translation, scaling, and rotation transformations to the display context. However, only the document knows how to interpret the target location, rotation, and scaling of the viewbox that views it. Therefore, we require that each document provide an operation called ExportDisplayContext, which modifies a display context according to the home location of a given viewbox, and ImportDisplayContext, which modifies a display context according to a target location, scaling and rotation, of a given view box. PaintViewBox simply calls these procedures at the appropriate time to parameterize its operation according to the class of document.j\147f6 12f0 49f6 12f0 390f6 12f0 142f6 13f0 78f6 12f0 299f6 20f0 90f6 20f0 110f6 12f0
j
The details of PaintViewBox and other such common procedures as well as the record definitions for documents, viewboxes, windows, etc., are discussed in ViewBoxesInterface.Memo.      j
