.dv press
.fo 0 TimesRoman12
.fo 1 Helvetica12B
.fo 2 TimesRoman10
.so r;r macros
.margin 1i 1i 1.25i 1.25i
.tr ^
.nf L
.ls 1
.sp 5
1The Progressive Reorganization of Mind0


2Powerful Ideas and Cognitive Structures0
.sp 20
running head: Mental Reorganization; rlprm3 >
.sp 2
.in 3i
Bob Lawler
.in
.bp
1Contents0

Introduction
^^^^the problem: how is communicable order an emergent of construction
^^^^microworlds and archtypes.
^^^^picture puzzles and multiple descriptions as relation-ancestor

Two Geometries: the missing link.
^^^^Turtle Geometry as Navigation
^^^^Coordinate Geometry: a failure to assimilate new knowledge.
^^^^Construction of a microworld to bridge the gap
^^^^Conclusion: post-cedent ancestors.

Computer Designs and Iteration: cluster separation
^^^^microworlds encountered

The Nucleation of Clusters

Thesis section numbering
12.0 Variables and Designs -- Precis  (1)
^^12.1..The Systems Appearance  (4)
^^12.2^The MAtchbox model of variables  (7)
^^12.3^Introducing Delta (14)
^^12.4^Variables in Polyspi Designs (7)
^^12.5^Polyspi Families  (12)
^^12.6^Explorations with Inspi (19)

.bp
.ls 2
.fi b
1Variables and Designs0

^^^^^^^^^^A theme running through this section, and emergin  in [*subsections 12.5 and 12.6] is a third sense in which the concept of a programming variable is an important intellectual attainment.  The theme is this: analyzing a process in terms of the multiple factors on which it operates and controlling the variation to one factor at a time is a powerful principle for organizing exprience.  The work with procedures using multiple variables developed in an unusual computer environment, so we begin with a short description of the systems appearance.  The introduction of the varibale concept is realted to quantities with which Miriam was familiar.  With the introdfuction of DELTA, our name for an incrment to a variable value, DISTANCE and ANGLE are varied by DELTA to produce POLYSPI and INSPI design/  This section traces Miriam's use of variables in these procedures.

The Systems Appearance

^^^^^^^^^^What a computer is depends on the system appearance to the person.  To an engineer repairing a functional failure, the computer is a set of machines with input-output correspondences realted through logic diagrams.  To a data entry clerk, the computer may be a series of formats on a video display screen which change (more or less predictably) to the entries.  The system appearance of the computers presentedf to Miriam involved non-standard elements both of hardware and software.  The termHARDWARE refers to the machines used.  The term SOFTWARE refers to the language by which one communicates directions to the machine.  Let us discuss the hardware first.

*** the slot machine

^^^^^^^^^^The specific way in which Miriam was introduced to variables was through the use of a single function editor, VARY.  Tracing that introduction requires psecification of the software environment.  In the Logo language , global vareiables are declared and modified by the MAKE command, i.e. [MAKE "SOME-NAME SOME-VALUE].  (Locally declared variables were not introduced to Miriam.)  Miriam was familiar with the use of various quantites as operands to operations, e.g. FORWARD, and as specific input variables, i.e. to the SHOOT procedure and as values for the COUNT variable generated by the TIMES program.  THe basic function of VARY (one of four functional editors in the sussystems SOPY, VARY, LINK, and TIMES, abbreviated as CVLT) modifies within a target procedure all occurences of any specified character string to anothercharacter string.  A second, optional function creates input variables, i.e. appends a variable declaration to the procedure name if any specified quantity is found and replaced by a specified variable name.  The role of VARY in the introduction of variables was centrl, if we think of the gross pattern thus:
.ls 1
.in .5i
.nf L
1^^we generated fixed instruction procedures with TIMES.
2.^^we altered the operand quantites with the VARY editor.
3.^^we specified values for variables in a SETUP procedure.

.ls 2
.in
.fi b
VARY and TIMES together, as shown in the previous section, permitted Miriam's experiencing three kinds of iteration: looping, recursion, and step-duplication.  The last iteration type, the only one we can claim she comprehended in any analytic way, has always been possible but infeasible for complicated POLY or POLYSPI designs.  The VARY function made it relatively simple to modify any term in the duplicated steps of that most primitive form of iteration.  Through the VARY procedural-global change function, fixed instruction procedures of limited scope were made flexible enough to permit discussing the variation of quantities before implicating the generality of a vriable.  The incidents of the previous section have established how useful this apparently trivial capability really was.

The Matchbox Model of Variables

^^^^^^^^^^Miriam first encounter a variable as a quantity submitted to a procedure (i.e. keyed after the procedure name and before a carriage return) which determined how many iterations of its kernal should be performed.  Although she accepted this use of a quantity,Miriam could not easily appreciate that a number submitted to a procedure might have some different application.  I tried introducing the more general idea of a variable through the matchbox model.  I conside the following attempt an embarassing failure because of its faulty conception and specifically avoid any recommendation of its use

*** probably to be omitted -- but note use of this language

^^^^^^^^^^Miriam's useful introduction to vcariables was through the slot machine. * * * oimit detail of Logo compatibility stuff * * * I introduced specific variables to the slot machine by modifying the control program so that operation with no number card reference variables by default.  These minimal changes brought the slot machine into compatibility with the standard Logo language.  Assigning variable valueswas made possible by creating an unused command code into a request for keyboard input before returning to reading other slot machine card.  A few other changes (e.g. converting another floor turtle command to a video display screen print image command) gave us a very powerful children's terminal with these characteristics.  Operations were typically specified by the slot cards.  Variable values were assinged through keying of standard logo statements.  When a pleasing design was created, hard copy was readily available.  The latter was important to me for documentation and to Miriam for presenting artifacts of her work ti any friend who would accept such a gift.

^^^^^^^^^^The material on Miriam's use of the slot machine is rich enough for anlysis in its own right, but our focus here is limited to her use of variables with that device.  In the next subsection, we will continue this discussion when one uantity is applied to another iteratively.  Here, we will follow Miriam's use of DIATANCE and ANGLE through slot card invocation of the keyboard.  Familiarized with the machine and varieties of cards (including branching cards) in Logo session 26, Miriam made some complicated POLY designs with iteration procedures and fixed quantity instructions (Cf. FIgure III-25).  Her antipathy to variables persisted from Logo session 29, and she refused to take direction from me in Logo session 30, finally refusing to return after a break.  Robby was interested in pursuing the use of variables with the slot machine; and we located her gfood number card for angles and used a simple looping FORWARD and RIGHT procedure  

*** p. 529

After this first success with a slot machine POLY procedure, Miriamvaried the contents of the variable ANGLE.  She enjoyued the POLY designs and chose to print the designs of Figure III - 26 (POLY's 105, 139, 146, 101).

^^^^^^^^^^Miriam had not assigned a value to the variable DISTANCE in Logo session 30.  As the next Logo session began, both ANGLE and DISTANCE were initialized at zero.  After arranging a FORWARD and RIGHT loop and directing control at the keyboard, Miriam assigned 150 as the value of ANGLE.  THe turtle circled in place when she initiated the POLY procedure.  Miriam interrupted the loop with a clearscreen and keyboard invocation:

***

Miriam's first two vartiable POLY was ANGLE 80, DISTANCE 190.  She was delighte dwith that result and her next trial as well, ANGLE assigned to 150.  Theassignment of an 840 degree ANGLE confused Miriam (840 - 720 = 120; this creates an equilateral triangle.  She accepted my advice, "Why don't you try an angle like 84, instead of eight hundred and forty....  Or 89 is a good one, or 88, or 87, or 91...."  Unfortunately, the drawing went beyond bounds of the turtle's vidfeo display domain.  I restarted the slot machine control porogram and Miriam set the DISTANCE variable to 158.  (It had been 190; I suggested 125, 149, or 150.)  Miriam continued on in the session, but these examples are sufficieint to document the extension of her experience to using two variable in the Logo syntax with the slot machine terminal.  Although she did not, at first, know what to do, with explanation and some direction, Miriam found the practive accessible of assigning varibale values.  It is beyond imaging that Miriam comprehended any orderly relation among the designs created by different angles.  Nonetheless, it should be easy to grant that Miriam knew bigger distance made larger fiugures and vice versa.  

Introducing DELTA

^^^^^^^^^^

.ls 1
.in .5i
.nf L





.ls 2
.in
.fi b
