TITLE LOGO
	PRINTX PART A
;         TM
;(C) COPYRIGHT,1970,BOLT BERANEK AND NEWMAN INC., CAMBRIDGE, MASS.
;MODIFICATIONS MADE BY RON LEBEL, MIT AI LAB, CAMBRIDGE MASS.

;CONFIGURATION PARAMETERS 

TEN50==1
TENEX==2
BBN50==4
TURTLE==10
SAVBRK==20	;IF ON, SAVEUP THE STATE OF LOGO SO THAT "GO" PROCEEDS
OFILE==40	;OLD STYLE FILES
NFILE==100	;NEW STYLE FILES
LEVELC==200
DRIBBLE==400
MITTUR==1000
IFNDEF CONFIG,<CONFIG==TEN50!NFILE!MITTUR!DRIBBLE>

TEN50==TEN50&CONFIG
TENEX==TENEX&CONFIG
BBN50==BBN50&CONFIG
TURTLE==TURTLE&CONFIG
SAVBRK==SAVBRK&CONFIG
OFILE==OFILE&CONFIG
NFILE==NFILE&CONFIG
LEVELC==LEVELC&CONFIG
DRIBBLE==DRIBBLE&CONFIG
MITTUR==MITTUR&CONFIG

ERPDLL==20	;LENGTH OF ERROR PDL, NEEDS TO BE LONG ENOUGH TO
		; AVOID PDL OVERFLOW TRAP

;ACCUMULATOR ASSIGNMENTS
F=0	;FLAGS AND BITS 
A=1
B=2
C=3
D=4
E=5
G=7
H=10
L=12
M=13
N=14
W=15
S=16	;ARGUMENT PUSHDOWN STACK
P=17	;CONTROL PUSHDOWN STACK

;FLAGS FOR THE LH OF F

LDONF==1	;LINE DONE FLAG FOR EDIT MODE
EDITF==2
UPFF==4		;COMEXR CALLED FROM RETURN CODE, NOT FROM COMEX
TIF==10
BREAKF==20
TOF==40		;TYPE OR PRINT IN PROGRESS
GOF==100	;USER TYPED  DIRECT GO
RQF==200	;A REQUEST IN PROGRESS
COMF==400	;1 IF USER PROCEDURE BEING LEFT SHOULD BE TREATED LIKE COMMAND
GCF==1000	;1 IF THIS K HAS NOT BEEN GARBAGE COLLECTED YET
TITLEF==2000	;DOING TITLE DURING A TO
BROKE==4000	;ERROR WAS NON-TYI BREAK KEY
GETF==10000	;GET IN PROGRESS
SAVEF==20000	;SAVE IN PROGRESS, FOR ALTERNATE FORMS OF TYPEOUT
STEPF==40000	;1 IF THERE IS A COMPILED STEP AT SAVED BREAK
NOBREAK==100000	;TO TEMPORARILY INHIBIT BREAK KEY
FCHARF==200000	;FOR COMPUTING THE TIME BETWEEN _ AND CHAR 1
GCCSF==400000


;FLAGS FOR THE RIGHT HALF OF F

TF==1	;A TEMPORARY FLAG FOR MANY ROUTINES
PMF==2	;+- SIGN
NWF==4	;NOT WORD INPUT
CRF==10
FSYMF==20	;0 IF FIRST ELEMENT OF LINE BEING COMPILED,USED W NNUMF
NNUMF==40	;NON-NUMERIC INPUT
NOLSPF==100
PREFIX==200	;FOR PWORD
SUFFIX==400	;ALSO FOR PWORD
MAKEF==1000	;COMPIL CALLED WITH THIS=1 MEANS CALLED FROM MAKE
STORED==2000
FLUSHF==4000	;GETTING AN ALREADY DEFINED PROCEDURE
EABBRF==10000	;DOING LIST ENTRY ABBREVIATIONS
ECONTF==20000	;  "    "     "   CONTENTS
EENTRF==40000	;  "    "     "   ENTRY
ENAMEF==100000	;  "    "     "   NAMES
TISLF==200000	;FOR TIS QUOTED STRING INPUT

;FLAG DEFINITIONS FOR LH OF STRING POINTER

WORDF==100	;STRING IS A WORD
SENTF==200	;SENTENCE
EMPTYF==400	;EMPTY

;FLAG DEFINITIONS FOR LH OF COMPILED ELEMENT

MPF==400000
UPRF==200000
VARF==100000
LITF==40000
COMMTF==20000	;IS A COMMENT
LPARF==10000
RPARF==4000
INFF==2000
ANDF==1000	;USED IN TO LINES, IMPLIES THIS DUMMY PRECEDED BY AND
MAKESC==40	;INDIRECT BIT MEANS 2 LINE MAKE AND END OF NAME:
;ALSO IN THE LEFT HALF OF COMPILED ELEMENT CAN BE STRING BITS


;FLAG DEFINITIONS FOR LEFT HALF OF FIRST WORD OF RP PAIR

TRACEF==400000	;THIS PROCEDURE IS BEING TRACED

;FLAG DEFINITION FOR LH OF 2ND WORD OF MACHINE NAME PAIR

COMPUT==400000	;IF ONE, THIS NAME MUST BE COMPUTED, ADDR IN RH


;UUO DEFINITIONS

OPDEF ERROR [1B8]
OPDEF EXPAND [2B8]
OPDEF GARBAGE [3B8]
OPDEF SQUEZE [4B8]
OPDEF PJRST [254B8]

;STORAGE ALLOCATION TABLE DEFINITIONS

	SALL

DEFINE TABLES
<TT RP,40,<[EXP RPA,0]>	;THESE THREE MAY BE IN ANY ORDER
 TT VP,40
 TT UA,40
 TT PS,200,<[EXP PSA,PSD,PSM,0]>	;THESE THREE MUST BE IN THIS ORDER
 TT CS,200,<[EXP CSA,CSD,CSM,0]>
 TT DP,200
 TT SP,40,<[EXP UUOACS+S,0]>	;THESE TWO MUST OCCUR IN THE SAME ORDER AS IN ACS
 TT PP,200,<[EXP UUOACS+P,0]>
FOR TENEX,< TT WS,2000,<[EXP W,WSB,WSD,UUOACS+W,0]>>
FOR TEN50,<TT WS,2000,<[EXP W,WSB,WSD,UUOACS+W,BUFLOC,BUFLOC+1,FPTR,0]>>
;THIS ONE MUST ALWAYS BE LAST SO MEM TRAP CAN BE USED AS END TEST
>
DEFINE POINTR
<MM RP,A
 MM PS,A
 MM PS,D
 MM PS,M
 MM CS,A
 MM CS,D
 MM CS,M
 MM WS,D
 MM WS,B>

DEFINE U(A1)<UU(A1,1)>
DEFINE UU(A1,A2)<
A1:	BLOCK A2 >

;TO MAKE CONFIGURATION DEPENDENT STUFF READ LIKE ENGLISH

SYN IFN,FOR
SYN IFE,NOTFOR

DEFINE UNDEX (AC)
< ADD	AC,[XWD 070000,0]
  CAIG	AC,0
  SUB	AC,[XWD 430000,1]>


;UNSHARED AREA, NON-ZERO STUFF FIRST

FURST==.	;IN CASE DIFFERENT SYSTEMS PUT DATA IN DIFFERENT PLACES
UU UUOTRP,2;	;Z
		;JRST DOUUO
DEFINE MM (A1,A2)
<U A1'A2>
POINTR
U PTOP;	;ORDER OF THE NEXT THREE IS EXTREMELY IMPORTANT, MUST BE
U CTOP;	; THE SAME AS THEIR CORRESPONDING TABLES IN TT
U DTOP
U WTOP
U CDBOT;	;BASE OF ALL DIRECT LINES
U CBOT;		;BASE OF DIRECT LINE
U RANNO;	;STUFF TO COMPUTE PSEUDO-RANDOM DIGIT
FOR MITTUR,<
UU TURDER,4>
FOR DRIBBLE,<FOR TEN50,<UU DRIBFL,4>>

FOR TENEX,<	UU JFNTAB,10;	;FOR OPENNING FILES
		UU CHNTAB,^D17>	;PSEUDO-INTERRUPT CHANNEL DISPATCHES
;OTHER GOOD FILE STUFF

U CHIN;		;INSTRUCTION TO EXECUTE TO READ A CHARACTER
U CHOUT;	;INSTRUCTION TO EXECUTE TO WRITE A CHARACTER
U INFILE;
FOR OFILE,<U OUTFILE>
FOR NFILE,<
U FPTR;		;BYTE PTR INTO A BUFFER (ALWAYS ASSOCIATED WITH LBUF+1)
U CCOUNT;	;COUNT OF CHARS REMAINING UNUSED IN LBUF+1
U TANDD;	;TIME AND DATE OF STARTUP
U FILEAD;	;FIRST BLOCK OF ENTRY BEING WRITTEN
U FILECT;	;COUNT OF BLOCKS USED IN WRITING THIS FILE
U LABS;		;WHERE PTR TO TOP OF FREE SPACE IS STORED DURING OPERATION
U LDIRNO;	;BLOCK NUMBER OF PREVIOUS DIRECTORY
U LDIRL;	;NUMBER OF ENTRIES IN LDIRNO

;DATA FOR EACH PHYSICAL BUFFER

UU BUFLOC,2;	;LOCATION IN CORE
UU PBLOCK,2;	;LOGICAL BLOCK NUMBER IN THE BUFFER
UU CHANGE,2;	;0 IF NOT ALTERED

;DATA FOR EACH LOGICAL BUFFER

UU LBLOCK,2;	;LOGICAL BLOCK NUMBER IN THIS LOGICAL BUFFER
UU LBUF,2;	;PHYSICAL BUFFER USED BY LOG BUFFER (0 OR 1)

FOR TEN50,<UU LUKDAT,4
U FILSIZ;	;SIZE IN DISC BLOCKS OF FILE
UU BUFADR,2;	;STRING POINTER LOCATIONS OF FILE BUFFERS
>>
FOR DRIBBLE,<FOR TENEX,<
U DRIBFL;	;FILE NUMBER OF DRIBBLE FILE
U DRIBTM;	;TIME OF TYPING _ FOR THE TIME STAMP
>
FOR TEN50,<
UU IOLIST,2
U DRIBPT
U DRIBCN
UU DRIBBF,200
>>


DEFINE TT(A1,A2,A3)
<U A1>
TABLES
U CHARNO;	;THESE FOR INPUT SECTION
U BCHAR
U TRACEM;	;LIKE BCHAR BUT ONLY FOR TRACE OUTPUT
U SCOUNT
U CHGNO;	;XWD SEQNO,CBOT; FOR CURRENT LINE. REPLACE WHEN COMING BACK TO THAT LEVEL
U LINENO
U PRODNM;	;NAME OF PROCEDURE IN PROGRESS
U TRUTH
U CPP;		;POINTER INTO COMPILED LINE
U SPP;		;CONTENTS OF S AND P AT START OF LINE
U LINBOT
U SRCBOT
U NEWBOT
U NXLINE;	;PTR TO NEXT LINE IN CURRENT PROCEDURE
U THISPR;	;MACHINE PROCEDURE LAST IN, PTR TO 2ND ENTRY IN CMPT
U TOPROD;	;NAME OF PROCEDURE BEING DEFINED
U BRKTEM;	;TEM STORAGE FOR BREAKY ROUTINE
FOR TENEX,<U BRKTEB>	;MORE TEM FOR BREAK KEY
U SEQNO;	;VERSION NUMBER OF LAST LINE INPUTTED OR EDITED
U RADIX;	;RADIX FOR CURRENT NUMBER CONVERSION
U GODEPT;	;THE NUMBER OF GO'S IN THE STACK
U TOFDAY;	;TIME OF STARTUP IN SECS SINCE MIDNIGHT OR RESET CLOCK
U BSP;		;SPP ASSOCIATED WITH GODEPTH, STACKS AT LAST SAVED BREAK
U GCTEM;	;TEM STORAGE FOR GC AND ALLOCATOR
UU UUOACS,20
UU ERRPDL,ERPDLL;	;FIXED PUSHDOWN FOR ERROR HANDLER
FOR TENEX,<	UU LEVLTB,3>	;FOR PSI SYSTEM
FOR MITTUR,<
U PENST
U TTYST
>
BLAST==.-1

EXTERNAL JOBUUO,JOB41,JOBSA,JOBREL

FOR TEN50,<
EXTERNAL JOBREN,JOBAPR,JOBOPC
EXTERNAL JOBDDT,JOBFF
EXTERNAL JOBCNI,JOBTPC

>
FOR TENEX,<RELOC>	;PAGE 0 WILL BE WRITABLE,1-LOGEND NOT

LOGO:	MOVEI	F,0	;CLEAR FLAGS, MAY BE SKIPPED ON CERTAIN RESTARTS
FOR TEN50,<
	CALLI	0	;RESET
	MOVEI	A,BREAKY
	MOVEM	A,JOBREN	;FOR BREAK KEY
	MOVEI	A,ALLOC
	MOVEM	A,JOBAPR	;FOR ILLEGAL MEMORY REFS
	HLRZ	A,JOBSA		;INITIALIZE THE LOW SEG
	HRLI	A,(A)
	ADDI	A,1
	HRRZ	B,JOBREL	;TOP OF HIGHEST K ASSIGNED
	SETZM	-1(A)
	BLT	A,(B) >		;CLEAR FROM JOBFF TO TOP OF ASSIGNED CORE

FOR TENEX,<
	RESET
	MOVE	A,[SIXBIT /LOGO/]
	SETNM				;SET UP NAME FOR SYSTAT
	MOVE	A,[XWD 20000,20001]
	SETZM	20000
	BLT	A,21777 >

	MOVE	A,[JSR UUOTRP]
	MOVEM	A,JOB41		;FOR UUOS

	MOVE	A,[XWD FURST,FURST+1]
	SETZM	FURST
	BLT	A,BLAST	;CLEAR FROM START OF CORE TO EITHER DDT OR JOBFF

	MOVE	A,[XWD SPFRST,FURST]
	BLT	A,FURST+SPLLEN-1 ;SET UP NON-ZERO PART OF UNSHARED CORE

FOR TEN50,<	HLRZ	B,JOBSA>	;ALWAYS THE FIRST FREE LOCATION
FOR TENEX,<	MOVEI	B,20000>	;ENOUGH ROOM FOR CODE AND SYMBOLS
	HRRZI	A,RP
INILU:	HLRZ	C,ALOCTB-RP(A)	;POINTER TO LIST OF CELLS TO BE SET UP

	HRRZM	B,(A)		;RP ETC.
	JUMPE	C,INILUR	;NO SUBSIDIARY LIST

	MOVE	E,(C)
	JUMPE	E,INILUR	;END OF SUBSIDIARY LIST
	HRRM	B,(E)		;NO, RPA ETC.
	AOJA	C,.-3		;NEXT IN THIS LIST

INILUR:	ADD	B,ALOCTB-RP(A)	;HOW MUCH TO GIVE TO THIS SPACE
	CAIE	A,WS
	AOJA	A,INILU		;MORE SPACES TO GO

	MOVEI	A,0
	JSP	C,SETPDL

FOR TEN50,<
	HRRZ	A,JOBREL
	CAIGE	A,@WTOP	;IS WTOP INSIDE CURRENT ALLOCATION?
	EXPAND	WS	;NO, GET A K SO WS WILL FIT
	PUSHJ	P,SETTTM	;SET TELETYPE MODE TO BBN'S TELCOMP MODE
	MOVEI	A,220000
	CALL	A,[SIXBIT /APRENB/] >	;REQUEST PDL AND ILL MEM REF TRAPS

FOR TENEX,<
	MOVEI	A,@WTOP
	JSP	E,SETMEM >	;LOCK PAGE ABOVE ABOVE ADDRESS

	HRRZI	A,(W)
	HRLI	A,.WBASE
	BLT	A,.WTOP-.WBASE-1(W)
	HRRZI	A,FLUSHM
	HRRM	A,JOBSA	;DON'T REDO THE INITIAL STORAGE ALLOCATION

	PUSHJ	P,TIMDAY	;IN SECONDS SINCE MIDNIGHT
	TRNN	F,TF
	MOVEM	C,TOFDAY	;TIME OF LAST RESET CLOCK

	MOVEI	B,[ASCIZ /
LOGO

/]
	TRNN	F,TF	;1 IF CALLED BY ERASE ALL
	PUSHJ	P,TOSS


RESET:	SETZM	TRACEM		;TRACE MARGIN 
	SETZM PRODNM

FOR TEN50,<	PUSHJ	P,SETTTM	;ENTER TELCOMP MODE
	MOVEI	A,220000
	CALLI	A,16>		;APR ENABLE

FOR TENEX,<
	CIS		;CLEAR PSI SYSTEM
	MOVEI	A,400000	;DENOTE THIS FORK
	MOVE	B,[XWD LEVTAB,CHNTAB]
	SIR			;SET UP PSI SYSTEM
	MOVEI	A,0		;BREAK TO CHANNEL 0
	ATI			;ASSIGN TERMINAL INTERRUPT
	MOVEI	A,400000	;THIS FORK
	MOVE	B,[XWD 400702,0];CHANNELS 0,9,10,11,16
	AIC			;ACTIVATE THESE CHANNELS
	EIR			;ENABLE THE SYSTEM
	MOVEI	A,101
	MOVE	B,[EXP 525252525252]
	MOVE	C,B
	SFCOC		;SET ALL CONTROL CHAR TYPEOUTS TO BE THEMSELVES
	MOVEI	A,100
	RFMOD			;READ THE TERMINAL INPUT MODES
	ANDCMI	B,770000	;ZERO OUT THE WAKEUP SET
	IORI	B,140000	;SET THE WAKEUP SET TO ALL CONTROLS
	SFMOD >			;SET THEM


	SQUEZE			;TAKE OUT ANY EXTRA ALLOCATION

	TRZE	F,TF	;1 IF CALLED BY ERASE ALL
	JRST	MAINL
FOR DRIBBLE,<		;INITIALIZE THE DRIBBLE FILE
FOR TEN50,<
	TLO F,NOBREAK
DRBASK:	MOVEI B,[ASCIZ /
INITIALS PLEASE:/]
	PUSHJ P,TIS
	 JRST .-2
	INIT 2,17	;NOTE THAT 1 IS USED FOR SAVE AND GET, 2 FOR DRIBBLE
	SIXBIT /DSK/
	0
	JRST FILLOS
	PUSHJ P,ASCSIX
	SETZM DRIBFL
	CAMN M,[SIXBIT /NODRIB/]
	JRST DRIBEN
	MOVEM M,DRIBFL	;USED AS FLAG TO SIGNAL DRIBBLING
	CALL M,[SIXBIT /GETPPN/]	;OR MOVE M,[XWD PROJ,PROG]
				;IF ALL DRIBBLE FILES IN ONE DIRECTORY
	MOVEM M,DRIBFL+3
	LOOKUP 2,DRIBFL
	JRST RETRY
	SETZM DRIBFL+2
	MOVEM M,DRIBFL+3
	HLLZS DRIBFL+1
	ENTER 2,DRIBFL
	JRST FILLOS
	HLRE E,DRIBFL+3
	MOVNS E
	SUBI E,1
	ROT E,-7
	ADDI E,1
	USETI 2,(E)
	MOVE G,[IOWD 200,DRIBBF]
	MOVEM G,IOLIST
	INPUT 2,IOLIST
	STATZ 2,740000
	JRST FILLOS
	USETO 2,(E)
	MOVE G,[440700,,DRIBBF]
	MOVEI H,200*5
	ILDB C,G
	SOS H
	JUMPN C,.-2
	UNDEX G
	MOVEM G,DRIBPT
	MOVEM H,DRIBCN
	MOVE G,[IOWD 200,DRIBBF]
	MOVEM G,IOLIST
	PUSHJ P,TIME
	PUSHJ P,DATE
	PUSH P,[.+3]
	PUSH P,[PRINT]
	JRST PRINT
	MOVEI B,[ASCIZ /WELCOME TO LOGO!

/]
	PUSHJ P,TOSS
	CALL A,[SIXBIT /MSTIME/]
	ANDI A,37
	MOVE B,[EXP 1000003]
	MOVE C,RANNO
RANINZ:	IMUL C,B
	SOJG A,RANINZ
	MOVEM C,RANNO
	TLZ F,NOBREAK
	JRST MAINL

DRIBEND:	RELEAS 2,
	TLZ F,NOBREAK
	JRST MAINL
RETRY:	SETZM DRIBFL
	MOVEI B,[ASCIZ /I CAN'T FIND THAT NAME.
PLEASE TRY AGAIN.
/]
	PUSHJ P,TOSS
	JRST DRBASK

DCHOUT:	SKIPN DRIBFL
	POPJ P,
	SOSG DRIBCN
	PUSHJ P,DRBBOU
	IDPB C,DRIBPT
	POPJ P,

DRBBOU:	PUSH P,A
	OUTPUT 2,IOLIST
	STATZ 2,740000
	JRST FILLOS
	MOVE A,[IOWD 200,DRIBBF]
	MOVEM A,IOLIST
	MOVE A,[440700,,DRIBBF]
	MOVEM A,DRIBPT
	MOVEI A,200*5
	MOVEM A,DRIBCN
	POP P,A
	POPJ P,
ASCSIX:	PUSHJ P,NEWSRC
	POP S,M
	MOVEI M,0
	MOVE B,[440600,,M]
ASCSK1:	ILDB C,A
	JUMPE C,CPOPJ
	SUBI C,40
	TLNE B,770000
	IDPB C,B
	JRST ASCSK1

FILLOS:	SETZM DRIBFL
	ERROR .
>
FOR TENEX,<
	TLO	F,NOBREAK	;DO NOT ALLOW BREAK KEY HERE
	MOVEI	B,[ASCIZ /INITIALS PLEASE: /]
	PUSHJ	P,TIS		;REQUEST INITIALS
	 JRST	.-2		;RUBOUT
	MOVEI	A,[ASCIZ /DRB/]
	MOVEM	A,JFNTAB+5
	MOVE	B,0(S)
	MOVEI	A,10
	CAMGE	A,@WSB
	 ERROR	FILER9
	ADDI	B,1(W)
	HRRZM	B,JFNTAB+4
	MOVE	A,[ASCIZ /NMI/]
	CAMN	A,(B)		;TO OVERRIDE DRIBBLE CAPABILITY?
	 JRST	DRIBEND		;YES
;FIX UP THE INPUT NAME
	MOVEI	A,1
	MOVEM	A,JFNTAB
	MOVEI	A,JFNTAB
	SETZ	B,
	GTJFN
	 ERROR	IOPERR
	MOVE	B,[XWD 070000,020000]	;FOR APPENDING
	OPENF
	 ERROR	IOPERR
	MOVEM	A,DRIBFL

	MOVEI	B,";"
	BOUT
	SETO	B,
	SETZ	C,
	ODTIM
	MOVEI	B," "
	BOUT
	MOVE	D,0(S)
	HRLI	D,010700+W
	ILDB	B,D
	JUMPN	B,.-2
	MOVEI	B,37
	BOUT
DRIBEND:	POP	S,A
	TLZ	F,NOBREAK
>>

MAINL:	TLZ	F,STEPF
	MOVEI	B,[ASCIZ /?/]
	SKIPE	TOPROD	;ARE WE DEFINING A PROCEDURE NOW?
	MOVEI	B,[BYTE (7) 76]	;YES, ASCIZ RT BRACKET
	PUSHJ	P,TIS
	 JRST	MAINL
MAINL1:	PUSHJ	P,COMPIL
	 JRST	MAINL	;GOT A STORED LINE
	PUSHJ	P,EXECUT
	JRST	MAINL


DOUUO:	MOVEM	17,UUOACS+17
	HRRZI	17,UUOACS
	BLT	17,UUOACS+16
	MOVE	17,UUOACS+17
	HLRZ	A,JOBUUO
	ASH	A,-11	;FLUSH AC, IF ONE
	CAILE	A,4	;SQUEZE IS THE HIGHEST KNOWN UUO
	JRST	ILLUUO
	JRST	@.(A)	;ZERO CAUGHT BY MONITOR
	 ERRORR
	 ALLOCATOR
	 CALGAR
	 CMPRSS
CALGAR:	JSP	P,GARCOL	;NO PUSHES OR POPS IN GC
	JRST	UUORET

FOR TEN50,<
CALDDT:
FOR BBN50,<MOVEI A,20000	;LEAVE TELCOMP MODE IF IN IT
	TTCALL	6,A
	TLZ	A,600000
	TTCALL	7,A >
	HRRZ	A,JOBDDT
	JUMPE	A,[ERROR .]
	PUSHJ	P,(A)	;SO DEBUGGER MAY POPJ P,$X TO RETURN
	PUSHJ	P,SETTTM
	JRST	COMEX

SETTTM:
FOR BBN50,<	MOVEI	A,20000
	TTCALL	6,A
	TLO	A,600000
	TTCALL	7,A >
	POPJ	P,

BREAKY:	TTCALL	11,
	TTCALL	12,
	TLNE	F,NOBREAK	;IGNORE BREAK KEY?
	JRST	.+3		;YES
	TLNE	F,TIF	;LEAVE IT SET FOR BRAKER ROUTINE
	ERROR	BREAK	;BREAK IMMEDIATELY IF TYPE IN HUNG
	TLO	F,BREAKF	;OTHERWISE, JUST FLAG IT FOR LATER
	JRST	2,@JOBOPC >

FOR TENEX,<
BREAKY:	MOVEM	A,BRKTEM
	MOVEM	B,BRKTEB
	HRLZI	A,400000	;DENOTE THIS FORK
	MOVE	B,A		;DENOTE INTERRUPT CHANNEL 0
	DIC			;DEACTIVATE BREAK KEY
	MOVE	B,BRKTEB
	MOVEI	A,100
	CFIBF		;CLEAR THE INPUT BUFFER
	MOVEI	A,101
	CFOBF		;OUTPUT BUFFER TOO
	MOVE	A,BRKTEM
	TLNE	F,NOBREAK	;IGNORE BREAK?
	JRST	.+3		;YES
	TLNE	F,TIF
	ERROR	BREAK
	TLO	F,BREAKF
	DEBRK			;RETURN TO STOPPED PROCESS

CALDDT:	PUSHJ	P,770000	;FOR NOW, ASSUME RESIDENT DDT
	JRST	COMEX >

;TABLE FOR INFIX OPERATORS

%%%==400000	;NOT AN INFIX OPERATOR
%%==200000	;IMMEDIATE, NOT DISPATCHED

INFCTB:	[ERROR .]		;SPACE, SHOULDN'T GET HERE
	GNSCOM			;41	!
	GNSLIT			;42	"
REPEAT 3,<%%%,,GNSB>		;43,44,45	#$%
	%%,,[INFF,,INCNKL+1]	;46	&	CONCATINATE
	GNSLIT			;47	'
	%%,,[LPARF,,LPREN+1]	;50	(
	%%,,[RPARF,,RPREN+1]	;51	)
	%%,,[INFF,,INTMSL+1]	;52	*
	GNSPLS			;53	+
	%%%,,GNSB		;54	,
	GNSMNS			;55	-
	%%%,,GNSB		;56	.
	%%,,[INFF,,INDIVL+1]	;57	/
REPEAT 12,<%%%,,GNSNUM>		;60-71	0-9
	GNSVAR			;72	:
	GNSMWV			;73	;
	%%,,[INFF,,INLSTL+1]	;74	<
	%%,,[INFF,,INEQL+1]	;75	=
	%%,,[INFF,,INGRTL+1]	;76	>
	%%%,,GNSB		;77	?
IFN .-INFCTB-40,<PRINTX ;INFIX TABLE LOST>

COMPIL:	TRZ	F,STORED
	MOVE	A,CTOP
	MOVEM	A,CBOT
CMCOMP:	TRZ	F,FSYMF		;ENTER HERE FROM CMAKE
	POP	S,L
	MOVE	M,UA		;IF THE DEPTH OF ABBREVIATION EXPANSION
	SUB	M,UA+1		;IS GREATER THAN THE NUMBER OF ABBS
	LSH	M,-1		;THEN THERE IS A LOOP IN ABB DEFINITION
	HRLZI	M,-2(M)		;-MAX NO OF ABBREVIATIONS,,0
COMPAB:	HRLI	L,10700+W
	MOVEM	L,LINBOT
	IBP	L
GNS:	TRZ	F,NNUMF!PMF!NOLSPF
	SETZB	N,SCOUNT	;CLEAR TYPE OF SYMBOL (N) AND CHAR COUNT
	PUSHJ	P,NEWSTR
GNS1:	LDB	C,L	;PICK UP PREVIOUS TERMINATOR, MAY BE RELEVANT
	JRST	GNS3
GNS2:	TRO F,NOLSPF	;LEADING SPACE SEEN
	ILDB	C,L
GNS3:	CAIN	C," "
	JRST	GNS2
	CAIN C,24
	JRST GNSLIT
	JUMPE	C,ABBJ	;END OF STRING
	CAIN C,"_"
	JRST GNSMKE
	CAIGE C,100
	CAIGE C,40
	JRST GNSB
	CAIN C,")"
	TRZ F,NOLSPF
	MOVE D,INFCTB-40(C)
	TLZE D,%%
	JRST GNSINA
	JRST (D)
GNSA:	CAIL C,"0"
	CAILE C,"9"
GNSB:	TRO	F,NNUMF	;NOT NUMBER-SET NON NUMBER FLAG
GNSNUM:	IDPB	C,B		;STORE THE CHARACTER
	AOS	SCOUNT	;COUNT CHARACTER
	ILDB	C,L
	JSP D,SKPNAM
	JRST GNSEND
	JRST GNSA
;COME HERE AT END OF A POSSIBLE NAME. C HOLDS CHAR WHICH TERMINATED SCAN

GNSEND:	PUSH	P,WTOP		;IN CASE WE WANT TO FLUSH NEW SYMBOL
	PUSHJ	P,ENDSTR	;GOT A SYMBOL, FINISH IT
	POP	S,A		;THIS IS IT
	TRNN	F,NNUMF	;MIGHT IT BE A NUMBER, IE A LITERAL
	JRST	GNSN	;IT IS A POSSIBLE LINE NUMBER
;FALLS THROUGH!!

;CHECK ELEMENT TO SEEE IF IT IS AN ABBREVIATION

ABBA:
	HRRZ	B,UA	;USER DEFINED ABBREVIATIONS FIRST
	PUSHJ	P,LOOKUP
	 JRST	NOABBS
	MOVE	C,1(N)
	CAMN	C,[EXP -1]
	JRST	NOABBS	;A DELETED ABBREVIATION
	JUMPE	C,GNSP3	;A DELETED SYSTEM ABBREVIATION
	POP	P,WTOP	;THIS ELEMENT EXISTS, DON'T NEED ANOTHER COPY
	PUSH	S,LINBOT
	SUB	L,LINBOT
	PUSH	P,L	;SAVE RELATIVE POINTER INTO SOURCE STRING
	HRRZ	L,1(N)	;USE THE VALUE OF THE ABBREV AS THE NEW SOURCE
	AOBJN	M,COMPAB	;WE ARE NOW ONE LEVEL DEEPER IN ABBREVS
	ERROR	ABBER1		;LOOP IN ABBREVIATION DEFINITION


ABBJ:	TRNN	M,-1	;TOP LEVEL ABBREVIATION?
	JRST	CMPLA	;YES, DONE WITH WHOLE INPUT, ADD TERMINATOR
	POP	S,LINBOT	;NOT TOP LEVEL
	POP	P,L
	ADD	L,LINBOT
	SUB	M,[XWD 1,1]	;UP ONE LEVEL
	JRST	GNS1	;CONTINUE WITH PREVIOUS INPUT STRING

CMPLMP:	TLO	N,MPF
	HRLZI	C,200000
	TDNE	C,(N)	;IS THIS MACHINE PROCEURE "MAKE"?
	JRST	CMAKE	;YES
	ADDI	N,1	;NO, STORE MACHINE PROCEDURE CALL
CMPLA:	PUSHJ	P,CSTORE
	TRO	F,FSYMF	;NO LONGER FIRST ELEMENT
	JUMPN	N,GNS
CMPEND:	TRNE	F,MAKEF
	POPJ	P,
	TRZE	F,STORED
	JRST	TOLINE
	MOVE	A,CBOT
	MOVEM	A,CPP	;WILL START EXECUTING HERE
	SUB	A,CDBOT	;MAKE IT RELATIVE TO BASE OF DIRECT LINES
	EXCH	A,0(P)	;PUT IT ON THE STACK
	TLO	F,STEPF	;NOW HAVE A COMPILED STEP
	JRST	1(A)	;R2 TO DENOTE IT NEEDS EXECUTION

;NOT AN ABBREVIATION, CHECK FOR EXISTING PROCEDURE NAMES

NOABBS:	MOVE	A,NEWBOT
	HRLZI	B,010700+W
	HRRI	B,(A)
	ILDB	C,B	;FIRST CHAR OF THIS ELEM
	CAIL C,"A"
	CAILE C,"Z"
	JRST GNSP3
	MOVE	B,MNPT-"A"(C)	;THE NAME TABLE FOR THAT LETTER
	PUSHJ	P,SYSLUK
	 JRST	GNSP3
	POP	P,WTOP	;FLUSH THE SYMBOL
	SKIPL	(N)	;IS IT AN ABBREVIATION
	JRST	CMPLMP	;NO, A MACHINE PROCEDURE NAME
	PUSH	S,LINBOT
	SUB	L,LINBOT
	PUSH	P,L
	HRRZ	L,1(N)
	HRLI	L,350700
	SETZM	LINBOT
	AOBJN	M,GNS
	ERROR	IOPERR		;SYSTEM ABB MUST TERMINATE THE LOOP


GNSP3:	MOVE	A,NEWBOT
	HRRZ	B,RP
	PUSHJ	P,LOOKUP
	 JRST	.+3
	POP	P,WTOP	;FLUSH	THE SYMBOL
	JRST	GNSP1	;AND CALL THIS A USER PROCEDURE

	POP	P,E	;FLUSH OLD WTOP, LEAVE NEW ONE, SAVE THE NEW SYMBLO
	MOVEI	E,2(N)	;SPACE FOR THE NEW ENTRY IN TABLE
	CAML	E,RP+1	;IS IT THERE ALREADY?
	EXPAND	RP
	MOVE	A,NEWBOT
	MOVEM	A,(N)	;NAME OF NEW PROCEDURE
	SETOM	1(N)	;NOT YET TO'D
	SETZM	2(N)	;NEW END OF TABLE
GNSP1:	SUB	N,RP
	TLO	N,UPRF
	AOJA	N,CMPLA


GNSN:	MOVEI	A,1
	TRNE	F,PMF	;SAW A SIGN?
	CAME	A,SCOUNT	;YES, WAS IT THE ONLY CHARACTER?
	SKIPA			;NO TO EITHER
	JRST	ABBA		;YES TO BOTH, "+" OR "-" ONLY
	POP	P,A	;FLUSH THE OLD WTOP
	HRLZI	N,LITF!WORDF+W
	HRR	N,NEWBOT
	TRNN	F,FSYMF!MAKEF!PMF  ;IS IT FIRST ELEMENT AND UNSIGNED?
	TRO	F,STORED	;YES, NUMBER+FIRST_STORED LINE
	JRST	CMPLA
GNSPM:	TRO	F,PMF	;SET PLUS-MINUS FLAG
	JRST	GNSB
;COMMENTS, LITERALS, AND VARIABLE NAMES GET COPIED AND EXTRA SPACES FLUSHED

GNSCOM:	TLOA	N,COMMTF
GNSLIT:	TLO	N,LITF
WEFA:	MOVEI	D,(C)	;SAVE THE PROPER TERMINATOR
	PUSHJ	P,WEFS
	POP	S,B
	IOR N,B
	IBP	L
	JRST	CMPLA

GNSVAR:	TLO N,VARF
	TRZ F,TF	;SET BY NON-#
WEFV:	ILDB C,L
	JSP D,SKPNAM
	JRST VAREND	;DONE
	CAIL C,"0"	;IS IT A NUMBER?
	CAILE C,"9"
	TRO F,TF	;NO, NOTE
	IDPB C,B	;OK, STORE IT
	JRST WEFV

VAREN1:	IBP L
VAREND:	CAMN B,NEWBOT	;IS THIS LOSER EMPTY?
	JRST VARLS1	;YES, CAN'T BE NAME
	TRNN F,TF	;NO, IS IT ALL NUMBERS?
	JRST VARLS2	;YES, ALSO ILLEGAL AS NAME
	PUSHJ P,ENDSTR	;OK, FINISH STRING
	POP S,B
	IOR N,B
	JRST CMPLA

VARLS1:	MOVE A,CBOT
	MOVEM A,CTOP
	ERROR NMERR5
VARLS2:	MOVE A,CBOT
	MOVEM A,CTOP
	ERROR NMERR6
VARLS3:	MOVE A,CBOT
	MOVEM A,CTOP
	ERROR INERR1

GNSMNS:	SKIPA N,[INFF,,INMNSL+1]
GNSPLS:	MOVE N,[INFF,,INPLSL+1]
	TRON F,NOLSPF	;SPACES BEFORE?
	JRST GNSIN	;NO, INFIX
	ILDB C,L	;YES, AFTER?
	CAIE C," "
	ADD N,[MPF-INFF,,2]	;NO, CONVERT OPERATOR FROM INFIX TO PREFIX
	JRST GNSTOR

GNSMKE:	SKIPA N,[INFF,,IMAKEL+1]
GNSINA:	MOVE N,(D)
GNSIN:	IBP L
GNSTOR:	JRST CMPLA

;CALL WITH JSP D,
;SKIP UNLESS CHAR IN C IS RESERVED (NOT LEGAL NAME CONSTITUENT)
SKPNAM:	CAIGE C,100
	CAIGE C,40
	JRST SKPNM1
	SKIPL INFCTB-40(C)
	JRST (D)
	JRST 1(D)
SKPNM1:	CAIN C,24	;^T, LIKE "
	JRST (D)
	CAILE C," "
	CAILE C,172	;SMALL Z
	JRST (D)
	JRST 1(D)	;IT'S OK, SKIP

GNSMWV:	TLO N,VARF!SENTF
	TRZ F,TF
GNMWV1:	ILDB C,L
	CAIN C,";"
	JRST VAREN1
	MOVEI D,";"
	JUMPE C,VARLS3
	CAIL C,"0"
	CAILE C,"9"
	TRO F,TF
	IDPB C,B
	JRST GNMWV1


WEFS:	TRZ	F,TF!NWF	;MAKE A WELL-FORMED STRING,
				; I.E. NO LEADING SPACES, NO TRAILING,
				; AND AT MOST ONE IN THE MIDDLE
	ILDB	C,L
WEFC:	CAIN	C,(D)	;DONE YET?
	JRST	WEFB
	CAIN	C," "
	TRO F,NWF
	JUMPE	C,WEFD	;NO SECOND " / OR ;
	TRO	F,TF	;HAVE SEEN A REAL CHAR
	IDPB	C,B
	ILDB	C,L
	JRST	WEFC

WEFD:	TLNN	N,COMMTF	;IF A COMMENT, EOL IS OK
	JRST VARLS3	;BUT NOT LITS OR VARS
WEFB:	TRNE	F,TF	;IS THIS THING EMPTY?
	JRST	ENDSTR	;NO, FINISH THE STRING NORMALLY
	PUSH	S,[XWD W+WORDF!SENTF!EMPTYF!,]	;EMPTY
	POPJ	P,

CMAKE:	TRNE	F,MAKEF	;ALREADY IN A 2 LINE MAKE?
	AOJA	N,CMPLA	;YES
	LDB	C,L
	JUMPE	C,CMAKE2
	MOVE	A,L
	ILDB	C,A
	CAIN	C," "
	JRST	.-2	;SAD SPC
	CAIE	C,"!"	;MAKE-COMMENT-CR
	AOJA	N,CMPLA
	PUSHJ	P,NEWSTR
	MOVE	C,LINBOT
	MOVEM	C,SRCBOT	;FOR GC
	PUSH	S,[XWD W+COMMTF,0]
	PUSHJ	P,BTFCP1
	ADD	N,[XWD MAKESC,1]
	PUSHJ	P,CSTORE
	POP	S,N
	JRST	CMAKE3
CMAKE2:	ADD	N,[XWD MAKESC,1]
CMAKE3:	TRO	F,MAKEF
	PUSHJ	P,CSTORE
	MOVEI	B,[ASCIZ /   NAME /]
	PUSHJ	P,TIS		;ASK FOJ IT
	JRST	.-2
	PUSHJ	P,CMCOMP
	SOS	A,CTOP
	MOVSI	B,MAKESC
	IORM	B,@CSA
	MOVEI	B,[ASCIZ /   THING /]	;CONTINUE TO ASK
	PUSHJ	P,TIS
	JRST	.-2
	PUSHJ	P,CMCOMP
	TRZ	F,MAKEF
	JRST	CMPEND


CSTORE:	MOVE	A,CTOP
	MOVEM	N,@CSA
	AOS	A,CTOP
	MOVEI	A,@CSA
	CAML	A,CS+1
	EXPAND	CS
	POPJ	P,

EXECUTE:
EXECU0:	HRROS (P)	;SIMULATE FIRST INST. OF INVAL
	PUSH	P,[EXP [EXP [ERROR NOCMD]]]
	TLZE	F,BREAKF
	ERROR	BREAK
	MOVE	A,CPP
EXECU1:	SKIPN	C,@CSA	;IS IT EOL?
	JRST NULEX	;YES, EXIT
	TLNN	C,COMMTF	;IS IT A COMMENT?
	JRST	GARGS		;NO, GO TO IT
	AOS	A,CPP
	JRST	EXECU1		;IGNORE COMMENT

NULEX:	SOS CPP
	JSP D,COMXR2
	POPJ P,

EVAL:	AOS A,CPP	;LOAD A AND C
	MOVE C,@CSA
	PUSHJ P,INVAL
	SOS CPP	;OLD EVAL DIDN'T AOS POINTER
	POPJ P,

;FOR INVAL, A MUST HAVE COPY OF CPP
;C MUST HAVE CURRENT ELEMENT
;C RETURNS NEXT ELEMENT AFTER EXPRESSION
INFLP:	PUSH P,C
EXCTCM:	AOS A,CPP
	SKIPA C,@CSA
INVAL:	HRROS (P)	;LH -1 IS NULL INFIX OPERATOR
	JFFO C,.+2
	ERROR ERMSG1
	JRST @.+1(D)
	EXCTMP
	EXCTUP
	EXCTV
	EXCTL
	EXCTCM
	EXCTLP
	[ERROR PRNER1]
	[ERROR INFER1]

EXCTMP:	HLL C,(C)	;FETCH # OF ARGS
XCTMP1:;	TLZ C,340000
	PUSH P,C
	JUMPL C,EXCTP4	;JUMP IF TAKES NO ARGS
XCTMP2:	AOSA A,CPP
XCTMP3:	MOVE A,CPP
	MOVE C,@CSA
	CAMN C,[MPF,,OFL+1]	;IS IT "OF"?
	JRST XCTMP2	;YES, SKIP IT
GARGS:	PUSHJ P,INVAL	;GET ARGS TO PREFIX EXPRESSIONS
	HRLZI C,-1
	ADDB C,(P)	;COUNTS ARG; ALSO GETS COMPILED ELEMENT
	JUMPGE C,ANDCHK
	SOS CPP		;FOR COMPATIBILITY W. OLD EVAL
EXCTP4:	POP P,THISPR
	MOVE C,(C)	;FETCH ADDRESS OF ROUTINE
	PUSHJ P,(C)	;CALL PROCEDURE
	AOS CPP
	JRST XCTINF


ANDIG:	AOSA A,CPP
ANDCHK:	MOVE A,CPP
	MOVE C,@CSA
	CAMN C,[MPF,,ANDL+1]	;IS IT AND?
	JRST ANDIG
	JRST GARGS

EXCTUP:	MOVEI A,(C)
	HLL C,@RPA	;FETCH NO. OF ARGS
	PUSH P,C
	HRRI C,[UPROD]	;PRESERVE NO. OF ARGS IN LEFT HALF
	JRST XCTMP1

EXCTV:	PUSH S,C
	PUSHJ P,THING
	JRST OPEX

EXCTL:	PUSH S,C
OPEX:	AOSA A,CPP
XCTINF:	MOVE A,CPP	;RESTORE A
	SKIPL (P)	;- (P) MEANS NO OP.
	JRST INFDO
NXTINF:	MOVE C,@CSA
	TLNE C,INFF
	JRST INFLP
	SKIPGE (P)	;CHECK AT VALID RETURN
	POPJ P,
	ERROR .	;NO (THIS SHOULD NOT HAPPEN)

INFDO:	POP P,C
	MOVEM C,THISPR
	MOVE C,(C)
	PUSHJ P,(C)
	MOVE A,CPP	;RESTORE A
	JRST NXTINF

EXCTLP:	AOS A,CPP
	MOVE C,@CSA
;	TLNE C,MPF
;	JRST MULTAR
XCTLP1:	PUSHJ P,INVAL
	TLNN C,RPARF	;CHECK MATCHING RIGHT PAREN
	ERROR PRNER2
	JRST OPEX

SPECWD:	ERROR	EVER5
EXIT:	ERROR	XITERR

SCOMEX:	SOS	CPP
COMEX:	JSP	D,COMEXR
	POPJ	P,

COMEXR:	POP	P,A	;THE RETURN FROM THE COMMAND
	TLNN A,-1
	JRST (A)
COMXRA:	POP	P,A	;RET. FROM INVAL
COMXR2:	POP P,A	;SHOULD BE FAKED NOCMD ERROR
	CAIE	A,[EXP [ERROR NOCMD]]
	ERROR COMERR
COMXRC:	PUSHJ	P,GNE	;NEXT ELEMENT
	 JRST	COMXRD	;NO MORE
	CAME A,[MPF,,ELSEL+1]	;IS LINE ENDED BY ELSE?
	JRST EXECUTE	;GO DO NEXT COMMAND ON LINE
	AOS A,CPP	;YES, SCAN TO ACTUAL EOL
	SKIPE @CSA
	AOJA A,.-1
	JRST .+2
COMXRD:	AOS	A,CPP
	ANDI	A,-1	;NOT NECESSARY IF ALL SETS OF CPP ARE HRRZM'S
	CAME	A,CTOP	;DID WE JUST FINISH A DIRECT LINE?
	JRST (D)
	MOVE	A,-1(P)	;YES
	POP	P,-1(P)
	ADD	A,CDBOT
	MOVEM	A,CBOT
	MOVEM	A,CTOP
	JRST	(D)




MULTAR:	MOVSI B,200000
	TDNE B,(C)
	JRST XCTLP1
	PUSH P,C
	PUSH S,[W+WORDF,,DUMMYV]
	AOS A,CPP
	MOVE C,@CSA
MULAR1:	JUMPE C,[ERROR ERMSSG]
	TLNE C,RPARF
	JRST MULAR2
	PUSHJ P,INVAL
	JRST MULAR1
MULAR2:	POP P,THISPR
	MOVE C,THISPR
	MOVE C,(C)
	PUSHJ P,-1(C)
	AOS CPP
	JRST XCTINF

CALLDO:	JSP	D,COMEXR ;CHECK IF AT BEG OF LINE, IF NOT DON'T RETURN
	PUSHJ	P,COMPIL
	 POPJ	P,	;STORED THE LINE, NO NEED TO EXECUTE
	MOVE	A,(P)
	EXCH	A,-1(P)
	MOVEM	A,(P)	;PUT PTR TO "DIRECT" LINE IN BEHIND THE RETURN
	JRST	EXECUTE

;TABLE ADDRESS IN B
;SYMBOL POINTER IN A
;INDEX FOR ENTRIES IN TABLE B IN LH OF C IF NECESSARY


LOOKBK:	MOVEI	N,-2(B)	;SEARCH BACKWARDS, POINT AT LAST ENTRY
	HRROI	E,-2	;NOT JUST AFTER IT
	HRLZI	C,W
	JRST	LOOK1


SYSLUK:	MOVEI	C,0
	JRST	LOOK0

LOOKUP:	HRLZI	C,W
LOOK0:	MOVEI	E,2
	MOVEI	N,(B)	;USE N FOR STEPPING THRU TABLE

LOOK1:	ADDI	A,(W)	;MAKE A ABSOLUTE
	MOVN	B,(A)	;GET THE LENGTH OF THE WS ELEMENT
	HRLI	A,-1(B)	;PUT -L-1 OF WS ELEMENT IN LH OF A
	TLNN	C,W
	AOBJN	A,.+1

LOOKL:	MOVE	B,A	;USE B FOR CHANGING A
	HRR	C,(N)	;GET THE NAME OF THIS ENTRY IN THIS TABLE
	TRNN	C,-1	;0 AT END OF TABLE
	POPJ	P,

	MOVE	D,@C	;GET A WORD OF THIS ENTRY
	CAME	D,(B)	;IS IT THE SAME AS THIS WORD OF NEW ELEMENT
	JRST	LOOKN	;NO, NOT A MATCH FOR THIS SYMBOL
	ADDI	C,1	;POINT AT NEXT WORD OF THIS ENTRY
	AOBJN	B,.-4	;IF NOT DONE WITH THIS ELEMENT, GO BACK
	JRST	CPOPJ1	;DONE WITH THIS SYMBOL, COMPLETE MATCH

LOOKN:	ADD	N,E
	JRST	LOOKL	;NEXT ENTRY
PRINTX PART B


THING:	MOVE	A,(S)
THING1:	MOVE	B,DP
	ADD	B,DTOP
	PUSHJ	P,LOOKBK
	 JRST	THING2	;NOT A DUMMY
	JRST	THING4

THING2:	MOVE	A,(S)
	MOVE	B,VP
	PUSHJ	P,LOOKUP
	 JRST	THING3	;NOT A GLOBAL VARIABLE
	JRST	THING4

THING3:	MOVE	A,(S)
	MOVEI	B,MV
	PUSHJ	P,SYSLUK
	 MOVEI	N,MV	;FIRST MACHINE VAR IS EMPTY
	MOVE	A,1(N)	;MACHINE VARIABLES MUST BE CHECKED
	JUMPL	A,(A)	;THIS ONE MUST BE COMPUTED, (FLAG IS SIGN BIT)
THING4:	MOVE	A,1(N)
	MOVEM	A,(S)
	POPJ	P,


CCONTE:	POP	S,A	;COMPUTE /CONTENTS/
	PUSHJ	P,NEWSTR
	TRZ	F,TF!NWF
	MOVEI	C,0
	MOVE	D,RP
	MOVNI	E,1
CCNTE1:	SKIPN	A,(D)		;ANY MORE PROCEDURE NAMES?
	JRST	ENDST1		;NO
	MOVEI	D,1(D)
	CAMN	E,(D)		;IS THIS ONE DEFINED?
	AOJA	D,CCNTE1	;NO
	MOVEI	C," "
	TRON	F,TF		;FIRST ONE?
	JRST	.+3		;YES
	TRO	F,NWF		;NOT FIRST
	DPB	C,B		;NO REPLACE EOM WITH SPACE
	PUSHJ	P,NEWSR0
	PUSHJ	P,COPYAB
	AOJA	D,CCNTE1
FIRST:
	PUSHJ	P,NEWOPS	;CHECK EMPTY,SET UP SRCBOT+NEWBOT
	JRST	FSTSNT	;NO, SENTENCE

	ILDB	C,A	;FIRST BYTE
	IDPB	C,B	;BOMBS HERE ON FULL WORKSPACE

	MOVEI	C,0	;FILL ZEROES AND RETURN NEW ARG
	JRST	BTFCL1

FSTSNT:	ILDB	C,A	;FIRST OF SENTENCE
	JUMPE C,FSTWD
	CAIN C," "
	JRST FSTWD
	IDPB	C,B	;COPY CHARACTERS TO END OF FIRST WORD
	JRST FSTSNT

FSTWD:	CAMN B,NEWBOT	;IS IT EMPTY?
	SKIPA A,[W+WORDF!EMPTYF,,0]

	HRLZI	A,W+WORDF
	HLLM	A,0(S)
	MOVEI C,0
	JRST	BTFCL1


BUTFIRST:
	PUSHJ	P,NEWOPS
	JRST	BTFSNT	;NOT A WORD OR EMPTY, IE SENTENCE
	TRZ	F,TF
	IBP	A		;BUTFIRST OF WORD, SKIP OVER FIRST CHAR
	ILDB	C,A		;THIS IS THE SECOND CHAR
	JUMPN	C,BTFCOP	;MORE THAN ONE CHAR, COPY TO END OF STRING
BTFEMW:	SKIPA A,[W+WORDF!EMPTYF,,0]

BTFEMP:	HRLZI	A,W+SENTF!EMPTYF	;ONE OF THE MANY WAYS T
	MOVEM	A,(S)	;TO GET A POINTER TO EMPTY
	POPJ	P,

BTFSNT:	ILDB	C,A	;SKIP OVER FIRST WORD
	JUMPE	C,BTFEMP	;WAS ONLY WORD, RESULT IS EMPTY
	CAIE	C," "	;END OF WORD?
	JRST	BTFSNT	;CONTINUE SKIPPING OVER FIRST WORD

BTFCP1:	ILDB	C,A
BTFCOP:
BTFCLO:	JUMPE	C,BTFCL1
	IDPB	C,B
	JRST	BTFCP1

BTFCL1:	PUSHJ	P,ENDSTR
	POP	S,A
	HRRM	A,(S)	;NEW STRING, OLD TYPE
	POPJ	P,

LAST:
	PUSHJ	P,NEWOPS
	JRST	LSTSNT

	ILDB	C,A
	IDPB	C,B	;COPY FIRST CHAR, BUMPING THE CHAR PTR IN B ONCE

	ILDB	C,A
	JUMPE	C,BTFCL1	;DONE WITH THE WORD
	DPB	C,B	;PUT THIS CHAR ON TOP OF PREVIOUS ONE
	JRST	.-3

LSTSNT:	MOVE	E,A	;SAVE POINTER TO BEGINNING OF WORD
LSTSN2:	ILDB	C,A	;CONTINUE WITH THE CURRENT WORD
	CAIN	C," "
	JRST	LSTSNT	;END OF CURRENT WORD, NOT LAST ONE
	JUMPN	C,LSTSN2	;NULL_END OF SENT, ELSE NOT END OF ANY WORD

	MOVE	A,E
	JRST	FSTSNT

BUTLAST:
	PUSHJ	P,NEWOPS
	JRST	BTLSNT

	ILDB	C,A	;BUTLAST OF WORD, COPY WORD AND CLOBBER LAST CHAR
	IDPB	C,B
	ILDB	C,A
	JUMPE	C,BTFEMW	;WAS A ONE CHAR WORD, MAKE AN EMPTY
	IDPB	C,B
	ILDB	C,A
	JUMPN	C,.-2	;COPY REST OF WORD
BTLCLO:	DPB	C,B	;CLOBBER LAST CHAR
	JRST	BTFCL1	;FILL TO END OF WORD

BTLSNT:	MOVE	E,A	;SAVE POINTER TO BEGINNING
BTLSN1:	ILDB	C,A	;STEP THRU FIRST WORD
	JUMPE	C,BTFEMW	;ALSO LAST, MAKE AN EMPTY
	CAIE	C," "
	JRST	BTLSN1	;CONTINUE WITH FIRST WORD

BTLSN2:	MOVE	A,E
BTLSN9:	ILDB	C,A		;COPY STEPPED OVER WORD
	IDPB	C,B
	CAIE	C," "
	JRST	BTLSN9

	MOVE	E,A	;SAVE POINTER TO NEXT WORD
BTLSN4:	ILDB	C,A
	JUMPE	C,BTLCLO	;THIS IS END OF LAST WORD
	CAIN	C," "
	JRST	BTLSN2	;END OF WORD, NOT LAST ONE, COPY IT
	JRST	BTLSN4	;NOT END OF WORD, FIND IT


WORD:
	HRLZI	A,WORDF
	TDNE	A,0(S)
	TDNN	A,-1(S)
	ERROR	WRDERR	;YOU CAN'T MAKE A WORD OUT OF A SENTENCE

CONC:	HRLZI	C,EMPTYF
	TDNN	C,-1(S)	;IS FIRST ARG EMPTY?
	JRST	WORD0	;NO
	POP	S,-1(S)	;YES, THEN SECOND ARG IS THE RESULT
	POPJ	P,

WORD0:	TDNE	C,(S)
	JRST	SPOPJ
	PUSHJ	P,NEWSTR	;SET UP B AND NEWBOT
	PUSHJ	P,NEWSR1	;SET UP A TO -1(S) AND SRCBOT

	ILDB	C,A
	JUMPE	C,WORD2	;DON'T COPY EOM FROM FIRST ARG
	IDPB	C,B
	JRST	.-3	;COPY WHOLE FIRST ARG

WORD2:	PUSHJ	P,NEWSRC	;SET UP A TO 0(S) AND SRCBOT
	ILDB	C,A
	JUMPE C,.+3
	IDPB	C,B	;COPY SECOND ARG,
	JRST .-3
	POP	S,A	;FLUSH SECOND ARG
	JRST	BTFCL1	;FILL ZEROES AND RETURN ONE ARG

SENTENCE:
	HRLZI	E,EMPTYF
	TDNE	E,0(S)
	TDNN	E,-1(S)
	JRST	SENT1

SPOPJ:	POP	S,A	;BOTH EMPTY
	POPJ	P,	;RETURN EMPTY

SENT1:	PUSHJ	P,NEWSTR
	PUSHJ	P,NEWSR1

SENT2:	ILDB	C,A
	JUMPE	C,SENT3
	IDPB	C,B
	JRST	SENT2

SENT3:	MOVEI	C," "
	PUSHJ	P,NEWSRC
	TDNN	E,-1(S)		;IF FIRST ARG IS EMPTY, DON'T SPACE
	TDNE	E,0(S)		;OR IF SECOND IS
	SKIPA			;IN EITHER CASE, DON'T SPACE

SENT4:	IDPB	C,B
	ILDB	C,A
	JUMPN	C,SENT4

	POP	S,A	;FLUSH SECOND ARG
	HRLZI	A,W+SENTF	;CALL NEW THING A SENTENCE
	HLLM	A,0(S)
	JRST	BTFCLO


COUNT:	MOVE	A,(S)	;THING TO COUNT
	MOVEI	B,0	;COUNT INITIALLY ZERO
	TLNE	A,EMPTYF	;IS IT EMPTY?
	JRST	COUNT2	;COUNT=0
	TLNN	A,WORDF	;IS IT A WORD?
	AOJA	B,COUNT1	;NO, IT IS A NON-EMPTY SENTENCE

	PUSHJ	P,COUNTW
	JRST	COUNT2

COUNT1:	HRLI	A,010700+W
COUNTL:	ILDB	C,A
	JUMPE	C,COUNT2
	CAIN	C," "
	AOJA	B,COUNTL	;COUNT WORDS OF SENT AT BEG OF WORD
	JRST	COUNTL		;MORE OF THE SAME WORD

COUNT2:
	MOVE	M,B	;ARG TO SNM IN M
	PUSHJ	P,SNM
	MOVSI	C,W+WORDF
	HLLM	C,(S)
	JRST	BTFCLO

COUNTW:	HRLI	A,440700+W
	MOVNI	B,1
	ADD	B,@A	;NOW NUMBER OF WORDS -1
	IMULI	B,5	;NUMBER OF CHARS IN ALL BUT LAST WORD
	ADD	A,@A	;NOW A POINTS AT LAST WORD
	ILDB	C,A	;WORD
	JUMPE	C,CPOPJ
	AOJA	B,.-2


RANDOM:	MOVE	C,[EXP 1000003]
	IMULB	C,RANNO
	TLZ	C,400000	;MAKE IT POSITIVE
	MULI	C,12
	ADDI	C,"0"
	PUSHJ	P,NEWSTR
	IDPB	C,B
	JRST	ENDSTR


EITHER:	TROA	F,TF
BOTH:	TRZ	F,TF
	MOVE	A,(S)
	PUSHJ	P,PREDIQ
	 ERROR	PREDR2
	MOVE	A,-1(S)
	PUSHJ	P,PREDIQ
	 ERROR	PREDR2
	POP	S,B	;SECOND ARG
	MOVEI	A,1	;LENGTH OF "TRUE"
	TRZN	F,TF	;SKIP IF DOING EITHER
	MOVEI	A,2	;LENGTH OF "FALSE"
	CAMN	A,@WSB	;COMPARE AGAINST LENGTH OF SECOND ARG
	MOVEM	B,(S)	;JAM IF EITHER AND TRUE OR BOTH AND FALSE
	POPJ	P,


EMPTYP:	HRLZI	A,EMPTYF
PREDS1:	POP	S,B
	TDNN	A,B
	JRST	ISFALSE
	JRST	ISTRUE
SENTP:	HRLZI	A,SENTF
	JRST	PREDS1
WORDP:	HRLZI	A,WORDF
	JRST	PREDS1

NOT:	MOVE A,(S)
	PUSHJ P,PREDIQ
	 ERROR PREDR1
	POP S,B
	MOVE A,@WSB
	CAIE A,1
	JRST ISTRUE
	JRST ISFALSE

IS:	POP	S,A
	POP	S,B
IS1:	MOVE	C,@A
	CAME	C,@B
	JRST	ISFALSE
	ADDI	A,1
	TRNE	C,377
	AOJA	B,IS1

ISTRUE:	SKIPA	A,[XWD WORDF+W,TRUEV]	;POINTER TO "TRUE"
ISFALSE:MOVE	A,[XWD WORDF+W,FALSEV]	;WS PTR TO "FALSE"
	PUSH	S,A
	POPJ	P,

NUMBRP:	POP	S,A
	PUSHJ	P,NUMBRQ
	JRST	ISFALSE
	JRST	ISTRUE

;THIS GRATRP DOES NOT GENERATE ANY NEW STRINGS, DOES NOT PERFORM AN
;ADDITION, AND SHOULD END QUICKLY ON NUMBERS WHICH HAVE
;DIFFERENT ORDERS OF MAGNITUDE OR ARE OF DIFFERENT SIGN

LESSP:	MOVE A,(S)
	EXCH A,-1(S)
	MOVEM A,(S)
GRATRP:	MOVE	A,(S)	;NUMBERS?
	PUSHJ	P,NUMBRQ
	 ERROR	SUMERR
	MOVE	A,-1(S)
	PUSHJ	P,NUMBRQ
	 ERROR	SUMERR
	MOVE	A,(S)
	PUSHJ	P,COUNTW
	POP	S,A
	PUSHJ	P,FINDN		;SUBTRACT OFF SIGNS AND LEADING ZEROES
	MOVE	E,A		;PTR TO FIRST SIGNIFICANT DIGIT
	MOVEI	D,(B)		;COUNT OF SIGNIFICANT DIGITS
	MOVE	H,F		;STATE OF PMF

	MOVE	A,(S)
	PUSHJ	P,COUNTW
	POP	S,A
	PUSHJ	P,FINDN
	XOR	H,F
	TRNE	H,PMF		;SIGNS THE SAME?
	JRST	GRATRA		;NO, CAN QUIT NOW

	SUB	B,D		;SAME NUMBER OF SIGNIF DIGITS?
	JUMPN	B,GRATRD	;NO, QUIT NOW

	LDB	B,A
	LDB	C,E
GRATRC:	JUMPE	B,GRATRB	;END OF ONE NUMBER
	SUB	B,C
	JUMPN	B,GRATRD	;SIGN IS MEANINGFUL
	ILDB	B,A
	ILDB	C,E
	JRST	GRATRC

GRATRD:	CAIGE	B,0
	TRC	F,PMF
GRATRF:	TRZE	F,PMF
	JRST	ISFALSE
	JRST	ISTRUE

GRATRA:	LDB	C,A
	JUMPN	C,GRATRF
	LDB	C,E
GRATRB:	JUMPE	C,ISFALSE
	JRST	GRATRF

FINDN:	TRZ	F,PMF
	HRLI	A,010700+W
FINDNA:	ILDB	C,A
	CAIN	C,"0"
	SOJA	B,FINDNA
	CAIN	C,"+"
	SOJA	B,FINDNA
	CAIE	C,"-"
	POPJ	P,
	TRO	F,PMF		;NUMBER IS NEG
	SOJA	B,FINDNA

ZEROP:	MOVE	A,(S)
	PUSHJ	P,NUMBRQ
	 ERROR	ZERERR
	POP	S,A
	HRLI	A,010700+W
	ILDB	C,A		;GET THE FIRST CHAR
	CAIE	C,"+"	;IF A SIGN, GET ANOTHER CHAR
	CAIN	C,"-"
ZEROP1:	ILDB	C,A
	JUMPE	C,ISTRUE	;NUMBRQ WOULD FAIL ON SIGN ONLY OR EMPTY
	CAIN	C,"0"
	JRST	ZEROP1
	JRST	ISFALSE


MAXIM:	PUSH	S,-1(S)
	PUSH	S,-1(S)	;COPY OF ARGS TO BE DESTROYED BY DIFF
	JRST	MINMAX
MINIM:	PUSH	S,0(S)
	PUSH	S,-2(S)	;OPPOSITE ORDER FROM MAX
MINMAX:	PUSHJ	P,DIFF
	POP	S,A	;RESULT OF SUBTRACTION
	POP	S,B	;SECOND INPUT TO MIN OR MAX
	HRLI	A,010700+W
	ILDB	C,A		;GET SIGN OF RESULT
	CAIN	C,"-"	;IF POSITIVE, THEN FIRST IS RESULT
	MOVEM	B,0(S)	; ELSE SECOND ARG IS THE ANSWER
	POPJ	P,

DIFF:	TROA	F,PMF
SUM:	TRZ	F,PMF
	MOVE	A,(S)
	PUSHJ	P,NUMBRQ
	 ERROR	SUMERR
	MOVE	A,-1(S)
	PUSHJ	P,NUMBRQ
	 ERROR	SUMERR

	PUSHJ	P,REVERS
	CAIE	D,"-"
	TRON	F,PMF	;SKIP IF SECOND ARG + AND IS SUBTRACTION
	TRON	F,PMF	;SKIP IF ARG2 - & DIFF OR ARG2 + & SUM
	PUSHJ	P,TENCOM	;CALLED WITH PMF=1_FILL 9'S

	MOVE	A,(S)
	EXCH	A,-1(S)
	MOVEM	A,(S)

	PUSHJ	P,REVERS
	CAIN	D,"-"
	PUSHJ	P,TENCOM

	PUSHJ	P,SUMMER
	TRZ	F,PMF
	CAIE	G,"8"	;WHEN 9+9 AND NO CARRY INTO
	CAIN	G,"9"	;RESULT NEG IFF HIGH ORDER DIG =9
	PUSHJ	P,TENCOM	;CALLED WITH PMF=0_PUT A "-" AT THE END

	POP	S,A	;FLUSH EXTRA LEADING ZEROES
SUM7:	HRLI	A,350700+W	;SKIPPING OVER FIRST CHAR
	AOJA	A,.+2
SUM8:	CAIE	C,"0"	;CONSECUTIVE 0?
	MOVE	B,A	;NO, SAVE POINTER TO HIGHEST SIGNIFICANT DIG SO FAR
	ILDB	C,A
	JUMPE	C,.+4	;END OF STRING
	CAIE	C,"-"	;MINUS SIGN LIKE A TERMINATOR FOR NEG STRING
	JRST	SUM8
	IDPB	C,B	;PUT TERMINATOR (IN C) ABOVE MOST SIGNIFICANT DIGIT
	PUSHJ	P,ENDSTR

;FALL INTO REVERB - REVERSE BACK - AND EXIT FROM SUM FROM REVERB


REVERB:	TROA	F,TF	;REVERSING BACK, NO MODIFICATION TO STRING
REVERS:	TRZ	F,TF	;FIRST REVERSE OF NUMBER, FIDDLE WITH SIGNS
	PUSHJ	P,NEWSTR
REVERA:	PUSHJ	P,NEWSRC
	MOVE	D,@A
	ADDI	A,(D)	;A POINTS AT LAST WORD
	MOVEI	G,0
REVERY:	MOVE	C,@A
	JUMPE	C,REVERZ
	ROT	C,6
	ROT	C,-7
	TRNN	C,177
	AOJA	G,.-2
	ROT	G,1	;TIMES TWO
	JRST	.+4(G)
REVERL:	SUBI	A,1
	MOVE	C,@A
	ROT	C,-1	;FLUSH BIT 35
	IDPB	C,B
	ROT	C,-7
	IDPB	C,B	;D
	ROT	C,-7
	IDPB	C,B	;C
	ROT	C,-7
	IDPB	C,B	;B
	ROT	C,-7
	IDPB	C,B	;A
REVERE:	SOJG	D,REVERL	;MORE WORDS TO REVERSE
	TRNE	F,TF
	JRST	REVERO
	MOVEI	D,177
	ANDI	D,(C)	;SAVE STATE OF SIGN IN D
	MOVEI	C,"0"
	CAIE	D,"+"
	CAIN	D,"-"
	SKIPA			;SIGNED, OVERWRITE THE SIGN
	IBP	B		;UNSIGNED, ADD A LEADING 0 DIGIT
	DPB	C,B	;REPLACE THE SIGN WITH A "0"

REVERO:	MOVEI	C,0
	JRST	BTFCLO

REVERZ:	SUBI	A,1
	SOJG	D,REVERY
	ERROR	IOPERR	;INPUT WAS NOT A NUMBER


TENCOM:
	PUSHJ	P,NEWSRC
	TRO	F,TF	;SET CARRY INTO LOW ORDER DIGIT
	ILDB	C,A
	JUMPE	C,[ERROR]
NINECM:	SUBI	C,"0"
	MOVNS	C
	ADDI	C,"9"
	TRZE	F,TF	;WAS THERE A CARRY INTO THIS POSITION?
	ADDI	C,1	;YES
	CAIG	C,"9"	;IS THERE A CARRY OUT OF THIS POS?
	JRST	.+3	;NO
	SUBI	C,12
	TRO	F,TF
	DPB	C,A
	ILDB	C,A
	JUMPN	C,NINECM

	TRNE	F,PMF		;NEGATIVE RESULT?
	POPJ	P,		;NO
	MOVEI	D,"-"
	DPB	D,A
	MOVE	B,A
	PJRST	ENDSTP		;LENGTH OF THE STRING MAY HAVE CHANGED

SUMMER:	MOVE	L,-1(S)
	TRZ	F,TF!PMF
	HRLI	L,010700+W
	MOVEM	L,LINBOT
	PUSHJ	P,NEWSRC
	PUSHJ	P,NEWSTR

SUMMRL:	ILDB	C,A
	JUMPE	C,SUMMR2
	SUBI	C,"0"
	ILDB	E,L
	JUMPE	E,SUMMR3
	ADDI	C,(E)
	TRZE	F,TF	;CARRY?
	ADDI	C,1	;YES
	CAIG	C,"9"	;CARRY OUT OF THIS POSITION?
	JRST	.+3	;NO
	SUBI	C,12
	TRO	F,TF
	IDPB	C,B
	MOVEI	G,(C)
	JRST	SUMMRL

SUMMR2:	MOVE	C,SRCBOT
	EXCH	C,LINBOT
	MOVEM	C,SRCBOT
	EXCH	A,L
	IBP	A
SUMMR3:	UNDEX	L
	LDB	C,L	;GET PREVIOUS CHAR, (WAS 0 OR 9)
	CAIN	C,"9"
	TRO	F,PMF	;NO, IT WAS TEN'S COMPLEMENT
	LDB	C,A
	JUMPE	C,SUMMR5

SUMMR4:	TRZE	F,TF
	ADDI	C,1
	TRNE	F,PMF	;WAS IT NEGATIVE?
	ADDI	C,11	;YES, LEADING NINES
	CAIG	C,"9"
	JRST	.+3
	SUBI	C,12
	TRO	F,TF
	IDPB	C,B
	MOVEI	G,(C)
	ILDB	C,A
	JUMPN	C,SUMMR4

SUMMR5:	POP	S,A
	SETZM	LINBOT
	JRST	BTFCLO

MINUS:	MOVE A,(S)
	PUSHJ P,NUMBRQ
	ERROR MINERR
	PUSHJ P,NEWSTR
	PUSHJ P,NEWSRC
	ILDB C,A
	MOVEI D,"-"
	CAIN C,"-"
	 JRST COREST
	IDPB D,B
	CAIE C,"+"
	IDPB C,B
COREST:	ILDB C,A
	JUMPN C,.-2
	JRST ENDSTP

PRODUCT:	MOVE	A,(S)	;ARE BOTH ARGS NUMBERS?
	PUSHJ	P,NUMBRQ
	 ERROR	SUMERR
	MOVE	A,-1(S)
	PUSHJ	P,NUMBRQ
	 ERROR	SUMERR
	MOVE	A,@(S)		;LENGTH OF ONE INPUT
	CAIG	A,@-1(S)	;.GTR. THAN OTHER INPUT?
	JRST	.+4
	MOVE	A,(S)
	EXCH	A,-1(S)		;COMMUTATIVE LAW OF MULTIPLICATION
	MOVEM	A,(S)		;NOW FIRST ARG -1(S), .GE. SECOND
	PUSHJ	P,REVERS	;REVERSE SHORTER STRING
	CAIE	D,"-"		;SIGN OF IT
	TRZA	F,PMF		;IS +
	TRO	F,PMF		;IS -
	MOVE	A,(S)
	EXCH	A,-1(S)
	MOVEM	A,(S)		;EXCHANGE AGAIN, 0(S) NOW .GE.
	PUSHJ	P,REVERS	;REVERSE THE LONGER INPUT
	CAIN	D,"-"		;SIGN OF OTHER
	TRC	F,PMF		;IF - COMPLEMENT SIGN OF RESULT
	MOVE	L,-1(S)		;THE SHORTER ONE
	HRLI	L,010700+W
	MOVEM	L,LINBOT
	PUSHJ	P,NEWSTR	;PLACE FOR PRODUCT REVERSED
	PUSHJ	P,NEWSRC	;MULTIPLICAND

PRODLA:	MOVE	B,L
	ADD	B,NEWBOT
	SUB	B,LINBOT	;LINE UP PARTIAL RESULT
	ILDB	C,L		;NEXT CHAR FROM MULTIPLIER
	JUMPE	C,PRDED1	;END OF MULTIPLIER
	SUBI	C,"0"
	JUMPE	C,PDZERO	;BRING DOWN A 0
	MOVE	A,SRCBOT	;MULTIPLICAND AGAIN
	SETZ	D,		;CARRY FROM LAST DIGIT

PRODLB:	ILDB	E,A		;NEXT CHAR IN MULTIPLICAND
	JUMPE	E,PRDED2	;ICAND DONE, PROPAGATE CARRY
	SUBI	E,"0"
	IMULI	E,(C)		;DIG*DIG, .LE. 81
	PUSHJ	P,PCARRY	;ADD IN THE CARRY ETC
	JRST	PRODLB

PCARRY:	ILDB	H,B		;CURRENT PARTIAL RESULT, THIS PLACE
	CAIE	H,0		;PAST END OF PREVIOUS PARTIAL RESULT?
	SUBI	H,"0"		;NO,REMOVE CHAR OFFSET
	ADDI	D,(H)
	ADDI	D,(E)		;MAX IN D IS 81+9+9=99
	IDIVI	D,12		;CARRY_D
	ADDI	E,"0"		;PARTIAL RESLUT INTO E
	DPB	E,B		;BACK INTO PRODUCT
	POPJ	P,

PRDED2:	JUMPE	D,PRODLA	;PROPAGAE CARRY AS LONG AS NON-ZERO
	MOVEI	E,0		;NO NEW RESULT
	PUSHJ	P,PCARRY
	JRST	PRDED2

PDZERO:	ILDB	E,B		;MAKE SURE A PLACE HOLDER EXISTS
	CAIN	E,0		;IN THIS POSITION IN RESULT
	MOVEI	E,"0"
	DPB	E,B
	JRST	PRODLA

PRDED1:	TRZ	F,TF		;SEARCH FOR END AND NON-ZERO
	MOVE	B,NEWBOT
PRDED4:	ILDB	C,B
	JUMPE	C,PRDED3	;END OF RESULT
	CAIE	C,"0"
	TRO	F,TF		;SEEN A NON-ZERO DIGIT
	JRST	PRDED4
PRDED3:	TRZN	F,TF
	TRZ	F,PMF		;DON'T ALLOW -0
	MOVEI	E,"-"
	TRZE	F,PMF
	DPB	E,B
	SETZM	LINBOT
	POP	S,A
	POP	S,A
	MOVE	A,NEWBOT
	JRST	SUM7		;DELETE LEADING ZEROES AND REVERSE BACK

QUOTIENT:
	PUSHJ	P,QUOT
	POP	S,-1(S)		;FLUSH REMAINDER
	POPJ	P,

REMAINDER:
	PUSHJ	P,DIVREM		;GET QUOTIENT, REMAINDER
	POP	S,-1(S)		;AND FLUSH THE QUOTIENT
	POPJ	P,

DIVISION:
	PUSHJ	P,DIVREM	;GET QUOTIENT, REMAINDER
	PJRST	SENTENCE	;AND MAKE A SENTENCE OUT OF THEM

DIVREM:	PUSHJ	P,QUOT
	MOVE	L,(S)
	EXCH	L,-1(S)
	MOVEM	L,(S)		; QUOTIENT, REVERSE(REMAINDER)

	HRLI	L,010700+W
	JSP	D,NUMDIG
	 SKIPA
	JRST	.+4
	MOVE	B,(S)
	MOVEI	B,1(B)
	HRLI	B,350700+W
	IDPB	C,B
	CAME	L,B
	JRST	.-2
	TRO	F,TF		;FOR REVERSING BACK
	PUSHJ	P,NEWSTR
	PJRST	REVERA		;REVERSE BACK


NUMDIG:	SETZB	A,B		;COUNT SIGNIF DIGS IN L STRING
	ILDB	C,L
	JUMPE	C,.+4
	CAIE	C,"0"
	MOVE	B,L
	AOJA	A,.-4
	JUMPE	B,(D)
	JRST	1(D)

QUOT:	MOVE	A,(S)
	PUSHJ	P,NUMBRQ
	 ERROR	SUMERR
	MOVE	A,-1(S)
	PUSHJ	P,NUMBRQ
	 ERROR	SUMERR

	MOVE	A,(S)
	EXCH	A,-1(S)
	MOVEM	A,(S)

	PUSHJ	P,REVERS	;DIVIDEND
	CAIE	D,"-"
	TRZA	H,PMF		;+
	TRO	H,PMF		;-

	MOVE	A,(S)
	EXCH	A,-1(S)
	MOVEM	A,(S)

	PUSHJ	P,REVERS	;DIVISOR
	CAIN	D,"-"
	TRC	H,PMF		;-

	PUSHJ	P,NEWSRC
	PUSHJ	P,NEWSTR
	PUSHJ	P,COPYAB
	PUSHJ	P,ENDST1
	TRO	F,PMF
	PUSHJ	P,TENCOM	;+DIVD,+DIVSR,-DIVSR ON PDL

	PUSHJ	P,NEWSR1
	MOVE	L,A
	JSP	D,NUMDIG
	 ERROR	DIVERR
	MOVE	E,A		;NUMBER OF NON-ZERO DIGITS IN DIVISOR
	MOVE	L,-2(S)
	HRLI	L,010700+W
	MOVEM	L,LINBOT
	JSP	D,NUMDIG
	 JRST	QUOTZR
	SUB	A,E		;DIGS IN DIVD- DIGS IN DIVSR
	JUMPL	A,QUOTZR	;DIVISOR .GTR. DIVIDEND
	IDIVI	A,5
	ADD	A,LINBOT
	JUMPE	B,.+3
	IBP	A
	SOJG	B,.-1		;WHERE TO START SUBTRACTION PTR IN A

	TRZ	F,NWF!PMF	;NO SUCCESSFUL SUBTRACTIONS DONE YET
	PUSHJ	P,NEWSTR	;QUOTIENT APPEARS HIGH DIG TO LOW
	MOVEI	C,"-"
	TRNE	H,PMF		;IS RESULT NEG?
	IDPB	C,B		;YES, STORE A -

	MOVE	L,A
QUOTLP:	MOVEI	C,"0"
	IDPB	C,B		;START OF NEXT DIGIT
ADDR:	MOVE	E,(S)
ADDR0:	MOVE	A,L
	HRLI	E,010700+W
	TRZ	F,TF		;CARRY
ADDR1:	ILDB	C,A
	JUMPE	C,ADDR2	;END OF LONGER ONE GETS PROPER CARRY
	SUBI	C,"0"
	ILDB	D,E
	ADDI	C,(D)
	TRZE	F,TF
	ADDI	C,1
	CAIG	C,"9"
	JRST	.+3
	SUBI	C,12
	TRO	F,TF
	DPB	C,A
	JRST	ADDR1

ADDR2:	TRNE	F,PMF
	TRC	F,TF		;INVERT SENSE OF CARRY
	TRZN	F,TF		;IF NO CARRY
	JRST	ADDR3		;THEN WE'RE DONE WITH THIS SIGNIF DIGIT
	LDB	C,B
	MOVEI	C,1(C)
	DPB	C,B		;BUMP THIS DIGIT
	TRO	F,NWF		;NON-ZERO RESULT
	JRST	ADDR		;REPEAT THE SUBTRACTION

ADDR3:	MOVE	E,-1(S)
	TRCN	F,PMF		;ARE THE DIVISORS + - ?
	JRST	ADDR0		;NO, ADD BACK IN
	CAMN	L,LINBOT
	JRST	QUDONE
	UNDEX	A
	DPB	C,A		;C IS 0, SHORTEN THE DIVIDEND
	UNDEX	L
	TRNE	F,NWF		;JUST DONE A LEADING 0?
	JRST	QUOTLP		;NO, NEXT DIGIT OF QUOTIENT
	JRST	ADDR		;YES, DO THIS ONE OVER

QUDONE:	TRZE	F,NWF		;ANY SUCCESSFUL SUBTRACTION?
	JRST	.+4		;YES
QUOTZR:	MOVE	B,NEWBOT
	MOVEI	C,"0"
	IDPB	C,B
	POP	S,C		;FLUSH THE TWO DIVISORS
	POP	S,C
	PJRST	ENDSTR	;EXIT WITH REV(REM) AND QUOT ON S STACK

DATE:
FOR TENEX,<SETO	B,
	SETZ	D,
	ODCNV
	HLRZ	H,C		;DAY TO H
	HRRZI	E,(B)		;MON TO E
	HLRZ	D,B		;YR  TO D
>
FOR TEN50,<CALL	G,[SIXBIT /DATE/]
	IDIVI	G,^D31		;DAY TO H
	MOVEI	D,(G)
	IDIVI	D,^D12	;MON TO E
	ADDI	D,^D1964	;YR  TO D
>
	MOVEI	M,1(E)		;IT WAS MON-1
	PUSHJ	P,SNM
	MOVEI	E,"/"
	IDPB	E,B
	MOVEI	M,1(H)		;IT WAS DAY-1
	PUSHJ	P,SNM0		;DON'T MAKE A NEW STRING
	IDPB	E,B
	MOVEI	M,(D)		;YEAR
	PUSHJ	P,SNM0
	PJRST	ENDSTR


TIME:	PUSHJ	P,TIMDAY
	IDIVI	C,^D3600	;SECONDS PER HOUR
	MOVE	M,C		;HOUR TO M
	TRZ	F,PMF		;AM OR PM
	CAIGE	M,^D12
	JRST	.+3
	SUBI	M,^D12
	TRO	F,PMF		;PM
	SKIPN	M
	MOVEI	M,^D12		;MIDNIGHT AND NOON ARE 12
	PUSHJ	P,SNM
	MOVEI	C,":"
	IDPB	C,B

	IDIVI	D,^D60		;CONVERT SECONDS TO MINUTES
	MOVE	M,D
	PUSHJ	P,SNM0
	MOVEI	A,[ASCIZ / AM/]
	TRZE	F,PMF
	MOVEI	A,[ASCIZ / PM/]
	HRLI	A,440700
	PUSHJ	P,COPYAB
	PJRST	ENDSTR

TIMDAY:
FOR TENEX,<SETO	B,
	SETZ	D,
	ODCNV
	HRRZI	C,(D) >		;D HAD HIGH BITS SET
FOR TEN50,<CALL	C,[SIXBIT /MSTIME/]
	IDIVI	C,^D1000 >	;INDEPENDENT OF LINE FREQUENCY
	POPJ	P,


CLOCK:	PUSHJ	P,TIMDAY
	SUB	C,TOFDAY
	CAIGE	C,0
	ADDI	C,^D24*^D3600	;WENT PAST MIDNIGHT
	MOVE	M,C
	PUSHJ	P,SNM
	PJRST	ENDSTR

RESETC:	PUSHJ	P,GNE		;A COMMAND AMONG THE OPERATIONS
	 ERROR	ERMSSG
	CAME	A,[XWD MPF,CLOCKL+1]	;IS IT RESET CLOCK?
	 ERROR	WHATER		;NO
	PUSHJ	P,TIMDAY
	MOVEM	C,TOFDAY
	JRST	COMEX

;TEXT - AN OPERATION ON TWO INPUTS
; 1) NAME OF A PROCEDURE
; 2) A LINE NUMBER IN THAT PROCEDURE
;IF EITHER INPUT LIES, THE OUTPUT IS EMPTY

TEXT:	POP	S,L		;SECOND INPUT, A LINE NUMBER
	PUSHJ	P,DNM
	 JRST	BTFEMP		;NOT A NUMBER, RETURN EMPTY
	MOVE	A,(S)
	MOVE	B,RP
	PUSHJ	P,LOOKUP	;FIRST INPUT, A PROCEDURE NAME
	 JRST	BTFEMP		;NOT A PROCEDURE
	HRRZ	A,1(N)
	CAIN	A,-1		;IS IT DEFINED?
	 JRST	BTFEMP		;NO
	JUMPE	M,TEXT1		;IS IT LINE 0, IE TITLE
	JSP	C,SRCHLL	;FIND THE LINE
	 CAIE	B,(M)
	 JRST	BTFEMP		;NOT FOUND, RETURN EMPTY
	POP	S,B
	PJRST	LINGEN		;RETURN THE TEXT OF THE LINE

TEXT1:	POP	S,B
	MOVEI	D,1(A)
	MOVE	M,@PSD
	PUSHJ	P,NEWSTR
	MOVEI	D,TITLEL+1
	PUSHJ	P,LNGMP		;COPY IN BUILT-IN COMMAND NAME
	PJRST	LINGE0		;REST OF THE LINE

;LINES - A PROCEDURE OF ONE INPUT, A PROCEDURE NAME
;IF DEFINED, RETURNS THE SENTENCE OF ALL LINE NUMBERS, ELSE EMPTY

LINES:	MOVE	A,(S)
	MOVE	B,RP
	PUSHJ	P,LOOKUP
	 JRST	BTFEMP		;PROCEDURE NOT EXTANT
	HRRZ	A,1(N)
	CAIN	A,-1
	 JRST	BTFEMP		;NOT DEFINED
	MOVEI	A,2(A)		;SKIP OVER TITLE
	SKIPN	M,@PSA		;ANY LINES?
	 JRST	BTFEMP		;NONE
	POP	S,B
	PUSHJ	P,SNM		;FIRST LINE NUMBER
LINES1:	MOVEI	A,2(A)
	SKIPN	M,@PSA		;ANY MORE LINES?
	 PJRST	ENDSTR		;NO
	TRO	F,NWF
	PUSHJ	P,DSPACE
	PUSHJ	P,SNM0		;ADDITIONAL LINE NUMBERS
	JRST	LINES1

PRINTX PART C

;HERE FOLLOW THE COMMANDS

TYPE:	TRZA	F,CRF	;DON'T DO CRLF AFTER TOS
PRINT:	TRO	F,CRF
	TLO	F,TOF	;DENOTE TYPEOUT FOR BREAKY ERROR
	SETZM	BCHAR
	POP	S,A	;GET THE THING TO TYPE OR PRINT
	PUSHJ	P,PTOSS
	TRZE	F,CRF	;CALLED BY TYPE OR PRINT?
LISTXT:	PUSHJ	P,CRLF	;PRINT
	TLZ	F,TOF	;NO LONGER TYPING OUT
	JRST	COMEX

ENND:	SKIPN	A,TOPROD
	ERROR	NOPERR		;END WHAT? YOU ARE NOT DEFINING ANYTHING
	SKIPN	PRODNM		;IF THE "END" WAS STORED, OR
	TLNE	F,GETF		;IN ANY CASE, IF GETTING
	JRST	ENND1		;DO NOT TYPE "DEFINED"
	MOVEI	A,-1(A)
	MOVE	A,@RPA
	PUSHJ	P,PTOSS
	MOVEI	A,[ASCIZ / DEFINED/]
	PUSHJ	P,PTOSSM
	PUSHJ	P,CRLF
ENND1:	SETZB	A,TOPROD
	TRZN	F,FLUSHF	;IF PROD ALREADY DEFINED THEN WE'RE DONE FLUSHING IT
	PUSHJ	P,MOVEMP
	JRST	COMEX


ABBREVIATE:
	PUSHJ	P,EVAL		;EVAL FIRST ARG
	PUSHJ	P,GNE
	 ERROR	ERMSSG		;SOMETHING MISSING, IE SECOND ARG
	SOS CPP
	CAMN	A,[XWD MPF,ASL+1]	;IS IT "AS"?
	AOS	CPP		;YES, SKIP IT
	PUSHJ	P,EVAL		;GET SECOND ARG

ABBRV0:	MOVE	A,0(S)		;SECOND ARG, ABBREVIATION
	TLNE	A,EMPTYF	;IS IT EMPTY
	 ERROR	ABBER2		;DON'T USE THE EMPTY THING AS AN ABB
	MOVE	B,UA		;USER ABBREVIATION TABLE
	PUSHJ	P,LOOKUP
	 JRST	ABBRV1
	POP	S,A		;FOUND IT, FLUSH ABBREVIATION
	POP	S,1(N)		;SAVE ITS NEW VALUE
	JRST	COMEX

ABBRV1:	MOVEI	A,2(N)		;NOT FOUND, INSERT AT END OF TABLE
	CAML	A,UA+1		;ROOM FOR TWO MORE WORDS AT END?
	EXPAND	UA		;NO, MAKE ROOM
	POP	S,0(N)		;ABBREVIATION FIRST
	POP	S,1(N)		;VALUE SECOND
	SETZM	2(N)		;REPLACE END CONDITION
	JRST	COMEX

TEST:	POP	S,A
	PUSHJ	P,PREDIQ	;IS THE INPUT A PREDICATE?
	 ERROR	PREDR1		;NO
	MOVEI	B,0
	SKIPN	@A	;0 FOR "FALSE"; "TRUE" FOR "TRUE"
	MOVNI	B,1
	MOVEM	B,TRUTH
	JRST	COMEX


IF:	PUSHJ P,GNE		;GET NEXT ELEMENT
	ERROR ERMSSG
	CAMN	A,[XWD MPF,TRUEL+1]
	JRST	IFTRUE	;IF TRUE
	CAME	A,[XWD MPF,FALSEL+1]
	JRST IFPRED
IFFALS:	MOVE C,TRUTH
	JUMPN	C,IFX2	;IF FALSE AND TRUTH=FALSE
IFXFLS:	AOS	A,CPP	;FLUSH THIS LINE
	SKIPE	@CSA
	AOJA	A,.-1
	MOVEM	A,CPP
	JRST	SCOMEX

IFTRUE:	MOVE C,TRUTH
IFX1:	JUMPN	C,IFXFLS	;IF TRUE AND TRUTH=FALSE, FLUSH LINE
IFX2:	POP	P,0(P)	;DO REST OF LINE AS IF IF WASN'T THERE
	JRST	EXCTCM

IFPRED:	SOS CPP	;BACK UP OFF PREDICATE
	PUSHJ P,EVAL
	MOVE A,(S)	;(SEE TEST, ABOVE)
	PUSHJ P,PREDIQ
	ERROR PREDR1
	PUSH P,A	;SAVE RESULT OF PREDIQ
	POP S,A
	PUSHJ P,GNE	;LOOK AHEAD FOR "THEN"
	JRST .+2	;NO, EOL
	CAME A,[MPF,,THENL+1]	;IF YES, SKIP OVER IT
	SOS CPP	;NO, BACK UP
	POP P,A
	SKIPE @A
	JRST IFX2	;TRUE, DO REST OF LINE
	PUSHJ P,GNE	;FALSE, SCAN DOWN TO "ELSE" OR EOL
	JRST SCOMEX	;EOL, DO NOTHING
	CAME A,[MPF,,ELSEL+1]	;IS IT ELSE?
	JRST .-3	;NO, TRY AGAIN
	JRST IFX2	;YES, DO ST OF LINE


GOODBYE:	JSP	D,COMEXR	;MAKE SURE LINE IS OK FIRST, THEN
	MOVEI B,[ASCIZ /AND A PLEASANT DAY TO YOU!
/]
	PUSHJ P,TOSS
FOR TENEX,<	MOVEI	A,100	;PRIMARY INPUT FILE
	CFIBF		;FLUSH ANY OTHER JUNK
	MOVE	C,[ASCII /LOGO
/]
	MOVNI	D,5
	SETZ	B,
	ROTC	B,7
	STI		;SIMULATE TERMINAL INPUT TO EXEC
	AOJL	D,.-3
	HALTF >		;AND RETURN TO EXEC
FOR TEN50,<FOR DRIBBLE,<	SKIPN DRIBFL
	CALL [SIXBIT /EXIT/]
	MOVEI C,0
	IDPB C,DRIBPT
	SOSLE DRIBCN
	JRST .-2
	OUTPUT 2,IOLIST
	STATZ 2,740000
	ERROR .
	CLOSE 2,
	STATZ 2,740000
	ERROR .
>	CALL	[SIXBIT /EXIT/]>

IMAKE:	SOS CPP
MAKE:	MOVE	A,-1(S)
	TLNE	A,EMPTYF
	ERROR	NMERR5	;NAME NOT ALLOWED TO BE EMPTY
	PUSHJ P,NUMBRQ
	 SKIPA
	ERROR NMERR6
	MOVE A,-1(S)

	HRRZI	B,MV
	PUSHJ	P,SYSLUK
	 JRST	.+2
	ERROR	TOERR3	;X IS USED BY LOGO
	MOVE	A,-1(S)
	HRRZ	B,DTOP
	ADD	B,DP
	PUSHJ	P,LOOKBK	;SEE IF A LOCAL
	 JRST	.+2	;NOT
	JRST	MAKE1
	MOVE	A,-1(S)
	HRRZ	B,VP
	PUSHJ	P,LOOKUP
	 PUSHJ	P,MAKEN	;NOTA, MAKE A NEW GLOBAL
MAKE1:	POP	S,1(N)	;PUT THE VALUE AWAY
IGNORE:	POP	S,A	;FLUSH ONE INPUT, THE NAME IF MAKE
	JRST COMEX

MAKEN:	MOVEI	B,2(N)
	CAML	B,VP+1
	EXPAND	VP
	MOVE	A,-1(S)
	MOVEM	A,(N)
	SETZM	2(N)
	POPJ	P,


LOCAL:	SKIPN	PRODNM
	 ERROR	STOERR	;LOCAL CAN ONLY BE STORED
	AOS CPP
LOCAL1:	MOVE	E,DTOP
	MOVE	D,DP+1
	SUB	D,DP	;END RELATIVE TO BEGINNING
	CAIGE	D,2(E)	;WILL ANOTHER ENTRY FIT
	EXPAND	DP	;NO
	ADD	E,DP	;MAKE ABSOLUTE
	POP	S,(E)	;NAME OF VARIABLE
	HRLZI	A,W+WORDF!SENTF!EMPTYF
	MOVEM	A,1(E)	;VALUE OF NEW LOCAL IS EMPTY
	SETZM	2(E)	;NEW END
	MOVEI	A,2
	ADDM	A,DTOP	;TOP OF LIST IS HIGHER

	MOVE A,CPP
	MOVE C,@CSA
	JUMPE C,SCOMEX
	TLNE C,COMMTF
	JRST SCOMEX
	CAME C,[XWD MPF,ANDL+1]
	JRST LOCAL2
	AOS A,CPP
	MOVE C,@CSA
	JUMPE C,[ERROR ERMSSG]
LOCAL2:	PUSHJ P,INVAL
	JRST LOCAL1

;HERE FOLLOWS ALL THERE IS TO USER DEFINED PROCEDURES
;DEFINING THEM, EXECUTING THEM, CHANGING TITLES AND TRACING

TITLE:	HRRZ	A,CPP
	CAMGE	A,CDBOT	;IS THE CODE IN A STORED LINE?
	 ERROR	TOERR1	;YES, TELL THEM TO USE DO
	SKIPN	TOPROD	;IS THERE A PROCEDURE OPEN?
	ERROR	NOPERR	;NO, CANNOT RETITLE NO PROCEDURE
	PUSHJ	P,GNE
	 ERROR	ERMSSG
	CAME	A,[XWD MPF,TOL+1]	;IS THE NEXT THING "TO"
	ERROR	TITER2	;WORD AFTER TITLE MUST BE TO
	TLO	F,TITLEF
	JRST	TO0
TO:	HRRZ	A,CPP
	CAMGE	A,CDBOT
	 ERROR	TOERR1
	TLZ	F,TITLEF
	SKIPE	TOPROD	;IS THERE A PROCEDURE ALREADY OPEN
	ERROR	TOERR4	;YES
TO0:	MOVE	H,CPP	;WHERE TO START SAVING THE CODE OF TITLE LINE
	PUSHJ	P,GNE	;NEXT NON-COMMENT ELEMENT
	 ERROR	ERMSSG	;MUST HAVE A PROCEDURE NAME
	TLNN	A,UPRF
	 ERROR	TOERR5	;CANNOT BE USED AS A PROCEDURE NAME
	MOVEI	E,(A)
	MOVE	G,@RPA
	CAMN	G,[EXP -1]	;IS THE PROCEDURE ALREADY DEFINED?
	JRST	TO1		;NO, ALWAYS OK
	TLNE	F,GETF	;DOING A GET?
	JRST	TOGET		;YES
	HRRZ	B,TOPROD
	TLNE	F,TITLEF	;ARE WE DOING "TITLE"?
	CAIE	B,(A)		;YES, IS IT THIS PROCEDURE?
	 ERROR	TOERR6	;NO TO EITHER, THE PROCEDURE IS ALREADY DEFINED
TO1:	SETZ	M,	;COUNT OF DUMMIES ENCOUNTERED
	PUSHJ	P,GNE	;NEXT NON-COMMENT ELEMENT
	 JRST	TOA	;NO DUMMIES
TO2:	TLNN	A,VARF		;IS IT A DUMMY?
	ERROR	TOERR2	;NO
	MOVEI	M,1(M)	;YES, COUNT IT
TO3:	PUSHJ	P,GNE	;CHECK FOR "AND"
	 JRST	TOA	;NOTHING, SO NO AND
	CAME	A,[XWD MPF,ANDL+1]	;IS IT "AND"?
	JRST	TO2		;NOT AND, TRY DUMMY
	PUSHJ	P,GNE
	 ERROR	ERMSSG		;"AND" LAST, NOT WELL FORMED
	JRST	TO2		;IT MUST EXIST AND BE A VARIABLE


TOGET:	TRO	F,FLUSHF	;LOADING AN ALREADY DEFINED PROCEDURE
	MOVEM	A,TOPROD	;SO LET IT BE OPEN
	MOVEI	A,-1(A)
	MOVE	A,@RPA		;PROCEDURE NAME
	PUSHJ	P,PTOSS
	MOVEI	A,[ASCIZ / IS ALREADY DEFINED./]
	PUSHJ	P,PTOSSM
	PUSHJ	P,CRLF
	JRST	IFXFLS

TOA:	TLNN	F,TITLEF	;TITLE LINE NOW VALID
	JRST	TOB		;TO, NOT TITLE
	MOVE	A,TOPROD
	MOVNI	G,1
	EXCH	G,@RPA		;OLD PROCEDURE OPEN NOW UNDEFINED
	HRLI	G,-1(M)		;NO OF DUMMIES-1,LOC OF DIRECTORY
	MOVEI	A,(E)
	MOVEM	A,TOPROD	;NEW PROCEDURE NAME NOW OPEN
	MOVEM	G,@RPA		;AND DEFINED


	MOVEI	A,(G)
	MOVEM	M,@PSA		;NUMBER OF DUMMIES
	MOVEI	A,1(A)
	PUSHJ	P,TOLINH
	JRST	SCOMEX

TOB:	MOVEM	E,TOPROD	;PROCEDURE NOW OPEN
	HRLZI	G,-1(M)
	HRR	G,PTOP		;NEW DIRECTORY GOES HERE
	MOVEI	A,(E)
	MOVEM	G,@RPA		;PROCEDURE DEFINED
	MOVEI	A,(M)
	PUSHJ	P,MOVEMP
	MOVEI	G,(A)		;SAVE PSA PTR TO COMPILE CODE PTR
	PUSHJ	P,MOVEMP	;MAKE A HOLE
	MOVEI	A,(G)		;GET PSA PTR BACK
	PUSHJ	P,TOLINJ
	JRST	SCOMEX

MOVEMP:	MOVE	D,PTOP
	MOVEM	A,@PSD
	AOS	A,PTOP
	MOVEI	B,@PSA
	CAML	B,PS+1
	EXPAND	PS
	SETZM	@PSA
	POPJ	P,


TOFLUS:	MOVE	A,CBOT
	MOVEM	A,CTOP
	POPJ	P,

TOLINE:	SKIPN	TOPROD	;IS THERE A PROCEDURE OPEN
	ERROR	INERR3	;LINE X OF WHAT PROCEDURE?
	TRNE	F,FLUSHF
	JRST	TOFLUS
	MOVE	A,CBOT	;POINTER TO BASE OF NEW COMPILED LINE
	MOVEI	H,1(A)	;SAVE THE LINE BUT NOT THE LINE NUMBER
	MOVE	L,@CSA
	PUSHJ	P,DNM
	ERROR	IOPERR	;I AM IN TROOUBLE
	CAIL	M,^D100000
	ERROR	INERR2	;LINE NO TOO LARGE
	JUMPE	M,[ERROR INERR4]	;LINE NO =0

	HRRZ	A,TOPROD
	JSP	C,SRCHL1
	 CAIGE	B,(M)
	 JRST	TOLING

	CAIN	B,(M)		;LINE NO ALREADY EXISTS?
	AOJA	A,TOLINH	;YES

TOLING:	SETOM	NXLINE	;CANNOT SAFELY ASSUME THAT THE PROCEDURE WE'RE IN
	MOVEI	B,2	; HAS NOT MOVED
	ADD	B,PTOP
	ADD	B,PS
	CAML	B,PS+1	;ROOM IN PS FOR ANOTHER 2 WORD ENTRY?
	EXPAND	PS	;NO

	MOVE	B,PTOP
	ADD	B,PS
	MOVEI	C,@PSA

	MOVE	D,(B)	;COPY EVERYTHING DOWN 2, UP TO PLACE TO INSERT
	MOVEM	D,2(B)
	CAIE	B,(C)
	SOJA	B,.-3

	MOVEI	B,2
	ADDM	B,PTOP

	MOVEM	M,(C)	;LINE NUMBER
	AOJA	A,TOLINJ

TOLINH:	PUSHJ	P,GCCS

TOLINJ:	AOS	B,SEQNO	;PUTTING AWAY THE STEP, GIVE IT A NEW SEQUENCE NUMBER
	HRL	B,CDBOT	;WHAT IS THE POINTER TO THE NEW LINE
	MOVSM	B,@PSA	;XWD SEQNO,CBOT INTO PROCEDURE DIRECTORY

	MOVE	A,CTOP
	MOVEI	B,@CSA	;B_CTOP+CS
	MOVE	C,CBOT	;CBOT, BASE OF THIS LINE TO BE STORED
	MOVE	A,CDBOT
	SUBI	C,(A)	;C_CBOT-CDBOT, LENGTH OF OTHER DIRECT LINES
	MOVEI	A,@CSA	;A_CS+CDBOT, ABS LOC OF CDBOT
	MOVEI	E,(B)
	ADDI	E,(C)	;E_CS+CTOP+CBOT-CDBOT, END OF COPIED DIRECT LINES
	CAML	E,CS+1	;IS THAT INSIDE CURRENT CS ALLOCATION
	 EXPAND	C,CS	;NO, NEED AT LEAST ENOUGH ROOM FOR COPIED LINES

	HRLZI	D,(A)	;FROM BASE OF DIRECT LINES
	HRRI	D,(B)	;TO CURRENT END OF COMPILED CODE
	BLT	D,(E)	;ENDING WITH END OF ALL OTHER DIRECT LINES

	MOVE	D,CTOP	;H CONTAINS START OF GOOD STUFF TO SAVE
	SUBI	D,(H)	;D_LENGTH OF STUFF TO BE SAVED
	ADDB	D,CDBOT	;THE DIRECT LINES GET MOVED UP BY THAT AMOUNT
	ADDI	D,(C)	;LENGTH(STORED)+LENGTH(OTHER DIRECT)
	MOVEM	D,CTOP	;IS THE NEW LENGTH OF ALL PARSED CODE
	ADD	H,CS	;ABSOLUTE
	HRLI	A,(H)	;WHERE THE GOOD STUFF IS COMING FROM
	BLT	A,@CSD	;ENDING AT THE END OF GOOD LINES
	MOVEM	D,CBOT	;THIS MUST BE A CROCK
	MOVEI	D,-1(D)
	MOVEM	D,CPP	;POINT AT THE END OF THE LINE
	POPJ	P,	;R1 FROM COMPIL


TRACE:	PUSHJ	P,GNE	;TRACE WHAT?
	 ERROR	ERMSSG	;NOTHING
	TLNN	A,UPRF	;TRACE A USER PROCEDURE?
	 ERROR	WHATER	;CANNOT TRACE THAT
	MOVEI	A,-1(A)	;POINT AT FIRST WORD OF RP PAIR
	HRLZI	B,TRACEF
	IORM	B,@RPA	;MARK THIS PROCEDURE AS TRACED
	JRST	COMEX

UPROD:	MOVE	A,-1(P)
	POP	P,-1(P)
	MOVNI	B,1
	CAMN	B,@RPA	;IS THE PROCEDURE DEFINED?
	 ERROR	EVER3	;NO, X NEEDS A MEANING
	MOVEI	B,(A)
	CAMN	B,TOPROD	;IS THIS THE ONE BEING DEFINED?
	 ERROR	EVER4	;YES, X HAS NOT BEEN COMPLETELY DEFINED

	JSP	D,SAVEUP	;PUSH ALL THE GOOD STUFF
	HRRZM	A,PRODNM

	MOVE	B,DP	;LOC OF DUMMY ARG TABLE
	HLRE	C,A	; + NO OF ARGS AT SCAN TIME -1
	ADDI	C,1
	MOVEI	E,(C)
	ADDI	E,1(C)
	ADD	B,DTOP	;PART OF TABLE ALREADY USED
	ADDI	B,(E)	;AMT FOR DUMMY NAMES
	CAML	B,DP+1	;ALL FIT IN DP?
	EXPAND	E,DP	;EXPAND THE TABLE AT LEAST THIS MUCH

	ADDM	C,DTOP
	ADDM	C,DTOP	;UPDATE AMT USED

	TLO	F,NOBREAK	;INHIBIT BREAK FOR DURATION OF TRACE
	HRRZ	D,@RPA
	PUSH	P,BCHAR	;SAVE CURRENT STATE OF MARGIN
	MOVE	E,TRACEM	;MARGIN FOR TRACE
	ANDI	E,17		;INDENT AT MOST 14 SPACES
	MOVEM	E,BCHAR
	TRZ	F,TF	;IF SET WILL DENOTE THAT THIS PROC IS TRACED
	MOVEI	A,-1(A)
	SKIPGE	A,@RPA	;FETCH NAME OF PROCEDURE AND SKIP IF NOT TRACED
	TRO	F,TF		;TRACEF IS THE SIGN BIT
	PUSH	P,C
	TRNE	F,TF
	SKIPN	CHARNO
	SKIPA		;NOT TRACING OR AT MARGIN
	PUSHJ	P,CRLF	;NOT AT MARGIN, GET THERE
	TRNE	F,TF
	PUSHJ	P,INDENT
	POP	P,C
	TRNE	F,TF
	PUSHJ	P,CALPTS	;TRACED, TYPE OUT THE NAME

	MOVEI	D,1(D)	;POINT TO PTR TO TO LINE 
	MOVE	D,@PSD	;FETCH PTR TO TO LINE
	MOVN	E,C	;-N
	MOVEI	C,1(S)	;STACK LOCATION
	ADD	C,E	;LOCATION IN STACK OF FIRST DUMMY
	HRL	C,E	;-COUNT OF DUMMIES
	HRRZ	G,DP
	ADD	G,-4(P)	;OLD VALUE OF DTOP
	JUMPGE	C,UPDVCR	;NO DUMMIES, GET FIRST LINE

	MOVE	A,[POINT 7,[ASCIZ / OF /]]
UPDVCL:	TRNE	F,TF
	PUSHJ	P,CLPTS1	;IF TRACED, TYPE "OF" OR " AND "
	MOVEI	E,042		;TO QUOTE INPUTS IF TRACING

	MOVE	A,@CSD	;LOOP TO COPY INTO DP, GET DUMMY NAME
	TLNN	A,VARF	;IS IT A DUMMY NAME
	AOJA	D,.-2	;NO, TRY NEXT ELEMENT
	MOVEM	A,(G)	;INTO DUMMY VAR TABLE
	MOVE	A,(C)	;VALUE OFF S STACK
	MOVEM	A,1(G)	;INTO DUMMY VAR TABLE
	TRNE	F,TF		;TRACING?
	PUSHJ	P,CLPTS0	;YES, TYPE INPUT QUOTED
	MOVEI	G,2(G)
	POP	S,0(S)	;POP 1 THING OFF S STACK WITHOUT CLOBBERING
	MOVEI	D,1(D)
	MOVE	A,[POINT 7,[ASCIZ / AND /]]
	AOBJN	C,UPDVCL	;UPROD DUMMY VAR COPY LOOP

UPDVCR:	TRNE	F,TF		;BUT BEFORE EXECUTING,
	PUSHJ	P,CRLF		;NEATEN UP
	MOVEI	A,2 
	TRZE	F,TF	;TRACING? ALSO, FLAG NO LONGER NEEDED
	ADDM	A,TRACEM	;NEXT TRACE CALL INDENTED TWO MORE SPACES


UPFRST:	POP	P,BCHAR		;RESTORE OLD MARGIN
UPNEXT:	JSP	C,SRCHLN
	 CAMG	B,LINENO
	 JRST	OUTPTA
	MOVEM	A,NXLINE
UPNXT1:	MOVEM	B,LINENO	;FOUND A LINE NO .GTR. PREVIOUS LINE
	TLZ	F,NOBREAK	;SAFE TO ALLOW BREAK AGAIN
	AOS	A,NXLINE
	MOVE	A,@PSA		;GET COMPILE PTR & CHANGE NO
	MOVEM	A,CHGNO
	MOVEM	A,CPP

	PUSHJ	P,EXECUTE

	AOS	A,NXLINE	;DONE WITH THE LINE, GET NEXT ONE
	JUMPE	A,UPNEXT	;DO IT THE LONG WAY IF ANY PROCEDURES CHANGED
	MOVE	B,@PSA		;FETCH THE LINE NO
	JUMPN	B,UPNXT1	;LINE NO .NE. 0_MORE TO DO
	JRST	OUTPTA		;NO MORE LINES, DONE WITH PROCEDURE

CLPTS0:	TRO	F,PREFIX!SUFFIX
CALPTS:	HRLI	A,010700+W	;WORKSPACE ELEMENT
CLPTS1:	PUSH	P,B
	PUSH	P,C
	PUSH	P,D
	PUSHJ	P,PTOS		;FINALLY!
	POP	P,D
	POP	P,C
	POP	P,B
	POPJ	P,

OUTPTA:	TLZ	F,NOBREAK	;REMEMBER TO PERMIT BREAK
	TLO	F,COMF	;DENOTE THAT THERE IS NO OUTPUT
	JRST	RETA

FOR SAVBRK,<
GO:	SKIPE	PRODNM
	ERROR	DIRERR	;"GO" ALONE CAN ONLY BE DIRECT
	SKIPG	GODEPTH
	ERROR	GOERR9	;NOPLACE TO GO
	JSP	H,GORE
	POPJ	P,

CANCEL:	SKIPE	PRODNM
	 ERROR	DIRERR	;DIRECT ONLY ERROR BEFORE NOTHING TO CANCEL
	SKIPG	GODEPTH
	 ERROR	CANER1	;NOTHING TO CANCEL
	JSP	H,GORE
	JRST	FLUSHM	;FLUSH TO BSP

GORE:	SOS	GODEPTH	;TEST ABOVE SO IT DOESN'T GO NEGATIVE
	MOVE	A,BSP
	JSP	C,SETPDL
	JSP	D,RESTOR
	POP	P,BSP
	JRST	(H) >


ESTOP:	TLO	F,COMF

OUTPUT:	SKIPN	PRODNM
	ERROR	STOERR		;OUTPUT AND STOP MUST BOTH BE STORED
RETURN:	JSP	D,COMEXR	;DO THE END OF LINE CHECKS
	POP	P,0(P)
RETA:	JSP	E,RESTOA	;RESTORE ALL BUT PRODNM
	TLNE	F,GOF		;IS THIS RETURN UNTRACEABLE?
	JRST	RETD		;YES IT IS, SKIP TRACE STUFF


	MOVE	A,PRODNM
	MOVEI	A,-1(A)	;DON'T CHANGE PRODNM, COMERU MAY NEED IT
	SKIPL	A,@RPA	;ENDING A TRACED PROCEDURE?
	JRST	RETD	;NO
	MOVNI	B,2
	ADDB	B,TRACEM
	PUSH	P,BCHAR
	ANDI	B,17
	MOVEM	B,BCHAR
	PUSHJ	P,INDENT
	PUSHJ	P,PTOSS	;TYPE PROCEDURE NAME
	MOVEI	A,[ASCIZ / OUTPUTS /]
	TLNE	F,COMF	;DID IT OUTPUT?
	MOVEI	A,[ASCIZ / STOPS/]	;NO, IT STOPPED
	PUSHJ	P,PTOSSM

RETB:	TLNE	F,COMF
	JRST	RETC	;NO NEED TO TYPE WHAT IT OUTPUTTED, IT STOPPED
	TRO	F,PREFIX!SUFFIX
	MOVEI	E,042
	MOVE	A,(S)
	PUSHJ	P,PTOSS
RETC:	POP	P,BCHAR
	PUSHJ	P,CRLF


RETD:	POP	P,E	;OLD PRODNM INTO E
	ANDI	E,377777	;TRUTH BIT IS PACKED IN THIS HALFWORD
	EXCH	E,PRODNM	;SAVE NAME OF PR BEING EXITED IN E
	TLZE	F,COMF	;DID THE PROCEDURE OUTPUT?
	JSP	D,COMEXR	;NO, TREAT IT LIKE A COMMAND

	SKIPN	PRODNM	;DIRECT COMMAND?
	POPJ	P,
RETE:	JSP	C,SRCHLN	;SEARCH FOR THAT LINE AGAIN
	 CAME	B,LINENO	;THIS TIME FOR =
	 ERROR	LNDERR		;NO LONGER EXISTS, PROBABLY AN ERROR
	MOVEI	A,1(A)
	MOVE	B,CHGNO
	SUB	B,@PSA	;NEW POSITION OF SAME LINE IS ALWAYS .LE. OLD POS
	TLNE	B,-1	;ONLY CHECK THE SEQUENCE NUMBERS FOR EQUALITY
	 ERROR	LNAERR	;LINE ALTERED WHILE IN IT
	MOVN	B,B	;THE AMOUNT THE SAME LINE GOT MOVED BACK OR 0
	ADDM	B,CPP	;THAT THE RUNNING POINTER NEEDS TO BE OFFSET
	POPJ	P,	;OPERATIONS ALL EXIT WITH POPJ,
			; COMMAND DOES TOO AFTER JSP D,COMEXR

SRCHLN:	HRRZ	A,PRODNM	;THIS IS THE PROCEDURE TO SEARCH
SRCHL1:	HRRZ	A,@RPA	;GET RELATIVE PTR INTO PS SPACE
	CAIN	A,-1	;ERASED?
	ERROR	NOPROD	;THERE IS NO PROCEDURE X

SRCHLL:	MOVEI	A,2(A)	;POINT TO NEXT LINE NO
	HRRZ	B,@PSA	;GET THE LINE NO
	JUMPE	B,1(C)	;R1, FOUND END BEFORE THE LINE
	XCT	(C)	;ARG TO ROUTINE IS THE COMPARE
	JRST	SRCHLL	;CONTINUE ON NO COMPARE
	JRST	2,2(C)	;GOOD COMPARE, R2



GOTO:	PUSHJ	P,GNE
FOR SAVBRK,<	JRST GO>
NOTFOR SAVBRK,<ERROR ERMSSG>
	SKIPN	PRODNM	;ERROR IF NOT STORED
	ERROR STOERR
	CAME	A,[XWD MPF,TOL+1]
	JRST GONUM
	AOS	A,CPP
	MOVE	A,@CSA	;FETCH NEXT WORD
	CAMN	A,[XWD MPF,LINELL+1]
	AOSA A,CPP
GONUM:	MOVE A,CPP
	PUSHJ	P,NMEVL1

	JSP	C,SRCHLN	;IS THERE THAT LINE IN THIS PROCEDURE
	 CAIE	B,(M)
	 ERROR	GOERR3	;THERE IS NO LINE X
	MOVEI	A,-1(A)
	MOVEM	A,NXLINE	;SO STEP TO NEXT LINE WILL FIND THIS ONE WITHOUT SEARCHING
	JRST	COMEX

NUMEVL:	AOS	A,CPP
NMEVL1:	MOVE	L,@CSA	;FETCH LINE NUMBER
	TLNE	L,LITF	;IF THIS, DOES NOT NEED TO BE EVALED
	JRST	GOTO1	;IS A LITERAL, COULD BE A NUMBER
	SOS CPP
	PUSHJ	P,EVAL	;NOT A LITERAL, MUST EVALUATE
	POP	S,L	;VALUE RETURNED
GOTO1:	MOVEI	D,(L)	;SAVE POINTER FOR ERROR COMMENT
	TLNE	L,SENTF
	ERROR	GOERR2	;CANNOT BE A NUMBER IF IT IS A SENTENCE
	PUSHJ	P,DNM
	ERROR	GOERR2	;IS NOT A LINE NUMBER
	POPJ	P,
SAVEUP:	HRLZ	B,LINENO	;A MUST BE LEFT ALONE
	HRR	B,PRODNM
	MOVE	C,TRUTH
	ANDI	C,400000
	ORI	B,(C)		;PRODNM .LT. 2^17 BECAUSE THERE MUST BE A
				; NAME FOR EACH ONE 
	PUSH	P,B		;LINENO,,TRUTH+PRODNM
	PUSH	P,DTOP
	HRRZ	B,CPP
	CAMGE	B,CDBOT
	JRST	.+4
	SUB	B,CDBOT
	TLO	B,400000	;NOTE THIS ONE RELATIVE TO CDBOT
	JRST	.+3	;INSTEAD OF RELATIVE TO BASE OF THIS LINE
	SUB	B,CHGNO	;LINE GENERATION NO AND LOCATION REL TO CS
	HRRZI	B,(B)	;MAKE SURE LH IS ZERO
	TLZE	F,GCCSF
	TLO	B,200000
	PUSH	P,B
	PUSH	P,CHGNO
	PUSH	P,SPP

	SETZM	TRUTH
	SETZM	LINENO
	SETZM	PRODNM
	HRRZI	B,(S)		;WHEN SAVEUP IS CALLED IS THE ONLY TIME
	SUB	B,SP		;THE DEPTH OF THE PUSHDOWN LISTS CHANGE
	HRLZM	B,SPP
	HRRZI	B,1(P)
	SUB	B,PP
	HRRM	B,SPP
	JRST	(D)

RESTOR:	JSP	E,RESTOA	;RESTORE ALL BUT PRODNM
	HRRZM	A,PRODNM
	POP	P,A	;FIX UP PDL
	JRST	(D)

RESTOA:	POP	P,SPP
	POP	P,CHGNO
	POP	P,A	;CPP
	JUMPGE	A,.+3	;RELATIVE TO BASE OF THIS LINE ?
	ADD	A,CDBOT	; NO, RELATIVE TO CDBOT
	JRST	RESTOB
	ADD	A,CHGNO
	TLNE	F,GCCSF
	JRST	RESTOC
RESTOB:	HRRZM	A,CPP
	MOVSI	A,200000
	TDNE	A,1(P)
	TLO	F,GCCSF
	POP	P,DTOP
	MOVE	A,(P)	;LINENO,,TRUTH+PRODNM
	MOVEI	B,0
	TRZE	A,400000
	HRROI	B,-1	;TRUTH=FALSE
	MOVEM	B,TRUTH
	HLRZM	A,LINENO
	SETOM	NXLINE
	JRST	(E)

RESTOC:	HRRZ	A,-1(P)
	ANDI	A,377777
	HLRZ	M,-1(P)
	JSP	C,SRCHL1
	 CAIE	B,(M)
	 ERROR	LNDERR
	MOVEI	A,1(A)
	MOVE	A,@PSA
	ADD	A,1(P)
	JRST 	RESTOB
FOR MITTUR,<
FORWARD:	JSP A,TURD
RIGHT:	JSP A,TURD
LEFT:	JSP A,TURD
BACK:	JSP A,TURD
TURD:	SUBI A,FORWAR+1
	MOVE L,(S)
	PUSHJ	P,DNM
	 ERROR ZERERR
	POP S,L
	SKIPL M
	JRST .+3
	MOVNS M
	XORI A,3
	TLC M,232000
	FADR M,M
	FMPR M,TURDSC(A)
	FADR M,TURDER(A)
	MOVE B,M
	MULI M,400
	TSC M,M
	ASH N,-243(M)
	MOVE M,N
	TLC N,232000
	FADR N,N
	FSBR B,N
	MOVEM B,TURDER(A)
	LSH A,3
	SKIPE PENST
	TROA A,40
	TRO A,100
	MOVEI N,0
	CAIG M,^D25
	JRST TURDGO
	SUBI M,^D18
	IDIVI M,7
	EXCH M,N
	ADDI M,^D18
TURDGO:	MOVE B,[440300,,TURDTL]
	ADD B,M
TURDG1:	ILDB C,B
	JUMPE C,TURD7S
TURDG2:	ADDI C,(A)
	PUSHJ P,TURTYO
	JRST TURDG1
TURD7S:	ILDB C,B
	JUMPE C,COMEX
	MOVEI C,7(A)
TURDG3:	SOJL N,TURDG4
	PUSHJ	P,TURTYO
	JRST TURDG3
TURDG4:	LDB C,B
	JRST TURDG2

PENUP:	SETOM PENST
	MOVEI C," "
	JRST TYOCOM
PENDOW:	SETZM PENST
	MOVEI C,"@"
TYOCOM:	PUSHJ	P,TURTYO
	JRST COMEX
TOOTN:	JSP A,TOOT
TOOTL:	JSP A,TOOT
TOOTH:	JSP A,TOOT
TOOTB:	JSP A,TOOT
TOOT:	SUBI A,TOOTN+1
	LSH A,3
	SKIPE PENST
	TROA A,40
	TRO A,100
	MOVE L,(S)
	PUSHJ P,DNM
	 ERROR ZERERR
	JUMPL M,[ERROR TOOTER]
	POP S,L
	MOVEI C,(A)
TOOT1:	JUMPE M,COMEX
	PUSHJ P,TURTYO
	SOJA M,TOOT1

TURDSC:	0.3333
	0.3333
	0.3333
	0.3333

TURDTL: 	0
	BYTE (3) 1
	BYTE (3) 1,1
	BYTE (3) 1,1,1
	BYTE (3) 1,2,1
	BYTE (3) 1,3,1
	BYTE (3) 1,2,2,1
	BYTE (3) 1,3,2,1
	BYTE (3) 1,3,3,1
	BYTE (3) 1,2,3,2,1
	BYTE (3) 1,2,4,2,1
	BYTE (3) 1,2,4,3,1
	BYTE (3) 1,3,4,3,1
	BYTE (3) 1,2,4,3,2,1
	BYTE (3) 1,3,4,3,2,1
	BYTE (3) 1,3,4,4,2,1
	BYTE (3) 1,3,4,4,3,1
	BYTE (3) 1,3,5,4,3,1
	BYTE (3) 1,3,5,0,5,3,1	;THIS IS 18  
	BYTE (3) 1,3,6,0,5,3,1
	BYTE (3) 1,3,6,0,6,3,1
	BYTE (3) 1,1,3,6,0,6,3,1
	BYTE (3) 1,1,3,6,0,6,3,1,1
	BYTE (3) 1,2,3,6,0,6,3,1,1
	BYTE (3) 1,2,3,6,0,6,3,2,1
	BYTE (3) 1,2,4,6,0,6,3,2,1	;THAT'S 25
>
FOR TURTLE,<
BACK:	SKIPA	B,[[BYTE (7) 16,177,177,177,177,177,177,0]]
FRONT:	MOVEI	B,[BYTE (7) 1,177,177,177,177,177,177,0]
	JRST	TURTEL

RIGHT:	SKIPA	B,[[BYTE (7) 10,177,177,177,177,0]]
LEFT:	MOVEI	B,[BYTE (7) 26,177,177,177,177,0]
	JRST	TURTEL

HORN:	MOVEI	B,[BYTE (7) 35,177,177,0]
TURTEL:	PUSHJ	P,TOSS		;DO IT
	JRST	COMEX

TOUCH:	PUSHJ	P,GNE	;THIS IS A BOOLEAN OPERATION
	 ERROR	ERMSSG
	MOVE	G,A	;SAVE RIGHT OR LEFT IN G

	MOVEI	A,101	;TERMINAL OUTPUT
	DOBE		;WAIT FOR EMPTY BUFFER

	MOVEI	A,100	;TERMINAL INPUT
	SIBE		;INPUT BUFFER EMPTY
	JRST	TOUCH1	;NO
	MOVEI	A,200	;8*16MS GTR 1 CHAR TIME
	DISMS		;WAIT FOR A POSSIBLE CHAR

	MOVEI	A,100
	SIBE		;DID A CHAR COME IN?
	JRST	.+2	;YES
	JRST	ISFALSE	;DIDN'T TOUCH ANYTHING

TOUCH1:	BIN
	CAMN	G,[XWD MPF,RIGHTL+1]
	JRST	TOUCHR
	CAME	G,[XWD MPF,LEFTL+1]
	ERROR		;MUST BE RIGHT OR LEFT FOR NOW

	CAIE	B,20	;CONTROL P
	JRST	ISFALSE
	JRST	ISTRUE

TOUCHR:	CAIE	B,22	;CONTROL-R
	JRST	ISFALSE
	JRST	ISTRUE >

WAIT:	POP	S,L
	HRLI	L,010700+W
	PUSHJ	P,DNM
	 ERROR	ZERERR
FOR TENEX,<	MOVEI	1,^D1000
	IMUL	1,M
	DISMS >
FOR TEN50,<	CALL	M,[SIXBIT /SLEEP/] >
	JRST	COMEX

PRINTX PART D
;TYPE IN STRING
;CHECK FOR CONTROL CHARACTERS,EDIT CHARS, ILLEGAL CHARS
;EDITF=1_EDIT MODE, THEN A CONTAINS BYTE POINTER TO BEGINNING OF STRING
;BYTE POINTER TO OUTPUT STRING IN B
;RETURN STRING POINTER TO INPUT ON S-LIST
;R1_FAILURE, TRY AGAIN, R2_SUCCESS.
TIS:	MOVEI	C,2	;SET CONTINUATION TO SPACE TWO CHARACTERS
	MOVEM	C,BCHAR
	TLZ	F,LDONF!FCHARF	;CLEAR LINE DONE FLAG FOR EDIT MODE
	TLNN	F,EDITF!GETF	;DON'T TYPE WEDGE OR _ IF EDITING
	PUSHJ	P,TOSS	;PRINT OUT COMMENT FROM B
FOR DRIBBLE,<
FOR TENEX,<
	PUSH	P,A
	SKIPN	A,DRIBFL		;IS THERE A DRIBBLE OPEN?
	JRST	TISAZ		;NO
	SETO	B,
	SETZ	D,
	ODCNV
	HRRZM	D,DRIBTM
TISAZ:	POP	P,A  >>
	PUSHJ	P,NEWSTR
	TLNN	F,EDITF	;ARE WE IN EDIT MODE?
	JRST	TISB	;NO
	PUSHJ	P,NEWSRC
	MOVEM	A,LINBOT	;FOR PURPOSES OF GARBAGE COLLECTION
	PUSHJ	P,TEDIT	;AND COPY IT TO THE INPUT STRING
TISB:	PUSHJ	P,TYI	;GET NEXT CHARACTER INTO C
FOR DRIBBLE,<
FOR TENEX,<
	PUSH	P,A
	SKIPN	A,DRIBFL
	JRST	TISB01
	TLOE	F,FCHARF	;FIRST CHAR ON LINE?
	JRST	TISB0		;NO
	MOVE	H,B		;TIME STAMP THE LINE
	MOVE	G,C
	SETO	B,
	SETZ	D,
	ODCNV
	HRRZI	D,(D)
	SUB	D,DRIBTM
	CAIGE	D,0
	ADDI	D,^D24*^D3600
	HRLZI	E,400001
	ODTNC
	MOVEI	B," "
	BOUT
	MOVE	B,H
	MOVE	C,G
TISB0:	EXCH	C,B
	BOUT
	EXCH	C,B
TISB01:	POP	P,A >
FOR TEN50,<TLNN F,GETF
	PUSHJ P,DCHOUT>
>

TISB1:	CAIL	C,175	;RUBOUT OR EOM?
	JRST	TISO	;YES
	CAIN C,42
	TRC F,TISLF
	TRNE F,TISLF
	JRST TISFF
	CAIGE	C,40	;CONTROL CHAR?
	JRST	TISC	;YES
	AOS	CHARNO	;PRINT CHARACTER SO COUNT
TISF:	IDPB	C,B
	JRST	TISB
TISFF:	CAIN C,15
	JRST TISF

TISFF1:	CAIN C,27	;^W
	JRST TISC
	CAIE C,16	;^N
	CAIN C,22	;^R
	JRST TISC
	JRST TISF

TISC:	MOVEI	E,(C)	;SAVE CHAR IN C
	ROT	E,-1
	HRRZ	D,ITAB(E)
	JUMPL	E,.+2
	HLRZ	D,ITAB(E)
	JUMPN	D,(D)	;DISPATCH IF IT IS A LEGAL CONTROL CHAR
	JRST	TISD	;NOT A LEGAL CONTROL CHAR


DEFINE CC (A,B,C,D)
<XWD A,B
 XWD C,D>

ITAB:
CC 0,0,TISG,0	;NUL ABC
CC 0,0,0,TISF	;DEFG
CC 0,TISH,TISI,0	;H TAB LF K
CC 0,TISJ,TISK,0	;L CR NO
NOTFOR TURTLE,<
FOR TEN50,<CC 0,0,TISL,TISDC3>	;TEN50 USES DC3 AS TERMINATOR IN FILES
FOR TENEX,<CC 0,0,TISL,0>>	;PQRS
FOR TURTLE,<
FOR TEN50,<CC TISB,0,TISL,TISDC3>
FOR TENEX,<CC TISB,0,TISL,0>>
CC TISLIT,TISE,0,TISM	;TUVW
NOTFOR TURTLE,<CC 0,0,0,TISZ>	;XYZ ALTMODE
FOR TURTLE,<CC TISB,0,0,TISZ>
FOR TEN50,<CC 0,0,0,0>
FOR TENEX,<CC 0,0,0,TISEOL>	;END OF LINE IS 37, LF ALREADY FLUSHED


FOR TEN50,<
TISDC3:	TLNE	F,GETF	;COMING FROM A FILE?
	JRST	TISEOL >	;YES, OK
TISD:
FOR TEN50,<	TTCALL 11,>	;FLUSH ALL INPUT
FOR TENEX,<	MOVEI	A,100
	CFIBF>
	MOVEI C,7
	PUSHJ P,TYO
	JRST TISB
TISA:	PUSHJ	P,TOSS
	PUSHJ	P,CRLF
TISR1:
	TLZE	F,EDITF
	POP	S,A	;CLEAN UP THE PUSH-DOWN LISTS
	POPJ	P,	;GIVE R1
TISE:	MOVEI B,[BYTE (7) 15,177,43,0]
	JRST TISA
TISG:	MOVEI	C," "	;CONTROL B
	TLNN	F,GETF	;NO ECHO IF FROM FILE
	PUSHJ	P,TYO	;TYPE BACK A SPACE
	MOVEI	C,002	;AND PUT CONTROL B IN BUFFER
	JRST	TISF
TISH:	TLNN	F,GETF
	PUSHJ	P,PTAB		;IF NOT IN A FILE, ECHO SPACES
	MOVEI	C,011
	JRST	TISF


TISLIT:	TLNN	F,GETF	;DOING A GET?
	JRST	TISD	;NO, ^T NOT LEGAL FROM TERMINAL
TISLT1:	IDPB	C,B	;COPY TEXT BETWEEN ^T'S LITERALLY, NO INTERP
	PUSHJ	P,TYI
FOR TENEX,<FOR DRIBBLE,<PUSH	P,A
	EXCH	C,B
	SKIPE	A,DRIBFL
	BOUT
	EXCH	C,B
	POP	P,A >>
	CAIE	C,024	;LOOKING FOR MATCHING ^T
	JRST	TISLT1	;NOT FOUND
	JRST	TISF	;BACK TO NORMAL READING

TISI:
	TLNE	F,GETF
	JRST	TISF		;COMING FROM FILE, LET IT THRU
	PUSH	P,B
	MOVEI	B,[BYTE (7) 15,15,40,40]
	PUSHJ	P,TOSS
	POP	P,B
	MOVEI	C," "	;AND TREAT LIKE A SPACE
	JRST	TISF

TISO:	CAIE	C,177	;RUBOUT?
	JRST	TISZ	;NO, EOM
	JRST	TISN

TISZ:	PUSHJ	P,CRLF
	JRST	TISEOL
TISJ:	SETZM	CHARNO
	PUSHJ	P,TYI
	FOR DRIBBLE,<FOR TEN50,<TLNN F,GETF
	PUSHJ P,DCHOUT>>
	CAIE	C,12		;LINEFEED FOLLOWING CR?
	JRST	TISCR		;NO
TISEOL:	SETZB	C,CHARNO
	IDPB	C,B		;FINISH THIS STRING
	HRLZI	L,010700+W
	HRR	L,NEWBOT
	MOVEM	L,LINBOT
	MOVE	B,L		;SAME SRC AND DEST FOR WELL-FORMING
	MOVEI	D,0		;TERMINATE ON EOL
	PUSHJ	P,WEFS		;REMOVE EXTRA SPACES
	TLZE	F,EDITF	;CLEAR PDL+EDIT FLAG
	POP	S,-1(S)

CPOPJ1:	AOS	0(P)
CPOPJ:	POPJ	P,


TISCR:	MOVEI	A,15	;CR
	IDPB	A,B		;PUT IT INTO THE TEXT
	JRST	TISB1		;TREAT THE CHAR AFTER CR FOR WHAT IT IS

TISK:	TLNN	F,EDITF	;TYPE NEXT WORD IN EDIT MODE
	JRST	TISD	;NOT IN EDIT MODE
	PUSHJ	P,TEDIT	;COPY NEXT WORD TO TT AND BUFFER
	JRST	TISB
TISL:	TLNN	F,EDITF	;TYPE REST OF LINE IN EDIT MODE
	JRST	TISD	;NOT IN EDIT MODE
	PUSHJ	P,TEDIT
	TLNN	F,LDONF
	JRST	.-2
	JRST	TISB

TEDIT:	TLNE	F,LDONF	;IF LINE DONE JUST EXIT
	POPJ	P,
	PUSH	P,A	;SAVE POINTERS
	PUSH	P,B	;NO GARBAGE COLLECTION POSSIBLE
	PUSHJ	P,PWORD	;PRINT WORD
	POP	P,B
	POP	P,L
TEDITA:	CAMN	A,L	;HAVE WE CAUGHT UP?
	POPJ	P,
	ILDB	C,L	;COPY THE NEXT CHAR INTO THE INPUT STRING
	JUMPE	C,TEDITB	;IS IT A NULL
	CAIN C,42
	TRC F,TISLF
	IDPB	C,B
	JRST	TEDITA
TEDITB:	TLO	F,LDONF	;SET LINE DONE FLAG
	POPJ	P,	;AND EXIT
TBACK:	CAMN	B,NEWBOT	;ARE WE AT BEGINNING
	JRST	TISB	;OFF BEGINNING OF STRING
	LDB C,B
	PUSHJ P,TYO
	UNDEX	B
	CAIN C,42
	TRC F,TISLF
	JRST	2,@D

TISN:	JSP	D,TBACK	;BACK UP ONE CHARACTER
	JRST	TISB

TISMA:	JSP	D,TBACK	;REMOVE ONE MORE CHARACTER
TISM:	CAMN	B,NEWBOT	;IS THERE A PREVIOUS CHAR
	JRST	TISB	;NO-SO QUIT
	LDB	C,B	;YES-REMOVE LEADINGS SPACES
	CAIN	C," "
	JRST	TISMA
TISMB:	CAMN	B,NEWBOT	;REMOVE NON-SPACES TIL A SPACE
	JRST	TISB	;OFF BEGINNING OF LINE SO QUIT
	LDB	C,B
	CAIN	C," "
	JRST	TISB
	JSP	D,TBACK
	JRST	TISMB

;PRINT WORD
;ENTER WITH BYTE POINTER TO WORK-SPACE IN A
;PRINT WORD AND FOLLOWING SPACE IF EXISTS
;TYO UPDATES CHARNO AND TAKES INPUT IN C

PWORDH:	PUSHJ	P,TYO	;JUST THE CR, NO LF
PWORD:	MOVEI	D,0	;INITIALIZE COUNT OF PRINTING CHARACTERS
	MOVE	B,A	;COPY POINTER
	TRNE	F,PREFIX	;MUST WE PREFIX " OR / TO THIS WORD?
	MOVEI	D,1	;YES, COUNT THE EXTRA CHAR
PWORDB:	ILDB	C,B	;COUNT PRINTING CHARACTERS
	CAIE	C,002	;CONTROL-B IS A SPACING CHARACTER
	CAIL	C," "
	MOVEI D,1(D)
	TRNE F,SUFFIX	;CROCK, DON'T TERMINATE TO EOL IF SUFFIX (RJL)
	JUMPN C,PWORDB
	CAIE C," "
	CAIN	C,015	;STOP IF CR
	JRST	PWORDA
	JUMPN	C,PWORDB	;CONTINUE ON NOT NULL
	TRNE	F,SUFFIX	;MUST WE SUFFIX " OR / TO END OF THIS STRING?
	MOVEI	D,1(D)	;YES, COUNT THE EXTRA CHAR AT END
PWORDA:	TLNE	F,SAVEF	;WHEN SAVING
	JRST	PWORDS		;THE WORD ALWAYS FITS ON A LINE
	MOVEI	C,^D72
	SUBI	C,(D)
	CAMGE	C,BCHAR
	JRST	PWORDC	;YES
	CAMGE	C,CHARNO	;COUNT+CHARNO .GTR. 72.?
	PUSHJ	P,LINE	;YES-CRLF AND SPACE TO BCHAR
PWORDS:	MOVEI	C,(E)	;PUT PREFIX IN C
	TRZE	F,PREFIX	;SHOULD WE TYPE A PREFIX?
PWORDE:	PUSHJ	P,TYO	;YES
	ILDB	C,A	;OTHERWISE PRINT WORD
	CAME	A,B	;HAVE WE CAUGHT UP
	JRST	PWORDE	;NO
PWORDF:	LDB	C,A	;WHAT WAS THE TERMINATING CHARACTER
	JUMPE	C,PWORDX
	CAIN	C,015
	JRST	PWORDH	;CR- HANDLE REST OF WORD JUST LIKE WORD
	CAIN	C," "
	JRST	PWORDD	;SPACE
	PUSHJ	P,LINE	;OTHER-MEANS WE ARE AT END OF LINE BUT NOT OWRD
	JRST	PWORD	;AND GO PROCESS REST AS WORD

PWORDX:	MOVEI	C,(E)	;AT EOM
	TRZE	F,SUFFIX	;MUST WE AFFIX A SUFFIX?
	PUSHJ	P,TYO	;YES, TYPE IT
	POPJ	P,

PWORDC:	MOVE	D,BCHAR	;IF BCHAR .NE. CHARNO CRLF AND SPACE
	CAMLE	D,CHARNO
	PUSHJ	P,LINE
	MOVEI	C,(E)
	TRZE	F,PREFIX
	PUSHJ	P,TYO
PWORDG:	MOVEI	C,110	;PRINT TILL CHARNO=72.
	CAMN	C,CHARNO
	JRST	PWORDF
	ILDB	C,A
	PUSHJ	P,TYO
	JRST	PWORDG
PWORDD:	PUSHJ	P,PWORDX	;DO SUFFIX IF ANY
	MOVEI	C,110	;TYPE SPACE IF CHARNO .NE. 72.
	CAMN	C,CHARNO	;TYPE CRLF AND SPACES IF CHARNO=72.
	JRST	LINE
	MOVEI	C," "
	JRST	TYO


PTYO:	MOVEI	C,^D72
	CAMN	C,CHARNO
	PUSHJ	P,LINE
	MOVEI	C,(B)
	JRST	TYO

PSPACE:	PUSH	P,B
	MOVEI	B," "
	PUSHJ	P,PTYO
	POP	P,B
	POPJ	P,

PTAB:	MOVE	B,CHARNO
	IDIVI	B,11		;TAB STOPS ARE NINE APART
	SUBI	C,11
	MOVE	B,C
	PUSHJ	P,PSPACE
	AOJN	B,.-1
	POPJ	P,

LINE:
	SETZM	CHARNO
	TLNE	F,SAVEF
	POPJ	P,	;MAY BE REDUNDANT
	PUSHJ	P,CRLF	;TYPE CRLF AND SPACES USING C
INDENT:	MOVE	C,BCHAR
	CAMN	C,CHARNO
	POPJ	P,
	CAMG	C,CHARNO
	JRST	INDENT-1	;BCHAR .LT. CHARNO
	MOVEI	C," "
	PUSHJ	P,TYO
	JRST	INDENT
CRLF:
FOR TENEX,<SETZM CHARNO
	MOVEI	C,37	;EOL
	JRST	TYO>
FOR TEN50,<TLNN	F,SAVEF	;OUTPUTTING TO A FILE?
	JRST	CRLF1	;NO
	SETZM	CHARNO
	MOVEI	C,023	;^S(DC3),EOL TO A FILE
	JRST	TYO
CRLF1:	MOVEI	C,015
	PUSHJ	P,TYO
	MOVEI	C,012
	JRST	TYO>

REQUEST:	TLO	F,RQF
	MOVEI	B,[ASCIZ /*/]
	SKIPE	CHARNO	;AT LEFT MARGIN?
	MOVEI	B,[EXP 0]	;NO, DON'T TYPE ANYTHING
	PUSHJ	P,TIS
	JRST	REQUEST
	TLZ	F,RQF
	POPJ	P,

FOR TENEX,<
XBOUT:	PUSH	P,A
	EXCH	B,C
FOR NFILE,<MOVEI	A,101>
FOR OFILE,<MOVE	A,OUTFILE >
	BOUT
	EXCH	B,C
	POP	P,A
	POPJ	P,

XBIN:	PUSH	P,A
	MOVE	C,B
FOR NFILE,<MOVEI	A,100 >
FOR OFILE,<MOVE	A,INFILE >
	BIN
	EXCH	C,B
	POP	P,A
	POPJ	P,  >

FOR TENEX,<
ASK:	POP	S,L
	PUSHJ	P,DNM
	 ERROR	ZERERR
	MOVEI	C,"*"
	SKIPN	CHARNO		;AT LEFT MARGIN?
	PUSHJ	P,TYO		;YES

	MOVE	A,[XWD 15,1]
	ATI			;CR TO CH1 FOR ASK
	MOVE	A,[XWD 33,2]
	ATI			;ALT MODE TO CH 2 FOR ASK
	MOVE	A,[XWD 34,3]
	ATI			;RUBOUT TO CH 3 FOR ASK
	MOVEI	A,100
	RFMOD
	ANDCMI	B,6000
	IORI	B,2000		;CHANGE ECHO MODE TO IMMEDIATE
	SFMOD
	HRLZI	A,400000
	HRLZI	B,340000
	AIC	;ACTIVATE INTERRUPT CHANNELS FOR CR,ALTMODE, AND RUBOUT
	MOVEI	A,^D1000
	IMULI	A,(M)
	DISMS			;IN MILLISECONDS
	MOVEI	A,100
	CFIBF			;INCOMPLETE, FLUSH ALL OF IT

ASK1:	MOVEI	A,15		;CR
	DTI			;DEASSIGN TERMINAL INTERRUPT
	MOVEI	A,33		;EOM
	DTI
	MOVEI	A,34		;RUBOUT
	DTI
	HRLZI	A,400000
	HRLZI	B,340000
	DIC			;DEACTIVATE ASK CHANNELS
	MOVEI	A,100		;TERMINAL JFN
	RFMOD
	XORI	B,6000
	SFMOD
	MOVEI	B,37
	STI			;EOM FOR TIS
	MOVEI	B,[EXP 0]
	PUSHJ	P,TIS
	 ERROR	IOPERR
	POPJ	P,

ASKEOL:	MOVEI	A,ASK1
	MOVEM	A,LEVLTB+2
	DEBRK

ASKRUB:	MOVEI	A,100
	CFIBF
	MOVEI	B,[BYTE (7) 15,177,43,0]
	PUSHJ	P,TOSS
	PUSHJ	P,CRLF
	MOVEI	C,"*"
	PUSHJ	P,TYO
	DEBRK		>	;CONTINUE WAITING

FOR DRIBBLE,<FOR TEN50,<
TYO:	CAIN C,24
	MOVEI C,42
	TLNN F,GETF!SAVEF
	JRST TYO3
	TRNE F,EABBRF!ECONTF!EENTRF!ENAMEF
TYO3:	PUSHJ P,DCHOUT
>>
IFNDEF TYO,<TYO:>
FOR MITTUR,<PUSHJ P,TTYON>
	TLNE	F,NOBREAK
	JRST	.+3
	TLZE	F,BREAKF
	 ERROR	BREAK
	TLNE	F,SAVEF	;GOING TO A FILE?
	JRST	TYO2	;YES, LET TAB AND ^B THROUGH UNTRANSLATED
	CAIE	C,11	;IS IT TAB
	JRST	TYO1	;NO
	PUSH	P,B
	PUSHJ	P,PTAB
	POP	P,B
	POPJ	P,

TYO1:	CAIN C,24
	MOVEI C,42
	CAIN	C,002
TYOSPC:	MOVEI	C,40		;SUBSTITUTE SPACE FOR CONTROL-B
TYO2:	CAIN	C,015	;IS THE CHAR CR
	XCT	CHOUT	;YES, TYPE TWICE, NOT THE BEST WAY TO GET TIMING ON CR ALONE
	XCT	CHOUT
	CAIN	C,177
	JRST	.+3	;RUBOUTS DON'T COUNT
	CAIL	C," "	;IS IT A PRINTING CHARACTER
	AOS	CHARNO
	CAIN	C,015	;CR-CLEAR CHARNO
	SETZM	CHARNO
	POPJ	P,
FOR MITTUR,<
TURTYO:	PUSHJ P,TURON
	XCT CHOUT
	POPJ P,
SYNTYO:	PUSHJ P,SYNON
	XCT CHOUT
	POPJ P,
TTYON:	PUSH P,C
	MOVEI C,143
	SKIPE TTYST
	XCT CHOUT
	SETZM TTYST
POPCJ:	POP P,C
	POPJ P,
TURON:	PUSH P,C
	MOVEI C,142
	SKIPL TTYST
	XCT CHOUT
	SETOM TTYST
	JRST POPCJ
SYNON:	PUSH P,C
	MOVEI C,141
	SKIPG TTYST
	XCT CHOUT
	MOVEM C,TTYST
	JRST POPCJ
>

TYI:	TLO	F,TIF	;SET TYPEIN FLAG
	TLNE	F,NOBREAK
	JRST	.+3
	TLZE	F,BREAKF
	 ERROR	BREAK
	XCT	CHIN		;GET A CHARACTER
	TLZ	F,TIF
	POPJ	P,
PTOSSM:	HRLI	A,440700	;FOR MACHINE STRINGS
	JRST	PTOS
PTOSS:	HRLI	A,010700+W	;FOR GENERATED STRINGS
PTOS:	PUSHJ	P,PWORD
	LDB	C,A
	JUMPN	C,.-2
	POPJ	P,

TOSW:	HRLI	B,010700+W
	JRST	TOS
TOSS:	HRLI	B,440700
TOS:	ILDB	C,B	;BYTE POINTER IN B USE C
	JUMPE	C,CPOPJ
	PUSHJ	P,TYO
	JRST	TOS

NUMBRQ:	TLNE	A,EMPTYF	;IS IT EMPTY?
	JRST	CPOPJ	;YES
	TRZ	F,TF
	HRLI	A,010700+W

	ILDB	C,A
	JUMPE	C,CPOPJ	;EMPTY
	CAIE	C,"+"
	CAIN	C,"-"
NMBRQ1:	ILDB	C,A
	JUMPE	C,NMBRQ2
	TRO	F,TF	;HAVE SEEN A CHARACTER
	CAIL	C,"0"
	CAILE	C,"9"
	POPJ	P,	;NOT A DIGIT, FAIL
	JRST	NMBRQ1

NMBRQ2:	TRZE	F,TF	;ALL THE CHARS WE SAW WERE DIGITS, BUT WERE THERE ANY
	AOS	0(P)	;SAW SOME DIGITS
	POPJ	P,	;SAW NO CHARACTERS


PREDIQ:	MOVE	B,@A
	ADDI	A,1
	CAIE	B,1	;IS LENGTH OF TEXT 1?
	JRST	PREDQ1	;NO, CANNOT BE "TRUE"
	MOVE	B,@A	;GET TEXT OF ONE WORD ELEMENT
	CAME	B,[ASCIZ /TRUE/]
	POPJ	P,	;NOT "TRUE"
	JRST	CPOPJ1	;IS "TRUE"
PREDQ1:	CAIE	B,2	;FALSE MUST BE TWO WORDS LONG
	POPJ	P,	;NOT "FALSE"
	MOVE	B,@A
	ADDI	A,1
	CAMN	B,[ASCII /FALSE/]
	SKIPE	@A	;NEXT WORD MUST BE 0 TERMINATOR FOR "FALSE"
	POPJ	P,	;R1, IS NOT "FALSE"
	JRST	CPOPJ1	;R2

DNM:	MOVEI	M,0
	TRZ	F,PMF!NNUMF
	HRLI	L,010700+W	;ALL CALLS USE A COMPLETE STRING
	ILDB C,L
	CAIN C,"-"
	TRO F,PMF
	CAIE C,"+"
	CAIN C,"-"
DNM1:	ILDB	C,L
	CAIL	C,"0"
	CAILE	C,"9"
	JRST	DNM2
	TRO	F,NNUMF
	IMULI	M,12
	ADDI	M,-60(C)
	JRST	DNM1
DNM2:	TRZE F,PMF
	MOVNS M
	TRNN	F,NNUMF
	POPJ	P,
	JRST	CPOPJ1


DECPRT:	SKIPA	B,[EXP 12]
OCTPRT:	MOVEI	B,10
	MOVEM	B,RADIX
ANYPRT:	IDIV	A,RADIX
	HRLM	B,(P)
	SKIPE	A
	PUSHJ	P,ANYPRT
	HLRZ	C,(P)
	ADDI	C,"0"
	JRST	TYO

SNM:	PUSHJ	P,NEWSTR
SNM0:	MOVE	G,B
	TRO	F,TF
	SETZM	SRCBOT
SNMA:	IDIVI	M,12
	HRLM	N,(P)
	SKIPE	M
	PUSHJ	P,SNMA
	TRZE	F,TF	;ONLY SET UP B ONCE
	MOVE	B,G
	HLRZ	C,(P)
	ADDI	C,"0"
	IDPB	C,B
	POPJ	P,

COPYAB:	ILDB	C,A
	IDPB	C,B
	JUMPN	C,.-2
	POPJ	P,


;NEWOPS IS CALLED BY FIRST,LAST,BUTFIRST, AND BUTLAST
;ALL HAPPEN TO DO THE SAME THING

;NEWSTR IS USED BY ANYONE WHO GENERATES A NEW STRING

NEWOPS:	MOVE	A,0(S)	;GET ARG OFF S STACK WITHOUT DESTROYING IT
	TLNE	A,EMPTYF	;IS IT AN EMPTY STRING
	JRST	APOPJ		;YES EXIT FROM CALLING ROUTINE
	TLNE	A,WORDF
	AOS	0(P)	;SKIP JUMP TO SENT IF A WORD
	HRLI	A,010700+W	;IN ANY CASE, MAKE A STRING PTR
	MOVEM	A,SRCBOT
NEWSTR:	HRRZ	B,WTOP
	ADD	B,[XWD 010700+W,1]	;MUST BE EXACTLY THIS FOR TEST IN TBACK TO WORK
	MOVEM	B,NEWBOT
	POPJ	P,



;NEWSRC SETS UP A NEW SOURCE STRING FROM THE FIRST ARG ON THE PDL
;NEWSR1 DOES THE SAME FOR THE SECOND ARG BACK

NEWSR1:	SKIPA	A,-1(S)
NEWSRC:	MOVE	A,0(S)
NEWSR0:	HRLI	A,010700+W
	MOVEM	A,SRCBOT
	POPJ	P,


GNE:	AOS	A,CPP		;GET NEXT NON-COMMENT ELEMENT
	MOVE	A,@CSA
	JUMPE	A,CPOPJ		;END OF LINE, R1
	TLNE	A,COMMTF	;IS IT COMMENT
	JRST	GNE		;YES, SKIP IT
	JRST	CPOPJ1

ENDSTP:	POP	S,C	;FLUSH OLD INPUT FIRST BEFORE
ENDSTR:	MOVEI	C,0	;FINISH UP THE NEW STRING
	IDPB	C,B
ENDST1:	TLNE	B,760000
	JRST	.-2
	MOVEM	B,WTOP
	SUB	B,NEWBOT
	HRRZM	B,@NEWBOT
	HRLZI	B,W+WORDF
	HRR	B,NEWBOT
	TRZE	F,NWF
	TLC	B,WORDF!SENTF
	PUSH	S,B
	POPJ	P,
PRINTX PART E

;THE NEXT SECTION (10-11 PAGES) CONTAINS STORAGE ALLOCATION
;AND GARBAGE COLLECTION ROUTINES FOR THE VARIOUS SPACES

;MOVE A PROCEDURE TO THE END OF THE PROCEDURE SPACE

MOVEPR:	SETOM	NXLINE	;POINTER INTO PS NO LONGER VALID
	HRRZ	D,@RPA	; A CONTAINS A PRODNM
	MOVEI	B,(D)	;B AND D HAVE REL PTR TO BEGINNING OF DIRECTORY

	MOVEI	D,2(D)	;TWO WORDS PER LINE IN PROCEDURE DIRECTORY
	SKIPE	@PSD	;LINE NO=0?
	JRST	.-2	;NO, NEXT LINE

	MOVEI	D,1(D)
	HRRZ	C,PTOP
	CAIL	D,(C)
	POPJ	P,	;ALREADY THE LAST ONE IN THE SPACE

	SUBI	D,(B)	;D IS NOW THE LENGTH OF THE PROCEDURE
	ADDI	C,@PSD
	CAML	C,PS+1
	EXPAND	D,PS

	HRRZ	E,PTOP
	HRRM	E,@RPA
	HRLI	E,(B)
	MOVE	C,PS
	HRLI	C,(C)
	ADDB	E,C
	MOVE	G,E
	HRLI	D,(D)
	ADD	G,D
	BLT	C,-1(G)
	HLR	G,E
	BLT	G,-1(E)

	MOVEI	A,0	;SEARCH RP FOR ALL THAT POINT AFTER MOVED DIR.
	MOVNI	D,(D)
MPRL:	SKIPN	@RPA
	POPJ	P,	;DONE
	MOVEI	A,1(A)
	HRRZ	C,@RPA
	CAIN	C,-1	;IS THIS ONE DEFINED?
	AOJA	A,MPRL	;NO, DON'T OFFSET IT
	CAIL	C,(B)	;B CONTAINS PTR TO OLD BEG OF MOVED PROC
	ADDM	D,@RPA	;OFFSET IT BY AMOUNT MOVED DOWN
	AOJA	A,MPRL

;REMOVE ONE COMPILED LINE FROM CS

GCCS:	TLO	F,GCCSF
	HRRZ	C,@PSA
	MOVEI	D,(C)	;BOTH POINT AT AFFECTED COMPILED LINE
	ADD	D,CS
	MOVEI	E,(D)
	SKIPE	(D)
	AOJA	D,.-1


	MOVE	G,CTOP
	ADD	G,CS
	ADDI	G,-1(E)
	SUBI	G,1(D)
	HRLI	E,1(D)
	SUBI	D,-1(E)
	MOVNI	B,(D)
	BLT	E,(G)	;COPY REST OF WORLD BACK OVER THE DELETED ENTRY
	ADDM	B,CTOP	;OFFSET CTOP
	HRRZ	G,CPP
	CAIL	G,(C)	;SHOULD CPP BE OFFSET?
	ADDM	B,CPP	; YES, IT IS ABOVE AFFECTED LINE
	ADDM	B,CBOT	;OFFSET BASE OF DIRECT LINE, IT ALWAYS MOVES
	ADDM	B,CDBOT	;OFFSET BASE OF ALL DIRECT LINES
	ADD	H,B	;OFFSET BASE OF LINE TO BE SQVED

;NOW OFFSET ALL THE POINTERS ABOVE THE THING REMOVED

	MOVE	E,RP	;BASE OF ALL PROCEDURE NAMES
TOLNH1:	SKIPN	(E)	;ANY MORE PROCEDURES?
	POPJ	P,	;NO
	MOVEI	E,1(E)	;POINT TO POINTER TO PROCEDURE DIRECTORY
	MOVE	D,(E)	;GET IT
	CAMN	D,[EXP -1]	;IS IT DEFINED?
	AOJA	E,TOLNH1	;NO, DO NEXT PROCEDURE
	MOVEI	D,@PSD		;POINT TO THE DIRECTORY ABSOLUTE
	AOJA	D,TOLNH3	;DO THE "TO" LINE

TOLNH2:	SKIPN	(D)	;ANY MORE LINES OF THIS PROCEDURE?
	AOJA	E,TOLNH1	;NO, NEXT PROCEDURE
	MOVEI	D,1(D)	;POINT TO SEQNO AND COMPIL PTR
TOLNH3:	HRRZ	G,(D)	;GET THE COMPIL PTR
	CAIL	G,(C)	;IS IT AFTER THE HOLE?
	ADDM	B,(D)	;YES, OFFSET IT
	AOJA	D,TOLNH2	;NEXT LINE THIS PROCEDURE


;GARBAGE COLLECTOR PASS ONE
;SEARCH ALL LISTS AND THINGS, REPLACING START OF ALL GOOD STRINGS

GARCOL:	MOVE	S,UUOACS+S
	SETZM	1(S)	;ALWAYS ROOM FOR ONE ZERO AFTER S LIST, BECAUSE
			; CS ALWAYS STARTS AT ONE
	MOVEI	G,0
	TLZ	F,GCF	;INDICATE THAT GC WAS DONE FOR THIS K
	MOVEI	N,.WTOP-.WBASE	;BOTTOM OF FLUSHABLE STRINGS

	MOVE	B,VP
	JSP	S,GCMARK
	MOVE	B,DP
	ADD	B,DTOP
	SETZM	(B)	;PUT A TERMINATOR AT THE END
	MOVE	B,DP
	ADDI	B,2
	JSP	S,GCMARK
	MOVE	B,SP
	MOVEI	B,1(B)	;STACKS SKIP THE FIRST CELL
	JSP	S,GCMARK
	MOVE	B,UA
	JSP	S,GCMARK	;USER ABBREVIATIONS ALSO

	HRLZI	A,GCSTAB-GCSTOP	;A TABLE OF PAIRS,LIKE UUOACS+L,LINBOT
	MOVE	B,GCSTAB(A)
	HLR	C,B
	MOVN	E,(B)		;LIKE MOVN E,LINBOT
	ADDM	E,(C)		;LIKE ADDM E,UUOACS+L , TO OFFSET AC
	JSP	L,MARK1		;MARK THE REAL STRING POINTER
	AOBJN	A,.-5		;BACK FOR THE REST OF THE FUNNIES
FOR TEN50,<ADDM	E,FPTR>	;A DOUBLE CRAZY

	MOVN	A,CTOP	;LOOP TO MARK STUFF IN COMPILED STORAGE
	HRLZI	A,(A)	;USE THIS AS END TEST
	MOVE	B,@CSA	;FIRST ONE NEVER LAST ONE BECAUSE CTOP .GE. 1
	TLNN	B,VARF!LITF!COMMTF
	JRST	.+3	;NOTA
	MOVEI	B,@CSA
	JSP	L,MARK1
	AOBJN	A,.-5	;LOOP OVER ALL OF CS STORAGE

	MOVE	A,RP	;MARK PROCEDURES
GCMKP1:	MOVE	B,(A)	;PTR TO PROCEDURE NAME
	JUMPE	B,GCPSS2
	MOVEI	B,(A)
	JSP	L,MARK1	;MARK THE NAME
	MOVEI	A,2(A)	;POINT AT NEXT NAME
	JRST	GCMKP1


GCMARK:	SKIPN	(B)
	JRST	(S)
	JSP	L,MARK1
	AOJA	B,GCMARK

MARK1:	MOVE	D,(B)	;CALLED WITH MOVEI B,ADDR OR EQUIVALENT
	CAME	D,[EXP -1]
	TLNN	D,W
	JRST	(L)
	CAILE	N,(D)	;IS THIS A FLUSHABLE STRING?
	JRST	(L)	;NO
	HLRZ	C,@WSD	;GET CURRENT BACK POINTER
	HRRM	C,(B)	;PUT IT INTO THIS REFERRER
	HRLM	B,@WSD	;PUT ADDR OF THIS REFERRER AS TOP OF BACK CHAIN
	JRST	(L)


;GARBAGE COLLECTOR PASS TWO

GCPSS2:	HRRZ	E,NEWBOT
	HRRZ	B,WTOP
	CAIG	E,(B)
	MOVEI	E,1(B)	;WTOP .GTR. NEWBOT, I.E. NO STRING IN PROGRESS
	ADDI	E,(W)	;FOR END TEST, QUIT BEFORE NEW STRING
	MOVEI	A,.WTOP-.WBASE(W)	;SOURCE IS ABSOLUTE
	MOVEI	B,.WTOP-.WBASE	;DESTINATION IS RELATIVE
GCPS2A:	CAIN	E,(A)	;IS THE NEXT STRING THE UNFINISHED ONE?
	JRST	GCPS2C	;YES, DO THE UNFINISHED ONE SPECIAL

	MOVE	C,(A)	;GET THE LENGTH WORD
	TLNN	C,-1	;DOES IT HAVE A BACK CHAIN POINTER, IE MARKED?
	JRST	GCPS2B	;NO, SKIP THE BLT

	HLRZ	D,C	;TRACE THE BACK CHAIN
	HRRZ	G,(D)
	HRRM	B,(D)	;REPLACE BACK CHAIN POINTER WITH NEW RELATIVE POINTER
	MOVEI	D,(G)	;PUT THE NEW BACK PTR IN D
	JUMPN	D,.-3	;THE CHAIN CONTINUES

	HRRZM	C,(A)	;CLEAR THE BACK CHAIN POINTER IN LENGTH WORD
	HRLZI	G,(A)	;BLT SOURCE
	HRRI	G,@WSB	;BLT DEST, MAKING IT ABSOLUTE
	ADDI	B,(C)	;DEST+LENGTH=END OF BLT
	BLT	G,@WSB	;MOVE IT
	ADDI	B,1	;MAKE B POINT BEYOND END OF THIS STR, AT BEG OF NEXT
GCPS2B:	ADDI	A,1(C)	;NEXT SOURCE
	JRST	GCPS2A

GCPS2C:	SUBI	E,@WSB	;MAKE E THE AMOUNT COLLECTED
	MOVNI	G,(E)		;USE G TO OFFSET WTOP,ETC
	HRRM	B,NEWBOT	;B IS THE RELATIVE DEST FOR THE STRING
	ADDM	G,UUOACS+B
	ADDM	G,WTOP

	HRRZ	D,JOBREL
	SUBI	D,(E)
	HRLI	B,(A)
	ADDI	B,(W)
	CAMG	A,JOBREL	;DON'T GET CAUGHT WITH ILL MEM REF
	BLT	B,(D)

GCPS2D:	CAIG	E,2000	;DID WE RECOVER MORE THAN A FULL K?
	JRST	GCPSS3	;NO
	MOVEI	A,@WTOP		;YES, REMOVE EXTRA K'S
FOR TEN50,<	CALL	A,[SIXBIT /CORE/]
	 HALT>

FOR TENEX,<	JSP	E,SETMEM>

;GARBAGE COLLECTOR PASS THREE

GCPSS3:	MOVEI	D,2(D)
	CAMLE	D,JOBREL
	JRST	GCPS3B		;AVOID DOING BLT ON FULL ALLOCATION
	SETZM	-1(D)
	HRLI	D,-1(D)
	BLT	D,@JOBREL

GCPS3B:	HRLZI	A,GCSTAB-GCSTOP	;UNDO THE CRAZIES
	MOVE	B,GCSTAB(A)
	HLR	C,B
	MOVE	G,(B)
	ADDM	G,(C)
	AOBJN	A,.-4
FOR TEN50,<ADDM G,FPTR>
	JRST	(P)


GCSTAB:	XWD UUOACS+L,LINBOT
	XWD UUOACS+A,SRCBOT
FOR TEN50,<
	XWD BUFLOC,BUFADR
	XWD BUFLOC+1,BUFADR+1>
GCSTOP==.

FOR TEN50,<
ALLOC:	EXCH	A,JOBCNI	;SAVE A AND GET REASON FOR TRAP
	TRNE	A,20000	;WAS IT AN ILL MEM REF?
	JRST	ALOCWS	;YES, WORKSPACE SPACE NEEDED
	EXCH	A,JOBCNI >	;CLEAN UP

ALLOCP:	JUMPG	S,ALOCSP	;PDL TRAP, WAS IT ARG STACK?
	JUMPL	P,[ERROR .]
	EXPAND	PP	;NO, CONTRO STACK
	HRL	P,ALOCTB+PP-RP
	TLC	P,-1
	ADD	P,[XWD 1,0]	;MAKE IT TWO'S COMPLEMENT
	JRST	ALOCAL

ALOCSP:	EXPAND	SP
	HRL	S,ALOCTB+SP-RP
	TLC	S,-1
	ADD	S,[XWD 1,0]
	JRST	ALOCAL

FOR TEN50,<
ALOCWS:
IFE 1,<	MOVE A,@JOBTPC	;ASSEMBLE TO FIND NON IDPB'S PRODUCING MPV'S
	LSH A,-33
	CAIE A,136	;IS IT AN IDPB?
	JRST LOSER	;NO, YOU LOSER>
	EXCH	A,JOBCNI
	EXPAND	WS

ALOCAL:	MOVEM	A,JOBCNI
	HRRZI	A,220000
	CALLI	A,16	;REENTER TRAPPING MODE
	MOVE	A,JOBCNI
	JRST	2,@JOBTPC >
LOSER:	ERROR IOPERR

FOR TENEX,<

ALOCWS:	EXPAND WS
ALOCAL:	DEBRK


LEVTAB:	EXP LEVLTB,LEVLTB+1,LEVLTB+2

DATAEX:	ERROR	. >

ALLOCATOR:
	LDB	C,[POINT 4,JOBUUO,12]	;GET THE AC NUMBER
	HRRZ	A,JOBUUO	;WHICH SPACE IS IT?
	HRRZ	B,ALOCTB-RP(A)	;HOW MUCH SPACE MUST WE ADD NOW?
	JUMPE	C,.+3	;SKIP NEXT TWO IF NO AC SPECIFIED
	CAMGE	B,UUOACS(C)	;IS THE SPECIFIED AMOUNT GREATER THAN THE NORMAK AMOUNT
	MOVE	B,UUOACS(C)	;REQUESTED AMOUNT GREATER THAN NORMAL
	MOVEM	B,GCTEM
	ADDI	B,@WTOP
	CAIN	A,WS	;IS THE REQUEST FOR MORE WORK SPACE?
	JRST	ALLOC0	;YES
	CAMG	B,JOBREL	;DOES THE REQUESTED AMOUNT FIT
	JRST	ALLOC1	;YES, DON'T ASK FOR MORE

	JSP	G,NEWMEM
	 ERROR	PUNT	;NO MORE CORE AVAILABLE,
	TLO	F,GCF
	JRST	ALLOC1	;GOT ONE

ALLOC0:	TLNE	F,GCF	;HAS THIS K BEEN GC'ED?
	JRST	ALLC01	;NO, GO DO IT
	JSP	G,NEWMEM
	 ERROR	PUNT	;CAN'T GET MORE CORE AND CAN'T SAVE BY GC
	TLO	F,GCF	;NEW K HAS NOT YET BEEN GC'ED
	JRST	UUORET	;RETURN

ALLC01:	JSP	P,GARCOL
	HRRZ	A,JOBUUO
	CAIN	A,WS	;WAS IT WORKSPACE CALL?
	JRST	UUORET	;YES, NOW DONE
	MOVE	C,GCTEM
	ADDI	C,@WTOP
	CAMLE	C,JOBREL	;DID THE GC GIVE US ENOUGH ROOM?
	 ERROR	PUNT	;NO

ALLOC1:	HRRZ	A,JOBUUO
	MOVE	B,GCTEM
	MOVEI	G,(B)
	HRLI	G,(G)
	MOVE	H,1(A)
	HRRZ	C,JOBREL
	HRRZI	D,1(C)
	SUBI	D,(B)
	HRLZI	D,(D)
	HRRI	D,1(C)
	JRST	ALLOC3

ALLOC2:	MOVE	E,D
	BLT	E,(C)
	SUBI	C,(B)
ALLOC3:	SUB	D,G
	CAIGE	H,(D)
	JRST	ALLOC2

	HRLZI	D,(H)
	HRRI	D,1(H)
	SETZM	(H)
	ADDI	H,(B)
	BLT	D,-1(H)

	MOVEI	A,1(A)
	JSP	D,RPOINT

UUORET:	MOVE	17,[XWD UUOACS+1,1]	;DON'T RESTORE 0
	BLT	17,17
	JRST	2,@UUOTRP


RPOINT:	HLRZ	C,ALOCTB-RP(A)	;POINTER TO LIST OF WORDS TO UPDATE
	ADDM	B,(A)		;UPDATE THE BASE IN THE BASE TABLE
	JUMPE	C,ALLOC5	;NO SECONDARY BASE POINTERS
	MOVE	E,(C)		;GET AN ADDRESS OF A SECONDARY BASE PTR
	JUMPE	E,ALLOC5	;NO MORE IN THIS LIST
	ADDM	B,(E)		;UPDATE IT
	AOJA	C,.-3
ALLOC5:	CAIE	A,WS
	AOJA	A,RPOINT	;MORE TO DO IN ALOCTB
	JRST	(D)


FOR TENEX,<

SETMEM:	IORI	A,1777
	MOVEM	A,JOBREL
	MOVEI	A,1(A)
	MOVEI	C,(A)
	ASH	A,-11	;DIVIDE BY PAGE SIZE
	HRLI	A,400000
	RPACS		;DID I CREATE THIS PAGE BEFORE?
	TLNN	B,(1B5)	;IF SO, THEN THIS BIT SET
	MOVE	B,(C)	;IF NOT, CREATE IT
	MOVEI	B,0	;NO ACCESS
	SPACS
	SUBI	A,2
	HRLZI	B,160000
	SPACS		;ALL ACCESS FOR PREVIOUS K
	JRST	(E)


NEWMEM:	HRRZ	C,JOBREL
	ADDI	C,2000
	CAILE	C,<40*2000>-1
	JRST	(G)	;NOT AVAILABLE TO USER, R1
	MOVEI	A,(C)
	JSP	E,SETMEM	;SET NEW BOUND
	MOVNI	A,1777
	HRRZ	B,JOBREL
	ADDI	A,(B)
	HRLI	A,(A)
	SETZM	(A)
	ADDI	A,1
	BLT	A,(B)	;AND ZERO THE NEW MEMORY
	HRRZ	A,JOBUUO
	JRST	1(G) >

FOR TEN50,<

NEWMEM:	MOVE	A,JOBREL
	ADDI	A,1
	MOVEI	B,(A)		;FIRST ADDR OF NEW K IN A AND B
	CALL	A,[SIXBIT /CORE/]
	 JRST	(G)		;NONE AVAILABLE, IMMEDIATE R1
	ASH	B,-12		;DECIMAL K
	CAIE	A,(B)		;JUST GOT THE LAST K?
	 JRST	1(G)		;NO, OK
	HRRZ	A,THISPR
	CAIN	A,SAVEL+1	;ARE WE DOING A SAVE?
	JRST	1(G)		;YES, OK TO USE LAST K
	MOVE	A,JOBREL
	SUBI	A,2000
	CALL	A,[SIXBIT /CORE/]
	 ERROR	IOPERR
	JRST	(G) >		;MUST RESERVE LAST K FOR PANIC SAVE


SHORTN:	HRRZ	B,ALOCTB(G)	;SHORTEN THIS SPACE IF IT NEEDS IT
	ADDI	A,(B)
	CAML	A,RP+1(G)	;MORE THAN MINIMUM ALLOC LEFT OVER?
	JRST	(L)		;NO
	HRL	A,RP+1(G)
	HLRZ	B,A	;EVEN IF A CHANGES
	SUBI	B,(A)	;THE TWO HALVES REMAIN RELATIVELY CONSTANT
	MOVNI	B,(B)
	ADD	W,B
	BLT	A,@WTOP
	MOVEI	A,RP+1(G)
	JSP	D,RPOINT
	MOVE	W,UUOACS+W	;FOR NEXT @WTOP
	JRST	(L)

;COMPRESS ALL AREAS TO BE AT MOST CURRENTLY USED PLUS INITIAL ALLOCATION

CMPRSS:	HRLZI	G,-3	;THREE PAIR TABLES
CMPRS1:	MOVE	A,RP(G)	;FETCH THE BASE OF THE TABLE
	SKIPN	(A)	;ANY MORE PAIRS?
	JRST	.+3	;NO
	MOVEI	A,2(A)
	JRST	.-3	;TRY NEXT PAIR
	JSP	L,SHORTN	;YES
	AOBJN	G,CMPRS1	;OTHER PAIR TABLES

	HRLI	G,-3	;THREE TABLES WITH TOP POINTERS
CMPRS2:	HRRZ	A,PTOP-3(G)	;PTOP FIRST IN ORDER
	ADD	A,RP(G)		;TOPS ARE RELATIVE, MAKE ABSOLUTE
	JSP	L,SHORTN
	AOBJN	G,CMPRS2	;OTHER TOP TABLES

	HRLI	G,-2	;TWO PDP'S
CMPRS3:	HRRZ	A,UUOACS+S-6(G)	;GET CURRENT TOP OF STACK
	JSP	L,SHORTN		;PDP'S ARE ALREADY ABSOLUTE
	HRRZ	A,UUOACS+S-6(G)
	SUB	A,RP+1(G)
	MOVEI	A,1(A)
	HRLM	A,UUOACS+S-6(G)	;FIX PDL END TEST
	AOBJN	G,CMPRS3	;OTHER PDP

	HRRZ	A,JOBREL
	SUBI	A,@WTOP	;DIFFERENCE BETWEEN LAST STRING AND TOP OF CORE
	CAIG	A,2000	;IS IT MORE THAN A K
	JRST	CMPRS4	;NO, DON'T CONTRACT
	MOVEI	A,@WTOP
FOR TEN50,<
	CALL	A,[SIXBIT /CORE/]	;ONLY HAVE TO BE ENOUGH FOR WHAT WE
	JRST	ILLUUO >	;BIG TROUBLE
FOR TENEX,<	JSP	E,SETMEM>

CMPRS4:	MOVEI	A,@WTOP
	HRLI	A,1(A)
	HRRI	A,2(A)
	SETZM	-1(A)
	MOVE	B,JOBREL
	CAILE	B,(A)
	BLT	A,(B)
	JRST	UUORET	;HAVE NOW TO FIT IN CORE

;STUFF TO BE COPIED TO UNSHARED CORE AT START OF RUN

DEFINE TT (A1,A2,A3)
<IFB <A3>,<EXP A2>
IFNB <A3>,<XWD A3,A2>>
ALOCTB:	TABLES

DEFINE MM (A1,A2)
<XWD A2,0>

SPFRST:	Z
	JRST	DOUUO
	POINTR	;ALL THE LH'S OF THE INDEXED POINTERS
	EXP 0,1,2	;PTOP,CTOP,DTOP, IN THAT ORDER!
	XWD W,.WTOP-.WBASE-1
	EXP 1,1			;CBOT , DBOT INITIALIZED THE SAME AS CTOP
	XWD 525252,123457	;AN INITIAL RANDOM BITS, FIX LATER
				;SO THE STARTING POINT IS ALSO RANDOM
FOR MITTUR,<	REPEAT 4,<0.5>>

FOR DRIBBLE,<FOR TEN50,<
	0
	SIXBIT /DRB/
	0
	0>>
FOR TENEX,<	Z	;BITS FOR JFNTAB
	XWD 377777,377777	;NO INPUT OR OUTPUT FILE FOR STRING
	Z		;DEFAULT DEVICE IS DSK
	Z
	Z
	[ASCIZ /LGO/]		;EXTENSION
	Z
	Z
	XWD 1,BREAKY	;CH 0, PRIORITY  ABOVE ALL OTHERS
	XWD 3,ASKEOL	;CH 1 CR FOR ASK
	XWD 3,ASKEOL	;CH 2 ALT-MODE FOR ASK
	XWD 3,ASKRUB	;CH 3 RUBOUT FOR ASK
	REPEAT 5,<Z>	;CH 4-8 UNUSED
	XWD 2,ALLOCP	;CH 9, PDL TRAP
	XWD 2,DATAEX	;CH 10
	XWD 2,DATAEX	;CH 11
	REPEAT 4,<Z>	;CH 12-15 UNUSED
	XWD 2,ALOCWS >	;CH 16 ILLEGAL MEMORY READ
TERMIO:
FOR TENEX,<PUSHJ P,XBIN
	PUSHJ P,XBOUT>
FOR TEN50,<TTCALL	C
	TTCALL	1,C >
FOR OFILE,<FOR TENEX,<EXP 100,101>>
SPLLEN==.-SPFRST



DEFINE ELM1 (NAME,VAL)
<
NAME==.-.WBASE
EXP 1,VAL
>

.WBASE=.
ELM1 EMPTYV,0
ELM1 TRUEV,ASCIZ /TRUE/
FALSEV==.-.WBASE
EXP 2
ASCIZ /FALSE/
ELM1 LINEFV,012B6
ELM1 CARETV,015B6
ELM1 FORMFV,014B6
ELM1 BLANKV,002B6
ELM1 BELLV,007B6
ELM1 QUOTEV,042B6
ELM1 SKIPV,BYTE (7) 15,12
ELM1 DUMMYV,0
.WTOP==.



;MACHINE DEFINED PROCEDURES

DEFINE MPM (NAME,GOTO,NARG,BITS)
<IFB <BITS>,<XWD WORDF,[ASCIZ \NAME\]>
IFNB <BITS>,<XWD BITS!WORDF,[ASCIZ \NAME\]>
 XWD NARG-1,GOTO>



DEFINE PAIR (A,B)
<XWD 400000,[ASCIZ "A"]
 EXP [ASCIZ "B"]>


DEFINE MVM (A,B,C)
<EXP [ASCIZ "A"]
IFNB <C>,<XWD C,B>
 IFB <C>,<XWD W+WORDF,B>>


;MACHINE DEFINED VARIABLE NAMES

MV:
EXP [ASCIZ "EMPTY"]
XWD W+WORDF!SENTF!EMPTYF,EMPTYV
MVM LINEFEED,LINEFV
MVM CARRIAGERETURN,CARETV
MVM FORMFEED,FORMFV
MVM BLANK,BLANKV
MVM BELL,BELLV
MVM QUOTE,QUOTEV
MVM SKIP,SKIPV
MVM CONTENTS,CCONTE,COMPUT
0

;THE ENTRIES IN THIS TABLE NEED NOT BE IN ORDER OF DECREASING
;PROBABILITY OF OCCURANCE BECAUSE IT IS SEARCHED ONLY AT COMPILE
;TIME.  AT EXECUTE TIME THE ENTRIES ARE REFERENCED ONLY BY NUMBER.
;THE ABOVE STATEMENT IS FALSE

CMPT:
MNTA:	MPM ABBREVIATE,ABBREVIATE,0
ABREVL:	MPM ABBREVIATION,SPECWD,0
ABRVSL:	MPM ABBREVIATIONS,SPECWD,0
ALLL:	MPM ALL,SPECWD,0
ANDL:	MPM AND,SPECWD,0
ASL:	MPM AS,SPECWD,0
FOR TENEX,<	MPM ASK,ASK,1 >   ;DEMAND IN TIME
	PAIR ABB,ABBREVIATION
	PAIR ABBS,ABBREVIATIONS
	PAIR ABT,ABBREVIATE
	0
MNTB:
FOR TURTLE,<	MPM BACK,BACK,0	>
FOR MITTUR,<	MPM BACK,BACK,1	>
	MPM BOTH,BOTH,2
	MPM BUTFIRST,BUTFIRST,1
	MPM BUTLAST,BUTLAST,1
	PAIR B,BOTH
	PAIR BF,BUTFIRST
	PAIR BL,BUTLAST
FOR MITTUR,<PAIR BK,BACK>
	0
MNTC:
FOR SAVBRK,<	MPM CANCEL,CANCEL,0 >
CLOCKL:	MPM CLOCK,CLOCK,0
CONTNL:	MPM CONTENTS,SPECWD,0
	MPM COUNT,COUNT,1
	PAIR C,COUNT
	0
MNTD:	MPM DATE,DATE,0
	MPM DDT,CALDDT,0
	MPM DIFFERENCE,DIFF,2
	MPM DIVISION,DIVISION,2
	MPM DO,CALLDO,1
	PAIR DIFF,DIFFERENCE
	PAIR DIV,DIVISION
	0

MNTE:	MPM EDIT,EDIT,0
	MPM EITHER,EITHER,2
ELSEL:	MPM ELSE,SPECWD,0
	MPM EMPTYP,EMPTYP,1
	MPM END,ENND,0
ENTRYL:	MPM ENTRY,SPECWD,0
	MPM ERASE,ERASE,0
	MPM EXIT,EXIT,1	;THIS COMMAND IS USEFUL INSIDE HOARDED PROCEDURES
	PAIR EDL,EDIT LINE
	PAIR EDT,EDIT TITLE
FOR NFILE,<XWD 400000,[ASCIZ /EE/]
	EXP [ASCIZ /ERASE ENTRY/] > ;CAN'T USE  PAIR
	PAIR EI,EITHER
	PAIR EP,EMPTYP
	PAIR ER,ERASE
	PAIR ERL,ERASE LINE
	0
MNTF:
FALSEL:	MPM FALSE,SPECWD,0
FOR NFILE,<FILEL:	MPM FILE,SPECWD,0 >
	MPM FIRST,FIRST,1
FOR MITTUR,< MPM FORWARD,FORWARD,1>
FOR TURTLE,<	MPM FRONT,FRONT,0 >
	PAIR F,FIRST
FOR MITTUR,<PAIR FD,FORWARD>
	0
MNTG:	MPM GET,GET,0
	MPM GO,GOTO,0
	MPM GOODBYE,GOODBYE,0
	MPM GREATERP,GRATRP,2
	PAIR GB,GOODBYE
	PAIR GP,GREATERP
	PAIR GTL,GO TO LINE
	0
MNTH:
FOR TURTLE,<	MPM HORN,HORN,0 >
	0
MNTI:	MPM IF,IF,0
	MPM IGNORE,IGNORE,1	;A COMMAND WHICH IGNORES ITS INPUT
	MPM IS,IS,2
	MPM IFTRUE,IFTRUE,0
	MPM IFFALSE,IFFALSE,0
	PAIR IFF,IFFALSE
	PAIR IFT,IFTRUE
MNTJ:
MNTK:	0
MNTL:	MPM LAST,LAST,1
FOR MITTUR,<MPM LEFT,LEFT,1>
FOR TURTLE,<LEFTL:	MPM LEFT,LEFT,0
	PAIR LT,LEFT >
	MPM LESSP,LESSP,2
LINELL:	MPM LINE,SPECWD,0
	MPM LINES,LINES,1
	MPM LIST,LIST,0
	MPM LOCAL,LOCAL,1
	PAIR L,LAST
	PAIR LC,LIST CONTENTS
	PAIR LE,LIST ENTRY
	PAIR LL,LIST LINE
	PAIR LP,LESSP
	0
MNTM:	MPM MAKE,MAKE,2,200000	;SPECIAL TO COMPIL
	MPM MAXIMUM,MAXIM,2
	MPM MINIMUM,MINIM,2
	PAIR MAX,MAXIMUM
	PAIR MIN,MINIMUM
	0

MNTN:
NAMESL:	MPM NAMES,SPECWD,0
	MPM NOT,NOT,1
	MPM NUMBERP,NUMBRP,1
	PAIR NP,NUMBERP
	0
MNTO:
OFL:	MPM OF,SPECWD,0
	MPM OUTPUT,OUTPUT,1
	PAIR OP,OUTPUT
	0
MNTP:	FOR MITTUR,<	MPM PENDOWN,PENDOWN,0
	MPM PENUP,PENUP,0>
	MPM PRINT,PRINT,1
PROCDL:	MPM PROCEDURES,SPECWD,0
	MPM PRODUCT,PRODUCT,2
FOR MITTUR,<PAIR PU,PENUP
	PAIR PD,PENDOWN>
	PAIR P,PRINT
	PAIR PROD,PRODUCT
	PAIR PRS,PROCEDURES
	0
MNTQ:	MPM QUOTIENT,QUOTIENT,2
	PAIR QUO,QUOTIENT
	0
MNTR:	MPM RANDOM,RANDOM,0
	MPM REMAINDER,REMAINDER,2
	PAIR REM,REMAINDER
	MPM REQUEST,REQUEST,0
	MPM RESET,RESETC,0
FOR TURTLE,<RIGHTL:	MPM RIGHT,RIGHT,0 >
FOR MITTUR,<MPM RIGHT,RIGHT,1
	PAIR RT,RIGHT>
	PAIR RQ,REQUEST
	0
MNTS:
SAVEL:	MPM SAVE,SAVE,0
	MPM SENTENCE,SENTENCE,2
	MPM SENTENCEP,SENTP,1
	MPM STOP,ESTOP,0
	MPM SUM,SUM,2
	PAIR S,SENTENCE
	PAIR SP,SENTENCEP
	0

MNTT:	MPM TEST,TEST,1
	MPM TEXT,TEXT,2
THENL:	MPM THEN,SPECWD,0
	MPM THING,THING,1
	MPM TIME,TIME,0
TITLEL:	MPM TITLE,TITLE,0
TOL:	MPM TO,TO,0
FOR MITTUR,< MPM TOOTB,TOOTB,1
MPM TOOTL,TOOTL,1
MPM TOOTH,TOOTH,1>
FOR TURTLE,<	MPM TOUCH,TOUCH,0 >
TRACEL:	MPM TRACE,TRACE,0
TRACSL:	MPM TRACES,SPECWD,0
TRUEL:	MPM TRUE,SPECWD,0
	MPM TYPE,TYPE,1
	PAIR T,TEST
MNTU:
MNTV:	0
MNTW:	MPM WAIT,WAIT,1
	MPM WORD,WORD,2
	MPM WORDP,WORDP,1
	PAIR W,WORD
	PAIR WP,WORDP
MNTX:
MNTY:	0
MNTZ:	MPM ZEROP,ZEROP,1
	PAIR ZP,ZEROP
	0		;ALL TABLE SEARCHES TERMINATE ON A 0
LPREN:	XWD WORDF,[ASCIZ \(\]
	XWD -1,[ERROR .]	;THESE ARE HERE FOR EASE IN
RPREN:	XWD WORDF,[ASCIZ \)\]
	XWD -1,[ERROR .]		; LISTING AND EDITING
INMNSL:	XWD WORDF,[ASCIZ \-\]
	XWD 1,DIFF
PRMNSL:	XWD WORDF,[ASCIZ \-\]
	XWD 0,MINUS
INPLSL:	XWD WORDF,[ASCIZ \+\]
	XWD 1,SUM
PRPLSL:	XWD WORDF,[ASCIZ \+\]
	XWD 0,CPOPJ
INTMSL:	XWD WORDF,[ASCIZ \*\]
	XWD 1,PRODUCT
INDIVL:	XWD WORDF,[ASCIZ \/\]
	XWD 1,QUOTIE
INEQL:	XWD WORDF,[ASCIZ \=\]
	XWD 1,IS
INGRTL:	XWD WORDF,[ASCIZ \>\]
	XWD 1,GRATRP
INLSTL:	XWD WORDF,[ASCIZ \<\]
	XWD 1,LESSP
INCNKL:	XWD WORDF,[ASCIZ \&\]
	XWD 1,CONC
IMAKEL:	XWD WORDF,[ASCIZ \_\]
	XWD 1,IMAKE

DEFINE LETTAB (LET)
<IRPC LET
<MNT'LET>>

MNPT:
LETTAB ABCDEFGHIJKLMNOPQRSTUVWXYZ

PRINTX PART F

;LOGO SYSTEM STUFF - LISTING, EDITING, AND ERASING

LIST:
	TRZ	F,EABBRF!ECONTF!EENTRF!ENAMEF
	PUSH	P,[EXP LISTXT]	;SO ALL SUBRS CALLED MAY EXIT WITH POPJ
	AOS	A,CPP
	MOVE	A,@CSA	;WHAT TO LIST
	TLNE	A,UPRF	;IS IT A USER PROCEDURE NAME?
	JRST	LISTPR	;YES, GO LIST IT
	TLZN	A,MPF
	ERROR	WHATER
	CAIN	A,ALLL+1
	JRST	LALL
	CAIN	A,CONTNL+1	;IS IT "CONTENTS"?
	JRST	LISTCT	;GO LIST CONTENTS
	CAIN	A,TITLEL+1	;IS IT "TITLE"?
	JRST 	LISTTL
	CAIN	A,LINELL+1	;IS IT "LINE"?
	JRST	LISTLN
	CAIN	A,ENTRYL+1
	JRST	LISTEN
	CAIN	A,NAMESL+1
	JRST	LSTFNM
	CAIN	A,ABRVSL+1
	JRST	LSTFAB
FOR NFILE,<CAIN A,FILEL+1
	JRST	LFILE >
	ERROR	WHATER		;YOU CAN'T LIST THAT.

LALL:	PUSHJ	P,GNE
	JRST	LALLJ
	TLZN	A,MPF		;IS ARG A MACHINE NAME?
	ERROR	LSTER2		;NO, ALL THE REST MUST BE WELL KNOWN NAMES
	CAIN	A,PROCDL+1	;ALL PROCEDURES?
	JRST	LISTAP	;YUP
	CAIN	A,NAMESL+1	;ALL NAMES?
	JRST	LISTAN	;YUP
	CAIN	A,ABRVSL+1	;ALL ABBREVIATIONS?
	JRST	LISTAA
	ERROR	LSTER2	;LIST ALL WHAT?

LALLJ:	PUSHJ	P,LISTAP
	PUSHJ	P,LISTAN
	PUSHJ	P,LISTAA
	SOS	CPP
	POPJ	P,


;LIST CONTENTS AND LIST ALL PROCEDURES

LISTCT:	PUSHJ	P,GNE	;IS IT LC FROM AN ENTRY?
	 JRST	LSTCT0
	SOS	CPP
	TRO	F,ECONTF
	TRZ F,ENAMEF!EABBRF!EENTRF
	JRST	LISTFL
LSTCT0:	MOVEI	A,LISTTO
	SOSA	CPP
LISTAP:	MOVEI	A,LISTPR
	PUSH	P,A
	PUSHJ	P,CRLF
	MOVEI	A,0	;FOR LOOP OVER ALL PROCEDURES
LSTCT1:	SKIPN	@RPA	;END OF PROCEDURE NAME LIST?
	JRST	APOPJ
	MOVEI	A,1(A)	;MAKE A LOOK LIKE UPROD COMPILE PTR
	MOVNI	B,1
	CAMN	B,@RPA
	AOJA	A,LSTCT1
	PUSH	P,A	;SAVE IT
	PUSHJ	P,@-1(P)	;CALL THE RIGHT ROUTINE
	JFCL		;DON'T CARE IF IT WASN'T DEFINED
	POP	P,A	;REMEMBER WHERE WE WERE IN LIST
	AOJA	A,LSTCT1	;GO GET NEXT PROD NAME


LISTTO:	MOVE	M,@RPA	;GET POINTER TO PROCEDURE DIRECTORY
	CAMN	M,[EXP -1]	;IS THIS PROCED DEFINED?
	POPJ	P,	;NO, R1 EXIT IMMEDIATELY
	MOVEI	A,-1(A)
	AOS	0(P)
	SKIPL	A,@RPA		;IS THS PR TRACED?
	JRST	LSTLN1		;NO
	TLNE	F,SAVEF		;DOING A SAVE?
	JRST	.+4

	MOVEI	B,[ASCIZ /(TRACED) /]
	PUSHJ	P,TOSS		;TYPE "(TRACED) " IF IT IS
	JRST	LSTLN1

	MOVEI	B,[ASCIZ /TRACE /]
	PUSHJ	P,TOSS		;FOR A SAVE, TYPE "TRACE PRNAME"
	MOVEI	B,(A)
	PUSHJ	P,TOSW
	PUSHJ	P,CRLF
	JRST	LSTLN1



LISTTL:	MOVE	A,TOPROD	;LIST TITLE
	JUMPE	A,[ERROR NOPERR]	;MUST HAVE A PROCEDURE OPEN
	PUSHJ	P,LISTTO	;LIST IT
	ERROR	IOPERR	;BIG TROUBLE
	POPJ	P,

;LIST A PROCEDURE

LISTPR:	PUSHJ	P,CRLF	;ONE EXTRA IN FRONT
	PUSH	P,A	;SAVE WHICH PROCEDURE
	PUSHJ	P,LISTTO	;DO THE "TO" LINE
	 ERROR	EVER3	;X NEEDS A MEANING
	MOVEI	M,1(M)
	PUSHJ	P,LSTPLN	;DO CURRENT LINE
	AOJA	M,.-1	;DO NEXT LINE
	POP	P,A
	HRRZI	A,(A)
	CAMN	A,TOPROD	;SHOULD WE TYPE "END"? TESTING RH ONLY
	TLNE	F,SAVEF
	SKIPA
	POPJ	P,		;NO, PROCEDURE IS STILL OPEN
	MOVEI	B,[ASCIZ /END/]
	PUSHJ	P,TOSS
	JRST	CRLF


LISTLN:	PUSHJ	P,SNMEVL
	MOVEI	M,(A)	;SRCHLN USES A, LSTPLN USES M
	PUSHJ	P,LSTPLN
	POPJ	P,
	ERROR	IOPERR


SNMEVL:	SKIPN	TOPROD
	ERROR	NOPERR		;MUST HAVE A PROCEDURE OPEN
	PUSHJ	P,NUMEVL
	MOVE	A,TOPROD
	JSP	C,SRCHL1	;IS IT A LINE NO OF THE CURRENT PROCEDURE?
	 CAIE	B,(M)
	 ERROR	GOERR3
	POPJ	P,

SAVAA:	SKIPA	A,[EXP SAVAAR]
LISTAA:	MOVEI	A,LSTAAR
	PUSH	P,A	;SAVE NAME OF ROUTINE TO CALL
	MOVEI	A,2
	MOVEM	A,BCHAR
	PUSHJ	P,CRLF
	MOVE	G,UA	;POINT AT FIRST ABBREV NAME
LSTAAL:	SKIPN	A,(G)	;ANY MORE ABBREVIATIONS?
	JRST	APOPJ	;NO
	MOVNI	C,1
	CAME	C,1(G)	;IS THIS ONE DEFINED?
	PUSHJ	P,@(P)	;YES, OUTPUT IT
	ADDI	G,2
	JRST	LSTAAL

LSTAAR:	MOVEI	E,":"
	TRO	F,SUFFIX
	PUSHJ	P,PTOSS		;TYPE NAME:
	PUSHJ	P,PTAB
	MOVE	A,1(G)
	PUSHJ	P,PTOSS	;TYPE VALUE
	PUSHJ	P,CRLF	;LINE
	POPJ	P,

;LIST ONE LINE OF A PROCEDURE

LSTPLN:	HRRZ	A,@PSM	;GET LINE NO, M SET UP BY LISTTO
	JUMPE	A,CPOPJ1	;NO MORE LINES, GIVE R2
	PUSHJ	P,DECPRT	;TYPE LINE NO., MAX OF 5 CHARS
LSTLN1:	MOVEI	A,1	;ENTER HERE FOR LIST TITLE, DON'T TYPE LINE NO
	ADD	A,CHARNO
	MOVEM	A,BCHAR
	MOVEI	M,1(M)	;POINT AT PTR TO COMPILED CODE
	HRRZ	D,@PSM	;GET PTR TO COMPILED LINE
	TRZ F,NOLSPF
LSTPLL:	MOVE	A,@CSD	;GET NEXT ELEMENT OF THE LINE
	JFFO	A,.+3	;WHAT KIND OF ELEMENT?
	PUSHJ	P,CRLF	;EOL, TYPE CR
	POPJ	P,		;DONE WITH THIS LINE, GIVE R1
	PUSH	P,D	;REMEMBER WHERE WE ARE IN THE LINE
	SKIPE	CHARNO		;SO "TO" WON'T BE " TO"
	TRZE F,NOLSPF
	JRST @LSTDSP(B)
	TLNN A,INFF!RPARF
	PUSHJ	P,PSPACE	;SPACE BEFORE EACH ELEMENT
	JRST	@.+1(B)	;DISPATCH ON TYPE
LSTDSP:	EXP LSTPMP,LSTPUP,LSTPV,LSTPL,LSTPCM,LSTPIN,LSTPMP,LSTPIN

LSTPMP:	CAME A,[XWD MPF,PRMNSL+1]
	CAMN A,[XWD MPF,PRPLSL+1]
LSTPIN:	TRO F,NOLSPF
	MOVE	A,-1(A)	;MACHINE PROCEDURE, GET PTR TO NAME
	HRLI	A,440700	;MAKE TEXT PTR
LSTPM1:	PUSHJ	P,PWORD	;TYPE ELEMENT
LSTPM2:	POP	P,D
	AOJA	D,LSTPLL	;GO BACK FOR NEXT ELEMENT ON THE LINE

LSTPUP:	MOVEI	A,-1(A)	;USER PROCEDURE, POINT AT NAME PTR
	MOVE	A,@RPA	;GET PTR TO NAME
	HRLI	A,010700+W	;MAKE TEXT PTR
	JRST	LSTPM1

LSTPV:	MOVEI	E,":"	;VARIABLE, AFFIX "/" MARKS
	TRO F,PREFIX
	TLNN A,SENTF
	JRST LSTPL1
	MOVEI E,";"
	TRO F,SUFFIX
	JRST LSTPL1
LSTPL:	MOVEI	E,042	;LITERAL, AFFIX QUOTES
	PUSH P,A
	PUSHJ P,NUMBRQ
	TRO	F,PREFIX!SUFFIX
	POP P,A
LSTPL1:	PUSHJ	P,PTOSS
	JRST	LSTPM2

LSTPCM:	MOVEI	E,"!"	;COMMENT, PREFIX SEMICOLON
	TRO	F,PREFIX!SUFFIX
	JRST	LSTPL1


;LIST ALL NAMES

LISTAN:	MOVEI	A,2
	MOVEM	A,BCHAR
	PUSHJ	P,CRLF

	MOVE	A,DP	;DUMMIES FIRST
	ADD	A,DTOP	;FROM NEWEST FIRST
	SUBI	A,2
	SKIPN	(A)
	JRST	LSTANG
	PUSHJ	P,LSTANR	;EVEN ONES WITH EMPTY VALUES
	JRST	.-4

LSTANG:	SKIPA	A,[EXP LSTANR]	;LISTING DOES ALL
SAVAN:	MOVEI	A,SAVANR	;SAVE ONLY SAVES GLOBALS
	PUSH	P,A	;SAV ROUTINE TO CALL
	PUSHJ	P,CRLF
	MOVE	A,VP
LSTANH:	SKIPN	(A)	;ANY MORE?
	JRST	APOPJ	;NO, DONE
	MOVEI	C,-1	;RH=0_EMPTY
	TDNE	C,1(A)	;IS VALUE EMPTY?
	PUSHJ	P,@(P)	;NO, LIST THIS ONE
	ADDI	A,2
	JRST	LSTANH	;TRY NEXT ONE

LSTANR:	PUSH	P,A	;TYPE ANY KIND OF VALUE
	MOVEI	E,":"	;SLASH THE NAME
	TRO	F,PREFIX
	MOVE	A,(A)	;FETCH THE NAME
	TLNN A,SENTF
	JRST .+3
	MOVEI  E,";"
	TRO F,SUFFIX
	PUSHJ	P,PTOSS
	MOVEI	A,[ASCIZ / IS /]
	PUSHJ	P,PTOSSM
	MOVEI	E,042	;QUOTE THE VALUE

LSTNR1:	MOVE	A,(P)
	TRO	F,PREFIX!SUFFIX
	MOVE	A,1(A)	;GET THE VALUE
	PUSHJ	P,PTOSS
	PUSHJ	P,CRLF
APOPJ:	POP	P,A
	POPJ	P,

;LIST X ENTRY NAME WHERE X CAN BE CONTENTS,NAMES,ABBREVIATIONS,ENTRY

LSTFNM:	TRO F,ENAMEF
	JRST LISTFL
LSTFAB:	TROA F,EABBRF
LISTEN:	TRO F,EENTRF

LISTFL:	TRZ	F,TF
FOR NFILE,<POP	P,A	;THE RETURN TO LISTXT
	JSP	H,FILEGO
	 ERROR	NOFILE
	PUSHJ	P,SEARCH
	 ERROR	NOENTRY
	MOVEI	D,4(G)
	MOVE	C,@E	;==	READ	@E,1
	MOVEI	E,1
	PUSHJ	P,.READ
	PUSHJ	P,READC
	CAIE	C,176	;SKIP OVER COPY OF NAME
	JRST	.-2
	MOVE	A,[PUSHJ P,READC]
	MOVEM	A,CHIN >

FOR OFILE,<PUSHJ	P,GENFLN
	MOVEI	A,LEOFIL	;WHERE TO GO ON EOF
	PUSHJ	P,OPENR >	;OPEN THE FILE FOR READING

LNLINE:	PUSHJ	P,TIS	;READ A LINE
	 ERROR		;SHOULD HAVE GOTTEN AN EOF INTERRUPT
	POP	S,A
	TRNE	F,EENTRF
	 JRST	LISTIT	;IF LIST ENTRY, LIST EVERY LINE
	PUSHJ	P,NEWSTR
	PUSHJ	P,NEWSR0
	PUSHJ	P,COPYWD
	 JRST	MBLIST	;NOTHING ON LINE, MAYBE TYPE CRLF
	POP	S,B
	MOVE	A,SRCBOT
	TRZE	F,STORED
	 JRST	LNLINE	;STORED LINES ONLY GET LISTED ON LIST ENTRY
	ADDI	B,1
	MOVE	C,@B	;FIRST WORD OF FIRST SYMBOL
	CAMN	C,[ASCIZ /TO/]
	TRNN	F,ECONTF
	SKIPA
	JRST	LISTIT	;TO LINE AND LIST CONTENETS
	CAMN	C,[ASCIZ /MAKE/]
	TRNN	F,ENAMEF
	SKIPA
	JRST	LISTIT	;NAME AND LIST NAMES
	CAME	C,[ASCII /ABBRE/]
	JRST	LNLINE	;NOT ABBREVIATE, SO NOTA
	ADDI	B,1
	MOVE	C,@B
	CAME	C,[ASCII /VIATE/]
	JRST	LNLINE	;AGAIN NOT ABBREVIATE
	ADDI	B,1
	SKIPN	@B
	TRNN	F,EABBRF
	JRST	LNLINE	;AND AGAIN
LISTIT:	PUSHJ	P,PTOSS	;LIST THE CURRENT LINE
	TROA	F,TF	;DENOTE THAT A LINE WAS TYPED SINCE LAST MBLIST

MBLIST:	TRZE	F,TF
	PUSHJ	P,CRLF
	JRST	LNLINE


COPYWD:	ILDB	C,A
	JUMPE	C,CPOPJ
	CAIE	C,024		;^T IS ALSO A TERMINATOR
	CAIN	C," "
	JRST	COPYW1
	IDPB	C,B
	JRST	COPYWD
COPYW1:	AOS	(P)
	JRST	ENDSTR

FOR OFILE,<FOR TENEX,<
LEOFIL:	CLOSF		;COME HERE ON EOF FOR LIST
	 ERROR
	POP	P,A
	POP	P,A
	POP	P,A	;RETURN FROM TYI
	POP	P,A	;RETURN FROM TIS
	POP	P,INFILE
	POP	P,LEVLTB+1	;TO FINISH LIST LINE
	MOVEI	A,100
	CAMN	A,INFILE
	TLZ	F,GETF
	DEBRK
>>


EDIT:	PUSHJ	P,GNE
	 ERROR	EDTER1
	TLNE	A,UPRF	;IS THAT WHAT A USER PROCEDURE?
	JRST	EDITPR	;YES
	CAMN	A,[XWD MPF,LINELL+1]	;IS THAT WHAT "LINE"?
	JRST	EDITLN	;YES
	CAMN	A,[XWD MPF,TITLEL+1]	;IS IT "TITLE"?
	JRST	EDITTL	;YES
	ERROR	EDTER1	;YOU CANNOT EDIT THAT

EDITPR:	SKIPE	TOPROD	;IS THERE A PROCEDURE OPEN?
	ERROR	EDTER2	;YES, YOU ARE ALREADY EDITING X
	MOVNI	B,1
	CAMN	B,@RPA		;IS THE PROCEDURE DEFINED?
	ERROR	EVER3		;CAN EDIT DEFINED PROCEDURES ONLY
	HRRZM	A,TOPROD	;THE PROCEDURE IS NOW OPEN
	PUSHJ	P,MOVEPR	;MAKE IT LAST
	SOS	PTOP		;PROCEDURE NO LONGER CLOSED
	JRST	COMEX

EDITLN:	PUSHJ	P,SNMEVL
	PUSHJ	P,LINGEN	;GENERATE THE TEXT OF THAT LINE FOR TIS

EDTLN1:	JSP	D,COMEXR	;DO END OF LINE CHECKING
	TLO	F,EDITF	;WE ARE NOW EDITING
	POPJ	P,


EDITTL:	SKIPN	M,TOPROD	;CURRENTLY IN A PROCEDURE?
	 ERROR	NOPERR
	PUSHJ	P,NEWSTR

	MOVEI	D,TITLEL+1	;"TITLE"
	PUSHJ	P,LNGMP		;COPY MACHINE PROCEDURE NAME
	MOVEI	A,(M)
	MOVE	D,@RPA
	MOVEI	D,1(D)
	MOVE	M,@PSD
	PUSHJ	P,LINGE0
	JRST	EDTLN1

DSPACE:	MOVEI	C," "
	IDPB	C,B
	POPJ	P,


LINGEN:	MOVEI	D,1(A)	;POINTER TO POINTER TO COMPILED CODE FOR LINE
	PUSHJ	P,SNM	;IS THE FIRST WORD OF THE GENERATED LINE
	MOVE	M,@PSD
LINGE0:	MOVE	D,@CSM	;GET NEXT ELEMENT
	JFFO	D,LINGE1	;DIPATCH ON TYPE
	JRST	ENDSTR		;WHICH WILL EXIT FROM LINGEN WITH POPJ

LINGE1:	TRO	F,NWF	;TEXT OF IS A SENTENCE
	MOVEI	C," "
	IDPB	C,B	;BEFORE ALL BUT FIRST ELEMENT PUT A SPACE
	PUSHJ	P,@.+2(E)
	AOJA	M,LINGE0	;BACK FOR NEXT ELEMENT
	EXP	LNGMP,LNGUP,LNGV,LNGL,LNGCMT,LNGMP,LNGMP,LNGMP

LNGMP:	MOVE	A,-1(D)	;FETCH POINTER TO TEXT NAME OF PROCEDURE
	HRLI	A,440700
LNGALL:	MOVEM	A,SRCBOT
	TRZE	F,PREFIX
	IDPB	E,B	;AFFIX PREFIX IF THERE IS ONE
	ILDB	C,A		;COPY THE WHOLE ELEMENT
	JUMPE	C,LNGALE	;DONE IF EOM
	IDPB	C,B
	JRST	.-3	;NEXT CHAR
LNGALE:	TRZE	F,SUFFIX
	IDPB	E,B	;AFFIX SUFFIX IF ONE TOO
	POPJ P,	;DONE WITH THIS ELEMENT

LNGUP:	MOVEI	A,-1(D)
	MOVE	A,@RPA	;GET NAME OUT OF TABLE
LNGUP1:	HRLI	A,010700+W	;IT IS A WORKSPACE ELEMENT
	JRST	LNGALL

LNGV:	MOVEI	E,":"
	TRO F,PREFIX
	TLNN D,SENTF
	JRST LNGL1
	MOVEI E,";"
	TRO F,SUFFIX
	JRST LNGL1
LNGL:	MOVEI	E,042	;LITERAL, AFFIX QUOTES
	TRO	F,PREFIX!SUFFIX
LNGL1:	MOVEI	A,(D)
	JRST	LNGUP1

LNGCMT:	MOVEI	E,"!"	;COMMENT PRECEDED BY SEMICOLON
	TRO	F,PREFIX!SUFFIX	;ALSO FOLLOWED IN CASE IMBEDDED IN LINE
	JRST	LNGL1

ERASE:	PUSH	P,[EXP ERASXT]
	AOS	A,CPP
	MOVE	A,@CSA	;ERASE WHAT?
	TLNE	A,UPRF	;IS IT A UPROD
	JRST	ERASPR	;YES, ERASE ONE PROCEDURE
	TLZN	A,MPF	;ALL OTHER PARAMETERS MUST BE MACHINE NAMES
	 ERROR	WHATER
	CAIN	A,LINELL+1	;IS IT "LINE"
	JRST	ERASLN	;YES, ERASE LINE
	CAIN	A,ALLL+1	;IS IT ALL?
	JRST	ERSALL
	CAIN	A,ABREVL+1
	JRST	ERSABB
	CAIN	A,TRACEL+1
	JRST	ERASTR	;ERASE TRACE
FOR NFILE,<CAIN A,ENTRYL+1
	JRST	ERASEN >
	ERROR	WHATER	;NONE OF THE ABOVE

ERASXT:	SQUEZE	;SEE IF WE CAN REDUCE THE STORAGE ALLOCATION
	JRST	COMEX


ERSALL:	PUSHJ	P,GNE	;ALL WHAT?
	 JRST	ERASAL	;ALL PERIOD
	TLZN	A,MPF	;MUST BE A MACHINE NAME
	 ERROR	WHATER
	CAIN	A,NAMESL+1	;IS IT "NAMES"
	JRST	ERSALN
	CAIN	A,PROCDL+1	;IS IT "PROCEDURES"
	JRST	ERSALP
	CAIN	A,ABRVSL+1
	JRST	ERSALA	;ALL ABBREVIATIONS
	CAIN	A,TRACSL+1	;"TRACES"?
	JRST	ERSALT
	ERROR	WHATER

ERASAL:
FOR TEN50,<
	HLRZ	A,JOBSA	;GET FIRST FREE LOC
	ADDI	A,1777	;ONE MORE K
	CALL	A,[SIXBIT /CORE/]
	ERROR	IOPERR	>
FOR TENEX,<
	MOVEI	A,20000
	JSP	E,SETMEM	>
	MOVEI	F,TF	;DON'T TYPE STARTUP MESSAGE AGAIN
	JRST	LOGO+2	;OR DO THE RESET (WHICH CLOSES DRIBBLE FILE)

ERSALA:	SETZM	@UA
	POPJ	P,
ERSALN:	SETZM	@VP	;ALL NAMES, FLUSH GLOBALS
	POPJ	P,
ERSALP:	SETZM	@RP	;FLUSH ALL PROCEDURE NAMES
	SETZM	PTOP	;FLUSH ALL PROCEDURE DIRECTORIES
	MOVEI	A,1
	MOVEM	A,CTOP	;FLUSH ALL COMPILED CODE
	MOVEI	A,2
	MOVEM	A,DTOP	;FLUSH ALL DUMMY ARGS
	SETZM	BSP	;CLEAR ALL SAVED BREAKS
	SETZM	GODEPT
	TRO F,TF
	JRST	RESET


ERSABB:	AOS	A,CPP
	PUSHJ	P,EVAL
	MOVE	A,(S)
	MOVE	B,UA
	PUSHJ	P,LOOKUP
	 JRST	ERSAB1		;NOT A USER ABBREVIATION
	SKIPE	1(N)
	SETOM	1(N)
	POP	S,A
NOSQZE:	POP	P,A
	JRST	COMEX

ERSAB1:	MOVE	A,(S)
	HRLZI	B,010700+W
	HRRI	B,(A)
	ILDB	C,B		;FIRST LETTER OF OPERAND
	MOVE	B,MNPT-"A"(C)	;USE THE APPROPRIATE TABLE
	PUSHJ	P,SYSLUK
	 ERROR	WHATER
	SKIPL	(N)		;IS IT AN ABBREV. RATHER THAN PR NAME
	 ERROR	WHATER		;PR NAME
	PUSH	S,(S)
	SETZM	-1(S)
	POP	P,A
	JRST	ABBRV0


ERASTR:	PUSHJ	P,GNE	;ERASE TRACE ON WHAT PROCEDURE?
	 ERROR	WHATER
	TLNN	A,UPRF	;ONLY USER DEFINED PROCEDURES ARE TRACED
	 ERROR	WHATER
	MOVEI	A,-1(A)
	HRLZI	B,TRACEF
	ANDCAM	B,@RPA	;CLEAR THE APPROPRIATE BIT
	JRST	NOSQZE

ERSALT:	MOVE	A,RP	;ERASE ALL TRACES
ERSLT1:	HRLZI	B,TRACEF
	ANDCAB	B,(A)	;CLEAR THE BIT
	MOVEI	A,2(A)	;POINT AT NEXT ENTRY
	JUMPN	B,ERSLT1	;NAME NON-ZERO IF NOT AT END OF TABLE
	JRST	NOSQZE

ERASLN:	PUSHJ	P,SNMEVL	;ERASE LINE, WHAT LINE?
ERSLN1:	MOVEI	A,1(A)	;POINT AT POINTER TO COMPILED CODE
	PUSHJ	P,GCCS	;FLUSH COMPILED CODE FOR LINE
	MOVEI	A,-1(A)
	MOVEI	C,@PSA
	MOVE	B,2(C)	;COPY ALL THE REST OF THE LINES BACK TWO
	MOVEM	B,(C)
	MOVEI	C,1(C)
	JUMPN	B,.-3	;TERMINATE ON ZERO LINE NUMBER

	MOVNI	B,2
	ADDM	B,PTOP
	POPJ	P,

ERASPR:	MOVEI	A,-1(A)	;CLEAR LH OF A
	HRLZI	B,TRACEF
	ANDCAM	B,@RPA	;ERASE THE TRACE ON IT IF ANY
	MOVEI	A,1(A)

	MOVNI	B,1	;ERASE PROCEDURE
	CAMN	B,@RPA	;IS THE PROCEDURE DEFINED?
	 POPJ	P,	;NO, QUIT EARLY
	SKIPE	TOPROD	;IS THERE A PROCEDURE OPEN?
	AOS	PTOP	;"CLOSE" IT TEMPORARILY
	CAMN	A,TOPROD	;IS IT THE PROCEDURE CURRENTLY BEING DEFINED
	SETZM	TOPROD	;YES, WHEN WE'RE DONE, NO PROCEDURE OPEN
	PUSH	P,TOPROD
	MOVEM	A,TOPROD
	PUSHJ	P,MOVEPR	;MAKE THIS ONE LAST TEMPORARILY
	MOVE	A,TOPROD
	MOVE	A,@RPA

	PUSHJ	P,ERSLN1	;ERASE ONE LINE
	SKIPE	@PSA		;ANY LEFT?
	JRST	.-2		;YES, ERASE ONE MORE

	MOVE	A,TOPROD
	MOVNI	B,1
	EXCH	B,@RPA	;MARK AS UNDEFINED AND FETCH PTR TO BEGINNING
	HRRM	B,PTOP	; OF THE STORAGE WE JUST FREED UP
	POP	P,TOPROD	;RESUME EDITING THE PROCEDURE THAT HAD BEEN
	SKIPE	TOPROD
	SOS	PTOP
	POPJ	P,

PRINTX PART G
FOR NFILE,<


;SYSTEM INDEPENDENT FILE CODE


DEFINE READ (BLOCK,BUFFER)
<	MOVE	C,BLOCK
	MOVEI	E,BUFFER
	PUSHJ	P,.READ >

DEFINE FORCE (BUFFER)
<	MOVEI	E,BUFFER
	PUSHJ	P,.FORCE >

FOR TENEX,<
DEFINE ALTERD (BUFFER,AC)
<>> ;THE SYSTEM TAKES CARE OF IT
FOR TEN50,<
DEFINE ALTERD (BUFFER,AC)
<	MOVE	AC,LBUF+BUFFER
	SETOM	CHANGE(AC) >>


;FILE PARAMETERS

FOR TENEX,<NLOGB==4
PBLKL==1000
PBKLP2==11>
FOR TEN50,<NLOGB==1
PBLKL==200
PBKLP2==7>
LBLKL==200
DRENL==12
NENTRY==<LBLKL-10>/DRENL
BUFBIT==1



;DIRECTORY FORMAT
;OVERHEAD BLOCK - 8 WORDS
;WORD  CONTENTS
; 0 - TOP OF BLOCK FREE LIST
; 1 - NUMBER OF ENTRIES IN THIS DIRECTORY BLOCK
; 2 - TOP OF ENTRY BLOCK LIST IN THIS DIRECTORY
; 3 - TOP OF ENTRY BLOCK FREE LIST
; 4 - LINK TO NEXT DIRECTORY BLOCK, OR 0
; 5 - PASSWORD NUMBER FOR THIS FILE
; 6 - NUMBER OF BLOCKS ON THE FREELIST
; 7 - LAST REWRITE NUMBER USED IN FILE
;ENTRY BLOCK - DRENL WORDS LONG
; 0 TO 3 - FIRST 20 CHARACTERS OF THE ENTRY NAME
; 4 - LINK TO FIRST TEXT BLOCK OF ENTRY
; 5 - TIME AND DATE SAVED
; 6 - TIME AND DATE GOTTEN
; 7 - LOCKED, HOARDED, AND SIZE OF FILE IN BLOCKS
; 8 - REWRITE NUMBER FOR THIS ENTRY
; 9 - POINTER TO NEXT ENTRY BLOCK , OR 0



GET:	JSP	H,FILEGO	;GENERATE FILE NAME, SAVEUP, AND OPEN
	 ERROR	NOFILE		;MAYBE FILE IN USE?
	PUSHJ	P,SEARCH	;LOOK FOR ENTRY
	 ERROR	NOENTRY		;NO SUCH ENTRY

	MOVE	A,TANDD		;TIME AND DATE OF PROGRAM STARTUP
	MOVEI	D,6(G)		;CURRENT ENTRY +6
	MOVEM	A,@E		;UPDATE D-G

	MOVEI	D,4(G)		;ENTRY+4, POINTER TO DATA BLOCK
	READ	@E,1		;READ THE FIRST DATA BLOCK INTO BUF1

	PUSHJ	P,READC		;SKIP OVER COPY OF THE ENTRY NAME
	CAIE	C,176
	JRST	.-2

	FORCE	0		;WRITE THE MODIFIED DIRECTORY
	MOVE	A,[PUSHJ P,READC]
	MOVEM	A,CHIN
	TLZ	F,STEPF		;FIRST LINE OF FILE MAY BE COMMENT
	PUSHJ	P,TIS
	 ERROR	IOPERR		;CANNOT GET A RUBOUT FROM THE FILE
	MOVE	A,(S)
	HRLI	A,010700+W
	ILDB	C,A
	CAIE	C,"!"		;IS THE FIRST LINE COMMENT?
	JRST	MAINL1		;NO, TREAT THE LINE NORMALLY
	POP	S,A
	PUSHJ	P,PTOSS		;TYPE THE COMMENT
	PUSHJ	P,CRLF
	JRST	MAINL		;PROCEED AS IF INPUT WERE FROM TERMINAL


ERASEN:	JSP	H,FILEGO
	 ERROR	NOFILE
	PUSHJ	P,SEARCH
	 ERROR	NOENTRY
	PUSHJ	P,ERENRO
	JSP	H,CLOSUP
	POP	P,A		;FLUSH THE RETURN TO ERASXT
	JRST	COMEX


SAVE:	JSP	H,FILEGO
	 JRST	SAVNEW		;NO FILE, MAKE ONE
	READ	[0],0		;READ BK 0 OF FILE, DIRECTORY INTO BUF0
	MOVE	A,@FPTR
	MOVEM	A,LABS		;FREE LIST IS FIRST WORD OF DIR

SAVE1:	TLO	F,SAVEF		;DENOTE SAVE IN PROGRESS
	MOVE	A,[PUSHJ P,WRITEC]
	MOVEM	A,CHOUT		;WHAT TO XCT WHEN OUTPUTTING CHARS

	MOVEI	A,1
	MOVEM	A,FILECT
	PUSHJ	P,WRITC2	;GET A NEW BLOCK
	MOVE	A,LBLOCK+1	;FIRST BLOCK OF FILE
	MOVEM	A,FILEAD
	MOVE	H,(S)		;COPY ENTRY NAME INTO FILE
	HRLI	H,010700+W
	ILDB	C,H
	XCT	CHOUT		;WRITE A CHAR INTO FILE
	JUMPN	C,.-2

	MOVEI	C,176
	DPB	C,FPTR		;OVERWRITE THE 0 EOM

	MOVE	A,CPP		;STORE COMMENT IN FILE IF ON SAVE LINE
	MOVEI	A,1(A)		;POINT AT NEXT ELEMENT
	SKIPE	A,@CSA		;IS IT NOT THERE?
	TLNN	A,COMMTF	;MAKE SURE IT IS A COMMENT
	JRST	SAVE2		;NOT A COMMENT
	MOVEI	C,"!"
	PUSHJ	P,TYO
	PUSHJ	P,PTOSS
	PUSHJ	P,CRLF

SAVE2:	PUSHJ	P,LISTAP
	PUSHJ	P,SAVAN
	PUSHJ	P,SAVAA

	SETZ	C,
	XCT	CHOUT		;INSERT AN END OF FILE
	TLZ	F,SAVEF
	MOVE	A,TERMIO+1	;TERMINAL OUTPUT INSTRUCTION
	MOVEM	A,CHOUT
	ALTERD	1,C

;MAKE DIRECTORY ENTRY

	MOVE	E,LBUF
	MOVE	E,BUFLOC(E)	;WHERE DIRECTORY IS
	SKIPE	3(E)
	JRST	SAVE4		;LIST OF AVAIL DIR ENTRIES NOT EMPTY

	PUSHJ	P,WRITC2	;NEED ANOTHER DIRECTORY BLOCK

	MOVE	E,LBUF
	MOVE	E,BUFLOC(E)	;DESTROYED E AGAIN
	HRLZI	B,(E)		;THE OLD DIRECTORY 0
	HRRZ	C,FPTR		;WHERE THE DATA IN IT WILL GO
	HRRI	B,(C)
	BLT	B,LBLKL-1(C)	;COPY THE FULL DIRECTORY 
	MOVE	B,LBLOCK+1
	MOVEM	B,4(E)		;CHAIN TO FULL DIRECTORY BLOCK
	ALTERD	1,D
	PUSHJ	P,CLRDIR

SAVE4:	MOVE	E,LBUF
	MOVE	E,BUFLOC(E)
	HRLI	E,D		;NOW FILL UP A DIRECTORY ENTRY
	MOVE	D,3(E)		;TOP OF LADES
	HRLI	D,-4		;NUMBER OF WORDS OF TEXT TO COPY MAX
	MOVEI	G,(D)		;EXTRA COPY OF PTR TO ENTRY

	MOVE	B,(S)
	MOVEI	B,1(B)		;FIRST TEXT WORD IN ENTRY NAME
	MOVE	C,@WSB
	MOVEM	C,@E
	TRNE	C,376		;END OF ENTRY NAME?
	AOBJN	D,.-4

	MOVEI	D,4(G)
	MOVE	C,FILEAD
	MOVEM	C,@E

	MOVEI	D,5(G)
	MOVE	C,TANDD
	MOVEM	C,@E

	MOVEI	D,6(G)
	SETOM	@E		;NEVER GOTTEN

	MOVEI	D,7(G)		;NO BLOCKS IN FILE
	MOVE	C,FILECT
	MOVEM	C,@E

	MOVEI	D,DRENL-1(G)
	EXCH	G,2(E)		;THIS BLOCK ONTO LUDES
	EXCH	G,@E		;OLD TOP OF LUDES INTO THIS BLOCK
	MOVEM	G,3(E)		;OLD LADES FP IN THIS BLOCK TO LADES

	AOS	1(E)		;A NEW ENTRY IS NOW COMPLETE
	ALTERD	0,C

	SETOM	LDIRNO		;SEARCH FOR ANOTHER ENTRY OF SAME NAME
	SETOM	LDIRL		;SET UP TO FALL INTO SEARCH
	MOVE	A,(S)
	ADDI	A,1(W)
	MOVE	G,2(E)		;LUDES
	PUSHJ	P,SERCH5	;ENTER AT CONTINUE WITH NEXT ENTRY
	 JRST	.+2		;NO OTHER ENTRY OF SAME NAME
	PUSHJ	P,ERENRO	;DELETE THAT OTHER ENTRY
	READ	[0],0
	MOVE	A,LBUF
	MOVE	B,LABS
	MOVEM	B,@BUFLOC(A)	;UPDATE LABS BEFORE CLOSING FILE
	ALTERD	0,C
	JSP	H,CLOSUP
	JRST	COMEX


SAVNEW:	JSP	H,OPENW		;WRITING ONLY
	 ERROR	IOPERR			;DISASTER
	SETOM	LABS
	PUSHJ	P,WRITC2	;READ A NEW BLOCK INTO BUFFER 1
	MOVE	A,LBUF+1
	MOVEM	A,LBUF		;AND SWITCH IT INTO BUFFER 0
	MOVE	A,LBLOCK+1
	MOVEM	A,LBLOCK
	PUSHJ	P,CLRDIR
FOR TEN50,<FORCE 0>
	JRST	SAVE1


READC:	SOSGE CCOUNT	;READ ONE CHAR
	JRST	READC1		;THIS BUFFER EMPTY
	ILDB	C,FPTR		;FETCH ONE
	JUMPN	C,CPOPJ		;END OF FILE?

REDEOF:	JSP	H,CLOSUP
	TLNN	F,GETF
	JRST	COMEX
	JRST	READC

READC1:	MOVNI	C,LBLKL-1
	ADD	C,FPTR
	SKIPN	C,@C		;FORWARD PTR IS IN FIRST WORD OF BLOCK
	JRST	REDEOF	;FILE BROKEN
	PUSH	P,A
	PUSH	P,B
	PUSH	P,D
	PUSH	P,E
	READ	C,1		;READ THE NEXT BLOCK
	POP	P,E
	POP	P,D
	POP	P,B
	POP	P,A
	JRST	READC		;POINTER AND COUNT SET UP BY READ




WRITC1:	PUSH	P,A
	PUSH	P,B
	PUSH	P,C		;SAVE THE CHARACTER
	PUSH	P,D
	PUSH	P,E
	AOS	FILECT		;ANOTHER BLOCK USED FOR FILE
	PUSHJ	P,WRITC2
WRTC1A:	POP	P,E
	POP	P,D
	POP	P,C
	POP	P,B
	POP	P,A
WRITEC:	SOSGE	CCOUNT
	JRST	WRITC1		;IF AT END OF BUFFER
	IDPB	C,FPTR		;WRITE OUT A CHARACTER
	POPJ	P,

WRITC2:	TRZ	F,TF		;WHETHER LABS=0
	SKIPLE	C,LABS		;END OF LABS?
	JRST	WRITC3		;NO
	TRO	F,TF		;GENERATING MORE SPACE


;NO MORE LABS,LABSND LENGTH OF FILE AND CALL THAT MORE LABS

FOR TENEX,<	MOVE	A,INFILE
	SIZEF			;HOW BIG IS THE FILE?
	 ERROR	IOPERR >
FOR TEN50,<MOVE	C,FILSIZ	;SET UP AT OPEN
	AOS	FILSIZ >
	IMULI	C,NLOGB		;# OF PAGES IN C, MULTIPLY BY FUDGE
	MOVEM	C,LABS		;REMEMBER FOR A WHILE
WRITC3:	MOVE	B,LBUF+1
	HRRZ	A,(P)	;WHO CALLED?
	CAIN	A,WRTC1A	;WAS IT FOR A NEW DATA BLOCK?
	MOVEM	C,@BUFLOC(B)	;YES, CHAIN NEW ONE TO LAST ONE
	TRNN	F,TF		;NEED TO LENGTHEN FILE?
	JRST	WRITC4		;NO


FOR TENEX,< READ C,1		;OLD ONE GETS WRITTEN IF CHANGED
	MOVE	A,LBUF+1 >	;AND THE NEW ONE GETS ASSOCIATED

FOR TEN50,< 	MOVE	A,LBUF
	XOR	A,LBUF+1
	MOVE	B,[BUFBIT]	;HACK!!, BUFBIT=1 AND WE ARE INTERESTED IN LBUF 1
	TDNN	B,A
	XORM	B,LBUF+1
	PUSHJ	P,WRITIF
	MOVE	C,LABS
	MOVEM	C,LBLOCK+1	;NOW ASSOCIATE NEW BLOCK WITH BUFFER
	MOVE	A,LBUF+1
	MOVEM	C,PBLOCK(A)	;AND PHYSICAL BUFFER
	MOVEI	C,5*<LBLKL-1>
	MOVEM	C,CCOUNT
	MOVE	B,BUFLOC(A)
	HRLZI	C,(B)
	HRRI	C,1(B)
	SETZM	(B)
	BLT	C,LBLKL-1(B)
	HRLI	B,010700
	MOVEM	B,FPTR >	;


	;WHICH PHYS BUFFER
	MOVE	B,FPTR
	HRLZI	A,-NLOGB	;SET UP THE LABS CHAIN IN THE BUFFER
	HRR	A,LABS		;LOG ADDR OF THE FIRST BLOCK IN BUFFER
	AOBJP	A,.+4

	HRRZM	A,(B)		;THE FORWARD POINTER
	ADDI	B,LBLKL		;WHERE THE NEXT ONE SHOULD GO
	AOBJN	A,.-2		;THE REST

	SETZM	(B)		;THE LAST ONE TERMINATES THE CHAIN
	JRST	WRITC6

WRITC4:	READ	C,1		;READ THIS ONE FOR ITS FORWARD PTR
WRITC6:	MOVE	C,@FPTR
	MOVEM	C,LABS
	SETZM	@FPTR		;THIS ONE NOW THE END OF THE DATA CHAIN
	ALTERD	1,C	;NOTE THAT THIS BLOCK CHANGED (SOON)
	POPJ	P,

;SEARCH FOR AN ENTRY
;ENTRY NAME AT 0(S)

SEARCH:	SETOM	LDIRNO
	SETOM	LDIRL		;NO OF ENTRIES IN LAST DIRECTORY BLOCK
	READ	[0],0		;READ BLOCK 0 INTO BUFFER 0
				;READ RETURNS WITH BUFF ADR IN E

SERCH1:	HRRZ	E,FPTR		;PHYSICAL ADDR OF DIR BLOCK TO E
	MOVE	A,(S)		;FETCH PTR TO ENTRY NAME
	ADDI	A,1(W)
	MOVE	G,2(E)		;TOP OF ENTRY CHAIN, THIS DIRECTORY
	HRLI	E,D

SERCH2:	MOVEI	B,(A)		;ANOTHER POINTER TO FIRST WORD OF STRING
	HRLZI	D,-4		;FOUR WORDS OF TEXT IN DIRECTORY
	HRRI	D,(G)		;WHERE THE ENTRY BLOCK STARTS
SERCH3:	MOVE	C,(B)		;A WORD OF THE ENTRY NAME
	CAME	C,@E		;SAME AS IN THE ENTRY BLOCK?
	JRST	SERCH5		;NO, TRY THE NEXT ENTRY BLOCK
	TRNN	C,376		;IS IT THE END OF THE NAME STRING?
	JRST	CPOPJ1		;YES, FOUND
	MOVEI	B,1(B)		;NEXT WORD IN STRING
	AOBJN	D,SERCH3	;NEXT WORD IN ENTRY BLOCK

	PUSH	P,A		;IN CASE .READ IS CALLED
	PUSH	P,E
	READ	@E,1		;READ FIRST DATA BLOCK INTO BUF 1

	HRLZI	H,440700	;COMPARE FULL NAME
	HRR	H,-1(P)
	PUSHJ	P,READC
	ILDB	B,H
	JUMPE	B,SERCH4	;END OF INPUT STRING
	CAIN	B,(C)
	JRST	.-4		;STILL SAME, TRY ANOTHER
	SETZ	C,		;SO THE NEXT TEST WILL LOSE

SERCH4:	POP	P,E
	POP	P,A
	CAIN	C,176		;DID THE ENTRY NAME ALSO END?
	JRST	CPOPJ1		;YES, R2

SERCH5:	MOVEI	D,DRENL-1(G)	;POINT AT DIREXTORY ENTRY CHAIN
	SKIPE	G,@E		;IS IT IN THIS DIRECTORY BLOCK
	JRST	SERCH2		;YES
	SKIPN	A,4(E)		;IS THERE ANOTHER DIRECTORY BLOCK
	POPJ	P,		;NO, DIDN'T FIND THE ENTRY
	MOVE	B,LBLOCK
	MOVEM	B,LDIRNO
	MOVE	B,1(E)		;NUMBER OF ENTRIES TDB
	MOVEM	B,LDIRL
	READ	A,0		;READ THE NEXT DIRECTORY BLOCK
	JRST	SERCH1		;YES, PROCESS IT

;ERASE ENTRY ROUTINE - USED BY ERASE ENTRY AND SAVE
;AFTER SEARCH E CONTAINS D,,BLOCKAD
; AND G CONTAINS OFFSET OF ENTRY INTO BLOCK

ERENRO:	MOVEI	D,4(G)		;POINTER TO ADDR OF FIRST DATA BLOCK
	MOVE	C,@E		;GET IT
	MOVEM	C,FILEAD	;AND SAVE IT FOR PUTTING ON LABS

	MOVEI	D,DRENL-1(G)	;POINT TO FORWARD CHAIN IN OBJECT
	MOVEI	C,(G)		;OFFSET OF OBJECT ENTRY
	EXCH	C,3(E)		;PUT IT ON TOP OF FREE CHAIN
	EXCH	C,@E		;AND TOP OF FREE CHAIN INTO IT
				;ENDING WITH REST OF USED LIST IN C
	SKIPA	D,[EXP 2]	;FIRST ENTRY IN THIS BLOCK
EREN1:	MOVEI	D,DRENL-1(A)	;POINT AT NEXT CHAIN ADDRESS
	MOVE	A,@E
	CAME	A,G		;DID THIS CELL POINT AT DELETED CELL
	JRST	EREN1		;NO

	MOVEM	C,@E		;RECHAIN LUDES
	ALTERD	0,D
	SOSG	A,1(E)		;DECREMENT NUMBER IN LUDES
	JRST	FLUSHTHISONE

	SKIPG	B,LDIRL		;PREVIOUS DIR BLOCK?
	 JRST	TRYAFTER	;NO 
	ADDI	B,(A)		;TOTAL NO,TDIRL+LDIRL
	CAILE	B,NENTRY	;WILL FIT IN ONE BLOCK?
	 JRST	TRYAFT		;NO, TRY TDIRL+'NDIRL'

;COMPACT LDIR WITH TDIR, PUTTING TDIR INTO LDIR
;THIS ORDER SO THAT IF LDIR IS NO 0 RECHAIN ALWAYS WINS

	PUSH	P,E		;THE "FROM" DIRECTORY
	MOVE	B,LBUF		;TAKE THIS DIRECTORY
	MOVEM	B,LBUF+1		;AND PUT IT IN BUF1
	MOVE	B,LBLOCK
	MOVEM	B,LBLOCK+1
	READ	LDIRNO,0

	POP	P,E
	MOVE	H,A		;SECOND BUFFER POINTED TO BY H
COMPACT:	HRLI	H,G		;AND OFFSET BY CONTENTS OF G

	MOVE	A,2(H)		;TOP OF LIST IN LDIR
	MOVEI	G,DRENL-1(A)
	SKIPE	A,@H
	JRST	.-2		;FIND END OF PREVIOUS LIST
	MOVE	A,3(H)
	MOVEM	A,@H	;END OF OLD LIST WILL NOW POINT TO LADES

	MOVE	D,2(E)		;POINT AT FIRST ENTRY TO BE COPIED

ERENLP:	MOVEI	G,(A)
	HRLZI	A,@E		;FROM
	HRRI	A,@H		;THE TO FREELIST
	MOVEI	G,DRENL-2(G)
	BLT	A,@H		;COPY AN ENTRY

	MOVEI	G,1(G)		;POINT TO POINTER TO NEXT FREE TO
	MOVE	A,@H		;NEXT TO BUFFER ADDRESS TO A
	MOVEI	D,DRENL-1(D)
	SKIPE	D,@E		;NEXT FREE FROM, IS IT END OF LIST
	JRST	ERENLP	;NO

	SETZM	@H		;END OF GOOD CHAIN
	MOVEM	A,3(H)
	ALTERD	0,D		;NOTE THAT BUF0 CHANGED

	MOVE	A,LBLOCK+1
	EXCH	A,LABS
	MOVEM	A,(E)		;PUT THE DIR BLOCK JUST FREED ON TOP OF BLOCK FREELIST
	MOVE	A,4(E)
	MOVEM	A,4(H)		;UPDATE DIRECTORY CHAIN
	MOVE	A,1(E)
	ADDM	A,1(H)		;AND COUNT OF USED ENTRIES IN DIRECTORY

	ALTERD	1,D		;NOTE THAT BUF1 CHANGED


ERENB:	MOVE	A,FILEAD	;PUT FILE BLOCKS ONTO FREELIST

ERENR:	READ	A,1
	SKIPE	A,@FPTR		;FIND THE END OF THE DATA CHAIN
	JRST	ERENR

	MOVE	B,LABS
	MOVEM	B,@FPTR
	ALTERD	1,D

	READ	[0],0

	MOVE	B,FILEAD
	MOVEM	B,@FPTR
	MOVEM	B,LABS
	ALTERD	0,D
	POPJ	P,


TRYAFT:	SKIPN	A,4(E)		;IS THERE A NEXT DIRECTORY
	JRST	ERENB		;NO, JUST DELETE THE DATA BLOCKS
	READ	A,1		;READ IT
	POP	P,H		;IN THIS CASE, THE TO DIRECTORY
	MOVE	B,1(A)
	ADD	B,LDIRL
	CAILE	B,NENTRY
	JRST	ERENB		;TWO INTO ONE WON'T GO
	HRLZI	E,D
	HRRI	E,(A)		;THE AFTER IS THE "FROM" DIRECTORY
	JRST	COMPACT

FLUSHTHISONE:
	SKIPN	A,LBLOCK	;IS THIS DIRECTORY 0
	JRST	FLUSH0		;YES
	EXCH	A,LABS		;PUT IT ON LABS
	MOVEM	A,(E)
	MOVE	H,4(E)		;CHAIN TO NEXT DIRECTORY
	READ	LDIRNO,0
	MOVEM	H,4(A)	;CHAIN THIS ONE
	ALTERD	0,D
	SKIPE	1(A)		;IS THIS ONE EMPTY TOO?
	JRST	ERENB
	MOVEI	E,(A)		;IT MUST BE DIR BLOCK 0, DELETE FILE

FLUSH0:	SKIPE	4(E)		;ARE THERE ANY OTHER DIRECTORIES?
	JRST	ERENB		;YES, LET THIS ONE BE
FOR TENEX,<MOVE A,INFILE	;DELETE THE FILE
	DELF
	 ERROR	IOPERR>
FOR TEN50,<
FOR LEVELC,<CLOSE	1,
	STATZ	1,740000
	 ERROR	IOPERR >
	SETZM	LUKDAT
	RENAME	1,LUKDAT
	 ERROR	IOPERR >
	POP	P,G		;RETURN LOC
	JSP	H,CLOSUP+1	;REMOVE OPEN FILE JUNK FROM PDL
	JRST	1(G)		;SKIP OVER CLOSING OF FILE

CLRDIR:	MOVE	E,LBUF	;ADDR OF FIRST WORD OF BUFFER?
	MOVE	E,BUFLOC(E)
	SETZM	1(E)		;NUMBER OF DIRECTORY CELLS USED
	SETZM	2(E)		;LUDES - LIST USED DIRECTRY ENTRIES
	MOVEI	D,10		;REL PTR TO FIRST AVAILABLE DIR CELL
	MOVEM	D,3(E)		;LADES - LIST AVAIL DIR ENTRY CELLS
	MOVEI	E,10(E)		;POINT TO FIRST CELL
	MOVEI	D,DRENL(D)	;REL ADDR OF NEXT CELL
	MOVEM	D,DRENL-1(E)	;SET FORWARD PTR OF THIS CELL TO NEXT
	MOVEI	E,DRENL(E)	;POINT AT NEXT CELL
	CAIE	D,LBLKL-DRENL
	JRST	.-4
	SETZM	DRENL-1(E)
	POPJ	P,

WRITIF:	MOVE	B,LBUF(B)	;WHICH PHYSICAL BUFFER?
WRITF1:	SKIPE	CHANGE(B)	;IS THE DATA CHANGED?
	JRST	WRITIT		;NEEDS WRITING
	POPJ	P,

.FORCE:	MOVE	B,LBUF(E)	;PHYS BUF

WRITIT:	SETZM	CHANGE(B)	;WILL NO LONGER NEED REWRITING
FOR TEN50,< MOVE	A,PBLOCK(B)
	ADDI	A,1	;I COUNT FROM 0, SYSTEM COUNTS FROM 1
	HRLI	A,(USETO 1,)
	XCT	A
	HRRZ	A,BUFLOC(B)
	SUB	A,[XWD PBLKL,1]	;REST OF IOWD
	SETZ	B,		;END OF DUMP MODE LIST
	OUT	1,A		;DUMP MODE, CHANNEL 1, LIST IN A
	SKIPA
	 ERROR	IOPERR >
	POPJ	P,

FOR TEN50,<
.MARK:	MOVE	E,LBUF(E)
	SETOM	CHANGE(E)
	POPJ	P, >


OPENW:
FOR TENEX,<MOVE	A,[XWD 200000,1]
	MOVEM	A,JFNTAB
	MOVEI	A,JFNTAB
	GTJFN
	 JRST	(H)
	MOVE	G,[XWD 070000,700200]
	JRST	OPNRW1 >
FOR TEN50,<SETZM	FILSIZ
	JRST	OPNRW1>

CLOSIT:
FOR TEN50,<	MOVEI	B,0
	PUSHJ	P,WRITF1
	MOVEI	B,1
	PUSHJ	P,WRITF1
	CLOSE	1,
	RELEAS	1,
	SETZM	BUFLOC
	SETZM	BUFLOC+1	;DEALLOCATE THE BUFFERS
	SETZM	BUFADR
	SETZM	BUFADR+1
>
FOR TENEX,<HRRZ	A,INFILE
	CLOSF
	 ERROR	IOPERR
	HRLZI	E,-2		;REMOVE THE PAGES OF BUFFER
	MOVE	B,BUFLOC(E)	;FROM THE MAP OF FORK
	ASH	B,-11
	HRLI	B,400000
	SETO	A,
	PMAP
	AOBJN	E,.-5 >
	POPJ	P,

;READ A BLOCK INTO A BUFFER
;CALLED WITH LOGICAL BUFFER NUMBER IN E
; AND WITH LOGICAL BLOCK NUMBER IN C

.READ:	MOVEM	C,LBLOCK(E)	;THIS LOGICAL BUFFER WILL CONTAIN THIS BLOCK
	HRLZI	A,-2		;# OF PHYSICAL BUFFERS

	MOVEI	D,(C)		;FIRST CHECK IF LOGICAL BLOCK IS
	XOR	D,PBLOCK(A)	; IN ONE OF THE PHYSICAL BUFFERS
	TRNN	D,-NLOGB	;# OF LOGICAL BUFFERS IN ONE PHYS ONE
	JRST	.READ7		;ALREADY IN A BUFFER
	AOBJN	A,.-4		;TRY THE OTHER ONE

;THE LOGICAL BLOCK IS NOT IN EITHER PHYSICAL BUFFER
;THEREFORE THE PHYSICAL BUFFER USED BY THE REQUESTED LOGICAL ONE
; IS PREFERABLE UNLESS IT IS ALSO USED BY THE OTHER LOGICAL ONE TOO

	MOVE	A,LBUF		;THE PHYS BUFFER USED BY LOGICAL BUFFER 0
	XOR	A,LBUF+1
	XOR	A,[EXP BUFBIT]	;ARE BOTH USING THE SAME PHYS BUFFER?
	SKIPE	A		;NO
	XORM	A,LBUF(E)	;YES, SWITCH THE BUF THIS ONE USES

	MOVEI	B,(E)
	PUSHJ	P,WRITIF

	MOVE	B,LBUF(E)	;NOW READ THE REQUESTED BLOCK
	MOVE	A,LBLOCK(E)	;WHAT PART OF FILE TO READ

FOR TENEX,<	MOVE	B,BUFLOC(B)	;PHYSICAL BUFFER LOCATION
	ASH	A,-2	;MUST PARAMETERIZE LOG BASE 2 OF NLOGB
	ASH	B,-11		;2^9 WORDS PER PAGE
	HRLI	B,400000
	HRL	A,INFILE
	HRLZI	C,140000	;READ AND WRITE ACCESS PERMITTED
	PMAP		>
FOR TEN50,<MOVEI	A,1(A)
	HRLI	A,(USETI 1,)
	XCT	A
	HRRZ	A,BUFLOC(B)
	SUB	A,[XWD PBLKL,1]	;REST OF IOWD
	SETZ	B,
	IN	1,A
	SKIPA
	 ERROR	IOPERR >


.READ3:	MOVEI	A,NLOGB-1	;SET UP POINTER TO THE BLOCK
	AND	A,LBLOCK(E)
	IMULI	A,LBLKL		;NUMBER OF WORDS IN A LOGICAL BLOCK
	MOVE	C,LBUF(E)
	ADD	A,BUFLOC(C)
	HRLI	A,010700

	MOVEM	A,FPTR
	MOVEI	B,5*<LBLKL-1>
	MOVEM	B,CCOUNT
	MOVE	B,LBLOCK(E)
	MOVEM	B,PBLOCK(C)
	POPJ	P,

.READ7:	HRRZM	A,LBUF(E)	;MAKE THE LOGICAL BUFFER USE THAT PBUF
	JRST	.READ3		;SET UP POINTERS AND EXIT

FOR TENEX,<
FILEGO:	PUSHJ	P,GETFLN
	PUSHJ	P,GETFLN
	MOVE	B,-1(S)
	MOVEI	A,10		;NUMBER OF WORDS FOR TENEX
	CAMGE	A,@WSB		;WILL THE NAME FIT?
	 ERROR	FILER9		;NOT IMPLEMENTED
	MOVEI	B,@WSB		;COMPUTE ABS ADDR OF STRING
	MOVEI	B,1(B)		;FIRST WORD OF TEXT
	MOVEM	B,JFNTAB+4	;FILE NAME SLOT

	MOVEI	B,[ASCIZ /LGO/]
	MOVEM	B,JFNTAB+5	;EXT

	MOVE	A,[XWD 100000,1]
	MOVEM	A,JFNTAB
	MOVEI	A,JFNTAB
	MOVEI	B,0
	GTJFN
	 JRST	(H)		;NO FILE
	MOVE	G,[XWD 070000,701000]
OPNRW1:	JSP	D,SAVEUP	;SAVE CURRENT STATE OF LOGO
	PUSH	P,INFILE	;SAVE NAME OF CURRENT OPEN FILE
	MOVEM	A,INFILE
	HRLZ	A,LBLOCK+1	;LOGICAL BLOCK NUMBER OF DATA BLOCK
	HRR	A,CCOUNT	;NUMBER OF CHARS REMAINING IN THAT BLOCK
	PUSH	P,A		;A POINTER INTO THE ENTRY
	PUSH	P,BSP
	MOVE	B,SPP
	MOVEM	B,BSP
	TLO	F,GETF
	MOVE	A,INFILE
	MOVE	B,G
	OPENF
	 JRST	(H)
	MOVEI	A,400000
	MOVEM	A,BUFLOC
	MOVEI	A,401000
	MOVEM	A,BUFLOC+1
	SETOM	PBLOCK
	SETOM	PBLOCK+1	;NO PAGES IN THE BUFFERS
	JRST	1(H) >


FOR TEN50,<
FILEGO:	PUSHJ	P,GETFLN
	PUSHJ	P,GETFLN
	MOVE	B,-1(S)
	HRLI	B,010700+W
	MOVE	A,[POINT 6,LUKDAT]
	SETZM	LUKDAT
	MOVEI	D,6
FILGO1:	ILDB	C,B
	JUMPE	C,FILGO2
	XORI	C,40		;7 TO 6 BIT CODE
	IDPB	C,A		;STORE IN LUKDAT
	SOJG	D,FILGO1
	ILDB	C,B
	JUMPN	C,[ERROR FILER9] ;FILE NAME TOO LONG, TEMP ERR

FILGO2:	INIT	1,17		;INIT IN DUMP MODE
	 SIXBIT	/DSK/
	 Z
	 ERROR	IOPERR

	HRLZI	C,(SIXBIT /LGO/)
	MOVEM	C,LUKDAT+1	;EXT
	SETZM	LUKDAT+2
	SETZM	LUKDAT+3

	LOOKUP	1,LUKDAT
	 JRST	(H)		;FILE BUSY OR SOMETHING
	HLRE	A,LUKDAT+3	;LENGTH OF FILE
	JUMPG	A,.+3		;ALREADY IN BLOCKS
	ASH	A,-7
	MOVNI	A,(A)		;MAKE -WORDS +BLOCKS
	HRRZM	A,FILSIZ
	SETZM	LUKDAT+3	;THIS PRJ PROG AGAIN

OPNRW1:	JSP	D,SAVEUP
	PUSH	P,INFILE
	MOVEM	A,INFILE
	HRLZ	A,LBLOCK+1
	HRR	A,CCOUNT

	PUSH	P,A
	PUSH	P,BSP
	MOVE	B,SPP
	MOVEM	B,BSP
	TLO	F,GETF

	ENTER	1,LUKDAT
	 JRST	(H)
	MOVNI	A,@WTOP		;ASSIGN TWO BUFFERS IN WS
	ADD	A,JOBREL
	CAIL	A,2*<LBLKL+1>
	 JRST	OPNRW2		;GOT ENOUGH ROOM
	GARBAGE
	MOVNI	A,@WTOP
	ADD	A,JOBREL
	CAIL	A,2*<LBLKL+1>
	 JRST	OPNRW2		;GOT ROOM BY GC
	JSP	G,NEWMEM	;TRY BY ASKINK FOR MORE
	 ERROR	TOOFUL		;NO ROOM

OPNRW2:	HRLZI	B,-2
	AOS	A,WTOP
	MOVEM	A,BUFADR(B)
	MOVEI	A,@A		;ABSOLUTE ADDR OF BUFFER
	MOVEI	A,1(A)		;PTR TO FIRST DATA WORD
	MOVEM	A,BUFLOC(B)
	MOVEI	A,LBLKL
	MOVEM	A,@BUFADR(B)	;SET UP LENGTH OF ELEMENT
	ADDM	A,WTOP
	AOBJN	B,OPNRW2+1

	SETOM	PBLOCK
	SETOM	PBLOCK+1
	JRST	1(H) >

CLOSUP:	PUSHJ	P,CLOSIT
	MOVE	A,BSP
	ADD	A,[-2,,3]
	JSP	C,SETPDL

	POP	P,BSP
	POP	P,A
	HRRZM	A,CCOUNT
	HLRZM	A,LBLOCK+1
	POP	P,INFILE
	JSP	D,RESTOR
	SKIPE	INFILE	;IS THE POPPED FILE THE TERMINAL?
	JRST	(H)
	TLZ	F,GETF
	MOVE	A,TERMIO
	MOVEM	A,CHIN
	JRST	(H)

LFILE:	POP	P,A
	PUSHJ	P,GETFLN	;ONLY ONE INPUT
	PUSH	S,(S)		;DUMMY UP ANOTHER
	JSP	H,FILEGO+2
	 ERROR	NOFILE
	SETZ	A,
LFILE1:	READ	A,0
	HRRZ	E,FPTR
	HRLI	E,D
	MOVE	D,2(E)		;TOP OF LIST OF USED ENTRY SLOTS

LFILE2:	HRLZI	G,440700
	HRRI	G,@E		;FOR THE FIRST 20 CHARS OF ENTRY NAME
	MOVNI	H,^D20
	ILDB	C,G
	JUMPE	C,LFILE9	;EOM IS 0 IN DIRECTORY
	XCT	CHOUT
	AOJN	H,.-3
	PUSH	P,E
	PUSH	P,D		;READ FILE FOR THE REST OF THE GOODIES
	READ	1(G),1
	MOVEI	A,4
	ADDM	A,FPTR		;SKIP TYPING FIRST TWENTY CHARS AGAIN
	MOVNI	A,4*5
	ADDM	A,CCOUNT
	PUSHJ	P,READC
	CAIN	C,176
	JRST	.+3
	XCT	CHOUT
	JRST	.-4
	POP	P,D
	POP	P,E

LFILE9:	PUSHJ	P,CRLF
	MOVEI	D,DRENL-1(D)
	SKIPE	D,@E
	JRST	LFILE2	;NEXT ENTRY IN THIS DIRECTORY
	SKIPE	A,4(E)
	JRST	LFILE1	;NEXT DIRECTORY BLOCK
	JRST	REDEOF
> ;CLOSE THE NFILE CONDITIONAL
PRINTX PART H
FOR OFILE,<

;FILE STUFF

GET:	PUSHJ	P,GENFLN	;GENERATE FILE NAME
	MOVEI	A,EOFILE	;WHERE TO GO ON INPUT EOF
	PUSHJ	P,OPENR		;OPEN IT FOR READING
	JSP	D,SAVEUP
	TLZ	F,STEPF		;FIRST LINE OF FILE MAY BE COMMENT
	PUSHJ	P,TIS
	 ERROR	IOPERR		;CANNOT GET A RUBOUT FROM THE FILE
	MOVE	A,(S)
	HRLI	A,010700+W
	ILDB	C,A
	CAIE	C,";"		;IS THE FIRST LINE COMMENT?
	JRST	MAINL1		;NO, TREAT THE LINE NORMALLY
	POP	S,A
	PUSHJ	P,PTOSS		;TYPE THE COMMENT
	PUSHJ	P,CRLF
	JRST	MAINL

FOR TENEX,<

EOFILE:	CAIN	A,100		;IS THE OPEN FILE THE TERMINAL?
	 DEBRK			;YES
	CLOSF
	 ERROR
	MOVE	A,SPP
	JSP	C,SETPDL
	JSP	D,RESTOR

	POP	P,A		;PREVIOUS FILE HANDLE
	MOVEM	A,INFILE
	CAIN	A,100
	TLZ	F,GETF		;NOT STILL GETTING
	MOVEI	A,COMEX
	MOVEM	A,LEVLTB+1
	DEBRK

OPENR:	HRRM	A,CHNTAB+12	;EOF ERROR DISPATCH LOCATION
	MOVE	A,[XWD 100000,1]
	MOVEM	A,JFNTAB
	MOVEI	A,JFNTAB
	MOVEI	B,0
	GTJFN
	 ERROR	NOFILE
	MOVE	B,[XWD 070000,600000]
	OPENF
	 ERROR	.
	POP	S,B		;FLUSH PTR TO FILE NAME

	TLO	F,GETF
	EXCH	A,INFILE
	EXCH	A,(P)
	JRST	(A)		;POPJ WITH AN INTERVENING PUSH  >

FOR TEN50,<
EOF1:
OPENR:
OPENW:
LEOFIL:
CLOSEF:
EOFILE:	POPJ	P,     >


FOR TENEX,<
GENFLN:	PUSHJ	P,GETFLN	;FILENAME
	PUSHJ	P,GETFLN	;ENTRYNAME
	PUSHJ	P,NEWSTR
	PUSHJ	P,NEWSR1
	PUSHJ	P,COPYAB
	MOVEI	C,"/"
	DPB	C,B
	PUSHJ	P,NEWSRC
	PUSHJ	P,COPYAB	;FILENAME/ENTRYNAME
	POP	S,A		;FLUSH AN ARG
	PUSHJ	P,ENDSTP	;FLUSH OTHER ARG AND PUT THIS ON STACK
SJNAME:	MOVE	B,(S)
	MOVEI	A,@WSB
	MOVEI	A,1(A)
	MOVEM	A,JFNTAB+4	;SLOT FOR NAME
	MOVEI	A,[ASCIZ /LGO/]
	MOVEM	A,JFNTAB+5
	POPJ	P, >



SAVE:	PUSHJ	P,GENFLN	;GENERATE FILE NAME
	PUSHJ	P,OPENW		;OPEN FILE FOR WRITING
	TLO	F,SAVEF		;DENOTE A SAVE IN PROGRESS
	MOVE	A,CPP		;STORE COMMENT IN FILE IF ON SAVE LINE
	MOVEI	A,1(A)		;POINT AT NEXT ELEMENT
	SKIPE	A,@CSA		;IS IT NOT THERE?
	TLNN	A,COMMTF	;MAKE SURE IT IS A COMMENT
	JRST	SAVE1		;NOT A COMMENT
	MOVEI	C,";"
	PUSHJ	P,TYO
	PUSHJ	P,PTOSS
	PUSHJ	P,CRLF

SAVE1:	PUSHJ	P,LISTAP	;TYPE ALL PROCEDURES TO FILE
	PUSHJ	P,SAVAN		;TYPE ALL GLOBAL NAMES TO FILE
	PUSHJ	P,SAVAA		;ALL ABBREVIATIONS TO FILE
	TLZ	F,SAVEF		;NO MORE TYPING IN THE SAVE
	PUSHJ	P,CLOSEF
	JRST	COMEX >

SAVANR:	PUSH	P,A
	MOVEI	A,[ASCIZ /MAKE /]
	PUSHJ	P,PTOSSM
	MOVE	A,(P)	;WHAT NAME
	MOVE	A,(A)	;NAME OF THING
	MOVEI	E,024	;PSEUDO-QUOTE
	TRO	F,PREFIX!SUFFIX
	PUSHJ	P,PTOSS
	PUSHJ	P,PSPACE
	JRST	LSTNR1

SAVAAR:	MOVEI	A,[ASCIZ /ABBREVIATE /]
	PUSHJ	P,PTOSSM
	MOVEI	E,042
	TRO	F,PREFIX!SUFFIX
	MOVE	A,1(G)
	PUSHJ	P,PTOSS
	MOVEI	A,[ASCIZ / AS /]
	PUSHJ	P,PTOSSM
	MOVE	A,(G)
	TRO	F,PREFIX!SUFFIX		;QUOTE THIS ONE TOO
	PUSHJ	P,PTOSS
	JRST	CRLF



GETFLN:	PUSHJ	P,GNE	
	 ERROR	ERMSSG
	TLNN	A,UPRF	
	 ERROR	FILER1
	MOVEI	A,-1(A)
	PUSH	S,@RPA
	POPJ	P,


;OPENING AND CLOSING FILES FOR SAVE FOR TENEX

FOR OFILE,<FOR TENEX,<

OPENW:	HRLZI	A,400000
	MOVEM	A,JFNTAB
	MOVEI	A,JFNTAB
	MOVEI	B,0
	GTJFN
	 ERROR
	MOVE	B,[XWD 070000,500000]
	OPENF
	 ERROR
	EXCH	A,OUTFILE
	EXCH	A,(P)
	JRST	(A)

CLOSEF:	MOVE	A,OUTFILE
	HRLI	A,400000
	CLOSF
	 ERROR
	HRRZ	A,OUTFILE
	MOVE	B,[XWD 1,7]	;LH OF 7'TH WD OF FDB IS VERSION
	MOVEI	C,GCTEM
	GTFDB
	HLRZ	B,GCTEM
	CAIN	B,1		;IS THIS VERSION VERSION ONE
	JRST	CLOSW1		;YES, ALREADY PROPERLY NAMED
	MOVE	A,[XWD 0,1]
	MOVEM	A,JFNTAB
	PUSHJ	P,SJNAME

	MOVEI	A,JFNTAB
	MOVEI	B,0
	GTJFN
	 ERROR
	MOVEI	B,(A)	;NEW JFN IN B
	MOVE	A,OUTFILE	;OLD JFN IN A
	RNAMF		;MAKE SURE ALL CLSED FILES ARE VERSION 1
	 ERROR
	MOVEI	A,(B)
CLOSW1:	RLJFN
	 ERROR
	POP	S,A	;FLUSH POINTER TO NAME STRING
	POP	P,A	;RETURN
	POP	P,OUTFILE
	JRST	(A)  >
> ;CLOSE THE OFILE CONDITIONAL


ERRORR:	MOVE	P,[IOWD ERPDLL,ERRPDL]
	TRZ	F,PREFIX!SUFFIX
	MOVE	A,TERMIO+1
	TLZE	F,SAVEF
	MOVEM	A,CHOUT
	SKIPE	CHARNO
	PUSHJ	P,CRLF
	HRRZ	C,JOBUUO
	CAIL	C,MAXERR
	SETZ	C,
	HLRZ	A,ERRORS(C)	;GET TEXT MESSAGE
	HRLI	A,440700
	HRRZ	B,ERRORS(C)	;GET DISPATCH FOR COMPUTATIONAL ERRORS
	JUMPN	B,(B)	;DISPATCH IF A COMPUTATIONAL ERROR
ALLERP:	PUSHJ	P,PTOS	;TYPE GENERAL MESSAGE
ALLERR:	PUSHJ	P,CRLF
	SKIPN	PRODNM	;WERE WE INSIDE A USER PROCEDURE?
	JRST	ERROUT
	MOVEI	A,[ASCIZ /I WAS AT LINE /]
	PUSHJ	P,PTOSSM
	MOVE	A,LINENO
	PUSHJ	P,DECPRT
	MOVEI	A,[ASCIZ / IN /]
	PUSHJ	P,PTOSSM
	JSP	N,PUNAME	;PRINT PROCEDURE NAME
	PUSHJ	P,CRLF
	JRST	ERROUT


NONAME:	PUSHJ	P,PTOS
	HRRZ	A,UUOTRP
	SUBI	A,1
	PUSHJ	P,OCTPRT
	JRST	ALLERR

ERROUT:	TDZ	F,[XWD TIF!NOBREAK,MAKEF]
	MOVE	P,UUOACS+P	;SAFE TO USE REGULAR PDL NOW
	TLZE	F,BROKE		;WAS ERROR THE BREAK KEY
	SKIPN	PRODNM		;AND WAS A STORED LINE INTERRUPTED?
	JRST	FLUSHM



FOR SAVBRK,<
ERROT2:	TLZ	F,RQF		;WHICH WAY DO WE CALL MAINL
	TLZE	F,TOF		;IN A PRINT OR TYPE?
	JRST	ERROT4		;YES, GO PROCEEDS WITH THE NEXT LINE
	TLZN	F,GETF		;IN A GET?
	JRST	ERROT3	;NO, BREAK AT EXECUTE RESTARTS CURRENT LINE
FOR OFILE,<FOR TENEX,<	MOVEI	A,100	;CLOSE THE FILE AND RETURN TO TERMINAL
	EXCH	A,INFILE
	MOVEI	A,(A)
	CLOSF
	 ERROR	IOPERR >>
FOR NFILE,<JSP	H,CLOSUP>

	MOVE	A,BSP		;GETTING, CLOSE THE FILE AND
	JSP	C,SETPDL	;SET UP TO REDO THE GET ON A GO
	MOVE	A,TERMIO
	MOVEM	A,CHIN
	JSP	D,RESTOR	;RESTORE THE LINE THAT HAD THE GET

ERROT3:	SOS	LINENO	;SO UPNEXT WILL FIND THIS ONE AGAIN
ERROT4:	MOVE	A,SPP
	ADDI	A,1
	JSP	C,SETPDL	;GET TO BEGINNING OF THE LINE
	PUSH	P,BSP
	JSP	D,SAVEUP	;SAVEUP FOR GO
	AOS	GODEPTH		;ONE MORE GO ON THE STACK
	MOVE	A,SPP
	MOVEM	A,BSP		;NEW "TOP LEVEL"
FOR TENEX,<	MOVEI	A,101		;TERMINAL OUTPUT
	DOBE >			;DISMISS UNTIL ERROR MESSAGE IS
				;COMPLETELY OUT
FOR DRIBBLE,<TRO F,TF		;BUT DON'T ASK FOR INITIALS >
	JRST	RESET >		;CLEAR WATING BREAKS AND RESTART PSI


FLUSHM:	TLZN	F,GETF		;NO, BUT WERE WE GETTING FROM A FILE?
	JRST	ERROT1		;NO
FOR OFILE,<FOR TENEX,<	MOVEI	A,100
	EXCH	A,INFILE
	MOVEI	A,(A)		;LH 0
	CLOSF			;CLOSE THE FILE BEING GOTTEN FROM
	ERROR	IOPERR >>	;THIS HAS TO BE WRONG
FOR NFILE,<JSP	H,CLOSUP>

ERROT1:	HRRZ	G,BSP
	ADD	G,PP
FLUSHL:	MOVE	A,SPP
	ADDI	A,1
	JSP C,SETPDL
	CAIL	G,(P)		;SET BACK TO BSP?
	JRST	FLUSHE		;YES
	POP	P,A		;RETURN FROM EXECUTE
	JSP	D,RESTOR	;ONE MORE PDL LEVEL
	JRST	FLUSHL

FLUSHE:	POP	P,A		;MAY BE SAVED CBOT
	TLZN	F,STEPF
	SKIPA	A,CBOT		;CBOT, NOT PDL, CONTAINS CORRECT CBOT
	ADD	A,CDBOT
	MOVEM	A,CBOT
	MOVEM	A,CTOP
	GARBAG
FOR DRIBBLE,<TRO F,TF >		;DO NOT REOPEN DRIBBLE FILE
	JRST	RESET

MATCHG:	PUSHJ	P,PTOS
	MOVE	C,UUOACS+D	;THE OFFENDING TERMINATOR
	PUSHJ	P,TYO
MATCG1:	MOVEI	C,"?"
	PUSHJ	P,TYO
	JRST	ALLERR

ILLUUO:	MOVEI	B,[ASCIZ /HELP!!/]
	PUSHJ	P,TOSS
	JRST	ALLERR

.INER3:	PUSHJ	P,PTOS
	MOVE A,CBOT
	MOVE	A,@CSA
	PUSHJ	P,PTOSS
	MOVE	A,[POINT 7,[ASCIZ / OF WHAT PROCEDURE?/],]
	JRST	ALLERP

.TOER3:	MOVE	E,A
	MOVE	A,1(S)
	HRLI	A,010700+W
TYPAFT:	PUSHJ	P,PTOS
	MOVE	A,E
	JRST	ALLERP

CANTBA:	SKIPA	E,UUOACS+A
CANTBT:	MOVE	E,THISPR
	EXCH	A,E
	JSP	H,ETYPIT
	MOVEI	A,[ASCIZ / CAN'T BE A /]
CANTB1:	HRLI	A,440700
	JRST	TYPAFT

.GOER2:	MOVE	E,A
	MOVE	A,UUOACS+D
	JRST	TYPAFT-1

.GOER3:	PUSHJ	P,PTOS
	SKIPA	A,UUOACS+D
.XITER:	POP	S,A
.GOER4:	HRLI	A,010700+W
	JRST	ALLERP

.NOPRO:	PUSHJ	P,PTOS
	SOS	A,UUOACS+A
	HRRZ	A,@RPA
	JRST	.GOER4

.TNAME:	PUSHJ	P,PTOS
	JSP	N,TUNAME
	JRST	ALLERR
.PMNAM:	JSP	N,PMNAME
	JRST	ALLERP

.COMER:	TLZN	F,UPFF
	JRST	.PMNAM		;A SYSTEM COMMAND
	SKIPA	E,UUOACS+E	;A USER DEFINED COMMAND
UNDFND:	MOVE	E,UUOACS+A
	JSP	N,PUNAM1
	JRST	ALLERP

TWOARG:	PUSH	P,A
	JSP	N,PMNAME
	MOVEI	B,[ASCIZ / OF /]
	PUSHJ	P,TOSS
	MOVE	A,-1(S)
	JSP	H,ETLIT	;ARG ONE OF TWO
	MOVEI	A,[ASCIZ / AND /]
TWARG9:	PUSHJ	P,PTOSSM
	MOVE	A,(S)	;GET SECOND ARG OF TWO OR ONLY ARG IF ONE
	TRO	F,PREFIX!SUFFIX
	JSP	H,ETLIT
	PUSHJ	P,CRLF
	POP	P,E
	JRST	TYPAFT+1

ONEARG:	PUSH	P,A
	JSP	N,PMNAME
	MOVEI	A,[ASCIZ / OF /]
	JRST TWARG9

.NOCMD:	PUSHJ	P,PTOS
	POP	S,A
	JSP	H,ETLIT
	JRST	MATCG1


TUNAME:	SKIPA	E,TOPROD
PUNAME:	MOVE	E,PRODNM
PUNAM1:	EXCH	A,E
	JSP	H,ETUP
	MOVE	A,E
	JRST	(N)

PMNAME:	MOVE	B,THISPR
	MOVE	B,-1(B)
	PUSHJ	P,TOSS
	JRST	(N)

.XTRER:	MOVE	E,A
	SKIPA	A,CPP		;START WITH THIS ELEMENT
.XTRR1:	AOS	A,CPP
	MOVE	A,@CSA		;NEXT ELEMENT
	JSP	H,ETYPIT
	JUMPE	A,TYPAFT+1
	PUSHJ	P,PSPACE	;SEPARATE ELEMENTS WITH SPACES
	JRST	.XTRR1		;BACK FOR NEXT ELEMENT

.MISSG:	PUSHJ	P,PTOS		;"THERE ARE "
	HRRZ	H,UUOACS+P
	SKIPL (H)
	JRST INFMIS
	HLRE	A,-1(H)
	ADDI	A,1
INFMS1:	PUSHJ	P,DECPRT	;N
	MOVEI	A,[ASCIZ / INPUTS MISSING FOR /]
	PUSHJ	P,PTOSSM
	HRRZ	A,-1(H)
	CAIE	A,[EXP UPROD]
	JRST	.MISG2
	MOVE	A,-2(H)
	JSP	H,ETUP
	JRST	.MISG9
INFMIS:	ADDI H,1
	MOVEI A,1
	JRST INFMS1

.MISG1:	PUSHJ	P,PTOS
	MOVE	A,THISPR
.MISG2:	JSP	H,ETMP

.MISG9:	MOVEI	C,"."
	PUSHJ	P,TYO
	JRST	ALLERR



LNALND:	MOVE	E,A
	MOVEI	A,[ASCIZ /LINE /]
	PUSHJ	P,PTOSSM
	MOVE	A,LINENO
	PUSHJ	P,DECPRT
	MOVEI	A,[ASCIZ / OF /]
	PUSHJ	P,PTOSSM
	MOVE	A,PRODNM
	JSP	H,ETUP		;TYPE USER PROCEDURE NAME
	MOVEI	A,[ASCIZ / WAS /]
	PUSHJ	P,PTOSSM
	MOVE	A,E
	PUSHJ	P,PTOS
	MOVEI	A,[ASCIZ / DURING EXECUTION./]
	PUSHJ	P,PTOSSM
	JRST	ALLERP

ETYPA:	MOVE	E,UUOACS+A
	EXCH	A,E
	JSP	H,ETYPIT
	JRST	TYPAFT+1

BRAKER:	PUSHJ	P,PTOS
	TLO	F,BROKE
	JRST	ALLERR


SETPDL:	HLRZ	B,A
	ADD	B,SP
	HRRZI	S,(B)
	SUB	B,SP+1
	HRLI	S,1(B)

	ADD	A,PP
	HRRZI	P,-1(A)
	SUB	A,PP+1
	HRLI	P,1(A)
	JRST	(C)


ETYPIT:	JFFO	A,.+2
	JRST	(H)
	JRST	@.+1(B)
	 EXP	ETMP,ETUP,ETVAR,ETLIT,ETCOM,ETMP,ETMP,ETMP

ETMP:	HRLI	A,440700
	JRST	ETUP1
ETUP:	HRLI	A,010700+W
	ADD	A,RP
ETUP1:	HRR	A,-1(A)
	PUSHJ	P,PTOS
	JRST	(H)

ETCOM:	MOVEI	G,"!"
	JRST	ETLIT1
ETVAR:	MOVEI G,";"
	TLNE A,SENTF
	JRST ETLIT1
	MOVEI G,":"
	EXCH G,E
	TRO F,PREFIX
	PUSHJ P,PTOSS
	MOVE E,G
	JRST (H)
ETLIT:	MOVEI	G,042
ETLIT1:	EXCH	G,E
	TRO	F,PREFIX!SUFFIX
	PUSHJ	P,PTOSS
	MOVE	E,G
	JRST	(H)

DEFINE EE (NAME,TEXT,CODE)
<NAME==.-ERRORS
XWD [ASCIZ *TEXT*],CODE>

ERRORS:
EE .BARF,ERROR ,NONAME
EE ABBER1,LOOP IN ABBREVIATION EXPANSION.
EE ABBER2,DON'T USE THE EMPTY THING AS AN ABBREVIATION.
EE CANER1,NOTHING TO CANCEL.
EE COMERR, CAN'T BE USED AS AN INPUT. IT DOES NOT OUTPUT.,.COMER
EE DIRERR, CAN ONLY BE DIRECT.,.PMNAM
EE DIVERR,DIVISION BY ZERO.
EE EDTER1,YOU CANNOT EDIT THAT.
EE EDTER2,YOU ARE ALREADY EDITING ,.TNAME
EE ERXTRA,IS EXTRA.,.XTRER
EE ERMSG1,THERE ARE ,.MISSG
EE ERMSSG,SOMETHING MISSING FOR ,.MISG1
EE EVER3, NEEDS A MEANING.,UNDFND
EE EVER4, HAS NOT BEEN COMPLETELY DEFINED.,UNDFND
EE EVER5,PROCEDURE NAME.,CANTBT
EE FILER1,FILE NAME.,CANTBA
EE FILER9,FILE NAME TOO LONG.
EE GOERR1,GO WHERE?
EE GOERR2, IS NOT A LINE NUMBER.,.GOER2
EE GOERR3,THERE IS NO LINE ,.GOER3
EE GOERR9,NO PLACE TO GO.
EE INERR1,MATCHING ,MATCHG
EE INERR2,LINE NUMBER IS TOO LARGE.,
EE INERR3,LINE ,.INER3
EE INERR4,YOU CAN'T HAVE A LINE 0.,
EE INFER1,INFIX OPERATOR LACKS AN INPUT.
EE IOPERR,I AM IN TROUBLE. TELL YOUR TEACHER.
EE LNAERR,ALTERED,LNALND
EE LNDERR,DELETED,LNALND
EE LSTER2,LIST ALL WHAT?
EE MINERR,INPUT TO - MUST BE A NUMBER.
EE NMERR5,DON'T USE THE EMPTY WORD FOR A NAME.,
EE NMERR6,DON'T USE A NUMBER FOR A NAME.
EE NOCMD,THERE IS NO COMMAND FOR ,.NOCMD
EE NOENTRY,NO SUCH ENTRY.
EE NOFILE,NO SUCH FILE.
EE NOPERR, WHAT? YOU ARE NOT DEFINING ANYTHING.,.PMNAM
EE NOPROD,THERE IS NO PROCEDURE ,.NOPRO
EE PREDR1,INPUT MUST BE A PREDICATE.,ONEARG
EE PREDR2,INPUTS MUST BE PREDICATES.,TWOARG
EE PRNER1,MATCHING (?
EE PRNER2,MISSING )?
EE STOERR, CAN ONLY BE USED IN A PROCEDURE.,.PMNAM
EE SUMERR,INPUTS MUST BE NUMBERS.,TWOARG
EE TITER2,TITLE MUST BE FOLLOWED BY "TO".
EE TOERR1,USE "DO" WHEN "TO" IS STORED.
EE TOERR2,YOU NEED : BEFORE EACH INPUT.,
EE TOERR3, IS USED BY LOGO.,.TOER3
EE TOERR4,DON'T TRY TO DEFINE ANOTHER PROCEDURE INSIDE THIS ONE.,
EE TOERR5, PROCEDURE NAME.,CANTBA
EE TOERR6, IS ALREADY DEFINED.,ETYPA
EE TOOFUL,NO ROOM FOR ANOTHER GET; SAVE AND ERASE FIRST.
EE TOOTER, DON'T TOOT A NEGATIVE NUMBER OF TIMES.,ONEARG
EE WHATER, WHAT?,.PMNAM
EE WRDERR,YOU CAN'T MAKE A WORD OUT OF A SENTENCE.,TWOARG
EE XITERR,,.XITER  ;NO SYSTEM ERROR MESSAGE, ONLY THAT SUPPLIED BY USER
EE ZERERR,INPUT MUST BE A NUMBER.,ONEARG
EE BREAK,BREAK,BRAKER
EE PUNT,STORAGE FULL
BLOCK 5	;FOR PATCHING THIS LIST
MAXERR==.-ERRORS


FOO:	BLOCK 200
LIT



LOGEND:	END LOGO



