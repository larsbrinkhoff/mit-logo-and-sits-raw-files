	.TITLE DH11 DRIVER FOR RT11
R0=%0
R1=%1
R2=%2
R3=%3
R4=%4
R5=%5
SP=%6
PC=%7

.GLOBL $INPTR,$INTEN

;DH11 DEFINITIONS
DHCSR=160020	;SYSTEM CONTROL REGISTER
DHNRC=160022	;NEXT RECEIVED CHARACTER
DHLPR=160024	;LINE PARAMETER REGISTER
DHCAR=160026	;CHARACTER ADDRESS REGISTER
DHCNT=160030	;BYTE COUNT REGISTER
DHBAR=160032	;BUFFER ACTIVE REGISTER
DHBCR=160034	;BREAK CONTROL REGISTER

DHRV=340	;RECIEVE VECTOR
DHTK=344	;TRANSMIT VECTOR

DHSPEED=15
ACK=105		;GOOD ACK
NACK=403	;BAD ACK

LPR=<DHSPEED*2000>+<DHSPEED*100>+3

DHLINE=10
DHBIT=400

DHSIZE=600		;THE SIZE OF THIS CROCK



;LOAD POINT
START:	.WORD 300		;NEVER,EVER USE THIS IN A MILLION YEARS
	DHINT-.			;OFFSET TO (HA HA) INTERRUPT ROUTINE
	.WORD 340		;PRIORTY 0 (NEVER GET CALLED WHO CARES
DHLQE:	.WORD 0		;POINTER TO THE LAST Q ENTRY
DHCQE:	.WORD 0		;POINTER TO THE CURRENT Q ENTRY

;ENTRY POINT
DH:	MOV #DHCSR,R1		;POINT TO THE CSR
	TST @#DHNRC		;GET ANY CHARACTERS
	BLT DH
	MOV #DHLINE,(R1)
	MOV #LPR,@#DHLPR	;SET UP THE LINE PARAMETERS
	MOV DHCQE,R3		;GET POINTER TO THE CURRENT REQUEST
	MOV PC,R2		;CALCULATE POINTER TO THE WORD COUNT WORD IN FIRST BLOCK
	ADD #FRSTCN-.,R2	;GET POINTER
	MOV 6(R3),-(SP)		;WHAT IS THE COUNT?
	BEQ DHDONE		;SEEKS ARE IGNORED
	BPL DHREAD		;READ FROM THE DH11
	NEG (SP)		;TURN IT INTO A POSITIVE COUNT
	MOV (SP),(R2)		;THE START OF THE BLOCK
	ADD #4,(R2)		;THERE ARE 4 DATA BYTES AT THE START OF A WRITE AND READ
	TST -(R2)		;POINT BACK TO THE START OF THE CRUFT
WRTTRY:	JSR PC,STRTBK
	MOV (SP),R4		;THE WORD COUNT FOR THIS CROCK
	MOV 4(R3),R1		;THE CORE POINTER
	JSR PC,SNDBLK		;SEND THE WORDS
	JSR PC,ENDBLK		;END THE BLOCK AND WAIT FOR ACK
	BCS WRTTRY		;ERROR, TRY AGAIN
	JSR PC,GETACK		;WAIT FOR ACK
	BCC DHDONE		;ALL IS OKAY, JUST EXIT
DHERR:	BIS #1,@-(R3)		;SET THE ERROR BIT IN THE CSR
	BR DHDONE		;AND SAY WE ARE DONE

DHREAD:	MOV #4,(R2)		;THE FIRST BLOCK IS 4 LONG
	TST -(R2)		;POINT BACK TO THE START OF THE BLOCK
	JSR PC,STRTBK		;START THE BLOCK
	JSR PC,ENDBLK		;END THE BLOCK
	BCS DHREAD		;RETRY THE READ REQUEST
	JSR PC,GETACK		;WAIT FOR THE ACK FOR THE FUNCTION
	BCS DHERR		;ERROR ON THE FUNCTION
	TST -(R2)		;POINT BACK TO THE ACKNOWLEDGE WORD
REDTRY:	MOV 4(R3),R1		;GET THE POINTER TO THE BUFFER
	MOV (SP),R4		;THE COUNT FOR THE WORDS
	JSR PC,RCVWRD
	JSR PC,RCVWRD		;READ THE START AND THE COUNT
	CMP -(R1),-(R1)		;AND BACK UP POINTERS
	CLR CHKSUM		;CLEAR THE CHECK SUM TO ACCUMULATE CORRECTLY
1$:	JSR PC,RCVWRD		;RECEIVE A WORD
	DEC R4
	BNE 1$			;RECEIVE ALL THE WORDS
	MOV R2,R1		;POINT TO ACK TO PICK UP CHECKSUM
	JSR PC,RCVWRD		;AND THE CHECKSUM
	MOV R2,R1		;COPY POINTER TO THE RANDOM WORD WE USE
	TST CHKSUM		;IS IT 0?
	BEQ REDDON		;YES, JUST ACK AND GO AWAY
	MOV #NACK,(R1)		;CLOBBER THE START OF THE BLOCK
	JSR PC,SNDWRD		;SEND IT OUT
	BR REDTRY		;AND RETRY THE OPERATION
REDDON:	MOV #ACK,(R1)		;GOOD ACK
	JSR PC,SNDWRD		;SEND IT OUT
DHDONE:	TST (SP)+		;POP OFF RANDOM WORD
	MOV PC,R4		;RETURN INTO THE MONITOR
	ADD #DHCQE-.,R4		;GET POINTER TO THE DHCQE
	MOV @#54,R5		;PICK UP THE BOTTOM OF THE MONITOR
	JMP @270(R5)		;JUMP INDIRECT THROUGHT THE MONITOR TO THE QUEUE MANAGER

STRTBK:	MOV R2,R1		;GET POINTER TO THE DATA PORTION
	JSR PC,SNDWRD		;SEND THE FIRST AND SECOND WORDS
	JSR PC,SNDWRD
	CLR (PC)+		;CLEAR THE CHECKSUM
CHKSUM:	0
	MOV #4,R4		;THE COUNT TO SEND
	MOV R3,R1		;POINTER TO SEND
	JSR PC,SNDBLK		;SEND OUT THE COMMAND BLOCK
	RTS PC

;SEND BLOCK POINTED TO BY R1, COUNT IN R4
SNDBLK:	JSR PC,SNDWRD		;SEND THE WORD 
	DEC R4
	BNE SNDBLK		;SEND ALL THE WORDS
	RTS PC
;END A BLOCK, AND WAIT FOR ACK
ENDBLK:	MOV PC,R1		;GET POINTER TO THE CHECKSUM
	ADD #CHKSUM-.,R1
	JSR PC,SNDWRD		;SEND THE CHECKSUM
				;AND FALL INTO GETACK
GETACK:	MOV PC,R1		;GET POINTER TO ACK
	ADD #ACKNOW-.,R1	;GET POINTER
	JSR PC,RCVWRD		;GET ACK INTO -2(R1)
	CMP -(R1),#ACK		;IS IT GOOD ACK
	BEQ GODACK		;YES
	SEC
	RTS PC
GODACK:	CLC
	RTS PC

ACKNOW:	.WORD 0			;THE TYPE OF ACK IS PUT HERE FOR SNDWRD
FRSTBK:	.WORD "PQ
FRSTCN:	.WORD 0			;COUNT FOR THIS BLOCK IS LOADED HERE
;SEND A WORD POINTED TO BY R1
SNDWRD:	MOV R1,@#DHCAR		;LOAD THE CURRENT ADDRESS REGISTER
	MOV #-2,@#DHCNT		;TWO CHARACTERS
	BIS #DHBIT,@#DHBAR	;INITIATE THE TRANSFER
1$:	TST @#DHCNT		;GONE TO 0 YET?
	BNE 1$
	SUB (R1)+,CHKSUM	;SUBTRACT FROM THE CHECKSUM
	RTS PC

;RETURN A WORD INTO (R1)
RCVWRD:	JSR PC,RCVBYT		;GET A BYTE
	SWAB (R1)		;SO THAT NEXT BYTE GOES INTO THE RIGHT PLACE
	JSR PC,RCVBYT		;NEXT THE HIGH BYTE
	SWAB (R1)		;AND INCREMENT THE POINTER
	ADD (R1)+,CHKSUM	;ADD IT TO THE READ CHECKSUM
	RTS PC

;RECEIVE BYTE
RCVBYT:	TST -(SP)		;RANDOM BUFFER AREA
1$:	MOV @#DHNRC,(SP)	;GET A CHARACTER
	BPL 1$			;HAVEN'T GOTTEN IT YET
	BIC #170000,(SP)	;CLEAR CRUFT
	CMPB 1(SP),#DHLINE	;IS IT FROM THIS LINE?
	BNE 1$			;NOPE, TRY AGAIN
	MOVB (SP)+,(R1)		;PUT THE BYTE AWAY
RCVBY1:	RTS PC

;GODDAMN FUCKING NOP INTERRUPT ROUTINE FOR THE LOSING MONITOR
	BR RCVBY1		;ABORT ME
DHINT:	JSR PC,@$INPTR		;JUST RANDOM IN CASE WE WANT A DHSYS
	.WORD 340			;GIVE ME 0
	RTS PC
.=START+DHSIZE-2
$INPTR:	.WORD $INTEN		;MAKE THE WORLD HAPPY
.END
 