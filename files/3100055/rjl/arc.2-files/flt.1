.ROUND:	TLZA	R15,FPTFLG	;CLEAR TRUNCATION FLAG
.TRUNC:	TLO	R15,FPTFLG	;SET TRUNCATION FLAG
	RETURN	

.FLT2:	SKIPA	R3,[2]		;TWO WORD FLOATING
.FLT4:	MOVEI	R3,4		;FOUR WORD FLOATING
	MOVEM	R3,FLTLEN	;SET LENGTH FOR ROUNDING
.FLTC:	CALL	FLTG		;PROCESS FLOATING POINT
	TLNE	R15,FLTFLG	;ANY ERRORS?
	TRO	R15,ERRA	;  YES
	MOVN	R6,FLTLEN	;SET NEGATIVE OF LENGTH
	HRLZS	R6		;SET INDEX
.FLTC1:	MOVE	R1,FLTNUM(R6)	;GET A VALUE
	HRLI	R1,BC2
	CALL	STCODE		;STORE IT
	AOBJN	R6,.FLTC1	;LOOP IF MORE
	CAIE	R14,","		;MULTIPLE?
	JRST	.FLTC2		;  NO
	CALL	GETNB		;YES, MOVE PAST COMMA
	JRST	.FLTC		;GET ANOTHER

.FLTC2:	HRROI	R3,774000
	MOVE	R6,FLTLEN
	CAIN	R6,2		;TWO WORD?
	ANDM	R3,FLTLST	;  YES, TRUNCATE
	MOVE	R1,[POINT 7,FLTBUF]	;SET POINTER TO BUFFER
	MOVEI	R2,";"
	IDPB	R2,R1		;STORE ";"
	MOVEI	R2,"("
	IDPB	R2,R1		;  AND "("
	LDB	R0,[POINT 9,FLTNUM,35-16+9]
	MOVEI	R2,"0"
	TRZE	R0,400		;SIGN BIT?
	MOVEI	R2,"1"		;  YES
	IDPB	R2,R1
	MOVEI	R2,SPACE
	IDPB	R2,R1
	MOVSI	R3,(POINT 3,R0,35-9)
.FLTC3:	ILDB	R2,R3		;STORE EXPONENT
	ADDI	R2,"0"
	IDPB	R2,R1
	TLNE	R3,770000
	JRST	.FLTC3
	MOVEI	R2,SPACE
	IDPB	R2,R1
	MOVE	R3,[POINT 3,FLTLST]	;GET SET TO LIST FRACTION
	MOVEI	R0,D9		;ASSUME DOPBLE WORD
	CAIE	R6,2
	MOVEI	R0,D19
.FLTC4:	ILDB	R2,R3
	ADDI	R2,"0"
	IDPB	R2,R1
	SOJG	R0,.FLTC4	;LOOP IF NOT END
	MOVEI	R2,")"		;STORE END CHARACTERS
	IDPB	R2,R1
	MOVEI	R2,CRR
	IDPB	R2,R1
	MOVEI	R2,LF
	IDPB	R2,R1
	IDPB	R0,R1		;STORE NULL
	RETURN	
FLTG:
	TLZ	R15,FLTFLG	;CLEAR ERROR FLAG
	SETZB	R0,FLTNUM
	SETZB	R1,FLTNUM+1
	SETZB	R2,FLTNUM+2
	SETZB	R3,FLTNUM+3
	SETZM	FLTLST		;CLEAR FOR EXPANDED LISTING
	SETZM	FLTLST+1
	CAIN	R14,"-"
	TLO	R0,(1B0)
	EXCH	R0,FLTNUM
	SKIPL	FLTNUM
	CAIN	R14,"+"
FLTG2:	CALL	GETCHR
	CAIL	R14,"0"
	CAILE	R14,"9"
	JRST	FLTG3
	TLNE	R0,760000
	AOJA	R3,FLTG2
	ASHC	R0,1
	MOVEM	R0,FLTTMP
	MOVEM	R1,FLTTMP+1
	ASHC	R0,2
	ADD	R0,FLTTMP
	ADD	R1,FLTTMP+1
	ADDI	R1,-"0"(R14)
	TLZE	R1,(1B0)
	ADDI	R0,1
	AOBJP	R3,FLTG2

FLTG3:	CAIE	R14,"."
	JRST	FLTG4
	TRNE	R2,400000
	TLO	R15,FLTFLG
	MOVEI	R2,400000(R3)
	JRST	FLTG2
FLTG4:	CAIN	R3,
	TLO	R15,FLTFLG
	TRZN	R2,400000
	HRRZ	R2,R3
	HLRZS	R3
	SUB	R2,R3
	CAIE	R14,"E"
	JRST	FLTG6
	CALL	GETCHR

	PUSH	R17,R0
	PUSH	R17,R1
	SETZB	R0,R1
	CAIN	R14,"-"
	SOSA	R1
	CAIN	R14,"+"
FLTG5:	CALL	GETCHR
	CAIL	R14,"0"
	CAILE	14,"9"
	JRST	FLTG5A
	IMULI	R0,D10
	ADDI	R0,-"0"(R14)
	JRST	FLTG5

FLTG5A:	CAIE	R1,
	MOVNS	R0
	ADD	R2,R0
	POP	R17,R1
	POP	R17,R0
FLTG6:	CAIN	R1,0
	JUMPE	R0,FLTG12
	TDZA	R3,R3
FLTG7:	ASHC	R0,1
	TLNN	R0,200000
	SOJA	R3,FLTG7
	JUMPL	R2,FLTG9
FLTG8:	SOJL	R2,FLTG10
	MOVEM	R0,FLTTMP
	MOVEM	R1,FLTTMP+1
	ASHC	R0,-2
	ADD	R0,FLTTMP
	ADD	R1,FLTTMP+1
	TLZE	R1,(1B0)
	ADDI	R0,1
	TLNE	R0,(1B0)
	CALL	FLTG20
	ADDI	R3,3
	JRST	FLTG8
FLTG9:	CAML	R0,[D10B4]
	CALL	FLTG20
	PUSH	R17,R1+1
	DIV	R0,[D10B4]
	DIV	R1,[D10B4]
	POP	R17,R1+1
	SUBI	R3,4
	AOJL	R2,FLTG9
FLTG10:	PUSH	R17,R3		;STACK EXPONENT
	MOVSI	R2,(1B<16-7>)	;SET ONE WORD ROUNDING BIT
	SETZ	R3,		;CLEAR LOW ORDER
	SKIPA	R4,FLTLEN	;GET LENGTH AND SKIP
	ASHC	R2,-D16	;MOVE ROUNDING MASK
	SOJG	R4,.-1
	TDNN	R0,R2		;TEST FOR ROUNDING REQUIRED
	TDNE	R1,R3
	TLNE	R15,FPTFLG	;YES, "ROUND" MODE?
	JRST	FLTG11		  ;NO, FORGET ROUNDING
	ASHC	R2,1		;SHIFT BIT UP ONE
	ADD	R0,R2
	ADD	R1,R3		;ADD IN BIT
FLTG11:	POP	R17,R3		;RESTORE EXPONENT
	TLZE	R1,(1B0)	;OVERFLOW, LOW ORDER?
	ADDI	R0,1		;  YES, ADD TO UPPER
	TLNE	R0,(1B0)	;OVERFLOW, HIGH ORDER?
	CALL	FLTG20		;  YES, CORRECT
	LSH	R1,1		;MOVE OVER SIGN BIT
	MOVEM	R0,FLTLST	;STORE FOR EXPANDED LISTING
	MOVEM	R1,FLTLST+1
	LSHC	R0,-7		;MAKE ROOM FOR EXPONENT
	ADDI	R3,D<35+35+128>
	DPB	R3,[POINT 8,R0,8]
	LDB	R2,[POINT 8,R0,8]
	CAME	R2,R3		;OVER/UNDER FLOW?
	TRO	R15,ERRT	;  YES
FLTG12:	IOR	R0,FLTNUM
	MOVSI	R2,-4
FLTG13:	LDB	R3,[POINT 16,R0,15]
	MOVEM	R3,FLTNUM(R2)
	LSHC	R0,D16
	AOBJN	R2,FLTG13
	JRST	SETNB

FLTG20:	LSH	R1,1
	LSHC	R0,-1
	LSH	R1,-1
	AOJA	R3,CPOPJ

FLTTMP:	BLOCK	2		;FLOATING POINT TEMP
FLTNUM:	BLOCK	4		;FLOATING POINT NUMBERS
FLTLEN:	BLOCK	1		;FLOATING LENGTH
