	TITLE FILE TRANSFER FROM 10 TO 11
A=1
B=2
C=3
D=4
E=5
F=6
T=15
11PTR=16
P=17

DBUFL=2000		;LENGTH OF 10 DISK BUFFER
11BUFP==1000		;11 BYTE ADDRESS FOR THE BUFPTR

PDL:	BLOCK 50
DEVNAM:	SIXBIT /DSK/
FN1:	SIXBIT /@/
FN2:	SIXBIT />/
SNAME:	SIXBIT /11LOGO/
DBUFP:	0
DBFEND:	0
EOFFLG:	0
BYTCNT:	0

START:	MOVE P,[-50,,PDL]
	MOVE A,[10700,,DBUF-1]
	MOVEM A,DBUFP
	MOVEM A,DBFEND
	SETZM EOFFLG
	.CALL [ SETZ
		SIXBIT /OPEN/
		5000,,6
		1000,,1
		DEVNAM
		FN1
		FN2
		SETZ SNAME ]
	 .LOSE 1000
	PUSHJ P,MAP11
FNDBUF:	SKIPN BUFPTR
	 .HANG
	MOVE A,BUFPTR
	SETZM BUFPTR
	LSH A,-6
	ANDI A,177777
	ADDI A,11STRT*2000
	MOVE B,(A)
	LSH B,-26
	PUSHJ P,FILBUF
	JRST FNDBUF
	.VALUE [ASCIZ /./]

;MAPS IN ENTIRE 11 AT 11STRT
MAP11:	MOVE A,[602000,,1777]
	MOVEI B,11STRT
	MOVEI C,100
MAPLOP:	.CALL [ SETZ
		SIXBIT /T11MP/
		B
		SETZ A ]
	 .LOSE 1000
	ADD A,[4,,0]
	AOS B
	SOJN C,MAPLOP
	POPJ P,

;THIS IS CALLED WITH COUNT OF PDP10 WORDS IN B, POINTER TO BUFFER IN A
FILBUF:	MOVEI C,1(A)		;COPY POINTER
	SETZM BYTCNT		;VALID BYTES
TRANLP:	SETZ E,
CHRLOP:	PUSHJ P,GCHR		;GET A CHAR
	LSH F,24
	IOR E,F
	PUSHJ P,GCHR
	LSH F,34
	IOR E,F
	PUSHJ P,GCHR
	LSH F,4
	IOR E,F
	PUSHJ P,GCHR
	LSH F,14
	IOR E,F
	MOVEM E,(C)
	AOS C
	SKIPE EOFFLG
	 JRST [	MOVE C,BYTCNT
		LSH C,4
		MOVEM C,(A)
		AOS (P)
		POPJ P, ]
	SOJN B,TRANLP		;TRAN ANOTHER 4 CHARACTERS
	SUB B,(A)		;GET THE NEGATIVE OF THE COUNT
	MOVEM B,(A)
	POPJ P,

;GETS CHARACTER POINTED TO BY DBUFP
;IF DBUFP = DBFEND, READ IN ANOTHER BUFFER
; IF NOTHING IS READ, SET EOFFLG, AND RETURN A SPACE
;IF EOFFLG IS SET RETURN A SPACE
GCHR:	SKIPE EOFFLG
	 JRST FNDEOF
	MOVE T,DBUFP
	CAMN T,DBFEND
	 JRST NEWBUF
	ILDB F,DBUFP
	AOS BYTCNT
	POPJ P,
NEWBUF:	MOVE T,[-DBUFL,,DBUF]
	.IOT 1,T
	CAMN T,[-DBUFL,,DBUF]
	 JRST FNDEOF
	SOS T
	HRLI T,10700
	MOVEM T,DBFEND
	MOVE T,[10700,,DBUF-1]
	MOVEM T,DBUFP
	JRST GCHR
FNDEOF:	SETOM EOFFLG
	MOVEI F," 
	POPJ P,

;BUFPTR MUST BE DIVISIBLE BY 4
;BUFPTR 0=>NO BUFFERS READY FOR 10
;	NON-ZERO=>BUFFER POINTER IN BUFPTR+2 AND BUFPTR
;	(TEN CLEARS IT WHEN IT HAS READ POINTER OUT OF BUFPTR+2)
;A BUFFER IS A BLOCK OF STORAGE THE FIRST WORD STARTS AS THE LENGTH
;SECOND WORD IS UNUSED
;WHEN THE TEN HAS FILLED IT, IT NEGATES THE LENGTH, UNLESS EOF, WHEN IT CLEARS IT
; ON EOF, THE SECOND WORD HAS THE VALID BYTE COUNT
; LENGTH MUST BE DIVIDIBLE BY 4 AND BUFFER MUST BE ON A 4 WORD BOUNDARY

DBUF:	BLOCK DBUFL
11STRT=<.+1777>/2000
BUFPTR==<11STRT*2000>+<11BUFP/4>
END START